
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif

#define USE_BFLIB_MOUSE_CURSOR 1

.text


___begtext:	/* 0x10003 */
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop


/*----------------------------------------------------------------*/
check_for_danger:	/* 0x10010 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		testb  $0x4,data_60afc
		je     jump_1004a
		cmpl   $0x1,data_5c354
		jne    jump_1004a
		push   $0x3
		call   BFMidiStartMusic
		add    $0x4,%esp
		call   BFMidiIsMusicPlaying
		test   %eax,%eax
		jne    jump_101c4
		mov    %eax,data_5c354
		jmp    jump_101c4
	jump_1004a:
		testb  $0x2,data_60afc
		je     jump_10080
		cmpl   $0x1,data_5c354
		jne    jump_10080
		push   $0x4
		call   BFMidiStartMusic
		add    $0x4,%esp
		call   BFMidiIsMusicPlaying
		test   %eax,%eax
		jne    jump_101c4
		mov    %eax,data_5c354
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_10080:
		xor    %edx,%edx
		mov    %edx,(%esp)
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %eax,%edx
		imul   $0x5c,%edx,%edx
		mov    $level__People,%esi
		add    %edx,%esi
		testb  $0x4,0x1d(%esi)
		je     jump_101b3
		testb  $0x1,0xb(%esi)
		jne    jump_101b3
		xor    %edi,%edi
		mov    $0x5c,%ebp
	jump_100de:
		xor    %edx,%edx
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    %di,%dx
		cmp    %eax,%edx
		je     jump_101a8
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %ebx,%ebx
		mov    data_5e551(%eax),%bl
		imul   %ebp,%ebx
		add    $level__People,%ebx
		jmp    jump_1016c
	jump_1011e:
		testb  $0x4,0x1d(%ebx)
		je     jump_10169
		testb  $0x1,0xb(%ebx)
		jne    jump_10169
		cmpw   $0x0,0x20(%ebx)
		jne    jump_10169
		mov    0x6(%esi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%esi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cmp    $0x1000,%ax
		jae    jump_10169
		push   $0x1
		call   BFMidiStartMusic
		mov    $0x1,%eax
		add    $0x4,%esp
		mov    %eax,(%esp)
		jmp    jump_101a8
	jump_10169:
		add    $0x5c,%ebx
	jump_1016c:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x8,%eax
		imul   %ebp,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_1011e
	jump_101a8:
		inc    %edi
		cmp    $0x8,%di
		jb     jump_100de
	jump_101b3:
		cmpw   $0x0,(%esp)
		jne    jump_101c4
		push   $0x0
		call   BFMidiStartMusic
		add    $0x4,%esp
	jump_101c4:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		lea    0x0(%eax),%eax
		mov    %ecx,%ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(syndicate)	/* 0x101e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ebp
		call   set_default_player
		mov    $0x3f0,%ebp
	jump_101ec:
		call   select
		test   %al,%al
		jne    jump_1033f
		call   reset_mission_info
		call   initialise_player
		mov    data_60afc,%ah
		xor    %ebx,%ebx
		test   $0x1,%ah
		je     jump_102e9
	jump_10214:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x44
		jne    jump_102e9
		test   %ebx,%ebx
		je     jump_1022a
		call   process_players_turn
	jump_1022a:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_1023a
		call   multi_play
		jmp    jump_10244
	jump_1023a:
		call   single_play
		call   process_computer_players
	jump_10244:
		call   move_it
		call   correct_buttons
		cmp    $0x2,%ebx
		jbe    jump_10258
		call   BFSonundUnkn1
	jump_10258:
		call   check_for_danger
		push   %ebp
		call   process_day
		add    $0x4,%esp
		call   check_end_level
		call   ac_LbScreenWaitVbi
		call   nullsub_1
		call   swap_screen_vres16
		cmp    $0x2,%ebx
		jne    jump_1028e
		mov    EXPORT_SYMBOL(GraphicsPalette),%ecx
		push   %ecx
		call   ac_LbPaletteSet
		add    $0x4,%esp
	jump_1028e:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		call   scroll_map
		add    $0x8,%esp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		call   scroll_map
		add    $0x8,%esp
		call   copy_back
		call   draw_mapwho
		call   draw_panel
		call   click_map
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmp    $0x3,%ebx
		jae    jump_102dc
		inc    %ebx
	jump_102dc:
		testb  $0x1,data_60afc
		jne    jump_10214
	jump_102e9:
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_102f7
		call   BFMidiStopMusic
	jump_102f7:
		call   free_map_level
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x44
		jne    jump_101ec
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(Network__Slot),%ax
		xor    %ebx,%ebx
		push   %eax
		mov    %edx,EXPORT_SYMBOL(MouseSwap)
		mov    %ebx,MouseOldW
		call   transfer_people_into_player
		add    $0x4,%esp
		call   level_finished
		cmpb   $0x1,EXPORT_SYMBOL(lbKeyOn)+0x44
		jne    jump_101ec
	jump_1033f:
		pop    %ebp
		pop    %ebx
		ret

vtable_10344:
		.long   jump_10441
		.long   func_10381
		.long   jump_10441
		.long   func_103b6
		.long   func_103fc
		.long   jump_10441


/*----------------------------------------------------------------*/
play_distance_sample:	/* 0x10360 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0x10(%esp),%ebx
		mov    0x18(%ebx),%ah
		xor    %ecx,%ecx
		cmp    $0x5,%ah
		ja     jump_10441
		xor    %eax,%eax
		mov    0x18(%ebx),%al
		jmp    *%cs:vtable_10344(,%eax,4)


/*----------------------------------------------------------------*/
func_10381:
/*----------------------------------------------------------------*/
		mov    %ebx,%edx
		sub    $level__People,%edx
		mov    $0x5c,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		cmp    %edx,%eax
		jne    jump_10441
		jmp    jump_1043c


/*----------------------------------------------------------------*/
func_103b6:
/*----------------------------------------------------------------*/
		mov    0x1c(%ebx),%si
		test   %si,%si
		je     jump_10441
		xor    %eax,%eax
		mov    %si,%ax
		mov    %eax,%edx
		add    $level__things_base,%edx
		sub    $level__People,%edx
		mov    $0x5c,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		cmp    %edx,%eax
		jne    jump_10441
		jmp    jump_1043c


/*----------------------------------------------------------------*/
func_103fc:
/*----------------------------------------------------------------*/
		mov    0x20(%ebx),%dx
		test   %dx,%dx
		je     jump_10441
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %eax,%edx
		add    $level__things_base,%edx
		sub    $level__People,%edx
		mov    $0x5c,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		cmp    %edx,%eax
		jne    jump_10441
	jump_1043c:
		mov    $0x1,%ecx
	jump_10441:
		mov    player_view_map_x,%ax
		mov    0x4(%ebx),%dx
		shl    $0x7,%eax
		sub    %eax,%edx
		mov    player_view_map_y,%ax
		mov    0x6(%ebx),%si
		shl    $0x7,%eax
		sub    %eax,%esi
		movswl %dx,%eax
		movswl %si,%edx
		mov    %eax,%esi
		sub    %edx,%esi
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8(%ebx),%edx
		sub    %edx,%eax
		sar    $0x3,%eax
		add    $0x10,%eax
		sar    $0x3,%esi
		mov    %eax,%edx
		movswl %si,%eax
		cmp    $0xfffffe00,%eax
		jl     jump_104a7
		cmp    $0x400,%si
		jge    jump_104a7
		movswl %dx,%eax
		cmp    $0xfffffe70,%eax
		jl     jump_104a7
		cmp    $0x320,%dx
		jl     jump_104ac
	jump_104a7:
		test   %cx,%cx
		je     jump_104bd
	jump_104ac:
		xor    %eax,%eax
		push   $0x7f
		mov    0x10(%esp),%al
		push   %eax
		call   SetBFSampleStatus
		add    $0x8,%esp
	jump_104bd:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
level_failed:	/* 0x104c0 */
/*----------------------------------------------------------------*/
		mov    data_60afc,%ah
		test   $0x6,%ah
		jne    jump_10500
		movw   $0x10,data_5532c
		mov    %ah,%dl
		or     $0x4,%dl
		push   $0x7f
		mov    %dl,data_60afc
		push   $0x18
		mov    EXPORT_SYMBOL(debug_k),%eax
		mov    $0x1,%edx
		mov    %eax,data_5c34c
		mov    %edx,data_5c354
		call   SetBFSampleStatus
		add    $0x8,%esp
	jump_10500:
		ret


/*----------------------------------------------------------------*/
level_complete:	/* 0x10510 */
/*----------------------------------------------------------------*/
		testb  $0x6,data_60afc
		jne    jump_1054f
		call   set_mission_complete
		movw   $0x10,data_5532c
		orb    $0x2,data_60afc
		push   $0x7f
		mov    EXPORT_SYMBOL(debug_k),%eax
		push   $0x17
		mov    %eax,data_5c34c
		call   SetBFSampleStatus
		mov    $0x1,%edx
		add    $0x8,%esp
		mov    %edx,data_5c354
	jump_1054f:
		ret

vtable_10550:
		.long   func_10781
		.long   func_10790
		.long   func_10855
		.long   func_10889
		.long   jump_10d3d
		.long   func_108b8
		.long   jump_10d3d
		.long   jump_10d3d
		.long   jump_10d3d
		.long   jump_10d3d
		.long   func_10966
		.long   func_109bf
		.long   jump_10d3d
		.long   jump_10d3d
		.long   func_10a90
		.long   func_10ac8
		.long   func_10b65

vtable_10594:
		.long   jump_10d15
		.long   func_10c99
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   func_10cd9
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15
		.long   jump_10d15


/*----------------------------------------------------------------*/
check_end_level:	/* 0x105e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		xor    %edi,%edi
		xor    %esi,%esi
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x19
		je     jump_1064a
		call   BFMidiPauseSong
		call   BFSoundPause
		mov    $0x1,%ebx
		mov    $0x3,%ebp
		mov    $0x2,%edx
		xor    %eax,%eax
		jmp    jump_10615
	jump_10611:
		test   %ebx,%ebx
		je     jump_10640
	jump_10615:
		cmp    EXPORT_SYMBOL(lbKeyOn)+0x19,%al
		jne    jump_10624
		cmp    $0x1,%ebx
		jne    jump_10624
		mov    %edx,%ebx
	jump_10624:
		cmp    EXPORT_SYMBOL(lbKeyOn)+0x19,%al
		je     jump_10633
		cmp    $0x2,%ebx
		jne    jump_10633
		mov    %ebp,%ebx
	jump_10633:
		cmp    EXPORT_SYMBOL(lbKeyOn)+0x19,%al
		jne    jump_10611
		cmp    $0x3,%ebx
		jne    jump_10611
	jump_10640:
		call   BFMidiResumeSong
		call   BFSoundResume
	jump_1064a:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_1067e
		cmpw   $0x1,Network__NumberOfSlots
		jg     jump_10e0f
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		movb   $0x2,data_605e1(,%eax,2)
		jmp    jump_10e0f
	jump_1067e:
		mov    data_60afc,%al
		test   $0x6,%al
		jne    jump_10d9e
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_106b6
		mov    data_60afc,%ah
		or     $0x8,%ah
		mov    %ah,%dl
		mov    %ah,data_60afc
		and    $0xfe,%dl
		mov    %dl,data_60afc
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_106b6:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    %eax,%ebp
		mov    $0x5c,%ebx
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		jmp    jump_1070a
	jump_106f9:
		testb  $0x4,0x1d(%ebp)
		je     jump_10700
		inc    %esi
	jump_10700:
		testb  $0x1,0xb(%ebp)
		je     jump_10707
		inc    %edi
	jump_10707:
		add    $0x5c,%ebp
	jump_1070a:
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   %ebx,%eax
		add    $level__People,%eax
		cmp    %eax,%ebp
		jb     jump_106f9
		cmp    %si,%di
		jne    jump_1074f
		call   level_failed
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1074f:
		xor    %esi,%esi
		xor    %ebp,%ebp
		mov    %esi,(%esp)
		mov    %esi,0x4(%esp)
	jump_1075a:
		mov    0x4(%esp),%eax
		cmpw   $0x10,data_9be3e(%eax)
		ja     jump_10d3d
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    data_9be3e(%edx),%ax
		jmp    *%cs:vtable_10550(,%eax,4)


/*----------------------------------------------------------------*/
func_10781:
/*----------------------------------------------------------------*/
		movl   $0x1,level__Objectives(%edx)
		jmp    jump_10d3d


/*----------------------------------------------------------------*/
func_10790:
/*----------------------------------------------------------------*/
		mov    %edx,%eax
		xor    %ebx,%ebx
		mov    data_9be40(%eax),%bx
		xor    %edx,%edx
		add    $level__things_base,%ebx
		mov    %edx,level__Objectives(%eax)
		mov    0x1c(%ebx),%cl
		or     $0x20,%cl
		mov    0xb(%ebx),%ch
		mov    %cl,0x1c(%ebx)
		test   $0x1,%ch
		je     jump_107bf
		call   level_failed
	jump_107bf:
		mov    0x20(%ebx),%ax
		test   %ax,%ax
		je     jump_10d3d
		mov    %ax,%bx
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		mov    0x20(%ebx),%dx
		test   %dx,%dx
		je     jump_107f3
		mov    %dx,%bx
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
	jump_107f3:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		add    $level__People,%edx
		cmp    %edx,%ebx
		jb     jump_10d3d
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jae    jump_10d3d
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
		jmp    jump_10d3d


/*----------------------------------------------------------------*/
func_10855:
/*----------------------------------------------------------------*/
		cmpl   $0x0,level__Objectives(%edx)
		jne    jump_10d3d
		xor    %eax,%eax
		mov    data_9be40(%edx),%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		je     jump_10d38
		movl   $0x1,level__Objectives(%edx)
		jmp    jump_10d38


/*----------------------------------------------------------------*/
func_10889:
/*----------------------------------------------------------------*/
		cmpl   $0x0,level__Objectives(%edx)
		jne    jump_10d3d
		xor    %eax,%eax
		mov    data_9be40(%edx),%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		je     jump_10d38
		call   level_failed
		jmp    jump_10d38


/*----------------------------------------------------------------*/
func_108b8:
/*----------------------------------------------------------------*/
		mov    %edx,%eax
		xor    %edx,%edx
		mov    %edx,level__Objectives(%eax)
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    data_9be40(%edx),%ax
		add    $level__things_base,%eax
		mov    0x20(%eax),%si
		test   %si,%si
		je     jump_10d3d
		xor    %edx,%edx
		mov    %si,%dx
		add    $level__things_base,%edx
		mov    0x20(%edx),%di
		test   %di,%di
		je     jump_10904
		mov    %di,%dx
		and    $0xffff,%edx
		add    $level__things_base,%edx
	jump_10904:
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ebx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%ebx
		add    $level__People,%ebx
		cmp    %ebx,%edx
		jb     jump_10d3d
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%edx
		jae    jump_10d3d
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
		jmp    jump_10d3d


/*----------------------------------------------------------------*/
func_10966:
/*----------------------------------------------------------------*/
		cmpl   $0x0,level__Objectives(%edx)
		jne    jump_10d3d
		mov    $data_883f0,%eax
		cmp    last_person,%eax
		jae    jump_109a0
		mov    last_person,%edi
	jump_10986:
		mov    0x18(%eax),%dl
		cmp    $0x1,%dl
		jne    jump_10999
		testb  $0x4,0x1c(%eax)
		je     jump_10999
		test   %dl,0xb(%eax)
		je     jump_109a0
	jump_10999:
		add    $0x5c,%eax
		cmp    %edi,%eax
		jb     jump_10986
	jump_109a0:
		cmp    last_person,%eax
		jne    jump_10d38
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
		jmp    jump_10d38


/*----------------------------------------------------------------*/
func_109bf:
/*----------------------------------------------------------------*/
		cmpl   $0x0,level__Objectives(%edx)
		jne    jump_10d3d
		mov    $data_883f0,%ebx
		mov    last_person,%ecx
		xor    %ebp,%ebp
		cmp    %ebx,%ecx
		jbe    jump_10a75
	jump_109e1:
		mov    0x18(%ebx),%dh
		xor    %edi,%edi
		cmp    $0x1,%dh
		jne    jump_10a64
		testb  $0x10,0x1d(%ebx)
		je     jump_10a64
		xor    %esi,%esi
		mov    0x20(%ebx),%si
		add    $level__things_base,%esi
		cmp    $level__People,%esi
		jb     jump_10a59
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		add    $level__People,%edx
		cmp    %edx,%esi
		jb     jump_10a59
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%esi
		jae    jump_10a59
		mov    $0x1,%edi
	jump_10a59:
		testb  $0x1,0xb(%ebx)
		jne    jump_10a64
		test   %edi,%edi
		jne    jump_10a64
		inc    %ebp
	jump_10a64:
		mov    last_person,%ecx
		add    $0x5c,%ebx
		cmp    %ecx,%ebx
		jb     jump_109e1
	jump_10a75:
		test   %ebp,%ebp
		jne    jump_10d38
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
		jmp    jump_10d38


/*----------------------------------------------------------------*/
func_10a90:
/*----------------------------------------------------------------*/
		cmpl   $0x0,level__Objectives(%edx)
		jne    jump_10d3d
		xor    %eax,%eax
		mov    data_9be40(%edx),%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		je     jump_10d38
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
		jmp    jump_10d38


/*----------------------------------------------------------------*/
func_10ac8:
/*----------------------------------------------------------------*/
		cmpl   $0x0,level__Objectives(%edx)
		jne    jump_10d3d
		mov    0x4(%esp),%eax
		xor    %ebx,%ebx
		mov    data_9be40(%eax),%bx
		add    $level__things_base,%ebx
		mov    0x1c(%ebx),%cx
		test   %cx,%cx
		je     jump_10b51
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		xor    %esi,%esi
		mov    %cx,%si
		add    $level__things_base,%esi
		add    $level__People,%edx
		cmp    %edx,%esi
		jb     jump_10b51
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%esi
		jae    jump_10b51
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
	jump_10b51:
		testb  $0x1,0xb(%ebx)
		je     jump_10d38
		call   level_failed
		jmp    jump_10d38


/*----------------------------------------------------------------*/
func_10b65:
/*----------------------------------------------------------------*/
		test   %ebp,%ebp
		jne    jump_10d38
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		mov    0x4(%esp),%esi
		add    %eax,%ebx
		mov    $0x5c,%edi
		jmp    jump_10be6
	jump_10bad:
		testb  $0x4,0x1d(%ebx)
		je     jump_10be3
		testb  $0x1,0xb(%ebx)
		jne    jump_10be3
		mov    0x6(%ebx),%ax
		sub    data_9be44(%esi),%ax
		cwtl
		mov    data_9be42(%esi),%dx
		push   %eax
		mov    0x4(%ebx),%ax
		sub    %edx,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cmp    $0x300,%ax
		ja     jump_10c20
	jump_10be3:
		add    $0x5c,%ebx
	jump_10be6:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   %edi,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_10bad
	jump_10c20:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jne    jump_10c5f
		mov    $0x1,%ebp
	jump_10c5f:
		mov    (%esp),%esi
		cmp    $0x1,%esi
		jb     jump_10d24
		xor    %edi,%edi
		test   %esi,%esi
		jbe    jump_10d24
		mov    0x4(%esp),%esi
		xor    %ebx,%ebx
	jump_10c7b:
		mov    data_9be3e(%ebx),%cx
		cmp    $0x10,%cx
		ja     jump_10d15
		xor    %eax,%eax
		mov    %cx,%ax
		jmp    *%cs:vtable_10594(,%eax,4)


/*----------------------------------------------------------------*/
func_10c99:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_9be40(%ebx),%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		jne    jump_10d15
		mov    0x6(%eax),%dx
		sub    data_9be44(%esi),%dx
		movswl %dx,%edx
		mov    0x4(%eax),%ax
		push   %edx
		sub    data_9be42(%esi),%ax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cmp    $0x300,%ax
		jbe    jump_10d15
		jmp    jump_10d13


/*----------------------------------------------------------------*/
func_10cd9:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_9be40(%ebx),%ax
		add    $level__things_base,%eax
		mov    data_9be44(%esi),%cx
		mov    0x6(%eax),%dx
		sub    %ecx,%edx
		movswl %dx,%edx
		mov    0x4(%eax),%ax
		push   %edx
		sub    data_9be42(%esi),%ax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cmp    $0x300,%ax
		jbe    jump_10d15
	jump_10d13:
		xor    %ebp,%ebp
	jump_10d15:
		mov    (%esp),%edx
		inc    %edi
		add    $0xe,%ebx
		cmp    %edx,%edi
		jb     jump_10c7b
	jump_10d24:
		inc    %ebp
		cmp    $0x2,%ebp
		jne    jump_10d38
		mov    0x4(%esp),%eax
		movl   $0x1,level__Objectives(%eax)
	jump_10d38:
		mov    $0x1,%ebp
	jump_10d3d:
		mov    0x4(%esp),%ebx
		mov    (%esp),%ecx
		add    $0xe,%ebx
		inc    %ecx
		mov    %ebx,0x4(%esp)
		mov    %ecx,(%esp)
		cmp    $0x8,%ecx
		jb     jump_1075a
		xor    %edx,%edx
		xor    %eax,%eax
		mov    $0x1,%ebx
	jump_10d61:
		cmp    level__Objectives(%eax),%ebx
		je     jump_10d6b
		mov    %ebx,%edx
	jump_10d6b:
		add    $0xe,%eax
		cmp    $0x70,%eax
		jne    jump_10d61
		test   %edx,%edx
		je     jump_10d91
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x2e
		je     jump_10e0f
		cmpb   $0x0,EXPORT_SYMBOL(cheats_mission)
		je     jump_10e0f
	jump_10d91:
		call   level_complete
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_10d9e:
		test   $0x4,%al
		je     jump_10dd4
		mov    %al,%dl
		mov    EXPORT_SYMBOL(MusicAble),%dh
		and    $0xfe,%dl
		test   %dh,%dh
		jne    jump_10dc5
		mov    EXPORT_SYMBOL(debug_k),%eax
		sub    data_5c34c,%eax
		cmp    $0x240,%eax
		jbe    jump_10dd4
		jmp    jump_10dce
	jump_10dc5:
		cmpl   $0x0,data_5c354
		jne    jump_10dd4
	jump_10dce:
		mov    %dl,data_60afc
	jump_10dd4:
		mov    data_60afc,%bl
		test   $0x2,%bl
		jne    jump_10de4
		test   $0x4,%bl
		je     jump_10e0f
	jump_10de4:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x39
		jne    jump_10df6
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_10e0f
	jump_10df6:
		mov    $0x1,%al
	jump_10df8:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmp    EXPORT_SYMBOL(lbKeyOn)+0x39,%al
		je     jump_10df8
		cmp    EXPORT_SYMBOL(lbKeyOn)+0x01,%al	/* lbKeyOn[KC_ESCAPE] */
		je     jump_10df8
		andb   $0xfe,data_60afc
	jump_10e0f:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
random:	/* 0x10e20 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    EXPORT_SYMBOL(level__Seed),%cx
		imul   $0x24a1,%ecx,%ecx
		xor    %edx,%edx
		add    $0x24df,%ecx
		xor    %ebx,%ebx
		mov    %cx,%dx
		mov    0x8(%esp),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %cx,EXPORT_SYMBOL(level__Seed)
		mov    %edx,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mission_briefing:	/* 0x10e60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0xd4,%esp
		sub    $0x7a,%ebp
		mov    0x8e(%ebp),%esi
		mov    0x92(%ebp),%edi
		xor    %edx,%edx
		xor    %ah,%ah
		mov    %edx,0x46(%ebp)
		mov    %ah,0x6e(%ebp)
		mov    %ah,0x5a(%ebp)
		xor    %edx,%edx
		mov    %ah,0x76(%ebp)
		mov    %edx,0x4e(%ebp)
		mov    %edx,0x56(%ebp)
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(current_levno),%ax
		push   %eax
		push   $aGameDat
		lea    0x1e(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $EXPORT_SYMBOL(level__Seed)
		lea    0x1e(%ebp),%eax
		push   %eax
		call   LbFileReadRNC
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_10ed9
		mov    $0x2,%eax
		jmp    jump_11a1b
	jump_10ed9:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(level__MapNumber),%ax
		push   %eax
		push   $aDataMap02dDat
		lea    0x1e(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    map_buf,%ebx
		push   %ebx
		lea    0x1e(%ebp),%eax
		push   %eax
		call   LbFileReadRNC
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_10f18
		mov    $0x2,%eax
		lea    0x7a(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_10f18:
		mov    map_buf,%ecx
		push   %ecx
		call   init_map_data
		add    $0x4,%esp
		xor    %dl,%dl
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		mov    %ecx,%ecx
	jump_10f30:
		xor    %eax,%eax
		mov    %dl,%al
		inc    %dl
		mov    %ebx,-0xa(%ebp,%eax,4)
		mov    %ebx,-0x32(%ebp,%eax,4)
		mov    %ebx,-0x5a(%ebp,%eax,4)
		cmp    $0xa,%dl
		jb     jump_10f30
		mov    (%esi),%ch
		xor    %cl,%cl
		xor    %ebx,%ebx
		mov    %cl,0x62(%ebp)
		cmp    $0x7c,%ch
		je     jump_10f7e
	jump_10f55:
		push   %esi
		call   ac_atoi
		xor    %edx,%edx
		mov    %bx,%dx
		mov    %eax,-0x32(%ebp,%edx,4)
		mov    (%esi),%dl
		add    $0x4,%esp
		cmp    $0xa,%dl
		je     jump_10f77
	jump_10f6e:
		mov    0x1(%esi),%dh
		inc    %esi
		cmp    $0xa,%dh
		jne    jump_10f6e
	jump_10f77:
		inc    %esi
		inc    %ebx
		cmpb   $0x7c,(%esi)
		jne    jump_10f55
	jump_10f7e:
		mov    0x2(%esi),%ah
		add    $0x2,%esi
		xor    %ebx,%ebx
		cmp    $0x7c,%ah
		je     jump_10fc6
	jump_10f8b:
		push   %esi
		call   ac_atoi
		xor    %edx,%edx
		mov    %bx,%dx
		mov    %eax,-0x5a(%ebp,%edx,4)
		mov    (%esi),%ch
		add    $0x4,%esp
		cmp    $0xa,%ch
		je     jump_10fad
	jump_10fa4:
		mov    0x1(%esi),%dh
		inc    %esi
		cmp    $0xa,%dh
		jne    jump_10fa4
	jump_10fad:
		cmpb   $0x4f,-0x1(%esi)
		jne    jump_10fb6
		mov    %bl,0x66(%ebp)
	jump_10fb6:
		cmpb   $0x41,-0x1(%esi)
		jne    jump_10fbf
		mov    %bl,0x72(%ebp)
	jump_10fbf:
		inc    %esi
		inc    %ebx
		cmpb   $0x7c,(%esi)
		jne    jump_10f8b
	jump_10fc6:
		xor    %eax,%eax
		add    $0x2,%esi
		mov    0x62(%ebp),%al
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %esi,-0xa(%ebp,%eax,4)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    data_60b36,%al
		add    %edx,%eax
		mov    data_5e555(%eax),%dl
		xor    %bh,%bh
		mov    %dl,0x6a(%ebp)
		mov    data_5e587(%eax),%al
		mov    %dl,%bl
		mov    %al,0x5e(%ebp)
		mov    %esi,%eax
		test   %bx,%bx
		je     jump_11029
	jump_1101a:
		cmpb   $0x7c,(%eax)
		jne    jump_11023
		dec    %ebx
		movb   $0x20,(%eax)
	jump_11023:
		inc    %eax
		test   %bx,%bx
		jne    jump_1101a
	jump_11029:
		movswl data_88114,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl data_88116,%edx
		mov    %eax,0x52(%ebp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,0x4a(%ebp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p243(,%eax,4),%edx
		push   %edx
		call   DisplayScreenTitle
		mov    0x6e(%ebp),%al
		add    $0x4,%esp
		test   %al,%al
		jne    jump_11988
	jump_11079:
		mov    0x56(%ebp),%ecx
		inc    %ecx
		push   $0xfc0
		mov    %ecx,0x56(%ebp)
		call   process_day
		add    $0x4,%esp
		test   %al,%al
		je     jump_1109f
		cmpb   $0x1,EXPORT_SYMBOL(research)
		jne    jump_1109f
		call   CompleteResearch
	jump_1109f:
		call   LbCopyScreenFromBackMCGA
		call   DrawAcceptGadget
		call   DrawMenuGadget
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   $0xfffffffe
		cmp    $0x15a,%ax
		jbe    jump_110e6
		cmpw   $0x172,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_110e6
		cmpw   $0x94,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_110e6
		cmpw   $0xf6,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_110e6
		mov    $0x166,%eax
		jmp    jump_110eb
	jump_110e6:
		mov    $0x1ef,%eax
	jump_110eb:
		and    $0xffff,%eax
		push   %eax
		push   $0x62
		xor    %eax,%eax
		push   $0x15a
		mov    EXPORT_SYMBOL(language),%al
		push   $0x94
		mov    text_map(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   $0xfffffffe
		cmp    $0x6c,%ax
		jbe    jump_1114c
		cmpw   $0x9e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_1114c
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_1114c
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_1114c
		mov    $0x166,%eax
		jmp    jump_11151
	jump_1114c:
		mov    $0x1ef,%eax
	jump_11151:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x6c
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    text_info(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   $0xfffffffe
		cmp    $0xa2,%ax
		jbe    jump_111af
		cmpw   $0xd4,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_111af
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_111af
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_111af
		mov    $0x166,%eax
		jmp    jump_111b4
	jump_111af:
		mov    $0x1ef,%eax
	jump_111b4:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0xa2
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    text_enhance(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
		call   ShowGameTime
		mov    m_logos,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %eax
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		push   $0x20
		sub    %edx,%eax
		push   $0x20
		lea    0x0(,%eax,8),%eax
		push   $0x7
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0x9
		mov    data_5e4ab(%eax),%dl
		mov    data_5e4ac(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   %eax
		call   draw_logo
		xor    %eax,%eax
		mov    0x62(%ebp),%al
		lea    0x0(,%eax,4),%eax
		lea    -0xa(%ebp),%ebx
		lea    0x4(%eax),%edx
		add    $0x1c,%esp
		add    %ebx,%edx
		push   %edx
		push   $0xe
		push   $0xfffffffe
		push   $0x10
		push   $0x166
		push   %edi
		push   $0xd0
		push   $0x1d6
		push   $0x5a
		push   $0x18
		mov    -0xa(%eax,%ebp,1),%edx
		push   %edx
		call   show_text_file
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $0x2c,%esp
		mov    EXPORT_SYMBOL(players)(%eax),%ebx
		push   %ebx
		push   $aD
		lea    0x1e(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0xfffffffe
		push   $0x166
		push   %edi
		lea    0x1e(%ebp),%eax
		push   %eax
		call   get_word_width
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x7c,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		push   %edi
		push   $0x166
		add    $0x1f4,%eax
		push   $0x10
		mov    %eax,%ebx
		xor    %eax,%eax
		push   $0x58
		mov    %bx,%ax
		push   %eax
		lea    0x1e(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		xor    %eax,%eax
		mov    0x6a(%ebp),%al
		lea    0x0(,%eax,4),%eax
		mov    -0x32(%eax,%ebp,1),%ecx
		test   %ecx,%ecx
		je     jump_11372
		push   %ecx
		push   $aD
		lea    0x1e(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0xfffffffe
		push   $0x166
		push   %edi
		lea    0x1e(%ebp),%eax
		push   %eax
		call   get_word_width
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x7c,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		push   %edi
		push   $0x166
		add    $0x1f4,%eax
		push   $0x10
		mov    %eax,%ebx
		xor    %eax,%eax
		push   $0x8e
		mov    %bx,%ax
		push   %eax
		lea    0x1e(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_11372:
		xor    %eax,%eax
		mov    0x5e(%ebp),%al
		lea    0x0(,%eax,4),%eax
		mov    -0x5a(%eax,%ebp,1),%ebx
		test   %ebx,%ebx
		je     jump_113ef
		push   %ebx
		push   $aD
		lea    0x1e(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0xfffffffe
		push   $0x166
		push   %edi
		lea    0x1e(%ebp),%eax
		push   %eax
		call   get_word_width
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x7c,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		push   %edi
		push   $0x166
		add    $0x1f4,%eax
		push   $0x10
		mov    %eax,%ebx
		xor    %eax,%eax
		push   $0xc4
		mov    %bx,%ax
		push   %eax
		lea    0x1e(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_113ef:
		cmpb   $0x0,0x62(%ebp)
		je     jump_11456
		mov    $0x52,%ebx
		cmpw   $0x1ac,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_1142b
		cmpw   $0x1ca,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_1142b
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_1142b
		cmpw   $0x152,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_1142b
		mov    $0x50,%ebx
	jump_1142b:
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    m_sprites,%eax
		add    %edx,%eax
		push   %eax
		push   $0x13c
		push   $0x1ac
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
	jump_11456:
		xor    %eax,%eax
		mov    0x62(%ebp),%al
		cmpl   $0x0,-0x6(%ebp,%eax,4)
		je     jump_114c3
		mov    $0x51,%ebx
		cmpw   $0x1ce,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_11498
		cmpw   $0x1ec,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_11498
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_11498
		cmpw   $0x152,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_11498
		mov    $0x4f,%ebx
	jump_11498:
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    m_sprites,%edx
		add    %eax,%eax
		add    %edx,%eax
		push   %eax
		push   $0x13c
		push   $0x1ce
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
	jump_114c3:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_114e4
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		xor    %ebx,%ebx
		mov    $0x1,%cl
		mov    %ebx,AniSpeed
		mov    %ebx,0x46(%ebp)
		mov    %cl,0x6e(%ebp)
	jump_114e4:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		je     jump_11508
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    %eax,AniSpeed
		mov    $0x1,%ah
		mov    %edx,0x46(%ebp)
		mov    %ah,0x6e(%ebp)
	jump_11508:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
		je     jump_11668
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_11668
		cmpw   $0x274,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_11668
		cmpw   $0xd8,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_11668
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_11668
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_11595
		cmpw   $0x274,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_11595
		cmpw   $0xd8,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_11595
		cmpw   $0x102,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_11595
		xor    %eax,%eax
		mov    0x5e(%ebp),%al
		mov    0x4a(%ebp),%ebx
		inc    %eax
		sub    %eax,%ebx
		mov    %ebx,0x4a(%ebp)
		test   %bx,%bx
		jge    jump_11595
		xor    %eax,%eax
		mov    %eax,0x4a(%ebp)
	jump_11595:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_115dc
		cmpw   $0x274,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_115dc
		cmpw   $0x12e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_115dc
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_115dc
		xor    %eax,%eax
		mov    0x5e(%ebp),%al
		mov    0x4a(%ebp),%edx
		inc    %eax
		add    %eax,%edx
		mov    %edx,0x4a(%ebp)
		cmp    $0x60,%dx
		jl     jump_115dc
		movl   $0x5f,0x4a(%ebp)
	jump_115dc:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_11620
		cmpw   $0x21e,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_11620
		cmpw   $0xd8,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_11620
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_11620
		xor    %eax,%eax
		mov    0x5e(%ebp),%al
		mov    0x52(%ebp),%edx
		inc    %eax
		sub    %eax,%edx
		mov    %edx,0x52(%ebp)
		test   %dx,%dx
		jge    jump_11620
		xor    %ecx,%ecx
		mov    %ecx,0x52(%ebp)
	jump_11620:
		cmpw   $0x24a,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_11668
		cmpw   $0x274,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_11668
		cmpw   $0xd8,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_11668
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_11668
		xor    %eax,%eax
		mov    0x5e(%ebp),%al
		mov    0x52(%ebp),%edx
		inc    %eax
		add    %eax,%edx
		mov    %edx,0x52(%ebp)
		cmp    $0x80,%dx
		jl     jump_11668
		movl   $0x7f,0x52(%ebp)
	jump_11668:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_118e8
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		cmpb   $0x0,0x62(%ebp)
		je     jump_116b2
		cmpw   $0x1ac,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_116b2
		cmpw   $0x1ca,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_116b2
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_116b2
		cmpw   $0x152,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_116b2
		decb   0x62(%ebp)
	jump_116b2:
		xor    %eax,%eax
		mov    0x62(%ebp),%al
		cmpl   $0x0,-0x6(%ebp,%eax,4)
		je     jump_116ed
		cmpw   $0x1ce,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_116ed
		cmpw   $0x1ec,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_116ed
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_116ed
		cmpw   $0x152,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_116ed
		incb   0x62(%ebp)
	jump_116ed:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_117c1
		cmpw   $0x270,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_117c1
		cmpw   $0x6c,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_117c1
		cmpw   $0x9e,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_117c1
		xor    %ebx,%ebx
		mov    0x6a(%ebp),%bl
		lea    0x0(,%ebx,4),%ebx
		mov    -0x32(%ebx,%ebp,1),%ecx
		test   %ecx,%ecx
		je     jump_117c1
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		cmp    EXPORT_SYMBOL(players)(%eax),%ecx
		jae    jump_117c1
		mov    (%esi),%dl
		mov    %esi,%eax
		test   %dl,%dl
		je     jump_117c1
	jump_11770:
		cmpb   $0x7c,(%eax)
		jne    jump_117b9
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		movb   $0x20,(%eax)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6a(%ebp),%dl
		mov    0x6a(%ebp),%bh
		mov    EXPORT_SYMBOL(players)(%eax),%ecx
		mov    -0x32(%ebp,%edx,4),%edx
		inc    %bh
		sub    %edx,%ecx
		mov    %bh,0x6a(%ebp)
		mov    %ecx,EXPORT_SYMBOL(players)(%eax)
		jmp    jump_117c1
	jump_117b9:
		mov    0x1(%eax),%dh
		inc    %eax
		test   %dh,%dh
		jne    jump_11770
	jump_117c1:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_11844
		cmpw   $0x270,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_11844
		cmpw   $0xa2,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_11844
		cmpw   $0xd4,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_11844
		xor    %ebx,%ebx
		mov    0x5e(%ebp),%bl
		lea    0x0(,%ebx,4),%ebx
		cmpl   $0x0,-0x5a(%ebx,%ebp,1)
		je     jump_11844
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    -0x5a(%ebx,%ebp,1),%edx
		mov    EXPORT_SYMBOL(players)(%eax),%ecx
		cmp    %ecx,%edx
		jae    jump_11844
		mov    %ecx,%ebx
		mov    0x5e(%ebp),%cl
		sub    %edx,%ebx
		inc    %cl
		mov    %ebx,EXPORT_SYMBOL(players)(%eax)
		mov    %cl,0x5e(%ebp)
	jump_11844:
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_1187a
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_1187a
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_1187a
		cmpw   $0x174,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_1187a
		movl   $0x7,0x46(%ebp)
		movb   $0x1,0x6e(%ebp)
	jump_1187a:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_118af
		cmpw   $0x274,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_118af
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_118af
		cmpw   $0x174,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_118af
		xor    %eax,%eax
		mov    %eax,0x46(%ebp)
		movb   $0x1,0x6e(%ebp)
	jump_118af:
		cmpw   $0x94,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_118e8
		cmpw   $0xfc,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_118e8
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_118e8
		cmpw   $0x172,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_118e8
		mov    $0x2,%edx
		mov    $0x1,%ah
		mov    %edx,0x46(%ebp)
		mov    %ah,0x6e(%ebp)
	jump_118e8:
		mov    0x5e(%ebp),%al
		cmp    0x66(%ebp),%al
		jbe    jump_118f4
		movb   $0x1,0x76(%ebp)
	jump_118f4:
		mov    0x5e(%ebp),%al
		cmp    0x72(%ebp),%al
		jbe    jump_11900
		movb   $0x1,0x5a(%ebp)
	jump_11900:
		xor    %eax,%eax
		mov    0x5a(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x76(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x56(%ebp),%ax
		push   %eax
		movswl 0x4e(%ebp),%eax
		push   %eax
		movswl data_88116,%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		cwtl
		movswl data_88114,%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		cwtl
		mov    $0x5,%edx
		push   %eax
		mov    0x5e(%ebp),%al
		xor    %ah,%ah
		sub    %eax,%edx
		mov    %dx,%ax
		add    %dx,%ax
		and    $0xffff,%eax
		push   %eax
		movswl 0x4a(%ebp),%eax
		push   %eax
		movswl 0x52(%ebp),%eax
		push   %eax
		call   draw_brief_tact_map
		add    $0x28,%esp
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,0x6e(%ebp)
		je     jump_11079
	jump_11988:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    data_60b36,%al
		add    %edx,%eax
		mov    0x6a(%ebp),%dl
		mov    %dl,data_5e555(%eax)
		mov    0x5e(%ebp),%dl
		mov    0x46(%ebp),%ebx
		mov    %dl,data_5e587(%eax)
		cmp    $0x9,%ebx
		je     jump_11a18
		mov    $0x1,%ecx
		xor    %esi,%esi
		mov    $AniName,%edi
		mov    %esi,MouseOldW
		mov    $aDataMbrieoutDa,%esi
		xor    %ah,%ah
		mov    %ecx,EXPORT_SYMBOL(MouseSwap)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		push   $0x2
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		call   LbCopyScreenToBackMCGA
	jump_11a18:
		mov    0x46(%ebp),%eax
	jump_11a1b:
		lea    0x7a(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_11a24:
		.long   jump_11cd2
		.long   func_11c97
		.long   func_11c97
		.long   func_11c97
		.long   func_11c97
		.long   func_11bff
		.long   func_11c37
		.long   func_11c37
		.long   func_11c37
		.long   func_11c37
		.long   func_11c6a
		.long   func_11c37
		.long   jump_11cd2
		.long   func_11c97
		.long   func_11bff
		.long   func_11c37


/*----------------------------------------------------------------*/
draw_brief_tact_map:	/* 0x11a70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    0x38(%esp),%ebx
		mov    $0x80,%eax
		xor    %ecx,%ecx
		mov    %eax,%edx
		mov    %bx,%cx
		sar    $0x1f,%edx
		idiv   %ecx
		movswl %ax,%ecx
		mov    %eax,0x8(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x30(%esp),%edx
		sub    %eax,%edx
		mov    %edx,0x4(%esp)
		test   %dx,%dx
		jge    jump_11ab6
		xor    %esi,%esi
		mov    %esi,0x4(%esp)
		jmp    jump_11ad2
	jump_11ab6:
		movswl %dx,%eax
		add    %eax,%ecx
		cmp    $0x80,%ecx
		jle    jump_11ad2
		mov    $0x80,%eax
		mov    0x8(%esp),%ecx
		sub    %ecx,%eax
		mov    %eax,0x4(%esp)
	jump_11ad2:
		mov    0x4(%esp),%eax
		mov    0x8(%esp),%edi
		add    %edi,%eax
		movswl %di,%ecx
		mov    %eax,0x10(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x34(%esp),%edx
		sub    %eax,%edx
		mov    %edx,0x14(%esp)
		test   %dx,%dx
		jge    jump_11b06
		xor    %ecx,%ecx
		mov    %ecx,0x14(%esp)
		jmp    jump_11b1b
	jump_11b06:
		movswl %dx,%eax
		add    %eax,%ecx
		cmp    $0x60,%ecx
		jle    jump_11b1b
		mov    $0x60,%eax
		sub    %edi,%eax
		mov    %eax,0x14(%esp)
	jump_11b1b:
		mov    0x14(%esp),%eax
		mov    0x8(%esp),%esi
		add    %esi,%eax
		mov    %eax,(%esp)
		xor    %eax,%eax
		movswl %si,%edx
		mov    %bx,%ax
		imul   %eax,%edx
		mov    $0x80,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		push   $0x8
		push   $0x80
		push   $0x80
		push   $0xd8
		push   $0x1f4
		xor    %edi,%edi
		mov    %al,0x2c(%esp)
		call   rectangle
		add    $0x14,%esp
		mov    %edi,0xc(%esp)
		test   %si,%si
		jle    jump_11cf6
	jump_11b74:
		mov    0x8(%esp),%edi
		xor    %esi,%esi
		test   %di,%di
		jle    jump_11ce0
	jump_11b83:
		movswl 0x14(%esp),%edx
		movswl 0xc(%esp),%edi
		add    %edi,%edx
		shl    $0x8,%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl %si,%ecx
		movswl 0x4(%esp),%edx
		add    %ecx,%edx
		shl    $0x8,%edx
		and    $0xff00,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ebp
		mov    data_55358,%edx
		add    %ebp,%eax
		mov    (%edx,%eax,4),%edx
		mov    (%edx),%dl
		mov    h_col,%eax
		and    $0xff,%edx
		add    %eax,%edx
		cmpb   $0xf,(%edx)
		ja     jump_11cd2
		xor    %eax,%eax
		mov    (%edx),%al
		jmp    *%cs:vtable_11a24(,%eax,4)


/*----------------------------------------------------------------*/
func_11bff:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0x7
		mov    %bx,%ax
		push   %eax
		push   %eax
		xor    %eax,%eax
		movswl 0x18(%esp),%edi
		mov    %bx,%ax
		imul   %eax,%edi
		movsbl 0x24(%esp),%edx
		lea    0xd8(%edx),%ecx
		add    %edi,%ecx
		push   %ecx
		movswl %si,%ecx
		imul   %ecx,%eax
		add    $0x1f4,%edx
		add    %eax,%edx
		push   %edx
		jmp    jump_11cca


/*----------------------------------------------------------------*/
func_11c37:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		push   $0xa
		mov    %bx,%dx
		push   %edx
		push   %edx
		xor    %edx,%edx
		movswl 0x18(%esp),%ecx
		mov    %bx,%dx
		imul   %edx,%ecx
		movsbl 0x24(%esp),%eax
		lea    0xd8(%eax),%edi
		add    %edi,%ecx
		push   %ecx
		movswl %si,%ecx
		imul   %ecx,%edx
		add    $0x1f4,%eax
		add    %edx,%eax
		jmp    jump_11cc9


/*----------------------------------------------------------------*/
func_11c6a:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0x0
		mov    %bx,%ax
		push   %eax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		imul   %eax,%edi
		imul   %ecx,%eax
		movsbl 0x24(%esp),%edx
		lea    0xd8(%edx),%ebp
		add    %ebp,%edi
		add    $0x1f4,%edx
		push   %edi
		add    %eax,%edx
		push   %edx
		jmp    jump_11cca


/*----------------------------------------------------------------*/
func_11c97:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0xf
		mov    %bx,%ax
		push   %eax
		push   %eax
		xor    %eax,%eax
		movswl 0x18(%esp),%edi
		mov    %bx,%ax
		imul   %eax,%edi
		movsbl 0x24(%esp),%edx
		lea    0xd8(%edx),%ecx
		add    %edi,%ecx
		push   %ecx
		movswl %si,%ecx
		imul   %eax,%ecx
		lea    0x1f4(%edx),%eax
		add    %ecx,%eax
	jump_11cc9:
		push   %eax
	jump_11cca:
		call   rectangle
		add    $0x14,%esp
	jump_11cd2:
		mov    0x8(%esp),%eax
		inc    %esi
		cmp    %ax,%si
		jl     jump_11b83
	jump_11ce0:
		mov    0xc(%esp),%edx
		inc    %edx
		mov    0x8(%esp),%ecx
		mov    %edx,0xc(%esp)
		cmp    %cx,%dx
		jl     jump_11b74
	jump_11cf6:
		xor    %esi,%esi
		lea    0x0(%eax),%eax
		mov    %edx,%edx
	jump_11d00:
		xor    %ecx,%ecx
		mov    %si,%cx
		imul   $0x5c,%ecx,%ecx
		testb  $0x2,data_8812c(%ecx)
		je     jump_11e03
		movswl data_88114(%ecx),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%esp),%edx
		cmp    %edx,%eax
		jl     jump_11e03
		movswl 0x10(%esp),%edx
		cmp    %edx,%eax
		jge    jump_11e03
		movswl data_88116(%ecx),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x14(%esp),%edx
		cmp    %edx,%eax
		jl     jump_11e03
		movswl (%esp),%edx
		cmp    %edx,%eax
		jge    jump_11e03
		mov    $0x6,%al
		cmp    $0x8,%si
		jae    jump_11d7a
		mov    $0xc,%al
	jump_11d7a:
		testb  $0x4,0x4c(%esp)
		je     jump_11d83
		mov    $0xe,%al
	jump_11d83:
		cmp    $0x8,%si
		jb     jump_11d90
		cmpb   $0x0,0x54(%esp)
		je     jump_11e03
	jump_11d90:
		movzwl %si,%ebp
		imul   $0x5c,%ebp,%ebp
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		movswl data_88116(%ebp),%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		xor    %edi,%edi
		movswl 0x20(%esp),%edx
		mov    %bx,%di
		sub    %edx,%eax
		imul   %edi,%eax
		movsbl 0x24(%esp),%ecx
		lea    0xd8(%ecx),%edx
		add    %edx,%eax
		movswl data_88114(%ebp),%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x14(%esp),%edx
		sub    %edx,%eax
		imul   %edi,%eax
		add    $0x1f4,%ecx
		add    %ecx,%eax
		push   %eax
		call   rectangle
		add    $0x14,%esp
	jump_11e03:
		inc    %esi
		cmp    $0x40,%si
		jne    jump_11d00
		push   $0x18
		push   $0x156
		push   $0x272
		push   $0xd8
		push   $0x1f4
		call   func_187a0
		add    $0x14,%esp
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_11e40:
		.long   func_11fc2
		.long   func_11fb7
		.long   func_11fc0
		.long   jump_11fcf
		.long   func_11fc8
		.long   func_11fcd

vtable_11e58:
		.long   func_1207e
		.long   func_12085
		.long   func_1209a
		.long   func_120af
		.long   func_120c1
		.long   func_120c8
		.long   func_120e2
		.long   func_120e2
		.long   func_120e2
		.long   func_120e2
		.long   func_1210d
		.long   func_120e2
		.long   func_1211f
		.long   func_120fb
		.long   func_120c8
		.long   func_120e2
		.long   func_1207e


/*----------------------------------------------------------------*/
click_map:	/* 0x11ea0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x10,%esp
		mov    data_60b20,%bx
		mov    data_60b1e,%si
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		sub    $0x80,%eax
		and    $0x1f,%al
		xor    %ah,%ah
		mov    %eax,0x4(%esp)
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%di
		and    $0xf,%edi
		movswl %di,%eax
		xor    %edx,%edx
		push   %eax
		movswl 0x8(%esp),%eax
		mov    %edx,data_60aac
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		sub    $0x80,%eax
		sar    $1,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		sub    %eax,%edx
		movswl player_view_map_y,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		sub    $0x80,%eax
		xor    %edx,%edx
		sar    $1,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		add    %eax,%edx
		movswl player_view_map_x,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		cwtl
		push   %eax
		call   func_4a336
		mov    $0x60,%ecx
		mov    data_60aac,%eax
		xor    %edx,%edx
		shr    $0x7,%eax
		div    %ecx
		mov    $0x3000,%ecx
		shl    $0x8,%edx
		mov    data_60aac,%eax
		mov    %edx,%esi
		xor    %edx,%edx
		div    %ecx
		mov    data_60aac,%bx
		add    $0x10,%esp
		and    $0x7f,%bl
		xor    %bh,%bh
		shl    $0x7,%eax
		shl    $0x8,%ebx
		add    $0x80,%eax
		mov    data_60b18,%dx
		mov    %ax,data_60b1c
		cmp    $0x5,%dx
		ja     jump_11fcf
		mov    %edi,%ecx
		xor    %eax,%eax
		add    $0x10,%ecx
		mov    %dx,%ax
		mov    %ecx,(%esp)
		mov    %edi,%ecx
		mov    0x4(%esp),%edx
		add    $0x20,%ecx
		sub    $0x20,%edx
		jmp    *%cs:vtable_11e40(,%eax,4)


/*----------------------------------------------------------------*/
func_11fb7:
/*----------------------------------------------------------------*/
		mov    (%esp),%edi
		mov    %edx,0x4(%esp)
		jmp    jump_11fcf


/*----------------------------------------------------------------*/
func_11fc0:
/*----------------------------------------------------------------*/
		mov    %ecx,%edi


/*----------------------------------------------------------------*/
func_11fc2:
/*----------------------------------------------------------------*/
		mov    %edx,0x4(%esp)
		jmp    jump_11fcf


/*----------------------------------------------------------------*/
func_11fc8:
/*----------------------------------------------------------------*/
		mov    (%esp),%edi
		jmp    jump_11fcf


/*----------------------------------------------------------------*/
func_11fcd:
/*----------------------------------------------------------------*/
		mov    %ecx,%edi
	jump_11fcf:
		mov    0x4(%esp),%eax
		mov    0x4(%esp),%ecx
		add    %edi,%edi
		xor    %edx,%edx
		add    %edi,%eax
		mov    %si,%dx
		shl    $0x2,%eax
		sub    %ecx,%edi
		mov    $0x6000,%ecx
		mov    %eax,0x8(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ecx
		mov    %ebx,%eax
		xor    %edx,%edx
		xor    %bl,%al
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %eax,%ecx
		xor    %edx,%edx
		mov    data_55358,%eax
		mov    data_60b1c,%dx
		lea    0x0(,%ecx,4),%ecx
		dec    %edx
		add    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		shl    $0x2,%edi
		mov    %edi,0xc(%esp)
		add    (%ecx),%eax
		xor    %edx,%edx
		mov    (%eax),%dl
		mov    h_col,%eax
		add    %edx,%eax
		mov    (%eax),%dl
		cmp    $0x10,%dl
		ja     jump_1212e
		mov    0x8(%esp),%edi
		mov    %dl,%al
		mov    0xc(%esp),%edx
		and    $0xff,%eax
		add    %ebx,%edi
		add    %esi,%edx
		jmp    *%cs:vtable_11e58(,%eax,4)


/*----------------------------------------------------------------*/
func_1207e:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		jmp    jump_12128


/*----------------------------------------------------------------*/
func_12085:
/*----------------------------------------------------------------*/
		mov    %edi,%ebx
		mov    $0x3,%edi
		mov    %edx,%esi
		mov    %di,data_60b0e
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_1209a:
/*----------------------------------------------------------------*/
		mov    $0x3,%ecx
		mov    %edi,%ebx
		mov    %edx,%esi
		mov    %cx,data_60b0e
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_120af:
/*----------------------------------------------------------------*/
		mov    %edx,%esi
		mov    $0x3,%edx
		mov    %edi,%ebx
		mov    %dx,data_60b0e
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_120c1:
/*----------------------------------------------------------------*/
		mov    $0x3,%eax
		jmp    jump_12124


/*----------------------------------------------------------------*/
func_120c8:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%edx
		mov    $0x3,%edi
		mov    0xc(%esp),%ecx
		mov    %di,data_60b0e
		add    %edx,%ebx
		add    %ecx,%esi
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_120e2:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ecx
		mov    $0x4,%eax
		mov    0xc(%esp),%edi
		mov    %ax,data_60b0e
		add    %ecx,%ebx
		add    %edi,%esi
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_120fb:
/*----------------------------------------------------------------*/
		mov    %edi,%ebx
		mov    $0x5,%edi
		mov    %edx,%esi
		mov    %di,data_60b0e
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_1210d:
/*----------------------------------------------------------------*/
		mov    %edx,%esi
		mov    $0x2,%edx
		mov    %edi,%ebx
		mov    %dx,data_60b0e
		jmp    jump_1212e


/*----------------------------------------------------------------*/
func_1211f:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
	jump_12124:
		mov    %edi,%ebx
		mov    %edx,%esi
	jump_12128:
		mov    %ax,data_60b0e
	jump_1212e:
		mov    %si,data_60b1e
		mov    %bx,data_60b20
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
sight_colide:	/* 0x12150 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		cmpw   $0x600,0x24(%esp)
		jge    jump_122c0
		movswl 0x20(%esp),%ebx
		mov    $0x6000,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%eax
		mov    %eax,(%esp)
		movswl 0x1c(%esp),%eax
		mov    %eax,0x4(%esp)
		and    $0xff00,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ebp
		mov    (%esp),%eax
		add    %ebp,%eax
		mov    data_55358,%esi
		lea    0x0(,%eax,4),%eax
		movswl 0x24(%esp),%edx
		lea    (%esi,%eax,1),%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,%ecx
		mov    (%edi),%eax
		add    %ecx,%eax
		mov    (%eax),%al
		mov    h_col,%edi
		and    $0xff,%eax
		add    %edi,%eax
		mov    (%eax),%al
		and    $0xff,%eax
		cmpb   $0x0,data_5a510(%eax)
		je     jump_121fd
		mov    $0x1,%eax
		jmp    jump_122c2
	jump_121fd:
		lea    0x10(%ebx),%edx
		mov    $0x6000,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ebx
		shl    $0x7,%ebx
		lea    (%ebx,%ebp,1),%eax
		mov    (%esi,%eax,4),%eax
		add    %ecx,%eax
		mov    (%eax),%al
		and    $0xff,%eax
		add    %edi,%eax
		mov    (%eax),%al
		and    $0xff,%eax
		cmpb   $0x0,data_5a510(%eax)
		je     jump_1224c
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1224c:
		mov    0x4(%esp),%edx
		add    $0x10,%edx
		and    $0xff00,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    (%esp),%edx
		add    %eax,%edx
		mov    (%esi,%edx,4),%edx
		add    %ecx,%edx
		mov    (%edx),%dl
		and    $0xff,%edx
		add    %edi,%edx
		mov    (%edx),%dl
		and    $0xff,%edx
		cmpb   $0x0,data_5a510(%edx)
		je     jump_12298
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_12298:
		add    %ebx,%eax
		add    (%esi,%eax,4),%ecx
		xor    %eax,%eax
		mov    (%ecx),%al
		add    %edi,%eax
		mov    (%eax),%al
		and    $0xff,%eax
		cmpb   $0x0,data_5a510(%eax)
		je     jump_122c0
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_122c0:
		xor    %eax,%eax
	jump_122c2:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_altitude_point1:	/* 0x122d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x18(%esp),%ebx
		add    $0x7f,%ebx
		movswl %bx,%eax
		push   %eax
		movswl 0x18(%esp),%esi
		push   %esi
		movswl 0x18(%esp),%edi
		push   %edi
		call   check_point1
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_1233c
		sub    $0x80,%ebx
		movswl %bx,%eax
		push   %eax
		push   %esi
		push   %edi
		call   check_point1
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_1233c
		sub    $0x80,%ebx
		test   %bx,%bx
		jge    jump_12324
		mov    %ebx,%eax
		inc    %eax
		and    $0x80,%al
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_12324:
		movswl %bx,%eax
		push   %eax
		push   %esi
		push   %edi
		call   check_point1
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_1233c
		and    $0x80,%bl
		mov    %ebx,%eax
	jump_1233c:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_altitude_point2:	/* 0x12340 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x18(%esp),%ebx
		add    $0x7f,%ebx
		movswl %bx,%eax
		push   %eax
		movswl 0x18(%esp),%esi
		push   %esi
		movswl 0x18(%esp),%edi
		push   %edi
		call   check_point2
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_123ac
		sub    $0x80,%ebx
		movswl %bx,%eax
		push   %eax
		push   %esi
		push   %edi
		call   check_point2
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_123ac
		sub    $0x80,%ebx
		test   %bx,%bx
		jge    jump_12394
		mov    %ebx,%eax
		inc    %eax
		and    $0x80,%al
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_12394:
		movswl %bx,%eax
		push   %eax
		push   %esi
		push   %edi
		call   check_point2
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_123ac
		and    $0x80,%bl
		mov    %ebx,%eax
	jump_123ac:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_123b0:
		.long   jump_12595
		.long   func_124b5
		.long   func_124cc
		.long   func_124e2
		.long   func_124f8
		.long   func_12571
		.long   func_12571
		.long   func_12571
		.long   func_12571
		.long   func_12571
		.long   func_12571
		.long   func_12571
		.long   func_1250f
		.long   func_12571
		.long   func_12571
		.long   func_12571
		.long   func_12520


/*----------------------------------------------------------------*/
check_point1:	/* 0x12400 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		cmpw   $0x600,0x1c(%esp)
		jg     jump_12595
		movswl 0x18(%esp),%esi
		mov    $0x6000,%ebx
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x14(%esp),%edi
		mov    %edi,%edx
		and    $0xff00,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ebx
		add    %ebx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		movswl 0x1c(%esp),%ebx
		lea    (%edx,%eax,1),%ebp
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    0x0(%ebp),%eax
		mov    (%eax),%al
		test   %al,%al
		je     jump_12595
		xor    %edx,%edx
		mov    %al,%dl
		mov    h_col,%eax
		add    %edx,%eax
		mov    (%eax),%dl
		cmp    $0x10,%dl
		ja     jump_12597
		mov    %dl,%al
		and    $0xff,%eax
		lea    0x0(,%eax,4),%edx
		mov    %ebx,%eax
		and    $0xff80,%eax
		jmp    *%cs:vtable_123b0(%edx)


/*----------------------------------------------------------------*/
func_124b5:
/*----------------------------------------------------------------*/
		mov    %esi,%edx
		not    %edx
		and    $0xff,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_124cc:
/*----------------------------------------------------------------*/
		mov    0x18(%esp),%edx
		xor    %dh,%dh
		movswl %dx,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_124e2:
/*----------------------------------------------------------------*/
		mov    0x14(%esp),%edx
		xor    %dh,%dh
		movswl %dx,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_124f8:
/*----------------------------------------------------------------*/
		mov    %edi,%edx
		not    %edx
		and    $0xff,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1250f:
/*----------------------------------------------------------------*/
		mov    0x1c(%esp),%ecx
		and    $0x80,%cl
		add    $0x10,%ch
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_12520:
/*----------------------------------------------------------------*/
		mov    0x18(%esp),%eax
		mov    %edi,%edx
		and    $0x7f,%ah
		xor    %al,%al
		sar    $0x8,%edx
		cwtl
		and    $0x7f,%edx
		sar    $1,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_12595
		xor    %edx,%edx
		test   %ax,%ax
		je     jump_12595
	jump_1254a:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_12585
		mov    0x19(%eax),%bh
		cmp    $0x5,%bh
		je     func_12571
		cmp    $0x6,%bh
		je     func_12571
		cmp    $0x9,%bh
		je     func_12571
		cmp    $0xa,%bh
		jne    jump_12585


/*----------------------------------------------------------------*/
func_12571:
/*----------------------------------------------------------------*/
		mov    0x1c(%esp),%ecx
		and    $0x80,%cl
		add    $0x80,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_12585:
		inc    %edx
		mov    (%eax),%ax
		cmp    $0x400,%dx
		jae    jump_12595
		test   %ax,%ax
		jne    jump_1254a
	jump_12595:
		xor    %ecx,%ecx
	jump_12597:
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_125a0:
		.long   jump_12797
		.long   func_126b7
		.long   func_126cc
		.long   func_126e2
		.long   func_126f8
		.long   func_12773
		.long   func_126a7
		.long   func_126a7
		.long   func_126a7
		.long   func_126a7
		.long   func_12773
		.long   func_126a7
		.long   func_1270f
		.long   func_12773
		.long   func_12773
		.long   func_126a7
		.long   func_12720


/*----------------------------------------------------------------*/
check_point2:	/* 0x125f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		cmpw   $0x600,0x1c(%esp)
		jg     jump_12797
		movswl 0x18(%esp),%ecx
		mov    $0x6000,%esi
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x14(%esp),%edi
		mov    %edi,%edx
		and    $0xff00,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%esi
		add    %esi,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		movswl 0x1c(%esp),%esi
		lea    (%edx,%eax,1),%ebp
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    0x0(%ebp),%eax
		mov    (%eax),%al
		test   %al,%al
		je     jump_12797
		mov    h_col,%edx
		and    $0xff,%eax
		add    %edx,%eax
		mov    (%eax),%dl
		cmp    $0x10,%dl
		ja     jump_12799
		mov    %dl,%al
		and    $0xff,%eax
		lea    0x0(,%eax,4),%edx
		mov    %esi,%eax
		and    $0xff80,%eax
		jmp    *%cs:vtable_125a0(%edx)


/*----------------------------------------------------------------*/
func_126a7:
/*----------------------------------------------------------------*/
		mov    0x1c(%esp),%ebx
		and    $0x80,%bl
		inc    %bh
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_126b7:
/*----------------------------------------------------------------*/
		not    %ecx
		and    $0xff,%ecx
		sar    $1,%ecx
		add    %ecx,%eax
		mov    %eax,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_126cc:
/*----------------------------------------------------------------*/
		mov    0x18(%esp),%edx
		xor    %dh,%dh
		movswl %dx,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_126e2:
/*----------------------------------------------------------------*/
		mov    0x14(%esp),%edx
		xor    %dh,%dh
		movswl %dx,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_126f8:
/*----------------------------------------------------------------*/
		mov    %edi,%edx
		not    %edx
		and    $0xff,%edx
		sar    $1,%edx
		add    %edx,%eax
		mov    %eax,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1270f:
/*----------------------------------------------------------------*/
		mov    0x1c(%esp),%ebx
		and    $0x80,%bl
		add    $0x10,%bh
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_12720:
/*----------------------------------------------------------------*/
		mov    0x18(%esp),%eax
		and    $0x7f,%ah
		xor    %al,%al
		cwtl
		mov    %eax,%edx
		mov    %edi,%eax
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_12797
		xor    %edx,%edx
		test   %ax,%ax
		je     jump_12797
	jump_1274c:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_12787
		mov    0x19(%eax),%bh
		cmp    $0x5,%bh
		je     func_12773
		cmp    $0x6,%bh
		je     func_12773
		cmp    $0x9,%bh
		je     func_12773
		cmp    $0xa,%bh
		jne    jump_12787


/*----------------------------------------------------------------*/
func_12773:
/*----------------------------------------------------------------*/
		mov    0x1c(%esp),%ebx
		and    $0x80,%bl
		add    $0x80,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_12787:
		inc    %edx
		mov    (%eax),%ax
		cmp    $0x400,%dx
		jae    jump_12797
		test   %ax,%ax
		jne    jump_1274c
	jump_12797:
		xor    %ebx,%ebx
	jump_12799:
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_who_shot_me:	/* 0x127a0 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x1c(%eax),%dx
		test   %dx,%dx
		je     jump_127b7
		mov    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %ax,0x16(%edx)
	jump_127b7:
		ret

vtable_127b8:
		.long   jump_13734
		.long   func_12946
		.long   func_12cae
		.long   jump_13734
		.long   func_12bb4
		.long   func_12db1

vtable_127d0:
		.long   jump_13734
		.long   func_12dc9
		.long   jump_13734
		.long   jump_13734
		.long   func_12ec5
		.long   func_12ec5
		.long   func_12ec5
		.long   func_12ec5
		.long   func_12ec5
		.long   func_12ec5
		.long   jump_13734
		.long   func_12f9f
		.long   func_13084
		.long   jump_13734
		.long   jump_13734
		.long   func_13168
		.long   func_13168
		.long   jump_13734
		.long   func_13249
		.long   func_13249
		.long   jump_13734
		.long   jump_13734
		.long   func_1331f
		.long   func_1331f
		.long   jump_13734
		.long   func_133f5
		.long   func_134ab
		.long   func_134ab
		.long   func_13584
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   jump_13734
		.long   func_13667
		.long   func_13667
		.long   jump_13734
		.long   func_13667
		.long   jump_13734


/*----------------------------------------------------------------*/
sprite_colide:	/* 0x12880 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x70,%esp
		mov    0x84(%esp),%esi
		mov    0x98(%esp),%edi
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		sub    %eax,%edx
		lea    -0x100(%edx),%eax
		xor    %ecx,%ecx
		test   %eax,%eax
		jle    jump_1378a
		movswl 0x94(%esp),%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		sub    %eax,%edx
		lea    -0x100(%edx),%eax
		and    $0x7f00,%ebx
		sar    $0x8,%eax
		sar    $1,%ebx
		and    $0x7f,%eax
		or     %ebx,%eax
		mov    $level__MapWho,%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    %ecx,0x6c(%esp)
		mov    %edx,0x18(%esp)
	jump_128ff:
		xor    %ebx,%ebx
		mov    %ebx,0x64(%esp)
	jump_12905:
		mov    0x18(%esp),%ebx
		xor    %eax,%eax
		mov    (%ebx),%bx
		mov    %eax,0x68(%esp)
		test   %bx,%bx
		je     jump_1374f
	jump_1291b:
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		cmp    %esi,%ebx
		je     jump_13734
		cmpb   $0x5,0x18(%ebx)
		ja     jump_13734
		xor    %eax,%eax
		mov    0x18(%ebx),%al
		jmp    *%cs:vtable_127b8(,%eax,4)


/*----------------------------------------------------------------*/
func_12946:
/*----------------------------------------------------------------*/
		testb  $0x1,0xb(%ebx)
		jne    jump_13734
		testb  $0x1,0xa(%ebx)
		jne    jump_13734
		cmpb   $0x3,0x18(%esi)
		jne    jump_12a97
		testb  $0x80,0xa0(%esp)
		jne    jump_12a97
		mov    %esi,%eax
		mov    0x1c(%esi),%ax
		mov    $level__things_base,%edx
		and    $0xffff,%eax
		add    %eax,%edx
		mov    %edx,0x14(%esp)
		mov    0x1c(%ebx),%dl
		mov    %ebx,%ebp
		test   $0x2,%dl
		je     jump_129f0
		mov    $level__People,%edx
		mov    %ebx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movl   $0x5c,0x60(%esp)
		sar    $0x1f,%edx
		idivl  0x60(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    $level__People,%edx
		mov    %eax,0x20(%esp)
		mov    0x14(%esp),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movl   $0x5c,0x60(%esp)
		sar    $0x1f,%edx
		idivl  0x60(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    0x20(%esp),%eax
		je     jump_13734
	jump_129f0:
		cmpw   $0x0,0x20(%ebp)
		jne    jump_12a06
		mov    0x14(%esp),%eax
		cmpw   $0x0,0x20(%eax)
		je     jump_12a97
	jump_12a06:
		mov    0x14(%esp),%eax
		sub    $level__things_base,%eax
		movl   $0x2e0,0x60(%esp)
		and    $0xffff,%eax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   0x60(%esp)
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		movl   $0x2e0,0x60(%esp)
		mov    0x20(%ebp),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   0x60(%esp)
		mov    0x20(%esp),%edx
		mov    %eax,0x1c(%esp)
		cmp    %edx,%eax
		je     jump_13734
		mov    %ebp,%eax
		sub    $level__things_base,%eax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    $0x2e0,%ebp
		sub    $0x2,%eax
		div    %ebp
		mov    0x14(%esp),%edx
		mov    %eax,%ebp
		xor    %eax,%eax
		mov    0x20(%edx),%ax
		movl   $0x2e0,0x60(%esp)
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   0x60(%esp)
		cmp    %ebp,%eax
		je     jump_13734
		cmp    0x1c(%esp),%eax
		je     jump_13734
	jump_12a97:
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,0x24(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x20(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x24(%esp),%ebp
		sub    $0x20,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x6(%ebx),%ebp
		mov    %ebp,0x28(%esp)
		add    $0x20,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %eax,%edx
		mov    0x28(%esp),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x100(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		cmpb   $0x3,0x18(%esi)
		jne    jump_12b78
		mov    %ebx,%eax
		mov    0x1c(%esi),%dx
		sub    $level__things_base,%eax
		cmp    %dx,%ax
		jne    jump_12b6e
		testb  $0x80,0xa0(%esp)
		je     jump_13734
	jump_12b6e:
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_12b78:
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x2,0x18(%esi)
		jne    jump_12b8e
		mov    0x1a(%esi),%al
		jmp    jump_12bac
	jump_12b8e:
		mov    0x6(%ebx),%ax
		sub    0x6(%esi),%ax
		cwtl
		mov    0x4(%esi),%cx
		push   %eax
		mov    0x4(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   get_angle
		add    $0x8,%esp
	jump_12bac:
		mov    %al,0x5b(%ebx)
		jmp    jump_1372f


/*----------------------------------------------------------------*/
func_12bb4:
/*----------------------------------------------------------------*/
		cmpb   $0xc,0x19(%ebx)
		jne    jump_13734
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl 0x8(%ebx),%eax
		movswl 0x90(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x90(%esp),%edx
		movswl 0x9c(%esp),%eax
		add    %edx,%eax
		movswl 0x8(%ebx),%edx
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		mov    0xc(%ebx),%dx
		or     %eax,%edx
		mov    $0x1,%ecx
		mov    %dx,0xc(%ebx)
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_12cae:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		movswl 0x90(%esp),%eax
		add    $0x100,%edx
		cmp    %eax,%edx
		jl     jump_13734
		movswl 0x90(%esp),%edx
		movswl 0x9c(%esp),%eax
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_12da7
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_12da7:
		mov    $0x1,%ecx
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_12db1:
/*----------------------------------------------------------------*/
		mov    0x19(%ebx),%dl
		cmp    $0x2a,%dl
		ja     jump_13734
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:vtable_127d0(,%eax,4)


/*----------------------------------------------------------------*/
func_12dc9:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl 0x6(%ebx),%edx
		add    $0x40,%edx
		cmp    %eax,%edx
		jl     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl 0x8(%ebx),%eax
		movswl 0x90(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x90(%esp),%edx
		movswl 0x9c(%esp),%eax
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_12ebb
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_12ebb:
		mov    $0x1,%ecx
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_12ec5:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x4(%ebx),%ebp
		mov    %ebp,0x2c(%esp)
		add    $0x40,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %eax,%edx
		mov    0x2c(%esp),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x6(%ebx),%ebp
		mov    %ebp,0x30(%esp)
		add    $0x40,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %edx,%eax
		mov    0x30(%esp),%edx
		sub    $0x40,%edx
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x80(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_12f95
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_12f95:
		mov    $0x1,%ecx
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_12f9f:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_13734
		movswl 0x8(%ebx),%eax
		movswl 0x90(%esp),%edx
		add    $0x190,%eax
		cmp    %edx,%eax
		jl     jump_13734
		movswl 0x90(%esp),%eax
		movswl 0x9c(%esp),%edx
		add    %edx,%eax
		movswl 0x8(%ebx),%edx
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		jmp    jump_1372f


/*----------------------------------------------------------------*/
func_13084:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,0x34(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x80(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x34(%esp),%ebp
		sub    $0x80,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x6(%ebx),%ebp
		mov    %ebp,0x38(%esp)
		add    $0x80,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %edx,%eax
		mov    0x38(%esp),%edx
		sub    $0x80,%edx
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x180(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_1315e
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_1315e:
		mov    $0x1,%ecx
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_13168:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,0x3c(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x80(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x3c(%esp),%ebp
		sub    $0x80,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,0x40(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x80(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x40(%esp),%ebp
		sub    $0x80,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%eax
		lea    0x180(%eax),%ebp
		movswl 0x90(%esp),%edx
		cmp    %ebp,%edx
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_1372f
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
		jmp    jump_1372f


/*----------------------------------------------------------------*/
func_13249:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x4(%ebx),%ebp
		mov    %ebp,(%esp)
		add    $0x40,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %edx,%eax
		mov    (%esp),%edx
		sub    $0x40,%edx
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,0x44(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x40(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x44(%esp),%ebp
		sub    $0x40,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x80(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_13315
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_13315:
		mov    $0x1,%ecx
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_1331f:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,0x48(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x40(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x48(%esp),%ebp
		sub    $0x40,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,0x4c(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x40(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x4c(%esp),%ebp
		sub    $0x40,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x170(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_133eb
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_133eb:
		mov    $0x1,%ecx
		jmp    jump_13734


/*----------------------------------------------------------------*/
func_133f5:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,0x4(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x40(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x4(%esp),%ebp
		sub    $0x40,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,0x50(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x40(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x50(%esp),%ebp
		sub    $0x40,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x100(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		jmp    jump_1372f


/*----------------------------------------------------------------*/
func_134ab:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x4(%ebx),%ebp
		mov    %ebp,0x8(%esp)
		add    $0x40,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %edx,%eax
		mov    0x8(%esp),%edx
		sub    $0x40,%edx
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x20(%esp)
		movswl 0x6(%ebx),%ebp
		mov    %ebp,0xc(%esp)
		add    $0x40,%ebp
		cmp    0x20(%esp),%ebp
		jl     jump_13734
		add    %edx,%eax
		mov    0xc(%esp),%edx
		sub    $0x40,%edx
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%eax
		lea    0x100(%eax),%ebp
		movswl 0x90(%esp),%edx
		cmp    %ebp,%edx
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_1372f
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
		jmp    jump_1372f


/*----------------------------------------------------------------*/
func_13584:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,%ebp
		sub    %eax,%ebp
		mov    %ebp,0x60(%esp)
		movswl 0x4(%ebx),%ebp
		mov    %ebp,0x54(%esp)
		add    $0x80,%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		add    %edx,%eax
		mov    0x54(%esp),%edx
		sub    $0x80,%edx
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,0x10(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x80(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x10(%esp),%ebp
		sub    $0x80,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%edx
		lea    0x100(%edx),%ebp
		movswl 0x90(%esp),%eax
		cmp    %ebp,%eax
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_1372f
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
		jmp    jump_1372f


/*----------------------------------------------------------------*/
func_13667:
/*----------------------------------------------------------------*/
		movswl 0x94(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x88(%esp),%edx
		mov    %edx,0x58(%esp)
		sub    %eax,%edx
		mov    %edx,0x60(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x80(%edx),%ebp
		cmp    0x60(%esp),%ebp
		jl     jump_13734
		mov    0x58(%esp),%ebp
		sub    $0x80,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl %di,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x8c(%esp),%edx
		mov    %edx,0x5c(%esp)
		sub    %eax,%edx
		mov    %edx,0x20(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x80(%edx),%ebp
		cmp    0x20(%esp),%ebp
		jl     jump_13734
		mov    0x5c(%esp),%ebp
		sub    $0x80,%edx
		add    %ebp,%eax
		cmp    %eax,%edx
		jg     jump_13734
		movswl 0x8(%ebx),%eax
		lea    0x100(%eax),%ebp
		movswl 0x90(%esp),%edx
		cmp    %ebp,%edx
		jg     jump_13734
		movswl 0x9c(%esp),%ebp
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_13734
		mov    0xa0(%esp),%eax
		or     %ax,0xc(%ebx)
		cmpb   $0x3,0x18(%esi)
		jne    jump_1372f
		push   %ebx
		push   %esi
		call   set_who_shot_me
		add    $0x8,%esp
	jump_1372f:
		mov    $0x1,%ecx
	jump_13734:
		mov    0x68(%esp),%eax
		inc    %eax
		mov    (%ebx),%bx
		mov    %eax,0x68(%esp)
		cmp    $0x400,%ax
		jae    jump_1374f
		test   %bx,%bx
		jne    jump_1291b
	jump_1374f:
		mov    0x18(%esp),%eax
		mov    0x64(%esp),%ebx
		add    $0x2,%eax
		inc    %ebx
		mov    %eax,0x18(%esp)
		mov    %ebx,0x64(%esp)
		cmp    $0x3,%bx
		jb     jump_12905
		lea    0xfa(%eax),%edx
		mov    %edx,0x18(%esp)
		mov    0x6c(%esp),%edx
		inc    %edx
		mov    %edx,0x6c(%esp)
		cmp    $0x3,%dx
		jb     jump_128ff
	jump_1378a:
		mov    %ecx,%eax
		add    $0x70,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_13794:
		.long   jump_144e0
		.long   func_13939
		.long   func_13d1e
		.long   jump_144e0
		.long   func_13c36
		.long   func_13e1d

vtable_137ac:
		.long   func_13bdb
		.long   func_13b91
		.long   func_13bc8
		.long   func_13bff

vtable_137bc:
		.long   jump_144e0
		.long   func_13e35
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   func_13f11
		.long   func_13fed
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   func_140af
		.long   func_140af
		.long   jump_144e0
		.long   jump_144e0
		.long   func_14163
		.long   jump_144e0
		.long   jump_144e0
		.long   func_14219
		.long   func_142b6
		.long   func_142b6
		.long   func_1436c
		.long   func_1436c
		.long   func_1436c
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   jump_144e0
		.long   func_1442a
		.long   func_1442a
		.long   jump_144e0
		.long   func_1442a
		.long   jump_144e0


/*----------------------------------------------------------------*/
bullet_colide:	/* 0x13870 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    0x34(%esp),%ebp
		movswl 0x3c(%esp),%edx
		movswl 0x48(%esp),%eax
		sub    %eax,%edx
		xor    %esi,%esi
		test   %edx,%edx
		jle    jump_14546
		movswl 0x38(%esp),%edx
		movswl 0x44(%esp),%eax
		sub    %eax,%edx
		and    $0xff00,%edx
		mov    %ebp,0x8(%esp)
		mov    %edx,0xc(%esp)
		jmp    jump_14529
	jump_138b0:
		movswl 0x3c(%esp),%edx
		movswl 0x48(%esp),%eax
		sub    %eax,%edx
		mov    %edx,%eax
		and    $0xff00,%eax
		mov    %eax,0x4(%esp)
		mov    0xc(%esp),%eax
		sar    $0x8,%eax
		and    $0x7f,%eax
		mov    %eax,0x10(%esp)
		jmp    jump_14504
	jump_138da:
		mov    %ebx,%eax
		and    $0x7f00,%eax
		mov    0x10(%esp),%edi
		sar    $1,%eax
		or     %edi,%eax
		xor    %edx,%edx
		mov    level__MapWho(,%eax,2),%ax
		mov    %edx,0x1c(%esp)
		test   %ax,%ax
		je     jump_144fc
	jump_13900:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    0x8(%esp),%eax
		add    $level__things_base,%ebx
		cmp    %eax,%ebx
		je     jump_144e0
		testb  $0x1,0xb(%ebx)
		jne    jump_144e0
		mov    0x18(%ebx),%dl
		cmp    $0x5,%dl
		ja     jump_144e0
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:vtable_13794(,%eax,4)


/*----------------------------------------------------------------*/
func_13939:
/*----------------------------------------------------------------*/
		testb  $0x1,0xb(%ebx)
		jne    jump_144e0
		testb  $0x1,0xa(%ebx)
		jne    jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x40(%esp),%edx
		movswl 0x4c(%esp),%eax
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     jump_144e0
		xor    %eax,%eax
		mov    $level__things_base,%ecx
		mov    0x1c(%ebp),%ax
		add    %eax,%ecx
		mov    0x44(%ebx),%ax
		mov    %ebx,%edi
		test   %ax,%ax
		je     jump_13a41
		xor    %eax,%eax
		mov    $level__things_base,%edx
		mov    0x44(%ebx),%ax
		add    %edx,%eax
		cmpb   $0x11,0x19(%eax)
		jne    jump_13a41
		cmpw   $0x0,0x14(%eax)
		jge    jump_144de
	jump_13a41:
		mov    %ebx,%eax
		mov    0x1c(%ebp),%dx
		sub    $level__things_base,%eax
		cmp    %dx,%ax
		je     jump_144e0
		testb  $0x2,0x1c(%edi)
		je     jump_13ab3
		mov    %edi,%edx
		sub    $level__People,%edx
		movl   $0x5c,0x18(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x18(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %ecx,%edx
		movl   $0x5c,0x18(%esp)
		sub    $level__People,%edx
		mov    %eax,(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x18(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    (%esp),%eax
		je     jump_144e0
	jump_13ab3:
		testb  $0xc,0x1c(%edi)
		je     jump_13ac3
		testb  $0xc,0x1c(%ecx)
		jne    jump_144e0
	jump_13ac3:
		cmpw   $0x0,0x20(%edi)
		jne    jump_13ad5
		cmpw   $0x0,0x20(%ecx)
		je     jump_13b62
	jump_13ad5:
		mov    %ecx,%eax
		sub    $level__things_base,%eax
		movl   $0x2e0,0x18(%esp)
		and    $0xffff,%eax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   0x18(%esp)
		mov    %eax,(%esp)
		xor    %eax,%eax
		movl   $0x2e0,0x18(%esp)
		mov    0x20(%edi),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   0x18(%esp)
		mov    (%esp),%edx
		mov    %eax,0x14(%esp)
		cmp    %edx,%eax
		je     jump_144e0
		mov    %edi,%eax
		sub    $level__things_base,%eax
		movl   $0x2e0,0x18(%esp)
		and    $0xffff,%eax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   0x18(%esp)
		mov    %eax,0x18(%esp)
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x20(%ecx),%ax
		mov    $0x2e0,%ecx
		sub    $0x2,%eax
		div    %ecx
		cmp    0x18(%esp),%eax
		je     jump_144e0
		cmp    0x14(%esp),%eax
		je     jump_144e0
	jump_13b62:
		push   %ebx
		mov    0xc(%esp),%ecx
		push   %ecx
		call   set_who_shot_me
		mov    0x3c(%edi),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x5,%eax
		add    $0x8,%esp
		cmp    $0x3,%eax
		ja     jump_144e0
		jmp    *%cs:vtable_137ac(,%eax,4)


/*----------------------------------------------------------------*/
func_13b91:
/*----------------------------------------------------------------*/
		push   $0x2
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_144e0
		mov    0x50(%esp),%eax
		mov    0x14(%ebx),%cx
		mov    0xc(%ebx),%si
		dec    %ecx
		or     %eax,%esi
		mov    %cx,0x14(%ebx)
		mov    %si,0xc(%ebx)
		mov    0x1a(%ebp),%al
		mov    %ebx,%esi
		mov    %al,0x5b(%edi)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13bc8:
/*----------------------------------------------------------------*/
		push   $0x4
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_144e0


/*----------------------------------------------------------------*/
func_13bdb:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%ax
		dec    %eax
		mov    0xc(%ebx),%dx
		mov    %ax,0x14(%ebx)
		mov    0x50(%esp),%eax
		or     %eax,%edx
		mov    %dx,0xc(%ebx)
		mov    0x1a(%ebp),%al
		mov    %ebx,%esi
		mov    %al,0x5b(%edi)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13bff:
/*----------------------------------------------------------------*/
		push   $0x6
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_144e0
		mov    0x50(%esp),%eax
		mov    0x14(%ebx),%cx
		mov    0xc(%ebx),%si
		dec    %ecx
		or     %eax,%esi
		mov    %cx,0x14(%ebx)
		mov    %si,0xc(%ebx)
		mov    0x1a(%ebp),%al
		mov    %ebx,%esi
		mov    %al,0x5b(%edi)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13c36:
/*----------------------------------------------------------------*/
		cmpb   $0xc,0x19(%ebx)
		jne    jump_144e0
		testb  $0x1,0xa(%ebx)
		jne    jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		add    %edx,%eax
		movswl 0x6(%ebx),%edx
		sub    $0x40,%edx
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x8(%ebx),%edx
		movswl 0x40(%esp),%eax
		add    $0x100,%edx
		cmp    %eax,%edx
		jl     jump_144e0
		movswl 0x40(%esp),%edx
		movswl 0x4c(%esp),%eax
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%dx
		or     %eax,%edx
		mov    %ebx,%esi
		mov    %dx,0xc(%ebx)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13d1e:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x80,%eax
		mov    %ebx,%ecx
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x8(%ebx),%edx
		movswl 0x40(%esp),%eax
		add    $0x100,%edx
		cmp    %eax,%edx
		jl     jump_144e0
		movswl 0x40(%esp),%eax
		movswl 0x4c(%esp),%edx
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x1c(%ebx),%ax
		cmp    0x1c(%ebp),%ax
		je     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%si
		push   %ebx
		or     %eax,%esi
		push   %ebp
		mov    %si,0xc(%ebx)
		call   set_who_shot_me
		mov    0x14(%ebx),%di
		add    $0x8,%esp
		dec    %edi
		mov    %ebx,%esi
		mov    %di,0x14(%ebx)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13e1d:
/*----------------------------------------------------------------*/
		mov    0x19(%ebx),%dh
		cmp    $0x2a,%dh
		ja     jump_144e0
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:vtable_137bc(,%eax,4)


/*----------------------------------------------------------------*/
func_13e35:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		add    %edx,%eax
		movswl 0x6(%ebx),%edx
		sub    $0x40,%edx
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x40(%esp),%edx
		movswl 0x4c(%esp),%eax
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%si
		mov    0x14(%ebx),%di
		or     %eax,%esi
		dec    %edi
		mov    %si,0xc(%ebx)
		mov    %di,0x14(%ebx)
		mov    %ebx,%esi
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13f11:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		add    $0x190,%eax
		cmp    %edx,%eax
		jl     jump_144e0
		movswl 0x40(%esp),%edx
		movswl 0x4c(%esp),%eax
		add    %edx,%eax
		movswl 0x8(%ebx),%edx
		cmp    %eax,%edx
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%dx
		mov    0x14(%ebx),%cx
		or     %eax,%edx
		dec    %ecx
		mov    %dx,0xc(%ebx)
		mov    %ebx,%esi
		mov    %cx,0x14(%ebx)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_13fed:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%ecx
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,0x18(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x80(%edx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x80,%edx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%ecx
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,0x18(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x80(%edx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x80,%edx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		lea    0x180(%eax),%ecx
		cmp    %edx,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%edx
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%si
		mov    0x14(%ebx),%di
		or     %eax,%esi
		dec    %edi
		mov    %si,0xc(%ebx)
		mov    %di,0x14(%ebx)
		mov    %ebx,%esi
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_140af:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%ecx
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,0x18(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x40(%edx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%edx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x6(%ebx),%ecx
		lea    0x40(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x8(%ebx),%edx
		movswl 0x40(%esp),%eax
		lea    0x80(%edx),%ecx
		cmp    %eax,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%dx
		mov    0x14(%ebx),%cx
		or     %eax,%edx
		dec    %ecx
		mov    %dx,0xc(%ebx)
		mov    %cx,0x14(%ebx)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_14163:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%ecx
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,0x18(%esp)
		movswl 0x4(%ebx),%edx
		lea    0x40(%edx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%edx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x6(%ebx),%ecx
		lea    0x40(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		lea    0x170(%eax),%ecx
		cmp    %edx,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%edx
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%si
		mov    0x14(%ebx),%di
		or     %eax,%esi
		dec    %edi
		mov    %si,0xc(%ebx)
		mov    %di,0x14(%ebx)
		mov    %ebx,%esi
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_14219:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x4(%ebx),%ecx
		lea    0x40(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%ecx
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,0x18(%esp)
		movswl 0x6(%ebx),%edx
		lea    0x40(%edx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%edx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		movswl 0x8(%ebx),%edx
		movswl 0x40(%esp),%eax
		lea    0x100(%edx),%ecx
		cmp    %eax,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		jmp    jump_144de


/*----------------------------------------------------------------*/
func_142b6:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x4(%ebx),%ecx
		lea    0x40(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x6(%ebx),%ecx
		lea    0x40(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x40,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		lea    0x100(%eax),%ecx
		cmp    %edx,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%edx
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%dx
		mov    0x14(%ebx),%cx
		or     %eax,%edx
		dec    %ecx
		mov    %dx,0xc(%ebx)
		mov    %ebx,%esi
		mov    %cx,0x14(%ebx)
		jmp    jump_144e0


/*----------------------------------------------------------------*/
func_1436c:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x4(%ebx),%ecx
		lea    0x80(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x80,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,(%esp)
		movswl 0x6(%ebx),%ecx
		lea    0x80(%ecx),%edi
		cmp    (%esp),%edi
		jl     jump_144e0
		sub    $0x80,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x8(%ebx),%eax
		movswl 0x40(%esp),%edx
		lea    0x100(%eax),%ecx
		cmp    %edx,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%edx
		cmp    %edx,%eax
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%si
		mov    0x14(%ebx),%di
		or     %eax,%esi
		dec    %edi
		mov    %si,0xc(%ebx)
		mov    %di,0x14(%ebx)
		jmp    jump_144de


/*----------------------------------------------------------------*/
func_1442a:
/*----------------------------------------------------------------*/
		movswl 0x44(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x38(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,(%esp)
		movswl 0x4(%ebx),%ecx
		lea    0x80(%ecx),%edi
		cmp    (%esp),%edi
		jl     jump_144e0
		sub    $0x80,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x48(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x3c(%esp),%edx
		mov    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,0x18(%esp)
		movswl 0x6(%ebx),%ecx
		lea    0x80(%ecx),%edi
		cmp    0x18(%esp),%edi
		jl     jump_144e0
		sub    $0x80,%ecx
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_144e0
		movswl 0x8(%ebx),%edx
		movswl 0x40(%esp),%eax
		lea    0x100(%edx),%ecx
		cmp    %eax,%ecx
		jl     jump_144e0
		movswl 0x4c(%esp),%ecx
		add    %ecx,%eax
		cmp    %eax,%edx
		jg     jump_144e0
		mov    0x50(%esp),%eax
		mov    0xc(%ebx),%cx
		or     %eax,%ecx
		mov    0x8(%esp),%eax
		mov    %cx,0xc(%ebx)
		cmpb   $0x3,0x18(%eax)
		jne    jump_144de
		push   %ebx
		push   %eax
		call   set_who_shot_me
		add    $0x8,%esp
	jump_144de:
		mov    %ebx,%esi
	jump_144e0:
		mov    (%ebx),%ax
		mov    0x1c(%esp),%ebx
		inc    %ebx
		mov    %ebx,0x1c(%esp)
		cmp    $0x400,%bx
		jae    jump_144fc
		test   %ax,%ax
		jne    jump_13900
	jump_144fc:
		addl   $0x100,0x4(%esp)
	jump_14504:
		movswl 0x3c(%esp),%eax
		movswl 0x48(%esp),%edx
		add    %edx,%eax
		mov    0x4(%esp),%ebx
		and    $0xff00,%eax
		cmp    %ebx,%eax
		jge    jump_138da
		addl   $0x100,0xc(%esp)
	jump_14529:
		movswl 0x38(%esp),%edx
		movswl 0x44(%esp),%eax
		add    %edx,%eax
		mov    0xc(%esp),%edx
		and    $0xff00,%eax
		cmp    %edx,%eax
		jge    jump_138b0
	jump_14546:
		mov    %esi,%eax
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_146F4:	/* 0x14550 */
		.long   def_146F4
		.long   func_146fc
		.long   func_1495e
		.long   def_146F4
		.long   func_1487c
		.long   func_14a4a
jpt_14A5A:	/* 0x14568 */
		.long   def_146F4
		.long   func_14a62
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   func_14b36
		.long   func_14c0a
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   func_14ce6
		.long   def_146F4
		.long   def_146F4
		.long   func_14db6
		.long   func_14e80
		.long   def_146F4
		.long   func_14f50
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   def_146F4
		.long   func_1502c
		.long   func_1502c
		.long   def_146F4
		.long   func_1502c
		.long   def_146F4


/*----------------------------------------------------------------*/
bullet_try_colide:	/* 0x14620 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x84,%esp
		mov    0x98(%esp),%ebp
		mov    0x9c(%esp),%edi
		mov    0xa0(%esp),%esi
		mov    0xac(%esp),%ecx
		movswl %si,%edx
		movswl %cx,%eax
		sub    %eax,%edx
		test   %edx,%edx
		jle    jump_15152
		movswl 0xa8(%esp),%edx
		movswl %di,%eax
		sub    %edx,%eax
		and    $0xff00,%eax
		mov    %ebp,0x10(%esp)
		mov    %eax,(%esp)
		jmp    jump_15135
	jump_14674:
		movswl %si,%edx
		movswl %cx,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		and    $0xff00,%eax
		mov    %eax,0xc(%esp)
		mov    (%esp),%eax
		sar    $0x8,%eax
		and    $0x7f,%eax
		mov    %eax,0x8(%esp)
		jmp    jump_15115
	jump_14699:
		mov    %ebx,%eax
		and    $0x7f00,%eax
		mov    0x8(%esp),%edx
		sar    $1,%eax
		or     %edx,%eax
		xor    %edx,%edx
		mov    level__MapWho(,%eax,2),%bx
		mov    %edx,0x80(%esp)
		test   %bx,%bx
		je     jump_1510d
	jump_146c2:
		and    $0xffff,%ebx
		mov    0x10(%esp),%eax
		add    $level__things_base,%ebx
		cmp    %eax,%ebx
		je     def_146F4
		testb  $0x1,0xb(%ebx)
		jne    def_146F4
		mov    0x18(%ebx),%dl
		cmp    $0x5,%dl
		ja     def_146F4
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:jpt_146F4(,%eax,4)


/*----------------------------------------------------------------*/
func_146fc:
/*----------------------------------------------------------------*/
		testb  $0x1,0xb(%ebx)
		jne    def_146F4
		testb  $0x1,0xa(%ebx)
		jne    def_146F4
		mov    0x1c(%ebp),%al
		mov    %ebx,0x78(%esp)
		test   $0x2,%al
		je     jump_14777
		mov    $level__People,%edx
		mov    %ebp,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movl   $0x5c,0x7c(%esp)
		sar    $0x1f,%edx
		idivl  0x7c(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    $level__People,%edx
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movl   $0x5c,0x7c(%esp)
		sar    $0x1f,%edx
		idivl  0x7c(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    0x4(%esp),%eax
		je     def_146F4
	jump_14777:
		testb  $0xc,0x1c(%ebp)
		je     jump_1478b
		mov    0x78(%esp),%eax
		testb  $0xc,0x1c(%eax)
		jne    def_146F4
	jump_1478b:
		mov    0x78(%esp),%edx
		xor    %eax,%eax
		mov    0x20(%edx),%ax
		mov    %eax,0x7c(%esp)
		mov    $level__things_base,%eax
		add    0x7c(%esp),%eax
		cmp    %eax,%ebp
		je     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		mov    %edx,0x1c(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x4(%ebx),%edx
		mov    %edx,0x20(%esp)
		add    $0x20,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		add    0x1c(%esp),%eax
		mov    0x20(%esp),%edx
		sub    $0x20,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		mov    %edx,0x30(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x6(%ebx),%edx
		mov    %edx,0x2c(%esp)
		add    $0x20,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		mov    0x30(%esp),%edx
		add    %eax,%edx
		mov    0x2c(%esp),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0xa4(%esp),%edx
		movswl 0x8(%ebx),%eax
		mov    %edx,0x74(%esp)
		lea    0x100(%eax),%edx
		cmp    0x74(%esp),%edx
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		mov    %edx,0x7c(%esp)
		mov    0x74(%esp),%edx
		add    0x7c(%esp),%edx
		cmp    %edx,%eax
		jg     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1487c:
/*----------------------------------------------------------------*/
		cmpb   $0xc,0x19(%ebx)
		jne    def_146F4
		testb  $0x1,0xa(%ebx)
		jne    def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0x8(%ebx),%eax
		movswl 0xa4(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		movswl 0xa4(%esp),%eax
		add    %edx,%eax
		movswl 0x8(%ebx),%edx
		cmp    %edx,%eax
		jl     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1495e:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0x8(%ebx),%eax
		movswl 0xa4(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		movswl 0xa4(%esp),%eax
		add    %eax,%edx
		movswl 0x8(%ebx),%eax
		cmp    %edx,%eax
		jg     def_146F4
		mov    $level__things_base,%eax
		mov    %ebp,%edx
		sub    %eax,%edx
		mov    0x1c(%ebx),%ax
		cmp    %dx,%ax
		je     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14a4a:
/*----------------------------------------------------------------*/
		mov    0x19(%ebx),%dh
		cmp    $0x2a,%dh
		ja     def_146F4
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:jpt_14A5A(,%eax,4)


/*----------------------------------------------------------------*/
func_14a62:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0x8(%ebx),%eax
		movswl 0xa4(%esp),%edx
		add    $0x100,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa4(%esp),%eax
		mov    %eax,0x7c(%esp)
		movswl 0xb0(%esp),%eax
		add    0x7c(%esp),%eax
		movswl 0x8(%ebx),%edx
		cmp    %edx,%eax
		jl     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14b36:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		add    %edx,%eax
		movswl 0x4(%ebx),%edx
		sub    $0x20,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x20,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x20,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0x8(%ebx),%eax
		movswl 0xa4(%esp),%edx
		add    $0x190,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa4(%esp),%eax
		mov    %eax,0x7c(%esp)
		movswl 0xb0(%esp),%eax
		add    0x7c(%esp),%eax
		movswl 0x8(%ebx),%edx
		cmp    %edx,%eax
		jl     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14c0a:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		sub    %eax,%edx
		movswl 0x4(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x80,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0x8(%ebx),%eax
		movswl 0xa4(%esp),%edx
		add    $0x180,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa4(%esp),%eax
		mov    %eax,0x7c(%esp)
		movswl 0xb0(%esp),%eax
		add    0x7c(%esp),%eax
		movswl 0x8(%ebx),%edx
		cmp    %edx,%eax
		jl     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14ce6:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl 0x4(%ebx),%edx
		add    $0x40,%edx
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		add    %eax,%edx
		movswl 0x4(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		sub    %eax,%edx
		movswl 0x6(%ebx),%eax
		add    $0x40,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		add    %eax,%edx
		movswl 0x6(%ebx),%eax
		sub    $0x40,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0x8(%ebx),%eax
		movswl 0xa4(%esp),%edx
		add    $0x170,%eax
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		movswl 0xa4(%esp),%eax
		add    %edx,%eax
		movswl 0x8(%ebx),%edx
		cmp    %edx,%eax
		jl     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14db6:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		mov    %edx,0x6c(%esp)
		sub    %eax,%edx
		mov    %edx,0x4(%esp)
		movswl 0x4(%ebx),%edx
		mov    %edx,0x14(%esp)
		add    $0x40,%edx
		cmp    0x4(%esp),%edx
		jl     def_146F4
		add    0x6c(%esp),%eax
		mov    0x14(%esp),%edx
		sub    $0x40,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		mov    %edx,0x40(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x6(%ebx),%edx
		mov    %edx,0x28(%esp)
		add    $0x40,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		add    0x40(%esp),%eax
		mov    0x28(%esp),%edx
		sub    $0x40,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0x8(%ebx),%eax
		mov    %eax,0x34(%esp)
		mov    0x34(%esp),%edx
		add    $0x100,%edx
		movswl 0xa4(%esp),%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0xb0(%esp),%edx
		add    %edx,%eax
		cmp    0x34(%esp),%eax
		jl     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14e80:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		mov    %edx,0x70(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x4(%ebx),%edx
		mov    %edx,0x18(%esp)
		add    $0x40,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		add    0x70(%esp),%eax
		mov    0x18(%esp),%edx
		sub    $0x40,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		mov    %edx,0x50(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x6(%ebx),%edx
		mov    %edx,0x24(%esp)
		add    $0x40,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		add    0x50(%esp),%eax
		mov    0x24(%esp),%edx
		sub    $0x40,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa4(%esp),%edx
		movswl 0x8(%ebx),%eax
		mov    %edx,0x64(%esp)
		lea    0x100(%eax),%edx
		cmp    0x64(%esp),%edx
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		mov    %edx,0x7c(%esp)
		mov    0x64(%esp),%edx
		add    0x7c(%esp),%edx
		cmp    %edx,%eax
		jg     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_14f50:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		mov    %edx,0x60(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x4(%ebx),%edx
		mov    %edx,0x54(%esp)
		add    $0x80,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		add    0x60(%esp),%eax
		mov    0x54(%esp),%edx
		sub    $0x80,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		mov    %edx,0x44(%esp)
		sub    %eax,%edx
		mov    %edx,0x4(%esp)
		movswl 0x6(%ebx),%edx
		mov    %edx,0x68(%esp)
		add    $0x80,%edx
		cmp    0x4(%esp),%edx
		jl     def_146F4
		add    0x44(%esp),%eax
		mov    0x68(%esp),%edx
		sub    $0x80,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl 0xa4(%esp),%edx
		movswl 0x8(%ebx),%eax
		mov    %edx,0x58(%esp)
		lea    0x100(%eax),%edx
		cmp    0x58(%esp),%edx
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		mov    %edx,0x7c(%esp)
		mov    0x58(%esp),%edx
		add    0x7c(%esp),%edx
		cmp    %edx,%eax
		jg     def_146F4
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1502c:
/*----------------------------------------------------------------*/
		movswl 0xa8(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %di,%edx
		mov    %edx,0x3c(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x4(%ebx),%edx
		mov    %edx,0x38(%esp)
		add    $0x80,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		add    0x3c(%esp),%eax
		mov    0x38(%esp),%edx
		sub    $0x80,%edx
		cmp    %edx,%eax
		jl     def_146F4
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl %si,%edx
		mov    %edx,0x48(%esp)
		sub    %eax,%edx
		mov    %edx,0x7c(%esp)
		movswl 0x6(%ebx),%edx
		mov    %edx,0x4c(%esp)
		add    $0x80,%edx
		cmp    0x7c(%esp),%edx
		jl     def_146F4
		mov    0x48(%esp),%edx
		add    %eax,%edx
		mov    0x4c(%esp),%eax
		sub    $0x80,%eax
		cmp    %edx,%eax
		jg     def_146F4
		movswl 0xa4(%esp),%edx
		movswl 0x8(%ebx),%eax
		mov    %edx,0x5c(%esp)
		lea    0x100(%eax),%edx
		cmp    0x5c(%esp),%edx
		jl     def_146F4
		movswl 0xb0(%esp),%edx
		mov    %edx,0x4(%esp)
		mov    0x5c(%esp),%edx
		add    0x4(%esp),%edx
		cmp    %edx,%eax
		jle    jump_15154
	def_146F4:	/* 0x150ec */
		mov    0x80(%esp),%eax
		inc    %eax
		mov    (%ebx),%bx
		mov    %eax,0x80(%esp)
		cmp    $0x400,%ax
		jae    jump_1510d
		test   %bx,%bx
		jne    jump_146c2
	jump_1510d:
		addl   $0x100,0xc(%esp)
	jump_15115:
		movswl %si,%edx
		movswl %cx,%eax
		add    %edx,%eax
		mov    0xc(%esp),%ebx
		and    $0xff00,%eax
		cmp    %ebx,%eax
		jge    jump_14699
		addl   $0x100,(%esp)
	jump_15135:
		movswl 0xa8(%esp),%edx
		movswl %di,%eax
		add    %edx,%eax
		mov    (%esp),%edx
		and    $0xff00,%eax
		cmp    %edx,%eax
		jge    jump_14674
	jump_15152:
		xor    %ebx,%ebx
	jump_15154:
		mov    %ebx,%eax
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_area_for_person_unique:	/* 0x15170 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    0x38(%esp),%ebx
		mov    0x3c(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x30(%esp),%ecx
		mov    %eax,%esi
		mov    %ebx,%edx
		sub    %eax,%ecx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x2c(%esp),%edx
		sub    %eax,%edx
		sub    $0x100,%ecx
		sub    $0x100,%edx
		and    $0x7f00,%ecx
		sar    $0x8,%edx
		sar    $1,%ecx
		and    $0x7f,%edx
		or     %edx,%ecx
		mov    $level__MapWho,%edx
		add    %ecx,%ecx
		add    %ecx,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    %eax,%ecx
		mov    %edx,0xc(%esp)
	jump_151d3:
		xor    %ebx,%ebx
		mov    %ebx,0x4(%esp)
	jump_151d9:
		mov    (%esp),%eax
		xor    %edi,%edi
		mov    (%eax),%ax
		mov    %edi,0x8(%esp)
		test   %ax,%ax
		je     jump_1528f
	jump_151ee:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		mov    0x18(%eax),%dl
		cmp    $0x1,%dl
		jne    jump_15273
		test   %dl,0xb(%eax)
		jne    jump_15273
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x28(%esp),%bx
		mov    0x1c(%eax),%dx
		test   %ebx,%edx
		je     jump_15273
		movswl 0x2c(%esp),%edx
		movswl 0x4(%eax),%ebx
		mov    %edx,%ebp
		lea    0x20(%ebx),%edi
		sub    %ecx,%ebp
		cmp    %ebp,%edi
		jl     jump_15273
		sub    $0x20,%ebx
		add    %ecx,%edx
		cmp    %edx,%ebx
		jg     jump_15273
		movswl 0x30(%esp),%ebx
		movswl 0x6(%eax),%edx
		mov    %ebx,%edi
		lea    0x20(%edx),%ebp
		sub    %esi,%edi
		cmp    %ebp,%edi
		jg     jump_15273
		sub    $0x20,%edx
		add    %esi,%ebx
		cmp    %ebx,%edx
		jg     jump_15273
		movswl 0x8(%eax),%ebx
		movswl 0x34(%esp),%edx
		lea    0x100(%ebx),%edi
		cmp    %edx,%edi
		jl     jump_15273
		add    0x40(%esp),%edx
		cmp    %edx,%ebx
		jle    jump_152c9
	jump_15273:
		mov    0x8(%esp),%edx
		inc    %edx
		mov    (%eax),%ax
		mov    %edx,0x8(%esp)
		cmp    $0x400,%dx
		jae    jump_1528f
		test   %ax,%ax
		jne    jump_151ee
	jump_1528f:
		mov    (%esp),%ebp
		mov    0x4(%esp),%edi
		add    $0x2,%ebp
		inc    %edi
		mov    %ebp,(%esp)
		mov    %edi,0x4(%esp)
		cmp    $0x3,%di
		jb     jump_151d9
		mov    0xc(%esp),%edx
		lea    0xfa(%ebp),%eax
		inc    %edx
		mov    %eax,(%esp)
		mov    %edx,0xc(%esp)
		cmp    $0x3,%dx
		jb     jump_151d3
		xor    %eax,%eax
	jump_152c9:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_square_for_model:	/* 0x152e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x24(%esp),%eax
		mov    $level__things_base,%ebp
		mov    %ax,(%esp)
		jmp    jump_1536f
	jump_152f9:
		mov    (%esp),%edi
		mov    0x20(%esp),%esi
		and    $0x7f00,%edi
		jmp    jump_15355
	jump_15308:
		movswl %di,%edx
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %eax,%edx
		mov    level__MapWho(,%edx,2),%ax
		xor    %ecx,%ecx
		test   %ax,%ax
		je     jump_1534f
	jump_15324:
		and    $0xffff,%eax
		xor    %edx,%edx
		add    %ebp,%eax
		mov    0x1c(%esp),%dl
		movsbl 0x18(%eax),%ebx
		cmp    %edx,%ebx
		jne    jump_1533f
		testb  $0x1,0xb(%eax)
		je     jump_1538c
	jump_1533f:
		inc    %ecx
		mov    (%eax),%ax
		cmp    $0x400,%cx
		jae    jump_1534f
		test   %ax,%ax
		jne    jump_15324
	jump_1534f:
		add    $0x100,%esi
	jump_15355:
		movswl 0x28(%esp),%edx
		movswl 0x20(%esp),%eax
		shl    $0x8,%edx
		add    %eax,%edx
		movswl %si,%eax
		cmp    %edx,%eax
		jl     jump_15308
		incb   0x1(%esp)
	jump_1536f:
		movswl 0x2c(%esp),%eax
		movswl 0x24(%esp),%edx
		shl    $0x8,%eax
		add    %edx,%eax
		movswl (%esp),%edx
		cmp    %eax,%edx
		jl     jump_152f9
		xor    %eax,%eax
	jump_1538c:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
bump_person:	/* 0x153a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    0x28(%esp),%esi
		movswl 0x3c(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x30(%esp),%edx
		sub    %eax,%edx
		lea    -0x80(%edx),%eax
		test   %eax,%eax
		jle    jump_15551
		movswl 0x38(%esp),%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x2c(%esp),%edx
		sub    %eax,%edx
		lea    -0x80(%edx),%eax
		and    $0x7f00,%ebx
		sar    $0x8,%eax
		sar    $1,%ebx
		and    $0x7f,%eax
		or     %ebx,%eax
		mov    $level__MapWho,%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    %esi,%eax
		xor    %edx,%edx
		sub    $level__things_base,%eax
		mov    %edx,0x10(%esp)
		mov    %eax,0x4(%esp)
	jump_15412:
		xor    %ebx,%ebx
		mov    %ebx,0x8(%esp)
	jump_15418:
		mov    (%esp),%eax
		xor    %ecx,%ecx
		mov    (%eax),%ax
		mov    %ecx,0xc(%esp)
		test   %ax,%ax
		je     jump_15519
	jump_1542d:
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		cmp    %esi,%ebx
		je     jump_154fd
		mov    0x18(%ebx),%ah
		cmp    $0x1,%ah
		jne    jump_154fd
		test   %ah,0xb(%ebx)
		jne    jump_154fd
		test   %ah,0xa(%ebx)
		jne    jump_154fd
		movswl 0x38(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x4(%ebx),%ecx
		movswl 0x2c(%esp),%edx
		mov    %ecx,%edi
		lea    (%edx,%eax,1),%ebp
		sub    %eax,%edi
		cmp    %ebp,%edi
		jg     jump_154fd
		add    %eax,%ecx
		sub    %eax,%edx
		cmp    %ecx,%edx
		jg     jump_154fd
		movswl 0x3c(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x6(%ebx),%ecx
		movswl 0x30(%esp),%edx
		mov    %ecx,%edi
		lea    (%edx,%eax,1),%ebp
		sub    %eax,%edi
		cmp    %ebp,%edi
		jg     jump_154fd
		add    %eax,%ecx
		sub    %eax,%edx
		cmp    %ecx,%edx
		jg     jump_154fd
		movswl 0x34(%esp),%ecx
		movswl 0x40(%esp),%eax
		movswl 0x8(%ebx),%edx
		lea    (%ecx,%eax,1),%edi
		cmp    %edx,%edi
		jl     jump_154fd
		add    %edx,%eax
		cmp    %eax,%ecx
		jg     jump_154fd
		mov    0x20(%esi),%ax
		mov    0x20(%ebx),%di
		cmp    %di,%ax
		je     jump_154f9
		cmp    0x4(%esp),%di
		je     jump_154f9
		mov    %ebx,%eax
		mov    0x20(%esi),%cx
		sub    $level__things_base,%eax
		cmp    %cx,%ax
		jne    jump_154fd
	jump_154f9:
		mov    %ebx,%eax
		jmp    jump_15553
	jump_154fd:
		mov    0xc(%esp),%edi
		inc    %edi
		mov    (%ebx),%ax
		mov    %edi,0xc(%esp)
		cmp    $0x400,%di
		jae    jump_15519
		test   %ax,%ax
		jne    jump_1542d
	jump_15519:
		mov    (%esp),%eax
		mov    0x8(%esp),%ebx
		add    $0x2,%eax
		inc    %ebx
		mov    %eax,(%esp)
		mov    %ebx,0x8(%esp)
		cmp    $0x2,%bx
		jb     jump_15418
		mov    0x10(%esp),%edi
		lea    0xfc(%eax),%edx
		inc    %edi
		mov    %edx,(%esp)
		mov    %edi,0x10(%esp)
		cmp    $0x2,%di
		jb     jump_15412
	jump_15551:
		xor    %eax,%eax
	jump_15553:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_computer_players:	/* 0x15560 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $EXPORT_SYMBOL(level__CPObjectives),%eax
		xor    %edx,%edx
		mov    $0xef,%cl
		lea    0x0(%eax),%eax
	jump_15570:
		mov    0x6(%eax),%ch
		add    $0xf,%eax
		and    %cl,%ch
		mov    %ch,-0x9(%eax)
		mov    0x6(%eax),%ch
		add    $0xf,%eax
		and    %cl,%ch
		mov    %ch,-0x9(%eax)
		mov    0x6(%eax),%ch
		add    $0xf,%eax
		and    %cl,%ch
		mov    %ch,-0x9(%eax)
		mov    0x6(%eax),%ch
		add    $0xf,%eax
		and    %cl,%ch
		add    $0x4,%edx
		mov    %ch,-0x9(%eax)
		cmp    $0x80,%dx
		jb     jump_15570
		mov    level__ComputerPlayersCount,%al
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    %al,computer_players_count
		mov    level__CPTeamSize,%al
		mov    %edx,comp_plyr_process_timer
		mov    %al,comp_plyr_team_size
		mov    level__CPProcessInterval,%al
		mov    %edx,comp_plyr_last_process_time
		mov    %al,comp_plyr_process_interval
		mov    level__CPLvlInit,%al
		xor    %edx,%ebx
		mov    %al,comp_plyr_level_init
	jump_155e0:
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $0xd,%dl
		inc    %ebx
		mov    %dl,data_5c36b(,%eax,4)
		cmp    $0x40,%bx
		jb     jump_155e0
		xor    %ebx,%ebx
		jmp    jump_1563d
	jump_15602:
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		cmp    %eax,%edx
		je     jump_1563c
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		testb  $0x2,data_5e4aa(%eax)
		je     jump_1563c
		xor    %eax,%eax
		mov    %bl,%al
		push   %eax
		call   InitAComputerPlayer
		add    $0x4,%esp
	jump_1563c:
		inc    %ebx
	jump_1563d:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    computer_players_count,%al
		mov    %bx,%dx
		cmp    %eax,%edx
		jl     jump_15602
		pop    %ebx
		ret

vtable_15650:
		.long   func_1594d
		.long   func_1598a
		.long   func_159c4
		.long   func_159fe


/*----------------------------------------------------------------*/
InitAComputerPlayer:	/* 0x15660 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    $level__People,%esi
		shl    $0x5,%eax
		add    %eax,%esi
		mov    0x1c(%esi),%ah
		shl    $0x3,%dl
		test   $0x2,%ah
		jne    jump_1569e
	jump_15693:
		add    $0x5c,%esi
		inc    %dl
		testb  $0x2,0x1c(%esi)
		je     jump_15693
	jump_1569e:
		xor    %ebx,%ebx
		mov    0x18(%esp),%bl
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ebx,%eax
		xor    %bl,%bl
		mov    %dl,data_5e551(%eax)
		mov    $0x1,%edx
		mov    %bl,(%esp)
		mov    %dx,data_5e8a7(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_156e0:
		xor    %ebx,%ebx
		mov    0x18(%esp),%bl
		mov    %ebx,%ecx
		mov    %ebx,%edx
		shl    $0x5,%ecx
		xor    %ebx,%edx
		add    %ebx,%ecx
		mov    (%esp),%dl
		lea    0x0(,%ecx,4),%ecx
		lea    0x0(,%edx,4),%eax
		sub    %ebx,%ecx
		add    %edx,%eax
		mov    (%esp),%dh
		lea    0x0(,%ecx,8),%ecx
		inc    %dh
		sub    %ebx,%ecx
		xor    %dl,%dl
		mov    %dh,(%esp)
		mov    %dl,data_5e5c0(%ecx,%eax,8)
		cmp    $0x12,%dh
		jb     jump_156e0
		mov    $0x1,%ch
		mov    %dl,0x4(%esp)
		mov    %dl,data_5c359(,%ebx,2)
		mov    comp_plyr_team_size,%dl
		mov    %ch,data_5c358(,%ebx,2)
		test   %dl,%dl
		jbe    jump_15ae4
	jump_15747:
		testb  $0x2,0x1c(%esi)
		je     jump_15ac9
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		mov    0x1d(%esi),%cl
		lea    0x0(,%edx,4),%eax
		or     $0x10,%cl
		add    %edx,%eax
		mov    %cl,0x1d(%esi)
		lea    0x0(,%eax,8),%eax
		mov    0x4(%esp),%cl
		add    %ebx,%eax
		inc    %cl
		mov    $0x10,%ebx
		mov    %cl,data_5e5c0(%eax)
		mov    level__CPWieldedWeaponType,%ch
		mov    %bx,data_5e5ba(%eax)
		test   %ch,%ch
		jne    jump_15856
		xor    %bh,%bh
		xor    %cl,%cl
		xor    %bl,%bl
	jump_157bd:
		xor    %edx,%edx
		mov    %bl,%dl
		lea    0x0(,%edx,2),%eax
		cmpb   $0x0,data_53ec1(%eax)
		je     jump_157f8
		mov    data_53ec0(%eax),%ch
		test   %ch,%ch
		je     jump_157f4
		imul   $0x1f5,%edx,%edx
		cmpw   $0x960,data_57c05(%edx)
		jne    jump_157f4
		cmp    %ch,%bh
		jae    jump_157f4
		mov    %bl,%cl
		mov    %ch,%bh
	jump_157f4:
		inc    %bl
		jmp    jump_157bd
	jump_157f8:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x18(%esp),%dl
		mov    %cl,%bl
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		movzbw data_53ec1(,%ebx,2),%di
		mov    data_53ec1(,%ebx,2),%dl
		mov    %di,data_5e5c3(%ecx,%eax,8)
		mov    weapon_max_ammo(,%edx,2),%dx
		mov    %dx,data_5e5c1(%ecx,%eax,8)
		jmp    jump_15874
	jump_15856:
		mov    %ch,%dl
		xor    %dh,%dh
		mov    %dx,data_5e5c3(%eax)
		xor    %edx,%edx
		mov    %ch,%dl
		mov    weapon_max_ammo(,%edx,2),%dx
		mov    %dx,data_5e5c1(%eax)
	jump_15874:
		mov    level__CPIsBombingTeam,%dh
		mov    $0x1,%cl
		test   %dh,%dh
		je     jump_158d4
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		add    $0x4,%eax
		mov    $0xc,%edx
		mov    $0xc7,%ebx
		mov    %dx,data_5e5c3(%eax)
		mov    $0x2,%cl
		mov    %bx,data_5e5c1(%eax)
	jump_158d4:
		cmpb   $0x0,level__CPIsPersuadingTeam
		je     jump_15932
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    %cl,%dl
		add    %ebx,%eax
		mov    $0x32,%edi
		mov    $0x1,%ecx
		mov    %di,data_5e5c1(%eax,%edx,4)
		mov    %cx,data_5e5c3(%eax,%edx,4)
	jump_15932:
		mov    comp_plyr_level_init,%bh
		cmp    $0x3,%bh
		ja     jump_15a36
		xor    %eax,%eax
		mov    %bh,%al
		jmp    *%cs:vtable_15650(,%eax,4)


/*----------------------------------------------------------------*/
func_1594d:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    %dx,data_5e5bc(%ebx,%eax,8)
		jmp    jump_15a36


/*----------------------------------------------------------------*/
func_1598a:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		movw   $0xaaa,data_5e5bc(%ebx,%eax,8)
		jmp    jump_15a36


/*----------------------------------------------------------------*/
func_159c4:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		movw   $0x1554,data_5e5bc(%ebx,%eax,8)
		jmp    jump_15a36


/*----------------------------------------------------------------*/
func_159fe:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x18(%esp),%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		movw   $0x1ffe,data_5e5bc(%ebx,%eax,8)
	jump_15a36:
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    0x18(%esp),%bl
		mov    0x4(%esp),%cl
		lea    0x0(,%ebx,8),%eax
		lea    (%eax,%ecx,1),%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $computer_players,%edx
		lea    0x0(,%eax,4),%eax
		add    %eax,%edx
		movb   $0xff,(%edx)
		mov    level__CPFlags,%al
		movb   $0x0,0x2(%edx)
		mov    %al,0x1(%edx)
		mov    %ebx,%eax
		movb   $0x0,0x3(%edx)
		shl    $0x5,%eax
		movb   $0x0,0x4(%edx)
		add    %ebx,%eax
		movb   $0x0,0x5(%edx)
		lea    0x0(,%eax,4),%eax
		movb   $0x0,0x6(%edx)
		sub    %ebx,%eax
		movb   $0x0,0x8(%edx)
		lea    0x0(,%eax,8),%eax
		movw   $0x0,0xa(%edx)
		sub    %ebx,%eax
		mov    %bl,0x7(%edx)
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %ecx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		movl   $0x0,0x10(%edx)
		add    %eax,%ebx
		mov    %ebx,0xc(%edx)
	jump_15ac9:
		mov    0x4(%esp),%dh
		mov    comp_plyr_team_size,%bl
		inc    %dh
		add    $0x5c,%esi
		mov    %dh,0x4(%esp)
		cmp    %bl,%dh
		jb     jump_15747
	jump_15ae4:
		mov    0x18(%esp),%al
		xor    %ah,%ah
		push   $0x1002
		and    $0xffff,%eax
		push   %eax
		call   init_players_people
		add    $0x8,%esp
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_computer_players:	/* 0x15b10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    $EXPORT_SYMBOL(players),%edi
		mov    comp_plyr_process_timer,%edx
		mov    comp_plyr_last_process_time,%ebx
		xor    %ah,%ah
		inc    %edx
		mov    %ah,0x8(%esp)
		mov    %edx,comp_plyr_process_timer
		mov    %edx,%eax
		xor    %edx,%edx
		sub    %ebx,%eax
		mov    comp_plyr_process_interval,%dl
		mov    $packets,%esi
		cmp    %edx,%eax
		jb     jump_15b59
		mov    comp_plyr_process_timer,%eax
		mov    $0x1,%dl
		mov    %eax,comp_plyr_last_process_time
		mov    %dl,0x8(%esp)
	jump_15b59:
		xor    %dh,%dh
		mov    computer_players_count,%bl
		mov    %dh,(%esp)
		test   %bl,%bl
		jbe    jump_15c02
	jump_15b6c:
		cmpw   $0x0,0x40b(%edi)
		je     jump_15be3
		xor    %ch,%ch
		mov    comp_plyr_team_size,%al
		mov    %ch,0x4(%esp)
		test   %al,%al
		jbe    jump_15be3
	jump_15b85:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    (%esp),%bl
		mov    0x4(%esp),%dl
		lea    0x0(,%ebx,8),%eax
		lea    (%eax,%edx,1),%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		add    $computer_players,%eax
		mov    0x3(%eax),%cl
		cmp    $0xd,%cl
		je     jump_15bcf
		cmp    $0x5,%cl
		je     jump_15bcf
		xor    %ecx,%ecx
		mov    0x8(%esp),%cl
		push   %ecx
		push   %esi
		push   %ebx
		push   %edx
		push   %eax
		call   CPDoTurn
		add    $0x14,%esp
	jump_15bcf:
		mov    0x4(%esp),%ah
		inc    %ah
		mov    comp_plyr_team_size,%dl
		mov    %ah,0x4(%esp)
		cmp    %dl,%ah
		jb     jump_15b85
	jump_15be3:
		mov    (%esp),%bh
		mov    computer_players_count,%cl
		add    $0x417,%edi
		inc    %bh
		add    $0xe,%esi
		mov    %bh,(%esp)
		cmp    %cl,%bh
		jb     jump_15b6c
	jump_15c02:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_15D74:	/* 0x15c0c */
		.long   func_15d7c
		.long   func_15d8a
		.long   func_15db1
		.long   def_15D74
		.long   func_15eb0
		.long   def_15D74
		.long   func_15ecd
		.long   def_15D74
		.long   func_16168
		.long   func_1603c
		.long   func_15f33
		.long   func_1618f
		.long   func_161d2
jpt_15E6C:	/* 0x15c40 */
		.long   func_15e74
		.long   func_15e74
		.long   func_15e74
		.long   def_15E6C
		.long   func_15e74
		.long   func_15e74
		.long   func_15e74
		.long   func_15e74


/*----------------------------------------------------------------*/
CPDoTurn:	/* 0x15c60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    0x28(%esp),%ebx
		mov    0x34(%esp),%esi
		mov    0xc(%ebx),%ebp
		testb  $0x1,0xb(%ebp)
		je     jump_15c81
		movb   $0x5,0x3(%ebx)
		jmp    jump_16250
	jump_15c81:
		xor    %edx,%edx
		mov    (%ebx),%dl
		mov    %edx,%eax
		shl    $0x4,%eax
		mov    $EXPORT_SYMBOL(level__CPObjectives),%edi
		sub    %edx,%eax
		add    %eax,%edi
		xor    %eax,%eax
		mov    $level__things_base,%edx
		mov    0x3a(%ebp),%ax
		add    %eax,%edx
		mov    %edx,0x8(%esp)
		mov    0x8(%esp),%eax
		xor    %edx,%edx
		mov    0x19(%eax),%dl
		add    %edx,%edx
		mov    weapon_max_ammo(%edx),%dx
		and    $0xffff,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    0x8(%esp),%edx
		mov    %ax,0x14(%edx)
		mov    0x2c(%esp),%al
		xor    %ah,%ah
		mov    %ax,(%esi)
		mov    0x30(%esp),%al
		movzwl %ax,%ebp
		push   %ebp
		movb   $0x6,0xd(%esi)
		call   process_action
		mov    0xc(%ebx),%eax
		mov    0xc(%eax),%dl
		add    $0x4,%esp
		test   $0x40,%dl
		je     jump_15d49
		cmpw   $0x2,0x14(%eax)
		jge    jump_15d16
		push   $0x64
		call   random
		add    $0x4,%esp
		cmp    $0x5,%ax
		jae    jump_15d49
		movb   $0x4,0x3(%ebx)
		jmp    jump_15d5a
	jump_15d16:
		push   %ebp
		movb   $0x18,0xd(%esi)
		call   process_action
		mov    0xc(%ebx),%eax
		movb   $0x1,0x2(%ebx)
		add    $0x4,%esp
		mov    0x16(%eax),%ax
		mov    0x3(%ebx),%dh
		mov    %ax,0xa(%ebx)
		cmp    $0xc,%dh
		je     jump_15d45
		movb   $0xc,0x3(%ebx)
		movb   $0xa,0x8(%ebx)
		mov    %dh,0x9(%ebx)
	jump_15d45:
		movb   $0x0,0x5(%ebx)
	jump_15d49:
		cmpb   $0x0,0x38(%esp)
		jne    jump_15d5a
		cmpb   $0xc,0x3(%ebx)
		jne    jump_16250
	jump_15d5a:
		movzwl 0xa(%ebx),%ebp
		mov    0x3(%ebx),%al
		add    $level__things_base,%ebp
		cmp    $0xc,%al
		ja     def_15D74
		xor    %eax,%eax
		mov    0x3(%ebx),%al
		jmp    *%cs:jpt_15D74(,%eax,4)


/*----------------------------------------------------------------*/
func_15d7c:
/*----------------------------------------------------------------*/
		push   %ebx
		call   CPGetObjective
		add    $0x4,%esp
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_15d8a:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%edx
		push   %edx
		xor    %eax,%eax
		push   %ebx
		mov    0x34(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		push   %eax
		push   %edi
		push   %esi
		movb   $0x2,0x3(%ebx)
		call   CPDoObjectiveStep
		add    $0x18,%esp
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_15db1:
/*----------------------------------------------------------------*/
		testb  $0x10,0x6(%edi)
		je     jump_15de2
		xor    %eax,%eax
		mov    0x7(%ebx),%al
		mov    $data_5c358,%edx
		add    %eax,%eax
		add    %edx,%eax
		movb   $0x0,0x3(%ebx)
		cmpb   $0x0,(%eax)
		je     jump_15dd2
		movb   $0x0,0x1(%eax)
	jump_15dd2:
		push   %edi
		call   CPGetFirstObjectiveInList
		add    $0x4,%esp
		mov    %eax,%edi
		jmp    def_15D74
	jump_15de2:
		xor    %eax,%eax
		push   %esi
		mov    0x34(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x34(%esp),%al
		push   %eax
		push   %ebx
		push   %edi
		call   CPCompletedObjectiveStep
		add    $0x14,%esp
		test   %al,%al
		je     jump_15e5e
		cmpw   $0x0,(%edi)
		je     def_15D74
		mov    (%edi),%al
		xor    %edx,%edx
		mov    %al,(%ebx)
		mov    (%edi),%dx
		mov    %edx,%eax
		shl    $0x4,%eax
		mov    $EXPORT_SYMBOL(level__CPObjectives),%edi
		sub    %edx,%eax
		add    %eax,%edi
		cmpb   $0x4,0x7(%edi)
		jne    jump_15e31
		push   %ebx
		call   CPSetupDoMissionObjective
		add    $0x4,%esp
		jmp    jump_15e3b
	jump_15e31:
		push   %edi
		push   %ebx
		call   CPSetupNewObjective
		add    $0x8,%esp
	jump_15e3b:
		mov    0x8(%esp),%eax
		push   %eax
		xor    %eax,%eax
		push   %ebx
		mov    0x34(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		push   %eax
		push   %edi
		push   %esi
		call   CPDoObjectiveStep
		add    $0x18,%esp
		jmp    def_15D74
	jump_15e5e:
		mov    0x7(%edi),%al
		sub    $0x3,%al
		cmp    $0x7,%al
		ja     def_15E6C
		and    $0xff,%eax
		jmp    *%cs:jpt_15E6C(,%eax,4)


/*----------------------------------------------------------------*/
func_15e74:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebp
		push   %ebp
		xor    %eax,%eax
		push   %ebx
		mov    0x34(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		push   %eax
		push   %edi
		push   %esi
		call   CPDoObjectiveStep
		add    $0x18,%esp
	def_15E6C:	/* 0x15e92 */
		xor    %eax,%eax
		push   %esi
		mov    0x34(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x34(%esp),%al
		push   %eax
		push   %ebx
		push   %edi
		call   CPCompletedObjectiveStep
		add    $0x14,%esp
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_15eb0:
/*----------------------------------------------------------------*/
		mov    0x30(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		movb   $0x10,0xd(%esi)
		call   process_action
		add    $0x4,%esp
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_15ecd:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x30(%esp),%al
		push   %eax
		push   %ebx
		push   %ebp
		push   %esi
		call   CPTargetAlive
		add    $0x10,%esp
		test   %al,%al
		je     def_15D74
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x19(%edx),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    $0xa,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		cwtl
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%esi
		push   %esi
		call   cp_i_can_see_and_shoot_person
		add    $0xc,%esp
		cmp    %ebp,%eax
		sete   %al
		and    $0xff,%eax
		add    $0x9,%eax
		mov    %al,0x3(%ebx)
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_15f33:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x30(%esp),%al
		push   %eax
		push   %ebx
		push   %ebp
		push   %esi
		mov    %eax,0x20(%esp)
		call   CPTargetAlive
		add    $0x10,%esp
		test   %al,%al
		je     def_15D74
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x19(%edx),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    $0xa,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		cwtl
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%ecx
		push   %ecx
		call   cp_i_can_see_and_shoot_person
		mov    %eax,0xc(%esp)
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1600c
		cmp    %eax,%ebp
		jne    jump_15fd8
		mov    0x10(%esp),%ecx
		push   %ecx
		push   %eax
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     jump_15fc4
		push   %ebx
		mov    0x14(%esp),%eax
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%edx
		push   %edx
		push   %esi
		call   CPShootPerson
		add    $0x14,%esp
		jmp    def_15D74
	jump_15fc4:
		mov    0x10(%esp),%ebp
		push   %ebp
		push   %esi
		push   %ebx
		call   CPGotoOldStateAndRelax
		add    $0xc,%esp
		jmp    def_15D74
	jump_15fd8:
		mov    0x10(%esp),%edx
		push   %edx
		push   %eax
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     def_15D74
		push   %ebx
		mov    0x14(%esp),%ebp
		push   %ebp
		mov    0x8(%esp),%eax
		push   %eax
		mov    0xc(%ebx),%edx
		push   %edx
		push   %esi
		call   CPShootPerson
		add    $0x14,%esp
		jmp    def_15D74
	jump_1600c:
		mov    0x10(%esp),%edx
		push   %edx
		push   %ebp
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     jump_16028
		movb   $0x9,0x3(%ebx)
		jmp    def_15D74
	jump_16028:
		mov    0x10(%esp),%ecx
		push   %ecx
		push   %esi
		push   %ebx
		call   CPGotoOldStateAndRelax
		add    $0xc,%esp
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_1603c:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x30(%esp),%al
		push   %eax
		push   %ebx
		push   %ebp
		push   %esi
		mov    %eax,0x1c(%esp)
		call   CPTargetAlive
		add    $0x10,%esp
		test   %al,%al
		je     def_15D74
		mov    0xc(%esp),%eax
		push   %eax
		push   %ebp
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     jump_16154
		mov    0x8(%esp),%eax
		xor    %edx,%edx
		mov    0x19(%eax),%dl
		add    %edx,%edx
		mov    data_5a6c2(%edx),%dx
		and    $0xffff,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    $0xa,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		cwtl
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%ecx
		push   %ecx
		call   cp_i_can_see_and_shoot_person
		mov    %eax,0x10(%esp)
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_16106
		cmp    %eax,%ebp
		jne    jump_160d2
		push   %ebx
		mov    0x10(%esp),%eax
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%edx
		push   %edx
		push   %esi
		call   CPShootPerson
		add    $0x14,%esp
		jmp    def_15D74
	jump_160d2:
		mov    0xc(%esp),%ecx
		push   %ecx
		push   %eax
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     def_15D74
		push   %ebx
		mov    0x10(%esp),%eax
		push   %eax
		mov    0xc(%esp),%edx
		push   %edx
		mov    0xc(%ebx),%ecx
		push   %ecx
		push   %esi
		call   CPShootPerson
		add    $0x14,%esp
		jmp    def_15D74
	jump_16106:
		cmpb   $0x0,0x5(%ebx)
		jne    def_15D74
		movb   $0x1,0x5(%ebx)
		mov    0x30(%esp),%al
		movb   $0x14,0xd(%esi)
		xor    %ah,%ah
		movw   $0xff,(%esi)
		movzwl %ax,%ebp
		movw   $0x7f,0x2(%esi)
		push   %ebp
		movw   $0x7f,0x4(%esi)
		call   process_action
		movb   $0x4,0xd(%esi)
		add    $0x4,%esp
		mov    0xa(%ebx),%ax
		push   %ebp
		mov    %ax,(%esi)
		call   process_action
		add    $0x4,%esp
		jmp    def_15D74
	jump_16154:
		mov    0xc(%esp),%edx
		push   %edx
		push   %esi
		push   %ebx
		call   CPGotoOldStateAndRelax
		add    $0xc,%esp
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_16168:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ecx
		push   %ecx
		xor    %eax,%eax
		push   %ebx
		mov    0x34(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		push   %eax
		push   %edi
		push   %esi
		call   CPDoObjectiveStep
		add    $0x18,%esp
		movb   $0x2,0x3(%ebx)
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_1618f:
/*----------------------------------------------------------------*/
		mov    0xc(%ebx),%eax
		cmpb   $0x0,0x19(%eax)
		je     def_15D74
		mov    0x30(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		movb   $0x18,0xd(%esi)
		call   process_action
		movb   $0xff,(%ebx)
		movb   $0x0,0x2(%ebx)
		movb   $0x0,0x5(%ebx)
		movb   $0x0,0x6(%ebx)
		movw   $0x0,0xa(%ebx)
		add    $0x4,%esp
		movl   $0x0,0x10(%ebx)
		jmp    def_15D74


/*----------------------------------------------------------------*/
func_161d2:
/*----------------------------------------------------------------*/
		mov    0xc(%ebx),%eax
		mov    0x19(%eax),%dl
		cmp    $0x16,%dl
		je     def_15D74
		cmp    $0x12,%dl
		je     def_15D74
		mov    0x8(%ebx),%cl
		dec    %cl
		mov    %cl,0x8(%ebx)
		jne    def_15D74
		mov    0x9(%ebx),%al
		mov    %al,0x3(%ebx)
		cmp    $0x6,%al
		je     def_15D74
		cmp    $0x9,%al
		je     def_15D74
		cmp    $0xa,%al
		je     def_15D74
		movb   $0x6,0x3(%ebx)
		mov    %al,0x4(%ebx)
		mov    %cl,0x5(%ebx)
	def_15D74:	/* 0x16208 */
		mov    0xc(%ebx),%eax
		cmpb   $0x0,0x19(%eax)
		jne    jump_16250
		cmpb   $0xff,(%ebx)
		je     jump_16250
		cmpb   $0x1,0x7(%edi)
		jne    jump_16250
		cmpb   $0x3,0x8(%edi)
		jne    jump_16250
		xor    %esi,%esi
		movswl 0x4(%eax),%edx
		mov    0x9(%edi),%si
		cmp    %esi,%edx
		jne    jump_1624c
		xor    %esi,%edx
		movswl 0x6(%eax),%ecx
		mov    0xb(%edi),%dx
		cmp    %edx,%ecx
		jne    jump_1624c
		movswl 0x8(%eax),%edx
		xor    %eax,%eax
		mov    0xd(%edi),%ax
		cmp    %eax,%edx
		je     jump_16250
	jump_1624c:
		movb   $0x8,0x3(%ebx)
	jump_16250:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPShouldIShootMyTarget:	/* 0x16260 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x4,%esp
		mov    0xc(%esp),%ebx
		mov    0x10(%esp),%edx
		xor    %ah,%ah
		mov    0x1c(%edx),%cl
		mov    %ah,(%esp)
		test   $0x4,%cl
		je     jump_16288
		testb  $0x1,0x1(%ebx)
		je     jump_16347
		jmp    jump_16343
	jump_16288:
		test   $0x2,%cl
		je     jump_1630a
		sub    $level__People,%edx
		mov    $0x5c,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%ecx
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		testb  $0x2,data_5e4aa(%eax)
		je     jump_162f8
		xor    %eax,%eax
		mov    0x14(%esp),%al
		cmp    %eax,%ecx
		jne    jump_162e6
		xor    %al,%al
		mov    %al,(%esp)
		jmp    jump_16347
	jump_162e6:
		testb  $0x4,0x1(%ebx)
		je     jump_16347
		movb   $0x1,(%esp)
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebx
		ret
	jump_162f8:
		testb  $0x2,0x1(%ebx)
		je     jump_16347
		movb   $0x1,(%esp)
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebx
		ret
	jump_1630a:
		test   $0x1,%cl
		je     jump_16321
		testb  $0x10,0x1(%ebx)
		je     jump_16347
		movb   $0x1,(%esp)
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebx
		ret
	jump_16321:
		test   $0x8,%cl
		je     jump_16338
		testb  $0x20,0x1(%ebx)
		je     jump_16347
		movb   $0x1,(%esp)
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebx
		ret
	jump_16338:
		test   $0x10,%cl
		je     jump_16343
		testb  $0x40,0x1(%ebx)
		je     jump_16347
	jump_16343:
		movb   $0x1,(%esp)
	jump_16347:
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPTargetAlive:	/* 0x16350 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0xc(%esp),%eax
		mov    $0x1,%bl
		test   %bl,0xb(%eax)
		je     jump_16377
		xor    %eax,%eax
		mov    0x14(%esp),%al
		push   %eax
		mov    0xc(%esp),%edx
		push   %edx
		mov    0x18(%esp),%ecx
		push   %ecx
		xor    %bl,%bl
		call   CPGotoOldStateAndRelax
		add    $0xc,%esp
	jump_16377:
		mov    %bl,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPGotoOldStateAndRelax:	/* 0x16380 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%esi
		movw   $0x0,0xa(%ebx)
		movb   $0x0,0x2(%ebx)
		mov    0x4(%ebx),%al
		movb   $0x0,0x5(%ebx)
		mov    %al,0x3(%ebx)
		movb   $0x14,0xd(%esi)
		movzbw 0x18(%esp),%di
		movw   $0x7f,(%esi)
		and    $0xffff,%edi
		movw   $0x7f,0x2(%esi)
		push   %edi
		movw   $0x7f,0x4(%esi)
		call   process_action
		add    $0x4,%esp
		push   %edi
		movb   $0xb,0xd(%esi)
		call   process_action
		mov    0x3(%ebx),%ah
		add    $0x4,%esp
		cmp    $0x2,%ah
		jne    jump_163e2
		movb   $0x8,0x3(%ebx)
	jump_163e2:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPShootPerson:	/* 0x163f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x18(%esp),%edi
		mov    0x20(%esp),%esi
		movb   $0x0,0x5(%esi)
		mov    0x14(%esp),%esi
		movb   $0x7,0xd(%ebx)
		mov    0x1c(%esp),%al
		mov    0x3a(%esi),%si
		xor    %ah,%ah
		mov    %si,(%ebx)
		xor    %esi,%esi
		mov    %ax,%si
		push   %esi
		call   process_action
		movb   $0x14,0xd(%ebx)
		movw   $0x7f,(%ebx)
		add    $0x4,%esp
		movw   $0x7f,0x2(%ebx)
		push   %esi
		movw   $0xff,0x4(%ebx)
		call   process_action
		movb   $0x8,0xd(%ebx)
		mov    0x4(%edi),%ax
		mov    %ax,(%ebx)
		mov    0x6(%edi),%ax
		mov    %ax,0x2(%ebx)
		mov    0x8(%edi),%di
		add    $0x4,%esp
		add    $0x80,%edi
		push   %esi
		mov    %di,0x4(%ebx)
		call   process_action
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPPersuadePerson:	/* 0x16480 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		mov    0x14(%esp),%eax
		movb   $0x0,0x5(%eax)
		movb   $0x7,0xd(%edx)
		mov    0xc(%eax),%eax
		mov    0x3a(%eax),%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x1,0x19(%eax)
		je     jump_164c4
	jump_164a7:
		cmpw   $0x0,0x1c(%eax)
		je     jump_164c4
		cmpb   $0x1,0x19(%eax)
		je     jump_164c4
		mov    0x1c(%eax),%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
		jmp    jump_164a7
	jump_164c4:
		sub    $level__things_base,%eax
		mov    %ax,(%edx)
		mov    0x10(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   process_action
		add    $0x4,%esp
		ret

vtable_164e4:
		.long   func_16612
		.long   func_1667a
		.long   func_166bf
		.long   func_168aa
		.long   func_168be
		.long   func_168c7
		.long   func_166f0
		.long   func_16709
		.long   func_1681a
jpt_166E8:	/* 0x16508 */
		.long   jump_1691e
		.long   func_16709
		.long   func_166f0
		.long   jump_1691e
		.long   jump_1691e
		.long   func_16722
		.long   jump_1691e
		.long   jump_1691e
		.long   jump_1691e
		.long   jump_1691e
		.long   jump_1691e
		.long   jump_1691e
		.long   jump_1691e
		.long   jump_1691e
		.long   func_1681a
		.long   jump_1691e


/*----------------------------------------------------------------*/
CPDoObjectiveStep:	/* 0x16550 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%esi
		mov    0x18(%esp),%edx
		mov    0x20(%esp),%al
		mov    0x24(%esp),%ebx
		mov    0x28(%esp),%ecx
		mov    0x7(%edx),%ah
		cmp    $0x1,%ah
		jne    jump_165f9
		mov    0x8(%edx),%ah
		cmp    $0xc,%ah
		je     jump_16586
		cmp    $0xd,%ah
		je     jump_16586
		cmp    $0xe,%ah
		jne    jump_1658c
	jump_16586:
		xor    %ah,%ah
		mov    %ax,0x9(%edx)
	jump_1658c:
		cmpb   $0x9,0x8(%edx)
		jne    jump_165bf
		xor    %eax,%eax
		mov    0x9(%edx),%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		je     jump_165bf
		movb   $0x3,0x8(%edx)
		mov    0x4(%eax),%cx
		mov    %cx,0x9(%edx)
		mov    0x6(%eax),%cx
		mov    %cx,0xb(%edx)
		mov    0x8(%eax),%ax
		mov    %ax,0xd(%edx)
	jump_165bf:
		mov    0x8(%edx),%al
		mov    %al,0xd(%esi)
		mov    0x9(%edx),%ax
		mov    %ax,(%esi)
		mov    0xb(%edx),%ax
		mov    %ax,0x2(%esi)
		mov    0xd(%edx),%ax
		mov    %ax,0x4(%esi)
		mov    0x1c(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   process_action
		add    $0x4,%esp
		movb   $0x2,0x3(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_165f9:
		mov    %ah,%al
		sub    $0x2,%al
		cmp    $0x8,%al
		ja     jump_1691e
		and    $0xff,%eax
		jmp    *%cs:vtable_164e4(,%eax,4)


/*----------------------------------------------------------------*/
func_16612:
/*----------------------------------------------------------------*/
		mov    0xc(%ebx),%eax
		mov    0x3a(%eax),%ax
		mov    $level__things_base,%edx
		and    $0xffff,%eax
		add    %edx,%eax
		mov    0x19(%eax),%ch
		xor    %cl,%cl
		cmp    $0xc,%ch
		je     jump_16655
	jump_1662f:
		mov    0x1c(%eax),%dx
		test   %dx,%dx
		je     jump_1664d
		mov    %dx,%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0xc,0x19(%eax)
		jne    jump_1662f
		jmp    jump_16655
	jump_1664d:
		test   %cl,%cl
		je     jump_1691e
	jump_16655:
		sub    $level__things_base,%eax
		mov    %ax,(%esi)
		mov    0x1c(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		movb   $0xa,0xd(%esi)
		call   process_action
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1667a:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x10(%ebx)
		je     jump_16698
		xor    %eax,%eax
		push   %eax
		push   %ecx
		mov    0x24(%esp),%al
		push   %eax
		push   %esi
		push   %ebx
		call   CPFollowAndAttackTarget
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_16698:
		cmpb   $0xff,0x6(%ebx)
		jne    jump_166a4
		mov    0x9(%edx),%al
		mov    %al,0x6(%ebx)
	jump_166a4:
		mov    0x6(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   weakest_player
		add    $0x4,%esp
		mov    %eax,0x10(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_166bf:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    data_9be3e(%eax),%dx
		cmp    $0x10,%dx
		ja     jump_1691e
		mov    %dx,%ax
		and    $0xffff,%eax
		jmp    *%cs:jpt_166E8(,%eax,4)


/*----------------------------------------------------------------*/
func_166f0:
/*----------------------------------------------------------------*/
		push   $0x0
		xor    %eax,%eax
		push   %ecx
		mov    0x24(%esp),%al
		push   %eax
		push   %esi
		push   %ebx
		call   CPFollowAndAttackTarget
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_16709:
/*----------------------------------------------------------------*/
		push   $0x1
		xor    %eax,%eax
		push   %ecx
		mov    0x24(%esp),%al
		push   %eax
		push   %esi
		push   %ebx
		call   CPFollowAndAttackTarget
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_16722:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x5(%ebx)
		jne    jump_16772
		mov    0x1c(%esp),%al
		movb   $0x14,0xd(%esi)
		xor    %ah,%ah
		xor    %edi,%edi
		movw   $0xff,(%esi)
		mov    %ax,%di
		movw   $0x7f,0x2(%esi)
		push   %edi
		movw   $0x7f,0x4(%esi)
		call   process_action
		movb   $0x5,0xd(%esi)
		mov    0x10(%ebx),%eax
		add    $0x4,%esp
		sub    $level__things_base,%eax
		push   %edi
		mov    %ax,(%esi)
		call   process_action
		add    $0x4,%esp
		movb   $0x1,0x5(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_16772:
		mov    0x10(%ebx),%eax
		mov    0x20(%eax),%di
		test   %di,%di
		je     jump_1691e
		xor    %eax,%eax
		mov    0x19(%ecx),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    $0xa,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		cwtl
		movzwl %di,%ebp
		push   %eax
		add    $level__things_base,%ebp
		push   %ebp
		mov    0xc(%ebx),%ecx
		push   %ecx
		call   cp_i_can_see_and_shoot_person
		mov    %eax,%edi
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_16804
		cmp    %eax,%ebp
		jne    jump_167d7
		xor    %eax,%eax
		push   %ebx
		mov    0x20(%esp),%al
		push   %eax
		push   %edi
		mov    0xc(%ebx),%ebp
		push   %ebp
		jmp    jump_167f2
	jump_167d7:
		movzbl 0x1c(%esp),%ebp
		push   %ebp
		push   %eax
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     jump_167fb
		push   %ebx
		push   %ebp
		push   %edi
		mov    0xc(%ebx),%edi
		push   %edi
	jump_167f2:
		push   %esi
		call   CPShootPerson
		add    $0x14,%esp
	jump_167fb:
		movb   $0x1,0x5(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_16804:
		mov    0xc(%ebx),%eax
		mov    0x19(%eax),%dl
		test   %dl,%dl
		jne    jump_1691e
		mov    %dl,0x5(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1681a:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   %ecx
		mov    0x20(%esp),%al
		push   %eax
		push   %esi
		push   %ebx
		call   CPDestroyVehicle
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_16831:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x5(%ebx)
		jne    jump_1691e
		movb   $0x3,0xd(%esi)
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    data_9be42(,%eax,2),%ax
		xor    %edx,%edx
		mov    %ax,(%esi)
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    data_9be44(,%eax,2),%ax
		xor    %edx,%edx
		mov    %ax,0x2(%esi)
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    data_9be46(%eax),%ax
		mov    %ax,0x4(%esi)
		mov    0x1c(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   process_action
		add    $0x4,%esp
		movb   $0x1,0x5(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_168aa:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x7(%ebx),%al
		mov    0x9(%edx),%dl
		mov    %dl,data_5c358(,%eax,2)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_168be:
/*----------------------------------------------------------------*/
		movb   $0x4,0x3(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_168c7:
/*----------------------------------------------------------------*/
		mov    0x6(%ebx),%dl
		cmp    $0x64,%dl
		ja     jump_168d6
		mov    %dl,%dh
		dec    %dh
		mov    %dh,0x6(%ebx)
	jump_168d6:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%ax
		push   %eax
		mov    0xc(%ebx),%edx
		push   %edx
		call   closest_player
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_1691e
		mov    0xc(%ebx),%edx
		mov    0x6(%eax),%cx
		mov    0x6(%edx),%si
		mov    0x4(%eax),%ax
		sub    %esi,%ecx
		mov    0x4(%edx),%di
		movswl %cx,%ecx
		sub    %edi,%eax
		push   %ecx
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cmp    $0xf00,%ax
		jae    jump_1691e
		movb   $0x0,0x6(%ebx)
	jump_1691e:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPDestroyVehicle:	/* 0x16930 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		mov    0x14(%esp),%ebx
		cmpb   $0x0,0x5(%esi)
		jne    jump_1696c
		movb   $0x4,0xd(%ebx)
		mov    0x10(%esi),%eax
		sub    $level__things_base,%eax
		mov    %ax,(%ebx)
		mov    0x18(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   process_action
		add    $0x4,%esp
		movb   $0x1,0x5(%esi)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1696c:
		mov    0x1c(%esp),%edx
		xor    %eax,%eax
		mov    0x19(%edx),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    $0xa,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		cwtl
		push   %eax
		mov    0x10(%esi),%edx
		push   %edx
		mov    0xc(%esi),%ecx
		push   %ecx
		call   i_can_see_and_shoot_vehicle
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_16a31
		mov    0x18(%esp),%al
		xor    %ah,%ah
		xor    %edi,%edi
		mov    %ax,%di
		push   %edi
		movb   $0x18,0xd(%ebx)
		call   process_action
		movb   $0x7,0xd(%ebx)
		mov    0xc(%esi),%eax
		add    $0x4,%esp
		mov    0x3a(%eax),%ax
		push   %edi
		mov    %ax,(%ebx)
		call   process_action
		movb   $0x14,0xd(%ebx)
		movw   $0x7f,(%ebx)
		add    $0x4,%esp
		movw   $0x7f,0x2(%ebx)
		push   %edi
		movw   $0xff,0x4(%ebx)
		call   process_action
		movb   $0x8,0xd(%ebx)
		mov    0x10(%esi),%eax
		mov    0x4(%eax),%ax
		mov    %ax,(%ebx)
		mov    0x10(%esi),%eax
		mov    0x6(%eax),%ax
		mov    %ax,0x2(%ebx)
		mov    0x10(%esi),%eax
		mov    0x8(%eax),%ax
		add    $0x4,%esp
		add    $0x80,%eax
		push   %edi
		mov    %ax,0x4(%ebx)
		call   process_action
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_16a31:
		mov    0xc(%esi),%eax
		mov    0x19(%eax),%dl
		test   %dl,%dl
		jne    jump_16a3e
		mov    %dl,0x5(%esi)
	jump_16a3e:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_16a44:
		.long   func_16bef
		.long   func_16bae
		.long   func_16bf8
		.long   func_16bef
		.long   jump_16d16
		.long   func_16da1
		.long   func_16db4
		.long   func_16dc7
		.long   func_16e1c

vtable_16a68:
		.long   jump_16cd1
		.long   func_16c39
		.long   func_16c26
		.long   jump_16cd1
		.long   jump_16cd1
		.long   func_16c6a
		.long   jump_16cd1
		.long   jump_16cd1
		.long   jump_16cd1
		.long   jump_16cd1
		.long   jump_16cd1
		.long   jump_16cd1
		.long   jump_16cd1
		.long   jump_16cd1
		.long   func_16cc2
		.long   jump_16cd1
		.long   func_16c83


/*----------------------------------------------------------------*/
CPCompletedObjectiveStep:	/* 0x16ab0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x18(%esp),%ebx
		mov    0x1c(%esp),%esi
		mov    0x7(%ebx),%dl
		xor    %ah,%ah
		xor    %dh,%dh
		mov    %ah,(%esp)
		cmp    $0x1,%dl
		jne    jump_16b95
		mov    0x8(%ebx),%al
		cmp    $0x9,%al
		jb     jump_16b07
		jbe    jump_16b7c
		cmp    $0x14,%al
		jb     jump_16af6
		jbe    jump_16b73
		cmp    $0x19,%al
		je     jump_16b73
		jmp    jump_16d16
	jump_16af6:
		cmp    $0xb,%al
		jb     jump_16d16
		cmp    $0xe,%al
		jbe    jump_16b73
		jmp    jump_16d16
	jump_16b07:
		cmp    $0x3,%al
		jb     jump_16d16
		jbe    jump_16b1a
		cmp    $0x4,%al
		je     jump_16b30
		jmp    jump_16d16
	jump_16b1a:
		mov    0xc(%esi),%eax
		cmpb   $0x0,0x19(%eax)
		jne    jump_16d16
		movb   $0x1,(%esp)
		jmp    jump_16d20
	jump_16b30:
		xor    %eax,%eax
		mov    $level__things_base,%edx
		mov    0x9(%ebx),%ax
		add    %edx,%eax
		xor    %edx,%edx
		movswl 0x4(%eax),%ecx
		mov    0x9(%ebx),%dx
		cmp    %edx,%ecx
		jne    jump_16d16
		xor    %edx,%edx
		movswl 0x6(%eax),%ecx
		mov    0xb(%ebx),%dx
		cmp    %edx,%ecx
		jne    jump_16d16
		movswl 0x8(%eax),%edx
		xor    %eax,%eax
		mov    0xd(%ebx),%ax
		cmp    %eax,%edx
		jne    jump_16d16
	jump_16b73:
		movb   $0x1,(%esp)
		jmp    jump_16d20
	jump_16b7c:
		mov    0xc(%esi),%eax
		mov    0x9(%ebx),%di
		cmp    0x24(%eax),%di
		jne    jump_16d16
		mov    %dl,(%esp)
		jmp    jump_16d20
	jump_16b95:
		mov    %dl,%al
		sub    $0x2,%al
		cmp    $0x8,%al
		ja     jump_16d16
		and    $0xff,%eax
		jmp    *%cs:vtable_16a44(,%eax,4)


/*----------------------------------------------------------------*/
func_16bae:
/*----------------------------------------------------------------*/
		xor    %ecx,%ecx
		mov    0x6(%esi),%cl
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		shl    $0x5,%eax
		xor    %dl,%dl
		add    $level__People,%eax
	jump_16bcf:
		cmpb   $0x0,0x18(%eax)
		je     jump_16bdd
		testb  $0x1,0xb(%eax)
		jne    jump_16bdd
		inc    %dh
	jump_16bdd:
		inc    %dl
		add    $0x5c,%eax
		cmp    $0x8,%dl
		jb     jump_16bcf
		test   %dh,%dh
		jne    jump_16d16


/*----------------------------------------------------------------*/
func_16bef:
/*----------------------------------------------------------------*/
		movb   $0x1,(%esp)
		jmp    jump_16d20


/*----------------------------------------------------------------*/
func_16bf8:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x6(%esi),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    data_9be3e(%eax),%cx
		cmp    $0x10,%cx
		ja     jump_16cd1
		xor    %edx,%edx
		mov    %cx,%dx
		jmp    *%cs:vtable_16a68(,%edx,4)


/*----------------------------------------------------------------*/
func_16c26:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x10(%esi)
		jne    jump_16cd1
		movb   $0x1,(%esp)
		jmp    jump_16cdb


/*----------------------------------------------------------------*/
func_16c39:
/*----------------------------------------------------------------*/
		mov    0x10(%esi),%eax
		mov    0x20(%eax),%dx
		test   %dx,%dx
		je     jump_16cd1
		mov    %dx,%ax
		and    $0xffff,%eax
		mov    0xc(%esi),%ebp
		add    $level__things_base,%eax
		cmp    %ebp,%eax
		jne    jump_16cd1
		movb   $0x1,(%esp)
		jmp    jump_16cdb


/*----------------------------------------------------------------*/
func_16c6a:
/*----------------------------------------------------------------*/
		mov    0xc(%esi),%eax
		sub    $level__things_base,%eax
		mov    %eax,%edx
		mov    0x10(%esi),%eax
		cmp    0x20(%eax),%dx
		jne    jump_16cd1
		movb   $0x1,(%esp)
		jmp    jump_16cdb


/*----------------------------------------------------------------*/
func_16c83:
/*----------------------------------------------------------------*/
		xor    %ecx,%ecx
		mov    0xc(%esi),%edx
		mov    data_9be42(%eax),%cx
		movswl 0x4(%edx),%edi
		cmp    %ecx,%edi
		jne    jump_16cd1
		xor    %ecx,%ecx
		movswl 0x6(%edx),%edi
		mov    data_9be44(%eax),%cx
		cmp    %ecx,%edi
		jne    jump_16cd1
		mov    data_9be46(%eax),%ax
		movswl 0x8(%edx),%edx
		and    $0xffff,%eax
		cmp    %eax,%edx
		jne    jump_16cd1
		movb   $0x1,(%esp)
		jmp    jump_16cdb


/*----------------------------------------------------------------*/
func_16cc2:
/*----------------------------------------------------------------*/
		mov    0x10(%esi),%eax
		testb  $0x1,0xb(%eax)
		je     jump_16cd1
		movb   $0x1,(%esp)
		jmp    jump_16cdb
	jump_16cd1:
		cmpb   $0x0,(%esp)
		je     jump_16d16
	jump_16cdb:
		mov    0x6(%esi),%ch
		xor    %edx,%edx
		inc    %ch
		mov    %ch,%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    %ch,0x6(%esi)
		cmpw   $0x0,data_9be3e(,%eax,2)
		je     jump_16d0f
		xor    %ah,%ah
		push   %esi
		mov    %ah,0x4(%esp)
		call   CPSetupDoMissionObjective
		add    $0x4,%esp
		jmp    jump_16d96
	jump_16d0f:
		mov    %dl,%al
		dec    %al
		mov    %al,0x6(%esi)
	jump_16d16:
		cmpb   $0x0,(%esp)
		je     jump_16d96
	jump_16d20:
		mov    (%ebx),%ax
		test   %ax,%ax
		jne    jump_16d96
		movb   $0xff,(%esi)
		movb   $0x0,0x2(%esi)
		movb   $0x0,0x3(%esi)
		movb   $0x0,0x5(%esi)
		movb   $0x0,0x6(%esi)
		movl   $0x0,0x10(%esi)
		push   %ebx
		mov    %ax,0xa(%esi)
		call   CPGetFirstObjectiveInList
		orb    $0x10,0x6(%eax)
		add    $0x4,%esp
		mov    (%eax),%dx
		mov    %eax,%ebx
		test   %dx,%dx
		je     jump_16d7e
	jump_16d5d:
		mov    (%ebx),%bx
		and    $0xffff,%ebx
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		mov    $EXPORT_SYMBOL(level__CPObjectives),%ebx
		add    %eax,%ebx
		orb    $0x10,0x6(%ebx)
		cmpw   $0x0,(%ebx)
		jne    jump_16d5d
	jump_16d7e:
		xor    %eax,%eax
		mov    0x7(%esi),%al
		add    %eax,%eax
		cmpb   $0x0,data_5c358(%eax)
		je     jump_16d96
		xor    %bh,%bh
		mov    %bh,data_5c359(%eax)
	jump_16d96:
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_16da1:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x6(%esi)
		jne    jump_16d16
		movb   $0x1,(%esp)
		jmp    jump_16d20


/*----------------------------------------------------------------*/
func_16db4:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x10(%esi)
		jne    jump_16d16
		movb   $0x1,(%esp)
		jmp    jump_16d20


/*----------------------------------------------------------------*/
func_16dc7:
/*----------------------------------------------------------------*/
		mov    0x10(%esi),%eax
		mov    0x20(%eax),%dx
		test   %dx,%dx
		je     jump_16d16
		mov    %dx,%ax
		and    $0xffff,%eax
		mov    0xc(%esi),%edx
		add    $level__things_base,%eax
		cmp    %edx,%eax
		jne    jump_16d16
		mov    0x24(%esp),%al
		xor    %ah,%ah
		mov    0x28(%esp),%edx
		and    $0xffff,%eax
		movl   $0x0,0x10(%esi)
		push   %eax
		movb   $0xb,0xd(%edx)
		call   process_action
		mov    $0x1,%ch
		add    $0x4,%esp
		mov    %ch,(%esp)
		jmp    jump_16d20


/*----------------------------------------------------------------*/
func_16e1c:
/*----------------------------------------------------------------*/
		mov    0x10(%esi),%eax
		testb  $0x1,0xb(%eax)
		je     jump_16d16
		movb   $0x1,(%esp)
		jmp    jump_16d20


/*----------------------------------------------------------------*/
CPGetObjective:	/* 0x16e40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    0x1c(%esp),%esi
		mov    $0x1,%ah
		mov    %ah,0x4(%esp)
		mov    %ah,(%esp)
		xor    %eax,%eax
		mov    0x7(%esi),%al
		mov    $data_5c358,%edi
		add    %eax,%eax
		add    %eax,%edi
		mov    $EXPORT_SYMBOL(level__CPObjectives)+0x0f,%ebx
		xor    %dl,%dl
		mov    (%edi),%cl
		mov    %dl,0x8(%esp)
		test   %cl,%cl
		je     jump_16e9d
		mov    0x1(%edi),%ch
		test   %ch,%ch
		je     jump_16e9d
		xor    %eax,%eax
		mov    %ch,%al
		mov    %eax,%ebx
		shl    $0x4,%ebx
		mov    %ch,(%esp)
		sub    %eax,%ebx
		mov    $0x1,%al
		add    $EXPORT_SYMBOL(level__CPObjectives),%ebx
		mov    %ch,%ah
		mov    %al,0x8(%esp)
		add    %al,%ah
		add    $0xf,%ebx
	jump_16e9a:
		mov    %ah,(%esp)
	jump_16e9d:
		cmpb   $0x0,0x8(%esp)
		jne    jump_16f12
		mov    0x6(%ebx),%dh
		test   $0x10,%dh
		jne    jump_16ee3
		test   $0x40,%dh
		jne    jump_16ee3
		cmpw   $0x0,0x2(%ebx)
		jne    jump_16ee3
		push   %ebx
		push   %esi
		call   CPCanAgentDoMission
		add    $0x8,%esp
		test   %al,%al
		je     jump_16ee3
		cmpb   $0x0,0x4(%esp)
		je     jump_16ed7
		cmpb   $0x0,0x4(%ebx)
		je     jump_16ede
	jump_16ed7:
		cmpb   $0x0,0x4(%esp)
		jne    jump_16ee3
	jump_16ede:
		movb   $0x1,0x8(%esp)
	jump_16ee3:
		mov    (%esp),%cl
		mov    0x8(%esp),%ch
		inc    %cl
		add    $0xf,%ebx
		mov    %cl,(%esp)
		test   %ch,%ch
		jne    jump_16e9d
		cmp    $0x9c632,%ebx
		jne    jump_16e9d
		cmpb   $0x0,0x4(%esp)
		je     jump_16f12
		mov    $EXPORT_SYMBOL(level__CPObjectives)+0x0f,%ebx
		mov    $0x1,%ah
		mov    %ch,0x4(%esp)
		jmp    jump_16e9a
	jump_16f12:
		mov    0x8(%esp),%ah
		test   %ah,%ah
		jne    jump_16f6b
		movb   $0x1,0x3(%esi)
		movl   $0x0,0x10(%esi)
		mov    %ah,(%esi)
		mov    %ah,0x5(%esi)
		call   CPLivingHAgents
		test   %al,%al
		je     jump_16f39
		movb   $0xff,0x6(%esi)
		jmp    jump_16f9c
	jump_16f39:
		mov    $0x1,%bh
		mov    $0x3,%cl
		mov    %al,EXPORT_SYMBOL(level__CPObjectives)+0x06	/* level.CPObjectives[].Flags */
		xor    %esi,%esi
		mov    %bh,EXPORT_SYMBOL(level__CPObjectives)+0x07	/* level.CPObjectives[].ActionType */
		mov    %cl,EXPORT_SYMBOL(level__CPObjectives)+0x08	/* level.CPObjectives[].Action */
		mov    %si,EXPORT_SYMBOL(level__CPObjectives)+0x09
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    %bx,EXPORT_SYMBOL(level__CPObjectives)+0x0d
		mov    %cx,EXPORT_SYMBOL(level__CPObjectives)+0x0b
		jmp    jump_16f9c
	jump_16f6b:
		mov    (%esp),%al
		dec    %al
		mov    %al,(%esi)
		mov    -0xb(%ebx),%dl
		sub    $0xf,%ebx
		inc    %dl
		push   %ebx
		mov    %dl,0x4(%ebx)
		push   %esi
		movb   $0x1,0x3(%esi)
		call   CPSetupNewObjective
		mov    (%edi),%dh
		add    $0x8,%esp
		test   %dh,%dh
		je     jump_16f9c
		cmpb   $0x0,0x1(%edi)
		jne    jump_16f9c
		mov    (%esi),%al
		mov    %al,0x1(%edi)
	jump_16f9c:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPCanAgentDoMission:	/* 0x16fb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%edx
		mov    0xc(%esp),%eax
		cmpb   $0xff,0x5(%eax)
		je     jump_16fcb
		mov    0x7(%edx),%bl
		cmp    0x5(%eax),%bl
		je     jump_16fcb
		xor    %al,%al
		pop    %ebx
		ret
	jump_16fcb:
		cmpb   $0x3,0x7(%eax)
		jne    jump_16fe4
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    0x9(%eax),%cx
		mov    0x7(%edx),%bl
		cmp    %ebx,%ecx
		jne    jump_16fe4
		xor    %al,%al
		pop    %ebx
		ret
	jump_16fe4:
		testb  $0x8,0x6(%eax)
		je     jump_17001
		push   $0xc
		mov    0xc(%edx),%ebx
		push   %ebx
		call   person_has_weapon
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_17001
		xor    %al,%al
		pop    %ebx
		ret
	jump_17001:
		mov    $0x1,%al
		pop    %ebx
		ret

vtable_17008:
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   func_17125
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b

vtable_1704c:
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   func_17161
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b
		.long   jump_1717b

vtable_17090:
		.long   jump_171ed
		.long   func_171c7
		.long   func_171c7
		.long   jump_171ed
		.long   jump_171ed
		.long   func_171d7
		.long   jump_171ed
		.long   jump_171ed
		.long   jump_171ed
		.long   jump_171ed
		.long   jump_171ed
		.long   jump_171ed
		.long   jump_171ed
		.long   jump_171ed
		.long   func_171c7
		.long   func_171c7
		.long   jump_171ed


/*----------------------------------------------------------------*/
CPSetupDoMissionObjective:	/* 0x170e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x4,%esp
		mov    0x10(%esp),%ebx
		movb   $0x0,0x6(%ebx)
	jump_170ed:
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		cmpl   $0x0,level__Objectives(%eax)
		jne    jump_17141
		mov    $0x1,%dh
		mov    data_9be3e(%eax),%cx
		mov    %dh,(%esp)
		cmp    $0x10,%cx
		ja     jump_1717b
		xor    %edx,%edx
		mov    %cx,%dx
		jmp    *%cs:vtable_17008(,%edx,4)


/*----------------------------------------------------------------*/
func_17125:
/*----------------------------------------------------------------*/
		mov    data_9be40(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebx
		call   CPDoIOwnWeapon
		add    $0x8,%esp
		test   %al,%al
		je     jump_1717b
		jmp    jump_17181
	jump_17141:
		xor    %dl,%dl
		mov    %dl,(%esp)
		cmpw   $0x10,data_9be3e(%eax)
		ja     jump_1717b
		xor    %edx,%edx
		mov    data_9be3e(%eax),%dx
		jmp    *%cs:vtable_1704c(,%edx,4)


/*----------------------------------------------------------------*/
func_17161:
/*----------------------------------------------------------------*/
		mov    data_9be40(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebx
		call   CPDoIOwnWeapon
		add    $0x8,%esp
		test   %al,%al
		je     jump_17192
	jump_1717b:
		cmpb   $0x0,(%esp)
		jne    jump_17192
	jump_17181:
		mov    0x6(%ebx),%ch
		inc    %ch
		mov    %ch,0x6(%ebx)
		cmp    $0x8,%ch
		jb     jump_170ed
	jump_17192:
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		movb   $0x0,0x5(%ebx)
		add    %eax,%eax
		movl   $0x0,0x10(%ebx)
		mov    data_9be3e(%eax),%si
		cmp    $0x10,%si
		ja     jump_171ed
		xor    %edx,%edx
		mov    %si,%dx
		jmp    *%cs:vtable_17090(,%edx,4)


/*----------------------------------------------------------------*/
func_171c7:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax


/*----------------------------------------------------------------*/
func_171d7:
/*----------------------------------------------------------------*/
		mov    data_9be40(%eax),%ax
		mov    $level__things_base,%edx
		and    $0xffff,%eax
		add    %eax,%edx
		mov    %edx,0x10(%ebx)
	jump_171ed:
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPDoIOwnWeapon:	/* 0x17200 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0xc(%esp),%ebx
		mov    0x8(%esp),%eax
		mov    0xc(%eax),%eax
		mov    0x3a(%eax),%ax
		and    $0xffff,%eax
		xor    %cl,%cl
		jmp    jump_17221
	jump_17219:
		mov    %dx,%ax
		and    $0xffff,%eax
	jump_17221:
		add    $level__things_base,%eax
		mov    %eax,%edx
		sub    $level__things_base,%edx
		cmp    %bx,%dx
		jne    jump_17239
		mov    $0x1,%cl
		mov    %cl,%al
		pop    %ebx
		ret
	jump_17239:
		mov    0x1c(%eax),%dx
		test   %dx,%dx
		jne    jump_17219
		mov    %cl,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPGetFirstObjectiveInList:	/* 0x17250 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		cmpw   $0x0,0x2(%eax)
		je     jump_17274
	jump_1725b:
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(level__CPObjectives),%eax
		cmpw   $0x0,0x2(%eax)
		jne    jump_1725b
	jump_17274:
		ret

vtable_17278:
		.long   jump_172f9
		.long   jump_172f9
		.long   func_172c1
		.long   func_172da
		.long   jump_172f9
		.long   jump_172f9
		.long   func_172d2
		.long   func_172e5
		.long   func_172e5
		.long   func_172e5


/*----------------------------------------------------------------*/
CPSetupNewObjective:	/* 0x172a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%edx
		mov    0x7(%edx),%bl
		dec    %bl
		cmp    $0x9,%bl
		ja     jump_172f9
		and    $0xff,%ebx
		jmp    *%cs:vtable_17278(,%ebx,4)


/*----------------------------------------------------------------*/
func_172c1:
/*----------------------------------------------------------------*/
		movl   $0x0,0x10(%eax)
		movb   $0xff,0x6(%eax)
		movb   $0x0,0x5(%eax)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_172d2:
/*----------------------------------------------------------------*/
		mov    0x9(%edx),%dl
		mov    %dl,0x6(%eax)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_172da:
/*----------------------------------------------------------------*/
		push   %eax
		call   CPSetupDoMissionObjective
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_172e5:
/*----------------------------------------------------------------*/
		mov    0x9(%edx),%dx
		mov    $level__things_base,%ebx
		and    $0xffff,%edx
		add    %edx,%ebx
		mov    %ebx,0x10(%eax)
	jump_172f9:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CPFollowAndAttackTarget:	/* 0x17300 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%esi
		mov    0x10(%ebx),%ecx
		testb  $0x1,0xb(%ecx)
		je     jump_1735b
		movl   $0x0,0x10(%ebx)
		mov    0x1c(%esp),%al
		movb   $0x0,0x5(%ebx)
		xor    %ah,%ah
		xor    %ebx,%ebx
		mov    %ax,%bx
		push   %ebx
		movb   $0xb,0xd(%esi)
		call   process_action
		movb   $0x14,0xd(%esi)
		movw   $0x7f,(%esi)
		add    $0x4,%esp
		movw   $0x7f,0x2(%esi)
		push   %ebx
		movw   $0x7f,0x4(%esi)
		call   process_action
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1735b:
		cmpb   $0x0,0x5(%ebx)
		jne    jump_17407
		mov    0xc(%ebx),%eax
		mov    0x4(%ecx),%di
		cmp    0x4(%eax),%di
		jne    jump_173bd
		mov    0x6(%eax),%dx
		cmp    0x6(%ecx),%dx
		jne    jump_173bd
		mov    0x8(%eax),%ax
		cmp    0x8(%ecx),%ax
		jne    jump_173bd
		movb   $0x3,0xd(%esi)
		mov    0x10(%ebx),%eax
		mov    0x4(%eax),%ax
		add    $0x80,%eax
		mov    %ax,(%esi)
		mov    0x10(%ebx),%eax
		mov    0x6(%eax),%ax
		mov    %ax,0x2(%esi)
		mov    0x10(%ebx),%eax
		mov    0x8(%eax),%ax
		mov    %ax,0x4(%esi)
		mov    0x1c(%esp),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		jmp    jump_173f6
	jump_173bd:
		mov    0x1c(%esp),%al
		movb   $0x14,0xd(%esi)
		xor    %ah,%ah
		xor    %edi,%edi
		movw   $0xff,(%esi)
		mov    %ax,%di
		movw   $0x7f,0x2(%esi)
		push   %edi
		movw   $0x7f,0x4(%esi)
		call   process_action
		movb   $0x4,0xd(%esi)
		mov    0x10(%ebx),%eax
		add    $0x4,%esp
		sub    $level__things_base,%eax
		push   %edi
		mov    %ax,(%esi)
	jump_173f6:
		call   process_action
		add    $0x4,%esp
		movb   $0x1,0x5(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_17407:
		cmpb   $0x0,0x24(%esp)
		je     jump_1741a
		push   $0x100
		push   %ecx
		mov    0xc(%ebx),%ecx
		push   %ecx
		jmp    jump_1744e
	jump_1741a:
		mov    0x20(%esp),%eax
		xor    %edx,%edx
		mov    0x19(%eax),%dl
		add    %edx,%edx
		mov    data_5a6c2(%edx),%dx
		and    $0xffff,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    $0xa,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		cwtl
		push   %eax
		push   %ecx
		mov    0xc(%ebx),%edx
		push   %edx
	jump_1744e:
		call   cp_i_can_see_and_shoot_person
		add    $0xc,%esp
		mov    %eax,%edi
		test   %edi,%edi
		je     jump_174ef
		mov    0x10(%ebx),%ebp
		cmp    %ebp,%edi
		jne    jump_17492
		cmpb   $0x0,0x24(%esp)
		jne    jump_1747d
		xor    %eax,%eax
		push   %ebx
		mov    0x20(%esp),%al
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%ebp
		push   %ebp
		jmp    jump_174b4
	jump_1747d:
		xor    %eax,%eax
		push   %ebx
		mov    0x20(%esp),%al
		push   %eax
		push   %ebp
		mov    0xc(%ebx),%ecx
		push   %ecx
		push   %esi
		call   CPPersuadePerson
		jmp    jump_174ba
	jump_17492:
		cmpb   $0x0,0x24(%esp)
		jne    jump_174c1
		movzbl 0x1c(%esp),%ebp
		push   %ebp
		push   %edi
		push   %ebx
		call   CPShouldIShootMyTarget
		add    $0xc,%esp
		test   %al,%al
		je     jump_174c1
		push   %ebx
		push   %ebp
		push   %edi
		mov    0xc(%ebx),%eax
		push   %eax
	jump_174b4:
		push   %esi
		call   CPShootPerson
	jump_174ba:
		add    $0x14,%esp
		movb   $0x1,0x5(%ebx)
	jump_174c1:
		mov    0x1c(%esp),%al
		movb   $0x14,0xd(%esi)
		xor    %ah,%ah
		movw   $0xff,(%esi)
		and    $0xffff,%eax
		movw   $0x7f,0x2(%esi)
		push   %eax
		movw   $0x7f,0x4(%esi)
		call   process_action
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_174ef:
		mov    0xc(%ebx),%eax
		mov    0x19(%eax),%cl
		test   %cl,%cl
		jne    jump_174fc
		mov    %cl,0x5(%ebx)
	jump_174fc:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
getrdist:	/* 0x17510 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x8(%esp),%edx
		imul   %eax,%eax
		imul   %edx,%edx
		add    %edx,%eax
		push   %eax
		call   func_4fc4b
		add    $0x4,%esp
		ret


/*----------------------------------------------------------------*/
CPLivingHAgents:	/* 0x17580 */
/*----------------------------------------------------------------*/
		mov    $level__People,%eax
		mov    data_8811b,%dh
		xor    %dl,%dl
		test   $0x1,%dh
		jne    jump_17595
	jump_17592:
		mov    $0x1,%al
		ret
	jump_17595:
		inc    %dl
		add    $0x5c,%eax
		cmp    $0x4,%dl
		jae    jump_175a7
		testb  $0x1,0xb(%eax)
		je     jump_17592
		jmp    jump_17595
	jump_175a7:
		xor    %al,%al
		ret
jpt_17E75:	/* 0x175b0 */
		.long   func_17e7d
		.long   func_17f0d
		.long   func_18048
		.long   func_18084


/*----------------------------------------------------------------*/
configure_company:	/* 0x175c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xe4,%esp
		mov    EXPORT_SYMBOL(byte_60B4C),%al
		xor    %ah,%ah
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    %ah,0xe0(%esp)
		mov    %edx,0xb4(%esp)
		mov    %edx,0xbc(%esp)
		mov    %edx,0xb8(%esp)
		mov    %edx,0xc0(%esp)
		xor    %dh,%bh
		xor    %dl,%dl
		mov    $0x1,%dh
		mov    %dl,0xd0(%esp)
		mov    %dh,EXPORT_SYMBOL(byte_60B4C)
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %al,0xc4(%esp)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		push   $0x40
		lea    0x4(%esp),%edi
		mov    data_5e4ab(%eax),%al
		push   $0x202
		mov    %al,0xd0(%esp)
		lea    0x8(%esp),%eax
		mov    $aDataMconscrDat,%esi
		push   %eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		call   ac_dos_sopen
		mov    %eax,%esi
		add    $0xc,%esp
		test   %eax,%eax
		jbe    jump_17684
		push   $0xfa00
		mov    BScreen,%eax
		push   %eax
		push   %esi
		call   ac_read
		add    $0xc,%esp
		push   %esi
		call   ac_close
		add    $0x4,%esp
	jump_17684:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%eax),%dl
		mov    %dl,0xdc(%esp)
		mov    %dl,0xcc(%esp)
		mov    data_5e4ac(%eax),%dl
		add    $EXPORT_SYMBOL(players),%eax
		add    $0x11,%eax
		push   %eax
		push   $aS_1
		lea    0xa8(%esp),%eax
		push   %eax
		mov    %dl,0xe4(%esp)
		mov    %dl,0xe0(%esp)
		call   ac_sprintf
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		add    $0xc,%esp
		add    $0x11,%eax
		push   %eax
		push   $aS_1
		lea    0x94(%esp),%eax
		push   %eax
		call   ac_sprintf
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		add    $0xc,%esp
		add    $0x23,%eax
		push   %eax
		push   $aS_1
		lea    0x80(%esp),%eax
		push   %eax
		call   ac_sprintf
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		add    $0xc,%esp
		add    $0x23,%eax
		push   %eax
		push   $aS_1
		lea    0x6c(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		test   %bh,%bh
		jne    jump_181d1
	jump_177a9:
		call   LbCopyScreenFromBackMCGA
		call   DrawAcceptGadget
		call   DrawMenuGadget
		mov    m_logos,%edx
		push   %edx
		push   $0x20
		push   $0x20
		push   $0xb
		xor    %eax,%eax
		push   $0xe
		mov    0xe0(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0xec(%esp),%al
		push   %eax
		mov    0xfc(%esp),%bl
		call   draw_logo
		add    $0x1c,%esp
		cmpb   $0x0,0x78(%esp)
		je     jump_1781a
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		push   $0x10
		push   $0x5e
		push   $0x1c
		lea    0x9c(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		jmp    jump_1782f
	jump_1781a:
		push   $0x1e
		push   $0x6c
		push   $0xac
		push   $0x5a
		push   $0x1c
		call   func_187a0
		add    $0x14,%esp
	jump_1782f:
		cmpb   $0x0,0xa0(%esp)
		je     jump_17862
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x54
		push   $0x10
		push   $0x74
		push   $0x1c
		lea    0xc4(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		jmp    jump_1787a
	jump_17862:
		push   $0x1e
		push   $0x82
		push   $0xac
		push   $0x70
		push   $0x1c
		call   func_187a0
		add    $0x14,%esp
	jump_1787a:
		lea    0x78(%esp),%eax
		push   %eax
		lea    0xa4(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    0xe4(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0xe4(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0xf0(%esp),%al
		push   %eax
		call   draw_config_menu
		add    $0x14,%esp
		mov    0xe0(%esp),%al
		cmp    $0x2,%al
		jne    jump_17944
		push   $0xe
		xor    %eax,%eax
		push   $0xfffffffe
		mov    0xd8(%esp),%al
		push   %eax
		push   $0xf
		push   $0x1
		push   $0x166
		mov    m_sprites,%ebp
		push   %ebp
		lea    0xa8(%esp),%eax
		push   %eax
		lea    0xdc(%esp),%eax
		push   %eax
		lea    0xd8(%esp),%eax
		push   %eax
		push   $0x10
		push   $0x10
		push   $0x52
		push   $0x136
		mov    0xf4(%esp),%esi
		call   get_line
		add    $0x38,%esp
		cmp    $0x1,%si
		jne    jump_17acd
		cmpw   $0x0,0xbc(%esp)
		jne    jump_17acd
		lea    0x8c(%esp),%eax
		push   %eax
		lea    0xa4(%esp),%eax
		push   %eax
		xor    %bl,%bl
		call   ac_strcpy
		add    $0x8,%esp
		jmp    jump_17acd
	jump_17944:
		cmp    $0x3,%al
		jne    jump_179ce
		push   $0xe
		xor    %eax,%eax
		push   $0xfffffffe
		mov    0xd8(%esp),%al
		push   %eax
		push   $0xf
		push   $0x1
		push   $0x166
		mov    m_sprites,%edi
		push   %edi
		lea    0x80(%esp),%eax
		push   %eax
		lea    0xe0(%esp),%eax
		push   %eax
		lea    0xdc(%esp),%eax
		push   %eax
		push   $0x10
		push   $0x10
		push   $0x52
		push   $0x136
		mov    0xf8(%esp),%esi
		call   get_line
		add    $0x38,%esp
		cmp    $0x1,%si
		jne    jump_17acd
		cmpw   $0x0,0xc0(%esp)
		jne    jump_17acd
		lea    0x64(%esp),%eax
		push   %eax
		lea    0x7c(%esp),%eax
		push   %eax
		xor    %bl,%bl
		call   ac_strcpy
		add    $0x8,%esp
		jmp    jump_17acd
	jump_179ce:
		cmp    $0x1,%al
		jne    jump_17acd
		cmpw   $0x198,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_17a15
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_17a15
		cmpw   $0x38,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17a15
		cmpw   $0x4c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17a15
		mov    m_sprites,%eax
		add    $0x30,%eax
		push   %eax
		push   $0x38
		push   $0x198
		jmp    jump_17ac5
	jump_17a15:
		cmpw   $0x1b6,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_17a4f
		cmpw   $0x1d2,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_17a4f
		cmpw   $0x38,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17a4f
		cmpw   $0x4c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17a4f
		mov    m_sprites,%eax
		add    $0x36,%eax
		push   %eax
		push   $0x38
		jmp    jump_17ac0
	jump_17a4f:
		cmpw   $0x198,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_17a8b
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_17a8b
		cmpw   $0x5a,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17a8b
		cmpw   $0x6e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17a8b
		mov    m_sprites,%eax
		add    $0x30,%eax
		push   %eax
		push   $0x5a
		push   $0x198
		jmp    jump_17ac5
	jump_17a8b:
		cmpw   $0x1b6,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_17acd
		cmpw   $0x1d2,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_17acd
		cmpw   $0x5a,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17acd
		cmpw   $0x6e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17acd
		mov    m_sprites,%eax
		add    $0x36,%eax
		push   %eax
		push   $0x5a
	jump_17ac0:
		push   $0x1b6
	jump_17ac5:
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
	jump_17acd:
		cmpb   $0x0,0xe0(%esp)
		jne    jump_17c06
		cmpw   $0x144,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_17c06
		cmpw   $0x242,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_17c06
		cmpw   $0x40,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17b51
		cmpw   $0x56,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17b51
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x46
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16a
		mov    str(,%eax,4),%ebp
		push   %ebp
		call   new_show_text
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    $0x3c,%eax
		push   %eax
		push   $0x40
		jmp    jump_17bf9
	jump_17b51:
		cmpw   $0x58,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17ba6
		cmpw   $0x6e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17ba6
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x5e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16a
		mov    data_54750(,%eax,4),%esi
		push   %esi
		call   new_show_text
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    $0x3c,%eax
		push   %eax
		push   $0x58
		jmp    jump_17bf9
	jump_17ba6:
		cmpw   $0x70,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_17c06
		cmpw   $0x86,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_17c06
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x76
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16a
		mov    data_5475c(,%eax,4),%edx
		push   %edx
		call   new_show_text
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    $0x3c,%eax
		push   %eax
		push   $0x70
	jump_17bf9:
		push   $0x144
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
	jump_17c06:
		cmp    0xe0(%esp),%bl
		je     jump_17c16
		mov    %bl,0xe0(%esp)
	jump_17c16:
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		je     jump_17c63
		cmpb   $0x1,0xe0(%esp)
		jne    jump_17c63
		mov    0xd8(%esp),%al
		mov    %al,0xd4(%esp)
		mov    0xdc(%esp),%al
		xor    %ah,%ah
		mov    %al,0xcc(%esp)
		mov    %ah,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		mov    %ah,0xe0(%esp)
	jump_17c63:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_17c97
		cmpw   $0x2e,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_17c97
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_17c97
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_17c97
		cmpw   $0x172,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jb     jump_17ca4
	jump_17c97:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		je     jump_17e05
	jump_17ca4:
		cmpw   $0x0,0xc0(%esp)
		jne    jump_17df5
		cmpw   $0x0,0xbc(%esp)
		jne    jump_17df5
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    0xcc(%esp),%dl
		mov    %dl,data_5e4ab(%eax)
		mov    0xd4(%esp),%dl
		mov    %dl,data_5e4ac(%eax)
		lea    0x78(%esp),%edx
		add    $EXPORT_SYMBOL(players),%eax
		push   %edx
		add    $0x23,%eax
		push   %eax
		call   ac_strcpy
		lea    0xa8(%esp),%eax
		add    $0x8,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %eax
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		add    $0x11,%eax
		push   %eax
		call   ac_strcpy
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    $0x8,%esp
		sub    %edx,%eax
		mov    0xc8(%esp),%ch
		cmp    data_5e4ab(%eax),%ch
		je     jump_17df1
		xor    %cl,%cl
	jump_17d80:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%dx
		mov    %cl,%al
		cmp    %dx,%ax
		je     jump_17dea
		xor    %edx,%edx
		mov    %cl,%dl
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%ebx),%dl
		cmp    data_5e4ab(%eax),%dl
		jne    jump_17dea
		mov    0xc8(%esp),%al
		mov    %al,data_5e4ab(%ebx)
		jmp    jump_17df1
	jump_17dea:
		inc    %cl
		cmp    $0x8,%cl
		jb     jump_17d80
	jump_17df1:
		mov    $0x1,%bh
		jmp    jump_17dfd
	jump_17df5:
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
	jump_17dfd:
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
	jump_17e05:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_17e3a
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_17e3a
		cmpw   $0x256,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_17e3a
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_17e3a
		cmpw   $0x172,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jb     jump_17e43
	jump_17e3a:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_17e4c
	jump_17e43:
		mov    $0x1,%bh
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
	jump_17e4c:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_181c2
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    0xe0(%esp),%dl
		cmp    $0x3,%dl
		ja     def_17E75
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:jpt_17E75(,%eax,4)


/*----------------------------------------------------------------*/
func_17e7d:
/*----------------------------------------------------------------*/
		cmpw   $0x144,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    def_17E75
		cmpw   $0x242,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    def_17E75
		cmpw   $0x40,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_17eb6
		cmpw   $0x56,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_17eb6
		mov    $0x1,%dl
		jmp    def_17E75
	jump_17eb6:
		cmpw   $0x58,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_17edd
		cmpw   $0x6e,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_17edd
		mov    $0x1,%eax
		mov    $0x3,%dl
		mov    %eax,0xc0(%esp)
		jmp    def_17E75
	jump_17edd:
		cmpw   $0x70,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    def_17E75
		cmpw   $0x86,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    def_17E75
		mov    $0x1,%edi
		mov    $0x2,%dl
		mov    %edi,0xbc(%esp)
		jmp    def_17E75


/*----------------------------------------------------------------*/
func_17f0d:
/*----------------------------------------------------------------*/
		cmpw   $0x198,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jbe    jump_17f57
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_17f57
		cmpw   $0x38,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_17f57
		cmpw   $0x4c,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_17f57
		mov    0xdc(%esp),%bl
		test   %bl,%bl
		je     jump_17f4f
		mov    %bl,%ch
		dec    %ch
		mov    %ch,0xdc(%esp)
		jmp    jump_17f57
	jump_17f4f:
		movb   $0x7,0xdc(%esp)
	jump_17f57:
		cmpw   $0x1b6,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jbe    jump_17f9e
		cmpw   $0x1d2,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_17f9e
		cmpw   $0x38,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_17f9e
		cmpw   $0x4c,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_17f9e
		mov    0xdc(%esp),%al
		inc    %al
		mov    %al,0xdc(%esp)
		cmp    $0x7,%al
		jbe    jump_17f9e
		xor    %dh,%dh
		mov    %dh,0xdc(%esp)
	jump_17f9e:
		cmpw   $0x198,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jbe    jump_17fe8
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_17fe8
		cmpw   $0x5a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_17fe8
		cmpw   $0x6e,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_17fe8
		mov    0xd8(%esp),%bl
		test   %bl,%bl
		je     jump_17fe0
		mov    %bl,%ch
		dec    %ch
		mov    %ch,0xd8(%esp)
		jmp    jump_17fe8
	jump_17fe0:
		movb   $0x27,0xd8(%esp)
	jump_17fe8:
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    def_17E75
		cmpw   $0x1d2,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    def_17E75
		cmpw   $0x5a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    def_17E75
		cmpw   $0x6e,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    def_17E75
		mov    0xd8(%esp),%al
		inc    %al
		mov    %al,0xd8(%esp)
		cmp    $0x27,%al
		jbe    def_17E75
		xor    %dh,%dh
		mov    %dh,0xd8(%esp)
		jmp    def_17E75


/*----------------------------------------------------------------*/
func_18048:
/*----------------------------------------------------------------*/
		cmpw   $0x14c,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    def_17E75
		cmpw   $0x234,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    def_17E75
		cmpw   $0x4a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    def_17E75
		cmpw   $0xc4,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    def_17E75
		movl   $0x1,0xbc(%esp)
		jmp    def_17E75


/*----------------------------------------------------------------*/
func_18084:
/*----------------------------------------------------------------*/
		cmpw   $0x14c,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    def_17E75
		cmpw   $0x234,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    def_17E75
		cmpw   $0x4a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    def_17E75
		cmpw   $0xc4,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    def_17E75
		movl   $0x1,0xc0(%esp)
	def_17E75:	/* 0x180ba */
		mov    0xe0(%esp),%bl
		test   %bl,%bl
		je     jump_181bb
		cmpw   $0x122,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_18173
		cmpw   $0x1a2,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_18173
		cmpw   $0x78,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_18173
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_18173
		cmp    $0x2,%bl
		jb     jump_18112
		jbe    jump_18140
		cmp    $0x3,%bl
		je     jump_18135
		jmp    jump_18158
	jump_18112:
		cmp    $0x1,%bl
		jne    jump_18158
		mov    0xd8(%esp),%al
		mov    %al,0xd4(%esp)
		mov    0xdc(%esp),%al
		mov    %al,0xcc(%esp)
		jmp    jump_18158
	jump_18135:
		lea    0x64(%esp),%eax
		push   %eax
		lea    0x7c(%esp),%eax
		jmp    jump_1814f
	jump_18140:
		lea    0x8c(%esp),%eax
		push   %eax
		lea    0xa4(%esp),%eax
	jump_1814f:
		push   %eax
		call   ac_strcpy
		add    $0x8,%esp
	jump_18158:
		xor    %dl,%dl
		xor    %eax,%eax
		xor    %dh,%dh
		mov    %dl,0xe0(%esp)
		mov    %eax,0xc0(%esp)
		mov    %edx,0xbc(%esp)
	jump_18173:
		cmpw   $0x1da,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_181c2
		cmpw   $0x25a,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_181c2
		cmpw   $0x78,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_181c2
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_181c2
		xor    %dh,%dh
		xor    %dl,%dl
		xor    %ecx,%ecx
		mov    %dh,0xe0(%esp)
		mov    %edx,0xc0(%esp)
		mov    %ecx,0xbc(%esp)
		jmp    jump_181c2
	jump_181bb:
		mov    %dl,0xe0(%esp)
	jump_181c2:
		incb   0xd0(%esp)
		test   %bh,%bh
		je     jump_177a9
	jump_181d1:
		mov    0xc4(%esp),%al
		mov    $AniName,%edi
		mov    $aDataMconfoutDa,%esi
		xor    %bl,%bl
		mov    %al,EXPORT_SYMBOL(byte_60B4C)
		mov    $0x1,%eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %eax,EXPORT_SYMBOL(MouseSwap)
		push   $0x2
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		call   LbCopyScreenToBackMCGA
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(MouseSwap)
		call   cheat
		add    $0xe4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_18270:	/* 0x18238 */
		.long   func_18278
		.long   func_18394
		.long   func_184ba
		.long   func_184e8


/*----------------------------------------------------------------*/
draw_config_menu:	/* 0x18250 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		mov    0x14(%ebp),%bl
		push   $0x2
		call   draw_config_menu_box
		add    $0x4,%esp
		cmp    $0x3,%bl
		ja     def_18270
		xor    %eax,%eax
		mov    %bl,%al
		jmp    *%cs:jpt_18270(,%eax,4)


func_18278:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x22
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12c
		mov    data_54738(,%eax,4),%edi
		push   %edi
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x1ef
		push   $0x10
		xor    %eax,%eax
		push   $0x46
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16a
		mov    str(,%eax,4),%edx
		push   %edx
		call   new_show_text
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    $0x2a,%eax
		push   %eax
		push   $0x40
		push   $0x144
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x1ef
		push   $0x10
		xor    %eax,%eax
		push   $0x5e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16a
		mov    data_54750(,%eax,4),%esi
		push   %esi
		call   new_show_text
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    $0x2a,%eax
		push   %eax
		push   $0x58
		push   $0x144
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x1ef
		push   $0x10
		xor    %eax,%eax
		push   $0x76
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16a
		mov    data_5475c(,%eax,4),%edx
		push   %edx
		call   new_show_text
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    $0x2a,%eax
		push   %eax
		push   $0x70
		push   $0x144
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		jmp    def_18270


func_18394:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x22
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12e
		mov    data_54768(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x3c
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1dc
		mov    data_54774(,%eax,4),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x5e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1dc
		mov    data_54780(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		mov    m_logos,%ecx
		push   %ecx
		push   $0x20
		push   $0x20
		push   $0x1a
		xor    %eax,%eax
		push   $0xaa
		mov    0x1c(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x18(%ebp),%al
		push   %eax
		call   draw_logo
		mov    m_sprites,%eax
		add    $0x1c,%esp
		add    $0x1e,%eax
		push   %eax
		push   $0x38
		push   $0x198
		call   LbSpriteDrawMCGA
		mov    m_sprites,%eax
		add    $0xc,%esp
		add    $0x24,%eax
		push   %eax
		push   $0x38
		push   $0x1b6
		call   LbSpriteDrawMCGA
		mov    m_sprites,%eax
		add    $0xc,%esp
		add    $0x1e,%eax
		push   %eax
		push   $0x5a
		push   $0x198
		call   LbSpriteDrawMCGA
		mov    m_sprites,%eax
		add    $0xc,%esp
		add    $0x24,%eax
		push   %eax
		push   $0x5a
		push   $0x1b6
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		jmp    def_18270


func_184ba:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x22
		mov    EXPORT_SYMBOL(language),%al
		push   $0x158
		mov    data_54798(,%eax,4),%edi
		push   %edi
		jmp    jump_18514


func_184e8:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x22
		mov    EXPORT_SYMBOL(language),%al
		push   $0x142
		mov    a5(,%eax,4),%ecx
		push   %ecx
	jump_18514:
		call   new_show_text
		add    $0x28,%esp
		push   $0xea
		push   $0x62
		push   $0x24c
		push   $0x4a
		push   $0x130
		call   func_187a0
		add    $0x14,%esp
	def_18270:	/* 0x18537 */
		test   %bl,%bl
		je     jump_18649
		push   $0xea
		push   $0x90
		push   $0x1a2
		push   $0x78
		push   $0x122
		call   func_187a0
		add    $0x14,%esp
		push   $0xea
		push   $0x90
		push   $0x25a
		push   $0x78
		push   $0x1da
		call   func_187a0
		add    $0x14,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		push   $0xfffffffe
		cmp    $0x78,%dx
		jbe    jump_185b4
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_185b4
		cmpw   $0x122,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_185b4
		cmpw   $0x1a2,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_185b4
		mov    $0x166,%eax
		jmp    jump_185b9
	jump_185b4:
		mov    $0x1ef,%eax
	jump_185b9:
		and    $0xffff,%eax
		push   %eax
		push   $0x80
		xor    %eax,%eax
		push   $0x78
		mov    EXPORT_SYMBOL(language),%al
		push   $0x122
		mov    gui_strings_p261(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%di
		push   $0xfffffffe
		cmp    $0x78,%di
		jbe    jump_1861b
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_1861b
		cmpw   $0x1da,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_1861b
		cmpw   $0x25a,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_1861b
		mov    $0x166,%eax
		jmp    jump_18620
	jump_1861b:
		mov    $0x1ef,%eax
	jump_18620:
		and    $0xffff,%eax
		push   %eax
		push   $0x80
		xor    %eax,%eax
		push   $0x78
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1da
		mov    gui_strings_p264(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_18649:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
swap_screen:	/* 0x18650 */
/*----------------------------------------------------------------*/
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
		jmp    LbCopyScreenFromBackMCGA


/*----------------------------------------------------------------*/
draw_config_menu_box:	/* 0x18670 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%al
		cmp    $0x1,%al
		jb     jump_18688
		jbe    jump_18689
		cmp    $0x2,%al
		jne    jump_18688
		push   $0x58
		call   func_186c0
		add    $0x4,%esp
	jump_18688:
		ret
	jump_18689:
		call   LbCopyScreenFromBackMCGA
		push   $0x94
		call   func_186c0
		add    $0x4,%esp
		call   swap_screen
		push   $0x1e
		call   func_186c0
		add    $0x4,%esp
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
		ret


/*----------------------------------------------------------------*/
func_186c0:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x4(%esp),%al
		push   %eax
		push   $0x96
		push   $0x264
		push   $0x16
		push   $0x118
		call   func_187a0
		add    $0x14,%esp
		ret


/*----------------------------------------------------------------*/
draw_logo:	/* 0x186f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x18(%esp),%cl
		mov    0x24(%esp),%bh
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x28(%esp),%al
		mov    %bh,%dl
		imul   %edx,%eax
		xor    %edx,%edx
		mov    0x14(%esp),%dl
		imul   %eax,%edx
		add    0x2c(%esp),%edx
		xor    %esi,%esi
		and    $0xff,%ecx
		mov    0x20(%esp),%si
		xor    %bl,%bl
		lea    0x0(,%esi,4),%eax
		mov    %bl,(%esp)
		add    %eax,%esi
		xor    %eax,%eax
		shl    $0x6,%esi
		mov    0x1c(%esp),%ax
		mov    player_colour_for_map(%ecx),%cl
		add    %esi,%eax
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    0x28(%esp),%ch
		add    %esi,%eax
		test   %ch,%ch
		je     jump_1878b
	jump_18755:
		xor    %bl,%bl
		test   %bh,%bh
		je     jump_1876f
	jump_1875b:
		mov    (%edx),%ch
		test   %ch,%ch
		je     jump_18765
		mov    %cl,(%eax)
		jmp    jump_18767
	jump_18765:
		mov    %ch,(%eax)
	jump_18767:
		inc    %edx
		inc    %bl
		inc    %eax
		cmp    %bh,%bl
		jne    jump_1875b
	jump_1876f:
		mov    $0x140,%edi
		mov    (%esp),%bl
		mov    0x28(%esp),%ch
		movzbl %bh,%esi
		inc    %bl
		sub    %esi,%edi
		mov    %bl,(%esp)
		add    %edi,%eax
		cmp    %ch,%bl
		jne    jump_18755
	jump_1878b:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_187a0:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		movzbl 0x28(%esp),%esi
		push   %esi
		movswl 0x20(%esp),%edi
		push   %edi
		movswl 0x28(%esp),%ebx
		push   %ebx
		push   %edi
		movswl 0x28(%esp),%ebp
		push   %ebp
		mov    %ebp,0x14(%esp)
		call   func_1b3a0
		add    $0x14,%esp
		push   %esi
		movswl 0x28(%esp),%ebp
		push   %ebp
		push   %ebx
		push   %edi
		push   %ebx
		call   func_1b3a0
		add    $0x14,%esp
		push   %esi
		push   %ebp
		mov    0x8(%esp),%ecx
		push   %ecx
		push   %ebp
		push   %ebx
		call   func_1b3a0
		add    $0x14,%esp
		push   %esi
		push   %edi
		mov    0x8(%esp),%esi
		push   %esi
		push   %ebp
		push   %esi
		call   func_1b3a0
		add    $0x14,%esp
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_day:	/* 0x18810 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    game_speed,%edi
		mov    0x1c(%esp),%esi
		xor    %ah,%ah
		mov    %ah,(%esp)
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x3b
		je     jump_18846
	jump_1882f:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmpb   $0x1,EXPORT_SYMBOL(lbKeyOn)+0x3b
		je     jump_1882f
		mov    SoundActive,%al
		inc    %al
		and    $0x1,%al
		mov    %al,SoundActive
	jump_18846:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x3c
		je     jump_18866
	jump_1884f:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmpb   $0x1,EXPORT_SYMBOL(lbKeyOn)+0x3c
		je     jump_1884f
		mov    MusicActive,%al
		inc    %al
		and    $0x1,%al
		mov    %al,MusicActive
	jump_18866:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x3d	/* lbKeyOn[KC_F3] */
		je     jump_1887d
		test   %edi,%edi
		jbe    jump_1887d
	jump_18873:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmpb   $0x1,EXPORT_SYMBOL(lbKeyOn)+0x3d	/* lbKeyOn[KC_F3] */
		je     jump_18873
		dec    %edi
	jump_1887d:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x3e
		je     jump_18895
		cmp    $0xc,%edi
		jae    jump_18895
	jump_1888b:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmpb   $0x1,EXPORT_SYMBOL(lbKeyOn)+0x3e
		je     jump_1888b
		inc    %edi
	jump_18895:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x3f
		je     jump_188b5
	jump_1889e:
#if !defined(DOS) /* add input refresh, as otherwise this in infinite loop */
		call   ac_game_handle_sdl_events
#endif
		cmpb   $0x1,EXPORT_SYMBOL(lbKeyOn)+0x3f
		je     jump_1889e
		mov    ScannerPulse,%al
		inc    %al
		and    $0x1,%al
		mov    %al,ScannerPulse
	jump_188b5:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		jne    jump_18ad4
		cmp    $0x3,%edi
		jb     jump_188db
	jump_188c7:
		xor    %eax,%eax
		mov    data_60b50,%al
		cmp    %edi,%eax
		jae    jump_188db
		cmpb   $0x0,data_60b50
		jne    jump_188c7
	jump_188db:
		xor    %ah,%ah
		mov    %ah,data_60b50
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		mov    $0x18,%ebx
		lea    0x0(,%ecx,8),%ecx
		mov    %esi,%eax
		sub    %edx,%ecx
		xor    %edx,%edx
		div    %ebx
		mov    %eax,%ebx
		xor    %edx,%edx
		mov    data_5e4a0(%ecx),%eax
		div    %ebx
		mov    data_53ee8,%dl
		mov    %edi,game_speed
		cmp    %dl,%al
		je     jump_18948
		mov    EXPORT_SYMBOL(research),%dh
		mov    %al,data_53ee8
		test   %dh,%dh
		je     jump_1893e
		cmp    $0x3,%dh
		jne    jump_18948
	jump_1893e:
		call   DoResearch
		mov    %al,EXPORT_SYMBOL(research)
	jump_18948:
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    %eax,%ebx
		shl    $0x5,%ebx
		add    %eax,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %eax,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %eax,%ebx
		lea    -0x1(%esi),%eax
		mov    data_5e4a0(%ebx),%ebp
		mov    game_speed,%edi
		cmp    %ebp,%eax
		ja     jump_18a71
		mov    $0x1,%ch
		mov    data_5e4a4(%ebx),%dx
		sub    %eax,%ebp
		inc    %edx
		mov    %ebp,data_5e4a0(%ebx)
		mov    %ch,(%esp)
		mov    %dx,data_5e4a4(%ebx)
		cmp    $0x16d,%dx
		jbe    jump_189be
		mov    $0x1,%esi
		mov    data_5e4a6(%ebx),%ax
		add    %esi,%eax
		mov    %si,data_5e4a4(%ebx)
		mov    %ax,data_5e4a6(%ebx)
	jump_189be:
		xor    %al,%al
		mov    %al,0x4(%esp)
		mov    %edi,game_speed
		lea    0x0(%eax),%eax
	jump_189d0:
		xor    %ebx,%ebx
		mov    0x4(%esp),%bl
		push   %ebx
		call   AdjustStateHappiness
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%esi
		shl    $0x5,%esi
		add    %edx,%esi
		lea    0x0(,%esi,4),%esi
		sub    %edx,%esi
		add    $0x4,%esp
		lea    0x0(,%esi,8),%esi
		push   %ebx
		sub    %edx,%esi
		call   GetRevenueFromCity
		add    $0x4,%esp
		mov    EXPORT_SYMBOL(players)(%esi),%edx
		push   $0x3e8
		add    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		mov    %edx,EXPORT_SYMBOL(players)(%esi)
		add    %eax,%ebx
		call   random
		mov    $0x1f4,%edx
		add    %ebx,%ebx
		add    $0x4,%esp
		and    $0xffff,%eax
		mov    data_553a2(%ebx),%ecx
		sub    %eax,%edx
		mov    0x4(%esp),%ah
		add    %edx,%ecx
		inc    %ah
		mov    %ecx,data_553a2(%ebx)
		mov    %ah,0x4(%esp)
		cmp    $0x32,%ah
		jb     jump_189d0
		call   ComputerPlaysMap
		mov    (%esp),%al
		mov    game_speed,%edi
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_18a71:
		cmpb   $0x0,EXPORT_SYMBOL(cheats_speedup)
		je     jump_18aad
		mov    $0x60,%ecx
		mov    %esi,%eax
		xor    %edx,%edx
		div    %ecx
		mov    data_60b06,%esi
		add    %eax,%esi
		lea    (%eax,%ebp,1),%ecx
		mov    %esi,data_60b06
		mov    %ecx,data_5e4a0(%ebx)
		mov    (%esp),%al
		mov    game_speed,%edi
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_18aad:
		mov    data_60b06,%edx
		lea    0x1(%ebp),%eax
		inc    %edx
		mov    %eax,data_5e4a0(%ebx)
		mov    %edx,data_60b06
		mov    (%esp),%al
		mov    game_speed,%edi
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_18ad4:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		mov    data_5e4a0(%ebx),%edx
		cmp    %edx,%esi
		ja     jump_18b59
		movb   $0x1,(%esp)
		mov    %edx,%ecx
		mov    data_5e4a4(%ebx),%dx
		sub    %esi,%ecx
		inc    %edx
		mov    %ecx,data_5e4a0(%ebx)
		mov    %edi,game_speed
		mov    %dx,data_5e4a4(%ebx)
		cmp    $0x16d,%dx
		jbe    jump_18bbc
		mov    $0x1,%esi
		mov    data_5e4a6(%ebx),%ax
		add    %esi,%eax
		mov    %si,data_5e4a4(%ebx)
		mov    %ax,data_5e4a6(%ebx)
		mov    (%esp),%al
		mov    game_speed,%edi
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_18b59:
		cmpb   $0x0,EXPORT_SYMBOL(cheats_speedup)
		je     jump_18ba0
		mov    $0x60,%ecx
		mov    %esi,%eax
		xor    %edx,%edx
		div    %ecx
		mov    %edi,game_speed
		mov    data_5e4a0(%ebx),%ebp
		mov    data_60b06,%edx
		add    %eax,%ebp
		add    %eax,%edx
		mov    %ebp,data_5e4a0(%ebx)
		mov    %edx,data_60b06
		mov    (%esp),%al
		mov    game_speed,%edi
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_18ba0:
		mov    data_60b06,%esi
		lea    0x1(%edx),%ecx
		mov    %edi,game_speed
		inc    %esi
		mov    %ecx,data_5e4a0(%ebx)
		mov    %esi,data_60b06
	jump_18bbc:
		mov    (%esp),%al
		mov    game_speed,%edi
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AdjustStateHappiness:	/* 0x18bd0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(Network__Slot),%si
		mov    0x10(%esp),%ch
		xor    %edx,%edx
		mov    %ch,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_5539e(,%eax,2),%al
		xor    %ah,%ah
		cmp    %si,%ax
		jne    jump_18c58
		xor    %cl,%cl
	jump_18bfb:
		xor    %ebx,%ebx
		mov    %ch,%bl
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		xor    %eax,%eax
		lea    0x0(,%edx,4),%edx
		mov    %cl,%al
		sub    %ebx,%edx
		add    %edx,%eax
		cmpb   $0x0,data_5b069(%eax)
		je     jump_18c51
		xor    %edx,%edx
		mov    data_5b069(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_5539e(,%eax,2),%al
		xor    %ah,%ah
		cmp    %si,%ax
		je     jump_18c51
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		addw   $0x2,EXPORT_SYMBOL(country_states)(,%eax,2)
	jump_18c51:
		inc    %cl
		cmp    $0x8,%cl
		jne    jump_18bfb
	jump_18c58:
		xor    %eax,%eax
		mov    %ch,%al
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		add    %ebx,%ebx
		movsbl data_5539f(%ebx),%edx
		sub    $0x1e,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    %eax,%edx
		movswl EXPORT_SYMBOL(country_states)(%ebx),%eax
		add    %edx,%eax
		mov    %ax,EXPORT_SYMBOL(country_states)(%ebx)
		cmp    $0x1e,%ax
		jle    jump_18ca0
		mov    %eax,%edi
		sub    $0x2,%edi
		mov    %di,EXPORT_SYMBOL(country_states)(%ebx)
		jmp    jump_18cae
	jump_18ca0:
		jge    jump_18cae
		mov    %eax,%edx
		add    $0x2,%edx
		mov    %dx,EXPORT_SYMBOL(country_states)(%ebx)
	jump_18cae:
		xor    %edx,%edx
		mov    %ch,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    EXPORT_SYMBOL(country_states)(%eax),%dx
		test   %dx,%dx
		jge    jump_18cd4
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(country_states)(%eax)
		jmp    jump_18ce4
	jump_18cd4:
		cmp    $0xff,%dx
		jle    jump_18ce4
		movw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
	jump_18ce4:
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GetRevenueFromCity:	/* 0x18cf0 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %ebx,%ebx
		mov    0x8(%esp),%bl
		lea    0x0(,%ebx,4),%eax
		add    %eax,%ebx
		add    %ebx,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%cx
		mov    data_5539e(%ebx),%al
		xor    %edx,%edx
		cmp    %cx,%ax
		jne    jump_18d70
		xor    %ecx,%ecx
		mov    data_60b36,%cl
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		cmpw   $0xa0,EXPORT_SYMBOL(country_states)(,%eax,2)
		jge    jump_18d70
		mov    $0xf4240,%ecx
		mov    data_553a2(%ebx),%eax
		div    %ecx
		mov    %eax,%edx
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5539f(%ebx),%edx
		add    %eax,%eax
		imul   %edx,%eax
		mov    $0xa,%ecx
		xor    %edx,%edx
		div    %ecx
		mov    %eax,%edx
		mov    data_553a0(%ebx),%al
		mov    %al,data_5539f(%ebx)
	jump_18d70:
		mov    %edx,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ComputerPlaysMap:	/* 0x18d80 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x8,%esp
		xor    %ah,%ah
		mov    %ah,0x4(%esp)
	jump_18d8a:
		xor    %eax,%eax
		mov    0x4(%esp),%al
		movb   $0xff,next_mission_countries(%eax)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(Network__Slot),%bx
		mov    %al,%dl
		cmp    %bx,%dx
		je     jump_18e98
		push   %eax
		call   HowManyStatesDoIOwn
		add    $0x4,%esp
		cmp    $0x32,%al
		je     jump_18eaa
		test   %al,%al
		je     jump_18e98
		mov    %al,%dl
		cmp    $0x1,%al
		je     jump_18de0
		xor    %ah,%ah
		dec    %ax
		and    $0xffff,%eax
		push   %eax
		call   random
		mov    %al,%dl
		add    $0x4,%esp
		inc    %dl
	jump_18de0:
		xor    %eax,%eax
		mov    0x4(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    %dl,%al
		push   %eax
		call   GetNthOwnedState
		add    $0x8,%esp
		xor    %cl,%cl
		mov    0x4(%esp),%ch
		mov    %al,(%esp)
	jump_18dfd:
		xor    %edx,%edx
		mov    (%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %ebx,%ebx
		lea    0x0(,%eax,4),%eax
		mov    %cl,%bl
		sub    %edx,%eax
		add    %eax,%ebx
		cmpb   $0x0,data_5b069(%ebx)
		je     jump_18e8d
		xor    %edx,%edx
		mov    data_5b069(%ebx),%dl
		dec    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    data_5539e(%eax),%dl
		cmp    %ch,%dl
		je     jump_18e8d
		mov    EXPORT_SYMBOL(Network__Slot),%cx
		mov    %dl,%al
		xor    %ah,%ah
		cmp    %cx,%ax
		je     jump_18e98
		push   $0x64
		call   random
		add    $0x4,%esp
		cmp    $0x32,%ax
		jae    jump_18e98
		xor    %edx,%edx
		mov    data_5b069(%ebx),%dl
		dec    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x4(%esp),%dl
		mov    %dl,data_5539e(,%eax,2)
		xor    %eax,%eax
		mov    %dl,%al
		mov    (%esp),%dl
		mov    %dl,next_mission_countries(%eax)
		jmp    jump_18e98
	jump_18e8d:
		inc    %cl
		cmp    $0x8,%cl
		jb     jump_18dfd
	jump_18e98:
		mov    0x4(%esp),%al
		inc    %al
		mov    %al,0x4(%esp)
		cmp    $0x8,%al
		jb     jump_18d8a
	jump_18eaa:
		add    $0x8,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
HowManyStatesDoIOwn:	/* 0x18eb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%cl
		xor    %bh,%bh
		xor    %bl,%bl
		lea    0x0(%eax),%eax
		nop
	jump_18ec0:
		xor    %edx,%edx
		mov    %bl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmp    data_5539e(,%eax,2),%cl
		jne    jump_18ed8
		inc    %bh
	jump_18ed8:
		inc    %bl
		cmp    $0x32,%bl
		jb     jump_18ec0
		mov    %bh,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GetNthOwnedState:	/* 0x18ef0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%bh
		mov    0xc(%esp),%cl
		mov    $0xff,%bl
		test   %bh,%bh
		je     jump_18f23
	jump_18eff:
		inc    %bl
		cmp    $0x32,%bl
		jl     jump_18f08
		xor    %bl,%bl
	jump_18f08:
		movsbl %bl,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmp    data_5539e(,%eax,2),%cl
		jne    jump_18f1f
		dec    %bh
	jump_18f1f:
		test   %bh,%bh
		jne    jump_18eff
	jump_18f23:
		mov    %bl,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ShowGameTime:	/* 0x18f30 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x28,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    $0xa8,%ebx
		mov    data_5e4a0(%eax),%eax
		xor    %edx,%edx
		div    %ebx
		mov    %eax,%ebx
		cmp    $0x18,%ax
		jne    jump_18f70
		mov    $0x17,%ebx
	jump_18f70:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_5e4a6(%eax),%dx
		mov    data_5e4a4(%eax),%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		push   $a02dDDnc
		lea    0x10(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x14,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x166
		push   $0x10
		push   $0xa
		push   $0x1f4
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		add    $0x28,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
debrief:	/* 0x18ff0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x11c,%esp
		xor    %ah,%ah
		xor    %edx,%edx
		mov    %ah,-0x14(%ebp)
		mov    %edx,-0x1c(%ebp)
		mov    $0x3,%dh
		mov    %ah,-0x8(%ebp)
		mov    %dh,-0xc(%ebp)
		mov    $0x1,%al
	jump_19010:
		cmp    EXPORT_SYMBOL(lbDisplay)+106,%al	/* lbDisplay.MLeftButton */
		je     jump_19010
		cmp    EXPORT_SYMBOL(lbDisplay)+107,%al	/* lbDisplay.MRightButton */
		je     jump_19010
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    %cl,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		mov    %cl,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		mov    %cl,-0x10(%ebp)
	jump_1903d:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x10(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		cmpb   $0x0,data_5e5c0(%eax)
		je     jump_196f8
		cmpw   $0x0,data_5e5ba(%eax)
		jle    jump_196f8
		xor    %bl,%bl
		mov    %bl,-0x4(%ebp)
	jump_190a0:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x10(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		lea    0x0(,%edx,4),%edx
		add    %edx,%eax
		mov    data_5e5c3(%eax),%bx
		test   %bx,%bx
		je     jump_196e7
		mov    %bx,%ax
		and    $0xffff,%eax
		dec    %eax
		imul   $0x1f5,%eax,%eax
		movswl data_57c05(%eax),%edx
		cmp    $0xffffffff,%edx
		je     jump_19126
		cmpw   $0x0,data_57c05(%eax)
		jne    jump_196e7
	jump_19126:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x10(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		lea    0x0(,%edx,4),%edx
		add    %eax,%edx
		mov    data_5e5c3(%edx),%dx
		and    $0xffff,%edx
		dec    %edx
		imul   $0x1f5,%edx,%eax
		mov    data_57bf5(%eax),%ebx
		test   %ebx,%ebx
		jge    jump_196e7
		neg    %ebx
		xor    %si,%si
		mov    %ebx,data_57bf5(%eax)
		xor    %cl,%cl
		mov    %si,data_57c05(%eax)
		mov    %cl,data_57de8(%eax)
		xor    %eax,%eax
		mov    $0x1,%bh
		mov    data_55596,%al
		mov    %bh,-0x8(%ebp)
		cmp    %eax,%edx
		jne    jump_19355
		xor    %bh,%bh
		xor    %ch,%ch
	jump_191cb:
		mov    %cl,%bl
	jump_191cd:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		shl    $0x4,%edx
		mov    %bl,%al
		cmp    data_5559d(%edx,%eax,2),%cx
		jne    jump_1933a
		test   %bh,%bh
		jne    jump_19204
		test   %bl,%bl
		jne    jump_19204
		movw   $0x258,data_5559d
		jmp    jump_1926e
	jump_19204:
		test   %bl,%bl
		je     jump_19236
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    %bl,%dl
		shl    $0x4,%eax
		add    %edx,%edx
		add    %edx,%eax
		mov    data_5559b(%eax),%dx
		add    $0x258,%edx
		mov    %dx,data_5559d(%eax)
		jmp    jump_1926e
	jump_19236:
		xor    %ecx,%ecx
		mov    %bh,%cl
		lea    -0x1(%ecx),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		mov    data_555cb(%eax),%si
		lea    0x0(,%ecx,4),%eax
		xor    %edx,%edx
		sub    %ecx,%eax
		mov    %bl,%dl
		shl    $0x4,%eax
		add    $0x258,%esi
		mov    %si,data_5559d(%eax,%edx,2)
	jump_1926e:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		shl    $0x4,%edx
		mov    %bl,%al
		cmpw   $0x960,data_5559d(%edx,%eax,2)
		jl     jump_195f5
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x10(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    data_5e5c3(%eax),%ax
		and    $0xffff,%eax
		dec    %eax
		imul   $0x1f5,%eax,%eax
		mov    $0x960,%ecx
		mov    data_57de7(%eax),%dl
		mov    %cx,data_57c05(%eax)
		test   %dl,%dl
		je     jump_19330
		mov    %dl,%al
		and    $0xff,%eax
		imul   $0x1f5,%eax,%eax
		movswl data_57c05(%eax),%edx
		cmp    $0xffffffff,%edx
		jne    jump_19330
		xor    %esi,%esi
		mov    %si,data_57c05(%eax)
	jump_19330:
		call   CompleteResearch
		jmp    jump_195f5
	jump_1933a:
		inc    %bl
		cmp    $0x18,%bl
		jb     jump_191cd
		inc    %bh
		cmp    $0xa,%bh
		jb     jump_191cb
		jmp    jump_195f5
	jump_19355:
		xor    %ch,%ch
		mov    $0x1f5,%edi
	jump_1935c:
		xor    %cl,%cl
	jump_1935e:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x10(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    data_5e5c3(%eax,%edx,4),%bx
		dec    %ebx
		imul   %edi,%ebx
		xor    %edx,%edx
		mov    %ch,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		shl    $0x4,%eax
		mov    %cl,%dl
		add    %ebx,%eax
		cmpw   $0x0,data_57c07(%eax,%edx,2)
		jne    jump_195df
		test   %ch,%ch
		jne    jump_193eb
		test   %cl,%cl
		jne    jump_193eb
		movw   $0x258,data_57c07(%ebx)
		jmp    jump_19525
	jump_193eb:
		test   %cl,%cl
		je     jump_1948b
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x10(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    data_5e5c3(%eax),%ax
		and    $0xffff,%eax
		dec    %eax
		imul   $0x1f5,%eax,%ebx
		xor    %edx,%edx
		mov    %ch,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		lea    (%ebx,%eax,1),%edx
		xor    %eax,%eax
		mov    %cl,%al
		add    %eax,%eax
		add    %edx,%eax
		mov    data_57c05(%eax),%dx
		add    $0x258,%edx
		mov    %dx,data_57c07(%eax)
		jmp    jump_19525
	jump_1948b:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x10(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		lea    0x0(,%edx,4),%edx
		add    %edx,%eax
		mov    data_5e5c3(%eax),%ax
		and    $0xffff,%eax
		dec    %eax
		imul   $0x1f5,%eax,%ebx
		movzbl %ch,%esi
		lea    -0x1(%esi),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		mov    data_57c35(%ebx,%eax,1),%di
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		shl    $0x4,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %cl,%al
		add    $0x258,%edi
		mov    %di,data_57c07(%ebx,%eax,2)
	jump_19525:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x10(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		lea    0x0(,%edx,4),%edx
		add    %edx,%eax
		mov    data_5e5c3(%eax),%ax
		and    $0xffff,%eax
		dec    %eax
		imul   $0x1f5,%eax,%edx
		xor    %ebx,%ebx
		mov    %ch,%bl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x4,%eax
		lea    (%edx,%eax,1),%ebx
		xor    %eax,%eax
		mov    %cl,%al
		cmpw   $0x960,data_57c07(%ebx,%eax,2)
		jl     jump_195f5
		mov    $0x960,%esi
		mov    data_57de7(%edx),%ch
		mov    %si,data_57c05(%edx)
		test   %ch,%ch
		je     jump_195f5
		xor    %eax,%eax
		mov    %ch,%al
		imul   $0x1f5,%eax,%eax
		movswl data_57c05(%eax),%edx
		cmp    $0xffffffff,%edx
		jne    jump_195f5
		xor    %edi,%edi
		mov    %di,data_57c05(%eax)
		jmp    jump_195f5
	jump_195df:
		inc    %cl
		cmp    $0x18,%cl
		jb     jump_1935e
		inc    %ch
		cmp    $0xa,%ch
		jb     jump_1935c
	jump_195f5:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x10(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		xor    %edi,%edi
		mov    -0x4(%ebp),%al
		xor    %cl,%cl
		mov    %al,%dh
		mov    %di,data_5e5c3(%ebx,%eax,4)
		dec    %dh
		mov    %di,data_5e5c1(%ebx,%eax,4)
		mov    %dh,-0x4(%ebp)
		xor    %esi,%esi
	jump_19656:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x10(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %cl,%al
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    data_5e5c3(%eax),%bx
		cmp    %bx,%si
		jne    jump_196dc
		mov    data_5e5c7(%eax),%dx
		mov    %dx,data_5e5c3(%eax)
		mov    %bx,data_5e5c7(%eax)
		mov    data_5e5c5(%eax),%dx
		mov    %dx,data_5e5c1(%eax)
		mov    %bx,data_5e5c5(%eax)
	jump_196dc:
		inc    %cl
		cmp    $0x7,%cl
		jb     jump_19656
	jump_196e7:
		mov    -0x4(%ebp),%bl
		inc    %bl
		mov    %bl,-0x4(%ebp)
		cmp    $0x8,%bl
		jb     jump_190a0
	jump_196f8:
		mov    -0x10(%ebp),%cl
		inc    %cl
		mov    %cl,-0x10(%ebp)
		cmp    $0x4,%cl
		jb     jump_1903d
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    $0xfc0,%ebx
		mov    data_60b06,%esi
		mov    data_5e4a0(%eax),%ecx
		lea    0x0(,%esi,4),%esi
		lea    0x0(,%ecx,4),%ecx
		xor    %edx,%edx
		mov    %ecx,data_5e4a0(%eax)
		mov    %esi,%eax
		div    %ebx
		mov    %eax,-0x18(%ebp)
		xor    %edx,%edx
		mov    %esi,%eax
		div    %ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    $0xfc1,%ebx
		lea    0x0(,%eax,8),%eax
		xor    %edx,%edx
		div    %ebx
		mov    %eax,%edi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p252(,%eax,4),%edx
		push   %edx
		mov    %esi,data_60b06
		call   DisplayScreenTitle
		mov    -0x14(%ebp),%al
		add    $0x4,%esp
		test   %al,%al
		jne    jump_1a181
	jump_197a0:
		call   LbCopyScreenFromBackMCGA
		call   DrawAcceptGadget
		call   DrawMenuGadget
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		mov    m_logos,%ebx
		add    %edx,%eax
		push   %ebx
		lea    0x0(,%eax,4),%eax
		push   $0x20
		sub    %edx,%eax
		push   $0x20
		lea    0x0(,%eax,8),%eax
		push   $0x7
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0x9
		mov    data_5e4ab(%eax),%dl
		mov    data_5e4ac(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   %eax
		call   draw_logo
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4bf(%eax),%bl
		add    $0x1c,%esp
		test   %bl,%bl
		je     jump_1984d
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		push   $0x10
		push   $0x52
		add    $EXPORT_SYMBOL(players),%eax
		push   $0x12
		add    $0x23,%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_1984d:
		push   $0x0
		push   $0xfc
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x64
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    data_54954(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x78
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_mission_status(,%eax,4),%esi
		push   %esi
		mov    $0x78,%ebx
		call   new_show_text
		mov    data_60afc,%cl
		add    $0x28,%esp
		test   $0x2,%cl
		je     jump_198ee
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x78
		mov    EXPORT_SYMBOL(language),%al
		push   $0x140
		mov    strings_misstat_complete(,%eax,4),%edx
		jmp    jump_19950
	jump_198ee:
		test   $0x8,%cl
		je     jump_19921
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x78
		mov    EXPORT_SYMBOL(language),%al
		push   $0x140
		mov    strings_misstat_withdrew(,%eax,4),%esi
		push   %esi
		jmp    jump_19951
	jump_19921:
		test   $0x4,%cl
		je     jump_19959
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x78
		mov    EXPORT_SYMBOL(language),%al
		push   $0x140
		mov    strings_misstat_failed(,%eax,4),%edx
	jump_19950:
		push   %edx
	jump_19951:
		call   new_show_text
		add    $0x28,%esp
	jump_19959:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_agents_used(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_55592,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_agents_gained(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60afb,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_time(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    data_548b8(,%eax,4),%ecx
		xor    %edx,%edx
		push   %ecx
		mov    -0x18(%ebp),%dx
		push   %edx
		mov    data_548ac(,%eax,4),%edx
		xor    %eax,%eax
		push   %edx
		mov    %di,%ax
		push   %eax
		push   $a02dSDS
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x18,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_agents_killed(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60af8,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_criminals_killed(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60af7,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_civilians_killed(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60af4,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_police_killed(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60af5,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_guards_killed(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60af6,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_people_persuaded(,%eax,4),%edx
		push   %edx
		call   new_show_text
		xor    %eax,%eax
		add    $0x28,%esp
		mov    data_60afd,%al
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0x10
		push   %esi
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		add    $0xe,%ebx
		xor    %esi,%esi
		push   $0x10
		mov    %bx,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    strings_debrief_hit_accuracy(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		mov    a11,%ecx
		test   %ecx,%ecx
		je     jump_19e6d
		mov    data_60afe,%ecx
		test   %ecx,%ecx
		je     jump_19e1d
		imul   $0x64,%ecx,%eax
		xor    %edx,%edx
		divl   a11
		jmp    jump_19e1f
	jump_19e1d:
		xor    %eax,%eax
	jump_19e1f:
		push   %eax
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $data_50090
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   ac_strcat
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		xor    %eax,%eax
		push   $0x10
		mov    %bx,%ax
		push   %eax
		push   $0x140
		lea    -0x11c(%ebp),%eax
		push   %eax
		jmp    jump_19e95
	jump_19e6d:
		push   %ecx
		push   %ecx
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x140
		mov    strings_debrief_no_bullets(,%eax,4),%edx
		push   %edx
	jump_19e95:
		call   new_show_text
		add    $0x28,%esp
		mov    EXPORT_SYMBOL(research),%ah
		cmp    $0x1,%ah
		jne    jump_19f87
		mov    data_55595,%al
		cmp    %ah,%al
		jb     jump_19f5b
		jbe    jump_19ec4
		cmp    $0x2,%al
		je     jump_19f02
		jmp    jump_19f5b
	jump_19ec4:
		xor    %eax,%eax
		mov    data_55596,%al
		imul   $0x1eb,%eax,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%bl
		xor    %edx,%edx
		lea    0x0(,%ebx,4),%eax
		mov    EXPORT_SYMBOL(language),%dl
		sub    %ebx,%eax
		mov    strings_misstat_complete(,%edx,4),%esi
		lea    0x0(,%eax,4),%eax
		push   %esi
		mov    strings_cybmod_names(%eax,%edx,4),%ebx
		jmp    jump_19f3e
	jump_19f02:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(language),%dl
		mov    strings_misstat_complete(,%edx,4),%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55596,%al
		imul   $0x1f5,%eax,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(weapons)(%eax),%bl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		mov    strings_weapon_names(%eax,%edx,4),%ebx
	jump_19f3e:
		push   %ebx
		mov    data_54930(,%edx,4),%ecx
		push   %ecx
		push   $aSSS
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x14,%esp
	jump_19f5b:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x166
		push   $0x10
		push   $0x120
		push   $0x12
		lea    -0x11c(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_19f87:
		cmpb   $0x0,-0x8(%ebp)
		je     jump_19ff4
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x138
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    data_5493c(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x166
		push   $0x10
		xor    %eax,%eax
		push   $0x144
		mov    EXPORT_SYMBOL(language),%al
		push   $0x12
		mov    data_54948(,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
	jump_19ff4:
		cmpb   $0x2,data_60afc
		je     jump_1a0de
		cmpb   $0x0,EXPORT_SYMBOL(cheats_mission)
		je     jump_1a0de
		mov    data_5b80e,%ax
		sub    $0x2,%ax
		push   $0xea
		and    $0xffff,%eax
		push   %eax
		mov    data_5b80c,%ax
		sub    $0x2,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    arg8,%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b808,%ax
		push   %eax
		call   func_187a0
		add    $0x14,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    arg8,%cx
		push   $0xfffffffe
		cmp    %cx,%ax
		jbe    jump_1a097
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b80e,%ax
		jae    jump_1a097
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b808,%ax
		jbe    jump_1a097
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b80c,%ax
		jae    jump_1a097
		mov    $0x166,%eax
		jmp    jump_1a09c
	jump_1a097:
		mov    $0x1ef,%eax
	jump_1a09c:
		and    $0xffff,%eax
		mov    data_5b808,%cx
		push   %eax
		mov    data_5b80c,%ax
		sub    %cx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    arg8,%ax
		push   %eax
		xor    %eax,%eax
		mov    %cx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_replay(,%eax,4),%esi
		push   %esi
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_1a0de:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_1a103
		push   $0x3
		push   $0x1
		xor    %cl,%cl
		push   $data_5b808
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,-0xc(%ebp)
	jump_1a103:
		cmpb   $0x3,-0xc(%ebp)
		jne    jump_1a11d
		push   $0x3
		push   $0x0
		push   $data_5b808
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,-0xc(%ebp)
	jump_1a11d:
		mov    -0xc(%ebp),%al
		cmp    $0x1,%al
		jb     jump_1a12c
		jbe    jump_1a151
		cmp    $0x2,%al
		je     jump_1a160
		jmp    jump_1a164
	jump_1a12c:
		test   %al,%al
		jne    jump_1a164
		cmpb   $0x0,EXPORT_SYMBOL(cheats_mission)
		je     jump_1a164
		cmpb   $0x2,data_60afc
		je     jump_1a164
		mov    $0x7,%edx
		mov    $0x1,%al
		mov    %edx,-0x1c(%ebp)
		mov    %al,-0x14(%ebp)
		jmp    jump_1a164
	jump_1a151:
		mov    $0x2,%eax
		mov    $0x1,%bl
		mov    %eax,-0x1c(%ebp)
		mov    %bl,-0x14(%ebp)
		jmp    jump_1a164
	jump_1a160:
		movb   $0x1,-0x14(%ebp)
	jump_1a164:
		movb   $0x3,-0xc(%ebp)
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,-0x14(%ebp)
		je     jump_197a0
	jump_1a181:
		cmpb   $0x1,EXPORT_SYMBOL(research)
		jne    jump_1a18f
		call   CompleteResearch
	jump_1a18f:
		xor    %edx,%edx
		mov    data_60b36,%dl
		lea    0x0(,%edx,4),%eax
		xor    %ebx,%ebx
		add    %edx,%eax
		xor    %edx,%edx
		mov    data_60af4,%bl
		mov    data_60af5,%dl
		add    %edx,%ebx
		xor    %edx,%edx
		mov    data_60af6,%dl
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    data_60af7,%bl
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    data_60af9,%bl
		add    %ebx,%edx
		imul   $0x64,%edx,%edx
		mov    $0x1,%ecx
		xor    %esi,%esi
		mov    $AniName,%edi
		mov    %esi,MouseOldW
		mov    $aDataMdeoutDat,%esi
		mov    data_553a2(,%eax,2),%ebx
		mov    %ecx,EXPORT_SYMBOL(MouseSwap)
		sub    %edx,%ebx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    %ebx,data_553a2(,%eax,2)
		xor    %ah,%ah
		push   $0x2
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		call   LbCopyScreenToBackMCGA
		mov    -0x1c(%ebp),%eax
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1a240:
/*----------------------------------------------------------------*/
		and    %ah,(%eax)
		add    %al,(%eax)
		and    %ah,(%eax)
		add    %al,(%eax)
		lea    0x0(%eax),%eax
		mov    %edx,%edx


/*----------------------------------------------------------------*/
DLL_read:	/* 0x1a250 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    0xc(%esp),%esi
		mov    0x10(%esp),%edx
		mov    0x18(%esp),%edi
		mov    0x1c(%esp),%ebx
		testb  $0x1,0x14(%esp)
		je     jump_1a283
		mov    %ebx,%ecx
		add    %edx,%esi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		lea    (%edx,%ebx,1),%eax
		pop    %edi
		pop    %esi
		ret
	jump_1a283:
		push   $0x0
		push   %edx
		push   %esi
		call   ac_dos_lseek
		add    $0xc,%esp
		push   %ebx
		push   %edi
		push   %esi
		call   ac_read
		add    $0xc,%esp
		push   %esi
		call   ac_dos_tell
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
DLL_size:	/* 0x1a2b0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xcc,%esp
		mov    0xdc(%esp),%eax
		mov    func_1a240,%edx
		mov    %edx,0xc8(%esp)
		mov    0xe0(%esp),%dl
		xor    %edi,%edi
		test   $0x1,%dl
		je     jump_1a2df
		mov    %eax,%ebp
		jmp    jump_1a2fb
	jump_1a2df:
		push   $0x200
		push   %eax
		call   ac_dos_open
		add    $0x8,%esp
		mov    %eax,%ebp
		cmp    $0xffffffff,%eax
		jne    jump_1a2fb
		xor    %eax,%eax
		jmp    jump_1a3e7
	jump_1a2fb:
		push   $0x4
		lea    0xc8(%esp),%eax
		push   %eax
		mov    0xe8(%esp),%edx
		push   %edx
		push   $0x3c
		push   %ebp
		call   DLL_read
		add    $0x14,%esp
		push   $0x2
		lea    0xcc(%esp),%eax
		push   %eax
		mov    0xe8(%esp),%ebx
		push   %ebx
		mov    0xd0(%esp),%ecx
		push   %ecx
		push   %ebp
		call   DLL_read
		add    $0x14,%esp
		push   $aLx
		lea    0xcc(%esp),%eax
		push   %eax
		call   ac_strcmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_1a369
		push   %ebp
		call   ac_close
		add    $0x4,%esp
		xor    %eax,%eax
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1a369:
		push   $0xac
		lea    0x4(%esp),%eax
		push   %eax
		mov    0xe8(%esp),%esi
		push   %esi
		mov    0xd0(%esp),%eax
		push   %eax
		push   %ebp
		call   DLL_read
		add    $0x14,%esp
		xor    %esi,%esi
		mov    0xc4(%esp),%eax
		mov    0x40(%esp),%edx
		mov    0x44(%esp),%ebx
		add    %edx,%eax
		test   %ebx,%ebx
		jbe    jump_1a3d1
	jump_1a3a3:
		push   $0x18
		lea    0xb0(%esp),%edx
		push   %edx
		mov    0xe8(%esp),%ecx
		push   %ecx
		push   %eax
		push   %ebp
		call   DLL_read
		add    $0x14,%esp
		inc    %esi
		mov    0xac(%esp),%edx
		mov    0x44(%esp),%ebx
		add    %edx,%edi
		cmp    %ebx,%esi
		jb     jump_1a3a3
	jump_1a3d1:
		testb  $0x1,0xe0(%esp)
		jne    jump_1a3e4
		push   %ebp
		call   ac_close
		add    $0x4,%esp
	jump_1a3e4:
		lea    0xf(%edi),%eax
	jump_1a3e7:
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
DLL_load:	/* 0x1a400 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2d4,%esp
		mov    0x2e4(%esp),%esi
		mov    0x1a244,%eax /* Warning: address points to a valid object/reloc, but no label found */
		xor    %edx,%edx
		mov    %eax,0x2a4(%esp)
		mov    0x2e8(%esp),%ah
		mov    %edx,0x29c(%esp)
		test   $0x1,%ah
		je     jump_1a435
		mov    %esi,%edi
		jmp    jump_1a451
	jump_1a435:
		push   $0x200
		push   %esi
		call   ac_dos_open
		add    $0x8,%esp
		mov    %eax,%edi
		cmp    $0xffffffff,%eax
		jne    jump_1a451
		xor    %eax,%eax
		jmp    jump_1a98f
	jump_1a451:
		mov    0x2e8(%esp),%ebx
		push   %ebx
		push   %esi
		call   DLL_size
		add    $0x8,%esp
		mov    0x2e8(%esp),%dl
		mov    %eax,%esi
		test   $0x4,%dl
		je     jump_1a4a3
		push   %eax
		call   ac_malloc
		add    $0x4,%esp
		mov    %eax,0x2ec(%esp)
		test   %eax,%eax
		jne    jump_1a4a3
		testb  $0x1,0x2e8(%esp)
		jne    jump_1a497
		push   %edi
		call   ac_close
		add    $0x4,%esp
	jump_1a497:
		xor    %eax,%eax
		add    $0x2d4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1a4a3:
		push   %esi
		push   $0x0
		mov    0x2f4(%esp),%ecx
		push   %ecx
		call   ac_memset
		add    $0xc,%esp
		push   $0x4
		lea    0x290(%esp),%eax
		push   %eax
		mov    0x2f0(%esp),%ebp
		push   %ebp
		push   $0x3c
		push   %edi
		mov    0x300(%esp),%esi
		call   DLL_read
		add    $0x14,%esp
		push   $0x2
		lea    0x2a8(%esp),%eax
		push   %eax
		push   %ebp
		mov    0x298(%esp),%edx
		push   %edx
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		push   $aLx
		lea    0x2a8(%esp),%eax
		push   %eax
		call   ac_strcmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_1a52e
		testb  $0x1,0x2e8(%esp)
		jne    jump_1a522
		push   %edi
		call   ac_close
		add    $0x4,%esp
	jump_1a522:
		xor    %eax,%eax
		add    $0x2d4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1a52e:
		push   $0xac
		lea    0x194(%esp),%eax
		push   %eax
		push   %ebp
		mov    0x298(%esp),%ecx
		push   %ecx
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		xor    %edx,%edx
		mov    0x28c(%esp),%eax
		mov    0x1d0(%esp),%ebp
		mov    0x1d4(%esp),%ebx
		mov    %edx,0x290(%esp)
		add    %ebp,%eax
		test   %ebx,%ebx
		jbe    jump_1a715
	jump_1a575:
		push   $0x18
		lea    0x268(%esp),%edx
		push   %edx
		mov    0x2f0(%esp),%ebp
		push   %ebp
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		xor    %ebp,%ebp
		mov    0x1d8(%esp),%edx
		mov    %eax,0x2b4(%esp)
		mov    0x28c(%esp),%eax
		mov    0x274(%esp),%ebx
		add    %edx,%eax
		test   %ebx,%ebx
		jbe    jump_1a6f0
		mov    0x290(%esp),%edx
		lea    0x0(,%edx,4),%edx
		mov    %edx,0x2a0(%esp)
		mov    0x29c(%esp),%edx
		lea    0x0(,%edx,4),%edx
		mov    %edx,0x2bc(%esp)
	jump_1a5e3:
		push   $0x8
		lea    0x280(%esp),%edx
		push   %edx
		mov    0x2f0(%esp),%ebx
		push   %ebx
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		test   %ebp,%ebp
		jne    jump_1a637
		mov    0x26c(%esp),%bh
		test   $0x2,%bh
		je     jump_1a629
		test   $0x1,%bh
		je     jump_1a629
		test   $0xf,%si
		je     jump_1a629
		mov    %esi,%edx
		mov    $0x10,%ebx
		and    $0xf,%edx
		sub    %edx,%ebx
		add    %ebx,%esi
	jump_1a629:
		mov    0x2a0(%esp),%edx
		mov    %esi,0x240(%esp,%edx,1)
	jump_1a637:
		mov    %eax,0x298(%esp)
		mov    0x29c(%esp),%eax
		mov    0x2bc(%esp),%edx
		inc    %eax
		lea    0x4(%edx),%ecx
		mov    %eax,0x29c(%esp)
		mov    0x2a0(%esp),%eax
		mov    %esi,(%esp,%edx,1)
		mov    %esi,%edx
		mov    0x240(%esp,%eax,1),%ebx
		mov    0x264(%esp),%eax
		sub    %ebx,%edx
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x280(%esp),%ax
		mov    %ecx,0x2bc(%esp)
		cmp    %eax,%edx
		jae    jump_1a695
		mov    %edx,0x2a8(%esp)
		jmp    jump_1a69c
	jump_1a695:
		mov    %eax,0x2a8(%esp)
	jump_1a69c:
		mov    0x2a8(%esp),%edx
		mov    0x1bc(%esp),%cl
		push   %edx
		mov    0x280(%esp),%eax
		mov    0x2ec(%esp),%ebx
		push   %esi
		shl    %cl,%eax
		mov    0x218(%esp),%ecx
		push   %ebx
		add    %ecx,%eax
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		inc    %ebp
		mov    0x2a8(%esp),%ecx
		mov    0x298(%esp),%eax
		mov    0x274(%esp),%edx
		add    %ecx,%esi
		cmp    %edx,%ebp
		jb     jump_1a5e3
	jump_1a6f0:
		mov    0x290(%esp),%ecx
		mov    0x2b4(%esp),%eax
		inc    %ecx
		mov    0x1d4(%esp),%ebp
		mov    %ecx,0x290(%esp)
		cmp    %ebp,%ecx
		jb     jump_1a575
	jump_1a715:
		mov    0x28c(%esp),%edx
		mov    0x1f8(%esp),%eax
		push   $0x4
		add    %eax,%edx
		lea    0x28c(%esp),%eax
		push   %eax
		mov    0x2f0(%esp),%ebx
		push   %ebx
		push   %edx
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		mov    %eax,%edx
		xor    %ecx,%ecx
		mov    0x1a4(%esp),%esi
		mov    %ecx,0x2ac(%esp)
		test   %esi,%esi
		jbe    jump_1a975
		mov    %ecx,0x2b8(%esp)
	jump_1a762:
		push   $0x4
		lea    0x288(%esp),%eax
		push   %eax
		mov    0x2f0(%esp),%ebx
		push   %ebx
		push   %edx
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		mov    %eax,%edx
		mov    0x288(%esp),%eax
		cmp    0x284(%esp),%eax
		je     jump_1a938
		mov    0x28c(%esp),%esi
		mov    0x1fc(%esp),%ebp
		mov    %edx,0x2b0(%esp)
		mov    0x2b8(%esp),%edx
		add    %esi,%eax
		mov    %edx,0x294(%esp)
		add    %ebp,%eax
	jump_1a7bb:
		push   $0x1
		lea    0x2cc(%esp),%edx
		push   %edx
		mov    0x2f0(%esp),%edx
		push   %edx
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		push   $0x1
		lea    0x2d4(%esp),%edx
		push   %edx
		mov    0x2f0(%esp),%ebx
		push   %ebx
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		testb  $0x7,0x2c8(%esp)
		jne    jump_1a81c
		testb  $0x1,0x2e8(%esp)
		jne    jump_1a810
		push   %edi
		call   ac_close
		add    $0x4,%esp
	jump_1a810:
		xor    %eax,%eax
		add    $0x2d4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1a81c:
		mov    0x2d0(%esp),%dh
		test   $0x4,%dh
		je     jump_1a84c
		test   $0x20,%dh
		jne    jump_1a84c
		testb  $0x1,0x2e8(%esp)
		jne    jump_1a840
		push   %edi
		call   ac_close
		add    $0x4,%esp
	jump_1a840:
		xor    %eax,%eax
		add    $0x2d4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1a84c:
		testb  $0x20,0x2c8(%esp)
		je     jump_1a875
		testb  $0x1,0x2e8(%esp)
		jne    jump_1a869
		push   %edi
		call   ac_close
		add    $0x4,%esp
	jump_1a869:
		xor    %eax,%eax
		add    $0x2d4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1a875:
		push   $0x2
		lea    0x2c8(%esp),%edx
		push   %edx
		mov    0x2f0(%esp),%ecx
		push   %ecx
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		push   $0x1
		lea    0x2d0(%esp),%edx
		push   %edx
		mov    0x2f0(%esp),%esi
		push   %esi
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		push   $0x2
		lea    0x2c4(%esp),%edx
		push   %edx
		push   %esi
		push   %eax
		push   %edi
		call   DLL_read
		add    $0x14,%esp
		xor    %edx,%edx
		mov    0x2c4(%esp),%dx
		cmp    0x1b8(%esp),%edx
		ja     jump_1a910
		xor    %edx,%edx
		mov    0x294(%esp),%esi
		mov    0x2c4(%esp),%dx
		mov    (%esp,%esi,1),%esi
		add    %edx,%esi
		xor    %edx,%edx
		mov    0x2cc(%esp),%dl
		lea    0x0(,%edx,4),%ebp
		xor    %edx,%edx
		mov    0x23c(%esp,%ebp,1),%ebp
		mov    0x2c0(%esp),%dx
		add    %ebp,%edx
		mov    %edx,(%esi)
	jump_1a910:
		mov    0x284(%esp),%edx
		mov    0x28c(%esp),%ecx
		mov    0x1fc(%esp),%esi
		add    %ecx,%edx
		add    %esi,%edx
		cmp    %edx,%eax
		jb     jump_1a7bb
		mov    0x2b0(%esp),%edx
	jump_1a938:
		mov    0x284(%esp),%eax
		mov    0x2b8(%esp),%ecx
		mov    0x2ac(%esp),%esi
		mov    0x1a4(%esp),%ebp
		mov    %eax,0x288(%esp)
		add    $0x4,%ecx
		inc    %esi
		mov    %ecx,0x2b8(%esp)
		mov    %esi,0x2ac(%esp)
		cmp    %ebp,%esi
		jb     jump_1a762
	jump_1a975:
		testb  $0x1,0x2e8(%esp)
		jne    jump_1a988
		push   %edi
		call   ac_close
		add    $0x4,%esp
	jump_1a988:
		mov    0x2ec(%esp),%eax
	jump_1a98f:
		add    $0x2d4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
FILE_error:	/* 0x1a9a0 */
		mov    disk_err,%eax
		ret


/*----------------------------------------------------------------*/
FILE_size:	/* 0x1a9b0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   $0x200
		mov    0xc(%esp),%ebx
		xor    %edx,%edx
		push   %ebx
		mov    %edx,disk_err
		call   ac_dos_open
		add    $0x8,%esp
		mov    %eax,%esi
		cmp    $0xffffffff,%eax
		jne    jump_1a9de
		movl   $0x3,disk_err
		pop    %esi
		ret
	jump_1a9de:
		push   %eax
		call   ac_dos_filelength
		add    $0x4,%esp
		mov    %eax,%ebx
		cmp    $0xffffffff,%eax
		jne    jump_1a9f8
		movl   $0x5,disk_err
	jump_1a9f8:
		push   %esi
		call   ac_close
		add    $0x4,%esp
		mov    %ebx,%eax
		pop    %esi
		ret


/*----------------------------------------------------------------*/
FILE_read:	/* 0x1aa10 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		mov    0x10(%esp),%esi
		xor    %edx,%edx
		push   %esi
		mov    %edx,disk_err
		call   FILE_size
		add    $0x4,%esp
		mov    %eax,%edi
		cmp    $0xffffffff,%eax
		jne    jump_1aa40
		mov    $0x3,%ebp
		xor    %eax,%eax
		mov    %ebp,disk_err
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1aa40:
		mov    0x14(%esp),%ebx
		test   %ebx,%ebx
		jne    jump_1aa53
		push   %eax
		call   ac_malloc
		add    $0x4,%esp
		mov    %eax,%ebx
	jump_1aa53:
		test   %ebx,%ebx
		jne    jump_1aa68
		mov    $0x2,%edi
		xor    %eax,%eax
		mov    %edi,disk_err
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1aa68:
		push   $0x200
		push   %esi
		call   ac_dos_open
		mov    %eax,%esi
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_1aa97
		push   %ebx
		mov    $0x3,%esi
		call   ac_free
		add    $0x4,%esp
		mov    %esi,disk_err
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1aa97:
		push   %edi
		push   %ebx
		push   %eax
		call   ac_read
		add    $0xc,%esp
		cmp    %edi,%eax
		je     jump_1aac0
		push   %ebx
		call   ac_free
		mov    $0x5,%ecx
		add    $0x4,%esp
		xor    %eax,%eax
		mov    %ecx,disk_err
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_1aac0:
		push   %esi
		call   ac_close
		add    $0x4,%esp
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
FILE_write:	/* 0x1aad0 */
		push   %esi
		push   %ebp
		push   $0x180
		push   $0x262
		mov    0x14(%esp),%ebx
		xor    %edx,%edx
		push   %ebx
		mov    %edx,disk_err
		call   ac_dos_open
		mov    %eax,%ebx
		add    $0xc,%esp
		cmp    $0xffffffff,%eax
		jne    jump_1ab08
		mov    $0x4,%edx
		xor    %eax,%eax
		mov    %edx,disk_err
		pop    %ebp
		pop    %esi
		ret
	jump_1ab08:
		mov    0x14(%esp),%ecx
		push   %ecx
		mov    0x14(%esp),%esi
		push   %esi
		push   %eax
		call   ac_write
		add    $0xc,%esp
		cmp    $0xffffffff,%eax
		jne    jump_1ab2f
		movl   $0x4,disk_err
		xor    %eax,%eax
		pop    %ebp
		pop    %esi
		ret
	jump_1ab2f:
		cmp    0x14(%esp),%eax
		je     jump_1ab45
		mov    $0x6,%ebp
		xor    %eax,%eax
		mov    %ebp,disk_err
		pop    %ebp
		pop    %esi
		ret
	jump_1ab45:
		push   %ebx
		call   ac_close
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		ret
FILE_append:	/* 0x1ab60 */
		push   %esi
		push   %ebp
		push   $0x212
		mov    0x10(%esp),%ebx
		xor    %edx,%edx
		push   %ebx
		mov    %edx,disk_err
		call   ac_dos_open
		mov    %eax,%ebx
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_1ab93
		mov    $0x3,%edx
		xor    %eax,%eax
		mov    %edx,disk_err
		pop    %ebp
		pop    %esi
		ret
	jump_1ab93:
		mov    0x14(%esp),%ecx
		push   %ecx
		mov    0x14(%esp),%esi
		push   %esi
		push   %eax
		call   ac_write
		add    $0xc,%esp
		cmp    $0xffffffff,%eax
		jne    jump_1abba
		movl   $0x4,disk_err
		xor    %eax,%eax
		pop    %ebp
		pop    %esi
		ret
	jump_1abba:
		cmp    0x14(%esp),%eax
		je     jump_1abd0
		mov    $0x6,%ebp
		xor    %eax,%eax
		mov    %ebp,disk_err
		pop    %ebp
		pop    %esi
		ret
	jump_1abd0:
		push   %ebx
		call   ac_close
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		ret


/*----------------------------------------------------------------*/
ASM_LbDataLoadAll:	/* 0x1abf0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x1c(%ebx),%edx
		xor    %esi,%esi
		test   %edx,%edx
		je     jump_1ac72
	jump_1ac04:
		push   %ebx
		call   LbDataLoad
		add    $0x4,%esp
		mov    %eax,%edi
		test   %ax,%ax
		jge    jump_1ac55
		cwtl
		cmp    $0xffffffff,%eax
		jne    jump_1ac28
		push   %ebx
		push   $aNotEnoughMemor
		call   ac_printf
		add    $0x8,%esp
	jump_1ac28:
		movswl %di,%eax
		cmp    $0xfffffffe,%eax
		jne    jump_1ac3e
		push   %ebx
		push   $aMemoryControlB
		call   ac_printf
		add    $0x8,%esp
	jump_1ac3e:
		movswl %di,%eax
		cmp    $0xfffffffd,%eax
		jne    jump_1ac54
		push   %ebx
		push   $aDescriptorsUna
		call   ac_printf
		add    $0x8,%esp
	jump_1ac54:
		inc    %esi
	jump_1ac55:
		test   %di,%di
		jne    jump_1ac69
		push   %ebx
		push   $aSNotFound
		inc    %esi
		call   ac_printf
		add    $0x8,%esp
	jump_1ac69:
		add    $0x2c,%ebx
		cmpl   $0x0,0x1c(%ebx)
		jne    jump_1ac04
	jump_1ac72:
		test   %si,%si
		je     jump_1ac8f
		movswl %si,%eax
		push   %eax
		push   $aDErrorSOccured
		call   ac_printf
		add    $0x8,%esp
		push   $0x1
		jmp    ac_exit
	jump_1ac8f:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbDataFreeAll:	/* 0x1aca0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x38,%esp
		mov    0x48(%esp),%ebx
		cmpl   $0x0,0x1c(%ebx)
		je     jump_1ad03
	jump_1acb0:
		mov    0x1c(%ebx),%eax
		mov    (%eax),%esi
		test   %esi,%esi
		je     jump_1acfa
		testb  $0x1,0x28(%ebx)
		je     jump_1ace4
		movl   $0x101,0x1c(%esp)
		mov    0x2a(%ebx),%ax
		mov    %ax,0x28(%esp)
		mov    %esp,%eax
		push   %eax
		lea    0x20(%esp),%eax
		push   %eax
		push   $0x31
		call   ac_dos_int386
		add    $0xc,%esp
		jmp    jump_1acf1
	jump_1ace4:
		mov    0x24(%ebx),%edi
		push   %edi
		push   %esi
		call   LbMemoryFree
		add    $0x8,%esp
	jump_1acf1:
		mov    0x1c(%ebx),%eax
		movl   $0x0,(%eax)
	jump_1acfa:
		add    $0x2c,%ebx
		cmpl   $0x0,0x1c(%ebx)
		jne    jump_1acb0
	jump_1ad03:
		add    $0x38,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbMemoryAlloc:	/* 0x1ad10 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    lb_tot_mem_alloced,%edx
		add    %eax,%edx
		add    $0x100,%eax
		push   %eax
		mov    %edx,lb_tot_mem_alloced
		call   ac_malloc
		add    $0x4,%esp
		ret


/*----------------------------------------------------------------*/
LbMemoryFree:	/* 0x1ad40 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0xc(%esp),%eax
		mov    lb_tot_mem_alloced,%edx
		mov    0x8(%esp),%ebx
		sub    %eax,%edx
		push   %ebx
		mov    %edx,lb_tot_mem_alloced
		call   ac_free
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbDataLoad:	/* 0x1ad70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    0x4c(%esp),%ebx
		cmpb   $0x2a,(%ebx)
		jne    jump_1aeca
		testb  $0x1,0x28(%ebx)
		je     jump_1ae63
		mov    0x1c(%ebx),%eax
		cmpl   $0x0,(%eax)
		je     jump_1adc3
		movl   $0x101,(%esp)
		mov    0x2a(%ebx),%ax
		mov    %ax,0xc(%esp)
		lea    0x1c(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		push   $0x31
		call   ac_dos_int386
		mov    0x1c(%ebx),%eax
		add    $0xc,%esp
		movl   $0x0,(%eax)
	jump_1adc3:
		movl   $0x100,(%esp)
		mov    0x24(%ebx),%eax
		add    $0x10,%eax
		shr    $0x4,%eax
		mov    %eax,0x4(%esp)
		lea    0x1c(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		push   $0x31
		call   ac_dos_int386
		add    $0xc,%esp
		mov    0x1c(%esp),%ebp
		cmp    $0x8,%ebp
		jne    jump_1adfe
	jump_1adf4:
		mov    $0xffffffff,%eax
		jmp    jump_1b08b
	jump_1adfe:
		cmp    $0x7,%ebp
		jne    jump_1ae10
		mov    $0xfffffffe,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1ae10:
		cmp    $0x8011,%ebp
		jne    jump_1ae25
		mov    $0xfffffffd,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1ae25:
		mov    %ebp,%ecx
		mov    0x1c(%ebx),%eax
		shl    $0x4,%ecx
		mov    %ecx,(%eax)
		mov    0x28(%esp),%eax
		mov    0x20(%ebx),%esi
		mov    %ax,0x2a(%ebx)
		test   %esi,%esi
		je     jump_1ae45
		mov    0x24(%ebx),%eax
		add    %ecx,%eax
		mov    %eax,(%esi)
	jump_1ae45:
		mov    %ecx,%eax
		mov    0x24(%ebx),%edx
		add    %ecx,%edx
		cmp    %edx,%eax
		jae    jump_1aebd
	jump_1ae54:
		movb   $0x0,(%eax)
		inc    %eax
		mov    0x24(%ebx),%edx
		add    %ecx,%edx
		cmp    %edx,%eax
		jae    jump_1aebd
		jmp    jump_1ae54
	jump_1ae63:
		mov    0x1c(%ebx),%eax
		mov    (%eax),%edx
		test   %edx,%edx
		je     jump_1ae82
		mov    0x24(%ebx),%ecx
		push   %ecx
		push   %edx
		call   LbMemoryFree
		mov    0x1c(%ebx),%eax
		add    $0x8,%esp
		movl   $0x0,(%eax)
	jump_1ae82:
		mov    0x24(%ebx),%edi
		push   %edi
		call   LbMemoryAlloc
		add    $0x4,%esp
		mov    %eax,%ecx
		test   %eax,%eax
		je     jump_1adf4
		mov    0x1c(%ebx),%edx
		mov    %eax,(%edx)
		mov    0x20(%ebx),%ebp
		test   %ebp,%ebp
		je     jump_1aeac
		mov    0x24(%ebx),%edx
		add    %edx,%eax
		mov    %eax,0x0(%ebp)
	jump_1aeac:
		mov    %ecx,%eax
		jmp    jump_1aeb4
	jump_1aeb0:
		movb   $0x0,(%eax)
		inc    %eax
	jump_1aeb4:
		mov    0x24(%ebx),%edx
		add    %ecx,%edx
		cmp    %edx,%eax
		jb     jump_1aeb0
	jump_1aebd:
		mov    $0x1,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1aeca:
		push   $0x200
		push   %ebx
		call   LbFileOpen_
		add    $0x8,%esp
		mov    %eax,%esi
		cmp    $0xffffffff,%eax
		je     jump_1b089
		testb  $0x1,0x28(%ebx)
		je     jump_1afd4
		mov    0x1c(%ebx),%eax
		cmpl   $0x0,(%eax)
		je     jump_1af22
		movl   $0x101,(%esp)
		mov    0x2a(%ebx),%ax
		mov    %ax,0xc(%esp)
		lea    0x1c(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		push   $0x31
		call   ac_dos_int386
		mov    0x1c(%ebx),%eax
		add    $0xc,%esp
		movl   $0x0,(%eax)
	jump_1af22:
		push   %ebx
		call   LbFileLengthRnc
		mov    $0x100,%edx
		add    $0x4,%esp
		mov    %eax,0x24(%ebx)
		mov    %edx,(%esp)
		mov    0x24(%ebx),%eax
		add    $0x110,%eax
		shr    $0x4,%eax
		mov    %eax,0x4(%esp)
		lea    0x1c(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		push   $0x31
		call   ac_dos_int386
		add    $0xc,%esp
		mov    0x1c(%esp),%ecx
		cmp    $0x8,%ecx
		jne    jump_1af6f
		mov    $0xffffffff,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1af6f:
		cmp    $0x7,%ecx
		jne    jump_1af81
		mov    $0xfffffffe,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1af81:
		cmp    $0x8011,%ecx
		jne    jump_1af96
		mov    $0xfffffffd,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1af96:
		mov    0x1c(%ebx),%eax
		shl    $0x4,%ecx
		mov    %ecx,(%eax)
		mov    0x28(%esp),%eax
		mov    %ax,0x2a(%ebx)
		cmpl   $0x0,0x20(%ebx)
		je     jump_1afb6
		mov    0x24(%ebx),%eax
		mov    0x20(%ebx),%edx
		add    %ecx,%eax
		mov    %eax,(%edx)
	jump_1afb6:
		mov    %ecx,%eax
		mov    0x24(%ebx),%edx
		add    %ecx,%edx
		cmp    %edx,%eax
		jae    jump_1b039
	jump_1afc5:
		movb   $0x0,(%eax)
		inc    %eax
		mov    0x24(%ebx),%edx
		add    %ecx,%edx
		cmp    %edx,%eax
		jae    jump_1b039
		jmp    jump_1afc5
	jump_1afd4:
		mov    0x1c(%ebx),%eax
		mov    (%eax),%edx
		test   %edx,%edx
		je     jump_1aff3
		mov    0x24(%ebx),%ecx
		push   %ecx
		push   %edx
		call   LbMemoryFree
		mov    0x1c(%ebx),%eax
		add    $0x8,%esp
		movl   $0x0,(%eax)
	jump_1aff3:
		push   %ebx
		call   LbFileLengthRnc
		add    $0x4,%esp
		push   %eax
		mov    %eax,0x24(%ebx)
		call   LbMemoryAlloc
		add    $0x4,%esp
		mov    %eax,%ecx
		test   %eax,%eax
		je     jump_1b023
		mov    0x1c(%ebx),%edx
		mov    %eax,(%edx)
		mov    0x20(%ebx),%edx
		test   %edx,%edx
		je     jump_1b039
		mov    0x24(%ebx),%edi
		add    %edi,%eax
		mov    %eax,(%edx)
		jmp    jump_1b039
	jump_1b023:
		push   %esi
		call   LbFileClose_
		mov    $0xffffffff,%eax
		add    $0x4,%esp
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1b039:
		mov    0x24(%ebx),%edi
		push   %edi
		push   %ecx
		push   %esi
		call   LbFileRead_
		mov    0x24(%ebx),%ebp
		add    $0xc,%esp
		cmp    %ebp,%eax
		je     jump_1b073
		push   %esi
		call   LbFileClose_
		mov    0x1c(%ebx),%eax
		add    $0x4,%esp
		mov    (%eax),%edx
		push   %edx
		push   %edx
		call   UnpackM1
		mov    $0x1,%eax
		add    $0x8,%esp
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1b073:
		push   %esi
		call   LbFileClose_
		mov    $0x1,%eax
		add    $0x4,%esp
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1b089:
		xor    %eax,%eax
	jump_1b08b:
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
LbFileSaveAt:	/* 0x1b0a0 */
		push   %ebx
		push   %esi
		push   $0x222
		mov    0x10(%esp),%edx
		push   %edx
		call   LbFileOpen_
		add    $0x8,%esp
		mov    0x14(%esp),%ecx
		push   %ecx
		mov    0x14(%esp),%esi
		push   %esi
		push   %eax
		mov    %eax,%ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   %ebx
		call   LbFileClose_
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbFileOpen_:	/* 0x1b0e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		cmpl   $0x222,0x10(%esp)
		jne    jump_1b117
		push   $0x1c0
		mov    0x10(%esp),%ebx
		push   %ebx
		call   ac_dos_creat
		add    $0x8,%esp
		push   $0x200
		push   %eax
		mov    %eax,%ebx
		call   ac_dos_setmode
		add    $0x8,%esp
		push   %ebx
		call   ac_close
		add    $0x4,%esp
	jump_1b117:
		push   $0x40
		mov    0x14(%esp),%ecx
		push   %ecx
		mov    0x14(%esp),%esi
		push   %esi
		call   ac_dos_sopen
		add    $0xc,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbFileClose_:	/* 0x1b130 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		push   %edx
		call   ac_close
		add    $0x4,%esp
		ret
LbFileSeek_:	/* 0x1b140 */
		push   %ebx
		mov    0x10(%esp),%edx
		push   %edx
		mov    0x10(%esp),%ebx
		push   %ebx
		mov    0x10(%esp),%ecx
		push   %ecx
		call   ac_dos_lseek
		add    $0xc,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbFileRead_:	/* 0x1b160 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x10(%esp),%edx
		push   %edx
		mov    0x10(%esp),%ebx
		push   %ebx
		mov    0x10(%esp),%ecx
		push   %ecx
		call   ac_read
		add    $0xc,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbFileWrite_:	/* 0x1b180 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x10(%esp),%edx
		push   %edx
		mov    0x10(%esp),%ebx
		push   %ebx
		mov    0x10(%esp),%ecx
		push   %ecx
		call   ac_write
		add    $0xc,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbFileReadRNC:	/* 0x1b1a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebp
		mov    0x18(%esp),%edi
		push   $0x200
		push   %ebp
		call   LbFileOpen_
		mov    %eax,%ebx
		add    $0x8,%esp
		mov    %eax,%esi
		cmp    $0xffffffff,%eax
		je     jump_1b1fc
		push   %ebp
		call   LbFileLengthRnc
		add    $0x4,%esp
		push   %eax
		push   %edi
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   %edi
		push   %edi
		call   UnpackM1
		add    $0x8,%esp
		test   %eax,%eax
		jge    jump_1b1f3
		push   %ebp
		push   $aErrorDecompres
		call   ac_printf
		add    $0x8,%esp
	jump_1b1f3:
		push   %esi
		call   LbFileClose_
		add    $0x4,%esp
	jump_1b1fc:
		mov    %esi,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbFileLengthRnc:	/* 0x1b210 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x30,%esp
		mov    $0xffffffff,%ebx
		mov    $0x52,%ah
		mov    $0x4e,%dl
		mov    $0x43,%dh
		mov    $0x1,%cl
		push   $0x200
		xor    %ch,%ch
		mov    %dl,0x2d(%esp)
		mov    %dh,0x2e(%esp)
		mov    0x44(%esp),%edx
		mov    %ah,0x2c(%esp)
		push   %edx
		mov    %cl,0x33(%esp)
		mov    %ch,0x34(%esp)
		call   LbFileOpen_
		mov    %eax,%esi
		add    $0x8,%esp
		mov    %eax,%edi
		test   %eax,%eax
		jle    jump_1b2b8
		push   $0x14
		lea    0x4(%esp),%eax
		push   %eax
		push   %esi
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x4
		lea    0x2c(%esp),%eax
		push   %eax
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_strncmp
		add    $0xc,%esp
		test   %eax,%eax
		jne    jump_1b2a2
		xor    %ebx,%ebx
		mov    0x4(%esp),%bl
		mov    0x5(%esp),%al
		shl    $0x8,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		shl    $0x8,%ebx
		mov    0x6(%esp),%al
		add    %eax,%ebx
		xor    %eax,%eax
		shl    $0x8,%ebx
		mov    0x7(%esp),%al
		add    %eax,%ebx
		jmp    jump_1b2ad
	jump_1b2a2:
		push   %esi
		call   ac_dos_filelength
		mov    %eax,%ebx
		add    $0x4,%esp
	jump_1b2ad:
		push   %edi
		call   LbFileClose_
		add    $0x4,%esp
		jmp    jump_1b2ca
	jump_1b2b8:
		mov    0x40(%esp),%ecx
		push   %ecx
		push   $aErrorOpeningS
		call   ac_printf
		add    $0x8,%esp
	jump_1b2ca:
		mov    %ebx,%eax
		add    $0x30,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
nullsub_1:	/* 0x1b2e0 */
/*----------------------------------------------------------------*/
		ret
draw_rect:	/* 0x1b2f0 */
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x24(%esp),%eax
		movswl 0x28(%esp),%esi
		movswl 0x18(%esp),%ebx
		movswl 0x1c(%esp),%edi
		dec    %eax
		push   %esi
		movswl %ax,%ebp
		push   %ebx
		lea    (%edi,%ebp,1),%eax
		mov    0x28(%esp),%edx
		push   %eax
		dec    %edx
		push   %edi
		mov    %edx,0x30(%esp)
		mov    %eax,0x10(%esp)
		call   vertical_line
		add    $0x10,%esp
		movswl 0x20(%esp),%ebp
		push   %esi
		add    %ebx,%ebp
		push   %ebp
		mov    0x8(%esp),%ecx
		push   %ecx
		push   %edi
		call   vertical_line
		add    $0x10,%esp
		push   %esi
		push   %edi
		push   %ebp
		push   %ebx
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		mov    0x4(%esp),%esi
		push   %esi
		push   %ebp
		push   %ebx
		call   horizontal_line
		add    $0x10,%esp
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbScreenSetGraphicsWindow:	/* 0x1b370 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    %eax,GraphicsWindowX
		mov    0x8(%esp),%eax
		mov    %eax,GraphicsWindowY
		mov    0xc(%esp),%eax
		mov    %eax,GraphicsWindowWidth
		mov    0x10(%esp),%eax
		mov    %eax,GraphicsWindowHeight
		ret


/*----------------------------------------------------------------*/
func_1b3a0:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    EXPORT_SYMBOL(DrawFlags),%ah
		test   $0x2,%ah
		je     jump_1b3b9
		mov    $0x1,%ebp
		jmp    jump_1b3c3
	jump_1b3b9:
		test   $0x5,%ah
		je     jump_1b3c3
		mov    $0x2,%ebp
	jump_1b3c3:
		movswl 0x4c(%esp),%eax
		mov    %eax,0x4(%esp)
		movswl 0x44(%esp),%eax
		mov    %eax,0xc(%esp)
		mov    0x4(%esp),%eax
		sub    0xc(%esp),%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		mov    %eax,%edi
		movswl 0x50(%esp),%eax
		mov    %eax,0x8(%esp)
		movswl 0x48(%esp),%eax
		mov    %eax,(%esp)
		mov    0x8(%esp),%eax
		sub    (%esp),%eax
		push   %eax
		call   ac_abs
		mov    %eax,%esi
		add    $0x4,%esp
		cmp    %eax,%edi
		jl     jump_1b4e2
		lea    0x0(,%esi,2),%eax
		mov    0x4c(%esp),%ecx
		mov    %eax,%ebx
		mov    %eax,0x18(%esp)
		sub    %edi,%esi
		mov    0x44(%esp),%eax
		add    %esi,%esi
		sub    %edi,%ebx
		mov    %esi,0x1c(%esp)
		cmp    %cx,%ax
		jle    jump_1b462
		mov    0x4(%esp),%esi
		mov    0xc(%esp),%eax
		mov    0x48(%esp),%ecx
		mov    %eax,0x20(%esp)
		mov    0x50(%esp),%eax
		mov    0x8(%esp),%edi
		cmp    %cx,%ax
		jle    jump_1b48c
		mov    %ebp,%eax
		mov    %ebp,0x28(%esp)
		neg    %eax
		mov    %eax,0x28(%esp)
		jmp    jump_1b490
	jump_1b462:
		mov    0xc(%esp),%esi
		mov    0x4(%esp),%eax
		mov    0x50(%esp),%edx
		mov    %eax,0x20(%esp)
		mov    0x48(%esp),%eax
		mov    (%esp),%edi
		cmp    %dx,%ax
		jle    jump_1b48c
		mov    %ebp,%ecx
		mov    %ebp,0x28(%esp)
		neg    %ecx
		mov    %ecx,0x28(%esp)
		jmp    jump_1b490
	jump_1b48c:
		mov    %ebp,0x28(%esp)
	jump_1b490:
		xor    %eax,%eax
		mov    0x54(%esp),%al
		push   %eax
		push   %edi
		push   %esi
		call   pixel_plot
		add    $0xc,%esp
		cmp    0x20(%esp),%esi
		jge    jump_1b5a4
	jump_1b4ab:
		add    %ebp,%esi
		test   %ebx,%ebx
		jge    jump_1b4b7
		add    0x18(%esp),%ebx
		jmp    jump_1b4c3
	jump_1b4b7:
		mov    0x28(%esp),%edx
		mov    0x1c(%esp),%ecx
		add    %edx,%edi
		add    %ecx,%ebx
	jump_1b4c3:
		xor    %eax,%eax
		mov    0x54(%esp),%al
		push   %eax
		push   %edi
		push   %esi
		call   pixel_plot
		add    $0xc,%esp
		cmp    0x20(%esp),%esi
		jl     jump_1b4ab
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1b4e2:
		lea    0x0(,%edi,2),%eax
		mov    0x50(%esp),%edx
		mov    %eax,%ebx
		mov    %eax,0x10(%esp)
		sub    %esi,%edi
		mov    0x48(%esp),%eax
		add    %edi,%edi
		sub    %esi,%ebx
		mov    %edi,0x14(%esp)
		cmp    %dx,%ax
		jle    jump_1b530
		mov    0x4(%esp),%edi
		mov    (%esp),%eax
		mov    0x44(%esp),%edx
		mov    %eax,0x24(%esp)
		mov    0x4c(%esp),%eax
		mov    0x8(%esp),%esi
		cmp    %dx,%ax
		jle    jump_1b55a
		mov    %ebp,%eax
		mov    %ebp,0x2c(%esp)
		neg    %eax
		mov    %eax,0x2c(%esp)
		jmp    jump_1b55e
	jump_1b530:
		mov    0xc(%esp),%edi
		mov    0x8(%esp),%eax
		mov    0x4c(%esp),%ecx
		mov    %eax,0x24(%esp)
		mov    0x44(%esp),%eax
		mov    (%esp),%esi
		cmp    %cx,%ax
		jle    jump_1b55a
		mov    %ebp,%ecx
		mov    %ebp,0x2c(%esp)
		neg    %ecx
		mov    %ecx,0x2c(%esp)
		jmp    jump_1b55e
	jump_1b55a:
		mov    %ebp,0x2c(%esp)
	jump_1b55e:
		xor    %eax,%eax
		mov    0x54(%esp),%al
		push   %eax
		push   %esi
		push   %edi
		call   pixel_plot
		add    $0xc,%esp
		cmp    0x24(%esp),%esi
		jge    jump_1b5a4
	jump_1b575:
		add    %ebp,%esi
		test   %ebx,%ebx
		jge    jump_1b581
		add    0x10(%esp),%ebx
		jmp    jump_1b58d
	jump_1b581:
		mov    0x2c(%esp),%eax
		mov    0x14(%esp),%edx
		add    %eax,%edi
		add    %edx,%ebx
	jump_1b58d:
		xor    %eax,%eax
		mov    0x54(%esp),%al
		push   %eax
		push   %esi
		push   %edi
		call   pixel_plot
		add    $0xc,%esp
		cmp    0x24(%esp),%esi
		jl     jump_1b575
	jump_1b5a4:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_1b5ac:
		.long   func_1b621
		.long   func_1b660
		.long   func_1b6d5
		.long   func_1b77f
		.long   func_1b852
		.long   func_1b948
		.long   func_1ba6e


/*----------------------------------------------------------------*/
scircle:	/* 0x1b5d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x64,%esp
		mov    0x78(%esp),%eax
		mov    0x7c(%esp),%edi
		mov    0x80(%esp),%ebx
		mov    0x84(%esp),%dl
		cmp    $0x1,%bx
		jg     jump_1b5fa
		mov    $0x2,%ebx
		jmp    jump_1b605
	jump_1b5fa:
		cmp    $0x8,%bx
		jle    jump_1b605
		mov    $0x8,%ebx
	jump_1b605:
		sub    $0x2,%bx
		cmp    $0x6,%bx
		ja     jump_1bbbc
		and    $0xffff,%ebx
		jmp    *%cs:vtable_1b5ac(,%ebx,4)


/*----------------------------------------------------------------*/
func_1b621:
/*----------------------------------------------------------------*/
		movzbl %dl,%esi
		movswl %di,%edi
		push   %esi
		lea    -0x1(%edi),%ebx
		push   %ebx
		movswl %ax,%ebx
		push   %ebx
		push   %ebx
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		push   %edi
		lea    0x1(%ebx),%eax
		push   %eax
		lea    -0x1(%ebx),%eax
		push   %eax
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		inc    %edi
		push   %edi
		push   %ebx
		push   %ebx
		call   horizontal_line
		add    $0x10,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1b660:
/*----------------------------------------------------------------*/
		movzbl %dl,%esi
		movswl %di,%ebx
		push   %esi
		lea    -0x2(%ebx),%edi
		push   %edi
		movswl %ax,%edi
		lea    0x1(%edi),%eax
		push   %eax
		mov    %eax,0x10(%esp)
		lea    -0x1(%edi),%eax
		push   %eax
		mov    %eax,0x10(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    -0x1(%ebx),%ebp
		push   %ebp
		lea    0x2(%edi),%ebp
		push   %ebp
		sub    $0x2,%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		push   %ebx
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    0x1(%ebx),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		add    $0x2,%ebx
		push   %ebx
		mov    0xc(%esp),%edx
		push   %edx
		mov    0xc(%esp),%ebx
		push   %ebx
		call   horizontal_line
		add    $0x10,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1b6d5:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    %dl,%bl
		movswl %di,%esi
		push   %ebx
		lea    -0x3(%esi),%edi
		push   %edi
		movswl %ax,%edi
		lea    0x1(%edi),%eax
		push   %eax
		mov    %eax,0xc(%esp)
		lea    -0x1(%edi),%eax
		push   %eax
		mov    %eax,0x14(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x2(%esi),%eax
		push   %eax
		lea    0x2(%edi),%eax
		push   %eax
		mov    %eax,0x14(%esp)
		lea    -0x2(%edi),%eax
		push   %eax
		mov    %eax,0x1c(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x1(%esi),%eax
		push   %eax
		lea    0x3(%edi),%ebp
		push   %ebp
		sub    $0x3,%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		push   %esi
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x2(%esi),%eax
		push   %eax
		mov    0x10(%esp),%edx
		push   %edx
		mov    0x18(%esp),%ecx
		push   %ecx
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		add    $0x3,%esi
		push   %esi
		mov    0x8(%esp),%esi
		push   %esi
		mov    0x10(%esp),%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1b77f:
/*----------------------------------------------------------------*/
		movzbl %dl,%esi
		movswl %di,%ebx
		push   %esi
		lea    -0x4(%ebx),%edi
		push   %edi
		movswl %ax,%edi
		lea    0x1(%edi),%eax
		push   %eax
		mov    %eax,0x50(%esp)
		lea    -0x1(%edi),%eax
		push   %eax
		mov    %eax,0x40(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    -0x3(%ebx),%eax
		push   %eax
		lea    0x3(%edi),%ebp
		push   %ebp
		lea    -0x3(%edi),%eax
		push   %eax
		mov    %eax,0x70(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    -0x2(%ebx),%eax
		push   %eax
		push   %ebp
		mov    0x6c(%esp),%edx
		push   %edx
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    -0x1(%ebx),%eax
		push   %eax
		lea    0x4(%edi),%eax
		push   %eax
		sub    $0x4,%edi
		push   %edi
		mov    %eax,0x1c(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		push   %ebx
		mov    0x14(%esp),%eax
		push   %eax
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    0x1(%ebx),%eax
		push   %eax
		mov    0x14(%esp),%edx
		push   %edx
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    0x2(%ebx),%eax
		push   %eax
		push   %ebp
		mov    0x6c(%esp),%ecx
		push   %ecx
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		lea    0x3(%ebx),%eax
		push   %eax
		push   %ebp
		mov    0x6c(%esp),%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %esi
		add    $0x4,%ebx
		push   %ebx
		mov    0x4c(%esp),%ebp
		push   %ebp
		mov    0x3c(%esp),%eax
		push   %eax
		call   horizontal_line
		add    $0x10,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1b852:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    %dl,%bl
		movswl %di,%esi
		push   %ebx
		lea    -0x5(%esi),%edi
		push   %edi
		movswl %ax,%edi
		lea    0x2(%edi),%eax
		push   %eax
		mov    %eax,0x34(%esp)
		lea    -0x2(%edi),%eax
		push   %eax
		mov    %eax,0x4c(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x4(%esi),%eax
		push   %eax
		lea    0x4(%edi),%eax
		push   %eax
		mov    %eax,0x5c(%esp)
		lea    -0x4(%edi),%eax
		push   %eax
		mov    %eax,0x58(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x3(%esi),%eax
		push   %eax
		mov    0x58(%esp),%ebp
		push   %ebp
		mov    0x54(%esp),%eax
		push   %eax
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x2(%esi),%eax
		push   %eax
		lea    0x5(%edi),%ebp
		push   %ebp
		sub    $0x5,%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		push   %esi
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x2(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x3(%esi),%eax
		push   %eax
		mov    0x58(%esp),%edx
		push   %edx
		mov    0x54(%esp),%ecx
		push   %ecx
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x4(%esi),%eax
		push   %eax
		mov    0x58(%esp),%edi
		push   %edi
		mov    0x54(%esp),%ebp
		push   %ebp
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		add    $0x5,%esi
		push   %esi
		mov    0x30(%esp),%eax
		push   %eax
		mov    0x48(%esp),%edx
		push   %edx
		call   horizontal_line
		add    $0x10,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1b948:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    %dl,%bl
		movswl %di,%esi
		push   %ebx
		lea    -0x6(%esi),%edi
		push   %edi
		movswl %ax,%edi
		lea    0x2(%edi),%eax
		push   %eax
		mov    %eax,0x28(%esp)
		lea    -0x2(%edi),%eax
		push   %eax
		mov    %eax,0x20(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x5(%esi),%eax
		push   %eax
		lea    0x4(%edi),%eax
		push   %eax
		mov    %eax,0x30(%esp)
		lea    -0x4(%edi),%eax
		push   %eax
		mov    %eax,0x28(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x4(%esi),%eax
		push   %eax
		lea    0x5(%edi),%eax
		push   %eax
		mov    %eax,0x58(%esp)
		lea    -0x5(%edi),%eax
		push   %eax
		mov    %eax,0x64(%esp)
		mov    %eax,%ebp
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x3(%esi),%eax
		push   %eax
		mov    0x54(%esp),%eax
		push   %eax
		mov    %ebp,%edx
		push   %edx
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x2(%esi),%eax
		push   %eax
		lea    0x6(%edi),%ebp
		push   %ebp
		sub    $0x6,%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		push   %esi
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x2(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x3(%esi),%eax
		push   %eax
		mov    0x54(%esp),%ecx
		push   %ecx
		mov    0x60(%esp),%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x4(%esi),%eax
		push   %eax
		mov    0x54(%esp),%ebp
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x5(%esi),%eax
		push   %eax
		mov    0x2c(%esp),%edx
		push   %edx
		mov    0x24(%esp),%ecx
		push   %ecx
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		add    $0x6,%esi
		push   %esi
		mov    0x24(%esp),%esi
		push   %esi
		mov    0x1c(%esp),%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1ba6e:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    %dl,%bl
		movswl %di,%esi
		push   %ebx
		lea    -0x7(%esi),%edi
		push   %edi
		movswl %ax,%edi
		lea    0x2(%edi),%eax
		push   %eax
		mov    %eax,0x20(%esp)
		lea    -0x2(%edi),%eax
		push   %eax
		mov    %eax,0x44(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x6(%esi),%eax
		push   %eax
		lea    0x4(%edi),%eax
		push   %eax
		mov    %eax,0x4c(%esp)
		lea    -0x4(%edi),%eax
		push   %eax
		mov    %eax,0x30(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x5(%esi),%eax
		push   %eax
		lea    0x5(%edi),%eax
		push   %eax
		mov    %eax,0x38(%esp)
		lea    -0x5(%edi),%eax
		push   %eax
		mov    %eax,0x48(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x4(%esi),%eax
		push   %eax
		lea    0x6(%edi),%eax
		mov    %eax,0x60(%esp)
		push   %eax
		mov    %eax,%ebp
		lea    -0x6(%edi),%eax
		push   %eax
		mov    %eax,0x6c(%esp)
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x3(%esi),%eax
		push   %eax
		mov    %ebp,%edx
		push   %edx
		mov    0x68(%esp),%ecx
		push   %ecx
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x2(%esi),%eax
		push   %eax
		lea    0x7(%edi),%ebp
		push   %ebp
		sub    $0x7,%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    -0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		push   %esi
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x1(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x2(%esi),%eax
		push   %eax
		push   %ebp
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x3(%esi),%eax
		push   %eax
		mov    0x60(%esp),%edi
		push   %edi
		mov    0x68(%esp),%ebp
		push   %ebp
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x4(%esi),%eax
		push   %eax
		push   %edi
		push   %ebp
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x5(%esi),%eax
		push   %eax
		mov    0x34(%esp),%ecx
		push   %ecx
		mov    0x44(%esp),%edi
		push   %edi
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		lea    0x6(%esi),%eax
		push   %eax
		mov    0x48(%esp),%ebp
		push   %ebp
		mov    0x2c(%esp),%eax
		push   %eax
		call   horizontal_line
		add    $0x10,%esp
		push   %ebx
		add    $0x7,%esi
		push   %esi
		mov    0x1c(%esp),%edx
		push   %edx
		mov    0x40(%esp),%ebx
		push   %ebx
		call   horizontal_line
		add    $0x10,%esp
	jump_1bbbc:
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ccircle:	/* 0x1bbd0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    0x38(%esp),%ebx
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(DrawFlags),%ah
		mov    %edx,0xc(%esp)
		test   $0x2,%ah
		jne    jump_1bbfc
		test   $0x5,%ah
		je     jump_1bbfc
		movl   $0x2,0xc(%esp)
	jump_1bbfc:
		xor    %edi,%edi
		mov    %ebx,%esi
		mov    %edi,0x18(%esp)
		add    %ebx,%esi
		mov    $0x3,%edi
		sub    %esi,%edi
		mov    %ebx,0x14(%esp)
		mov    %edi,0x10(%esp)
		test   %bx,%bx
		jle    jump_1bd37
	jump_1bc1e:
		movswl 0x34(%esp),%ebp
		movswl 0x14(%esp),%edi
		xor    %ebx,%ebx
		mov    %ebp,%eax
		mov    0x3c(%esp),%bl
		sub    %edi,%eax
		push   %ebx
		mov    %eax,0x8(%esp)
		push   %eax
		movswl 0x38(%esp),%eax
		movswl 0x20(%esp),%esi
		mov    %eax,0x10(%esp)
		sub    %esi,%eax
		push   %eax
		mov    %eax,0xc(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		mov    0x8(%esp),%ecx
		mov    0xc(%esp),%eax
		push   %ecx
		add    %esi,%eax
		push   %eax
		mov    %eax,0x10(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		lea    (%edi,%ebp,1),%eax
		push   %eax
		mov    0x8(%esp),%ecx
		push   %ecx
		mov    %eax,0xc(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		mov    0x4(%esp),%eax
		push   %eax
		mov    0xc(%esp),%edx
		push   %edx
		call   pixel_plot
		mov    %ebp,%eax
		add    $0xc,%esp
		sub    %esi,%eax
		push   %ebx
		mov    %eax,0x8(%esp)
		push   %eax
		mov    0x10(%esp),%eax
		sub    %edi,%eax
		push   %eax
		mov    %eax,0xc(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		mov    0x8(%esp),%edx
		mov    0xc(%esp),%ecx
		push   %edx
		add    %ecx,%edi
		push   %edi
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		add    %ebp,%esi
		push   %esi
		mov    0x8(%esp),%ebp
		push   %ebp
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		push   %esi
		push   %edi
		call   pixel_plot
		add    $0xc,%esp
		mov    0x10(%esp),%esi
		test   %si,%si
		jge    jump_1bcfc
		mov    0x18(%esp),%ebx
		shl    $0x2,%ebx
		add    %esi,%ebx
		add    $0x6,%ebx
		jmp    jump_1bd1a
	jump_1bcfc:
		mov    0x18(%esp),%ebx
		mov    0x14(%esp),%edi
		sub    %edi,%ebx
		mov    0xc(%esp),%eax
		shl    $0x2,%ebx
		mov    %edi,%edx
		add    %esi,%ebx
		sub    %eax,%edx
		add    $0xa,%ebx
		mov    %edx,0x14(%esp)
	jump_1bd1a:
		mov    %ebx,0x10(%esp)
		mov    0xc(%esp),%ebx
		mov    0x18(%esp),%eax
		add    %ebx,%eax
		mov    %eax,0x18(%esp)
		cmp    0x14(%esp),%ax
		jl     jump_1bc1e
	jump_1bd37:
		mov    0x18(%esp),%ebx
		mov    0x14(%esp),%ecx
		cmp    %cx,%bx
		jne    jump_1be11
		movswl 0x34(%esp),%edi
		movswl 0x18(%esp),%eax
		xor    %ebx,%ebx
		movswl %cx,%ebp
		mov    0x3c(%esp),%bl
		mov    %edi,%esi
		push   %ebx
		sub    %ebp,%esi
		mov    %eax,0x4(%esp)
		mov    %esi,0xc(%esp)
		push   %esi
		movswl 0x38(%esp),%esi
		mov    0x8(%esp),%ecx
		mov    %esi,%eax
		sub    %ecx,%eax
		push   %eax
		mov    %eax,0x10(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		mov    0xc(%esp),%edx
		mov    0x4(%esp),%eax
		push   %edx
		add    %esi,%eax
		push   %eax
		mov    %eax,0x14(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		lea    (%edi,%ebp,1),%eax
		push   %eax
		mov    0xc(%esp),%edx
		push   %edx
		mov    %eax,0x10(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		mov    0x8(%esp),%ecx
		push   %ecx
		mov    0x10(%esp),%eax
		push   %eax
		call   pixel_plot
		add    $0xc,%esp
		mov    %edi,%eax
		sub    (%esp),%eax
		push   %ebx
		mov    %eax,0x8(%esp)
		push   %eax
		mov    %esi,%eax
		sub    %ebp,%eax
		push   %eax
		mov    %eax,0x14(%esp)
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		mov    0x8(%esp),%edx
		push   %edx
		add    %ebp,%esi
		push   %esi
		call   pixel_plot
		add    $0xc,%esp
		mov    (%esp),%ecx
		push   %ebx
		add    %ecx,%edi
		push   %edi
		mov    0x10(%esp),%ebp
		push   %ebp
		call   pixel_plot
		add    $0xc,%esp
		push   %ebx
		push   %edi
		push   %esi
		call   pixel_plot
		add    $0xc,%esp
	jump_1be11:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

jpt_1C0B0:	/* 0x1be1c */
		.long   jump_1c202
		.long   func_1c1a7
		.long   func_1c1a7
		.long   func_1c1a7
		.long   func_1c1a7
		.long   func_1c0b8
		.long   func_1c110
		.long   func_1c110
		.long   func_1c110
		.long   func_1c110
		.long   func_1c168
		.long   func_1c110
		.long   jump_1c202
		.long   func_1c1a7
		.long   func_1c0b8
		.long   func_1c110
jpt_1BE5C:	/* 0x1be5c */
		.long   jump_1c7c0
		.long   func_1c419
		.long   func_1c3e1
		.long   jump_1c7c0
		.long   func_1c795
		.long   jump_1c7c0
jpt_1BE74:	/* 0x1be74 */
		.long   jump_1cc3c
		.long   func_1cb44
		.long   func_1cb44
		.long   func_1cb44
		.long   jump_1cc47
		.long   func_1cb44
		.long   jump_1cc47
		.long   jump_1cc47
		.long   jump_1cc47
		.long   jump_1cc47
		.long   jump_1cc47
		.long   jump_1cc47
		.long   jump_1cc47
		.long   jump_1cc47
		.long   func_1cb44
		.long   func_1cb44
		.long   func_1c9f7


/*----------------------------------------------------------------*/
draw_tact_map:	/* 0x1bec0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x644,%esp
		mov    $0xffffffff,%edx
		mov    $0x80,%eax
		xor    %ecx,%ecx
		mov    %edx,0x640(%esp)
		mov    %edx,0x60c(%esp)
		mov    %edx,0x63c(%esp)
		mov    %eax,%edx
		mov    0x65c(%esp),%cx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x638(%esp)
		mov    0x658(%esp),%eax
		mov    0x4(%eax),%ax
		mov    %eax,0x620(%esp)
		mov    0x658(%esp),%eax
		mov    0x6(%eax),%ax
		mov    %eax,0x618(%esp)
		mov    $0x8000,%eax
		mov    %eax,%edx
		lea    0x0(,%ecx,2),%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		movswl 0x620(%esp),%edx
		sub    %eax,%edx
		mov    %edx,0x620(%esp)
		movswl 0x618(%esp),%edx
		sub    %eax,%edx
		mov    0x620(%esp),%eax
		xor    %ah,%ah
		movswl %ax,%ebx
		mov    $0x100,%eax
		mov    %edx,0x618(%esp)
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x604(%esp)
		mov    0x618(%esp),%eax
		xor    %ah,%ah
		movswl %ax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x608(%esp)
		mov    0x620(%esp),%eax
		cwtd
		shl    $0x8,%dx
		sbb    %dx,%ax
		sar    $0x8,%ax
		mov    %eax,0x620(%esp)
		mov    0x618(%esp),%eax
		cwtd
		shl    $0x8,%dx
		sbb    %dx,%ax
		sar    $0x8,%ax
		xor    %edi,%edi
		mov    %eax,0x618(%esp)
		mov    %eax,0x610(%esp)
		jmp    jump_1c220
	jump_1bfe2:
		mov    0x610(%esp),%esi
		cmp    $0x60,%si
		jge    jump_1c243
		test   %si,%si
		jl     jump_1c219
		mov    0x620(%esp),%ebx
		movswl 0x620(%esp),%esi
		jmp    jump_1c203
	jump_1c010:
		cmp    $0x80,%bx
		jge    jump_1c219
		test   %bx,%bx
		jl     jump_1c202
		movswl 0x610(%esp),%ebp
		mov    %ebp,%edx
		shl    $0x8,%edx
		movl   $0x6000,0x600(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x600(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %ecx,%edx
		shl    $0x8,%edx
		shl    $0x7,%eax
		and    $0xff00,%edx
		mov    %eax,0x600(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		add    0x600(%esp),%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		add    %edx,%eax
		mov    (%eax),%eax
		mov    (%eax),%al
		mov    h_col,%edx
		and    $0xff,%eax
		add    %edx,%eax
		mov    (%eax),%dl
		cmp    $0xf,%dl
		ja     jump_1c202
		mov    %dl,%al
		and    $0xff,%eax
		jmp    *%cs:jpt_1C0B0(,%eax,4)


/*----------------------------------------------------------------*/
func_1c0b8:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0x7
		mov    0x660(%esp),%ax
		push   %eax
		movswl 0x618(%esp),%ecx
		push   %eax
		movswl 0x624(%esp),%eax
		sub    %eax,%ecx
		xor    %eax,%eax
		mov    0x668(%esp),%ax
		imul   %eax,%ecx
		movswl 0x614(%esp),%edx
		sub    %edx,%ecx
		push   %ecx
		movswl %bx,%edx
		movswl 0x630(%esp),%ecx
		sub    %ecx,%edx
		imul   %eax,%edx
		movswl 0x614(%esp),%eax
		sub    %eax,%edx
		push   %edx
		jmp    jump_1c1fa


/*----------------------------------------------------------------*/
func_1c110:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0xa
		mov    0x660(%esp),%ax
		push   %eax
		movswl 0x618(%esp),%ecx
		push   %eax
		movswl 0x624(%esp),%eax
		sub    %eax,%ecx
		xor    %eax,%eax
		mov    0x668(%esp),%ax
		imul   %eax,%ecx
		movswl 0x614(%esp),%edx
		sub    %edx,%ecx
		movswl 0x62c(%esp),%edx
		push   %ecx
		movswl %bx,%ecx
		sub    %edx,%ecx
		imul   %eax,%ecx
		movswl 0x614(%esp),%eax
		sub    %eax,%ecx
		push   %ecx
		jmp    jump_1c1fa


/*----------------------------------------------------------------*/
func_1c168:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0x0
		mov    0x660(%esp),%ax
		push   %eax
		push   %eax
		movswl 0x624(%esp),%eax
		sub    %eax,%ebp
		xor    %eax,%eax
		mov    0x668(%esp),%ax
		imul   %eax,%ebp
		sub    %esi,%ecx
		imul   %ecx,%eax
		movswl 0x614(%esp),%edx
		sub    %edx,%ebp
		movswl 0x610(%esp),%edx
		push   %ebp
		jmp    jump_1c1f7


/*----------------------------------------------------------------*/
func_1c1a7:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0xf
		mov    0x660(%esp),%ax
		movswl 0x614(%esp),%ecx
		push   %eax
		movswl 0x620(%esp),%edx
		push   %eax
		xor    %eax,%eax
		sub    %edx,%ecx
		mov    0x668(%esp),%ax
		imul   %eax,%ecx
		movswl 0x614(%esp),%edx
		sub    %edx,%ecx
		push   %ecx
		movswl %bx,%edx
		movswl 0x630(%esp),%ecx
		sub    %ecx,%edx
		imul   %edx,%eax
		movswl 0x614(%esp),%edx
	jump_1c1f7:
		sub    %edx,%eax
		push   %eax
	jump_1c1fa:
		call   rectangle
		add    $0x14,%esp
	jump_1c202:
		inc    %ebx
	jump_1c203:
		movswl 0x638(%esp),%eax
		add    %esi,%eax
		movswl %bx,%ecx
		inc    %eax
		cmp    %eax,%ecx
		jle    jump_1c010
	jump_1c219:
		incl   0x610(%esp)
	jump_1c220:
		movswl 0x618(%esp),%edx
		movswl 0x638(%esp),%eax
		add    %edx,%eax
		movswl 0x610(%esp),%edx
		inc    %eax
		cmp    %eax,%edx
		jle    jump_1bfe2
	jump_1c243:
		mov    0x618(%esp),%eax
		mov    %eax,0x614(%esp)
		jmp    jump_1c813
	jump_1c256:
		mov    0x614(%esp),%ebx
		cmp    $0x60,%bx
		jge    jump_1c836
		test   %bx,%bx
		jl     jump_1c80c
		mov    0x620(%esp),%eax
		mov    %eax,0x61c(%esp)
		jmp    jump_1c7e9
	jump_1c283:
		mov    0x61c(%esp),%esi
		cmp    $0x80,%si
		jge    jump_1c80c
		test   %si,%si
		jl     jump_1c7e2
		movswl 0x614(%esp),%edx
		shl    $0x7,%edx
		add    %edx,%eax
		xor    %ebx,%ebx
		mov    level__MapWho(,%eax,2),%ax
		mov    %ebx,0x628(%esp)
		test   %ax,%ax
		je     jump_1c7e2
	jump_1c2c5:
		xor    %esi,%esi
		mov    %ax,%si
		add    $level__things_base,%esi
		testb  $0x1,0xb(%esi)
		jne    jump_1c7c0
		testb  $0x1,0xa(%esi)
		je     jump_1c310
		mov    %esi,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		cmp    %edx,%eax
		jne    jump_1c7c0
	jump_1c310:
		xor    %edx,%edx
		mov    0x65c(%esp),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    %eax,0x62c(%esp)
		cmp    $0x1,%ax
		jge    jump_1c33b
		movl   $0x1,0x62c(%esp)
	jump_1c33b:
		movswl 0x61c(%esp),%ecx
		xor    %ebx,%ebx
		movswl 0x620(%esp),%edx
		mov    0x65c(%esp),%bx
		sub    %edx,%ecx
		imul   %ebx,%ecx
		movswl 0x604(%esp),%eax
		sub    %eax,%ecx
		mov    0x4(%esi),%ax
		xor    %ah,%ah
		movswl %ax,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		add    %ecx,%eax
		movswl 0x618(%esp),%edx
		mov    %eax,0x630(%esp)
		movswl 0x614(%esp),%eax
		sub    %edx,%eax
		imul   %ebx,%eax
		movswl 0x608(%esp),%ecx
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    0x6(%esi),%ax
		xor    %ah,%ah
		movswl %ax,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		add    %ecx,%eax
		mov    0x18(%esi),%dh
		mov    %eax,0x634(%esp)
		cmp    $0x5,%dh
		ja     jump_1c7c0
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:jpt_1BE5C(,%eax,4)


/*----------------------------------------------------------------*/
func_1c3e1:
/*----------------------------------------------------------------*/
		push   $0xc
		movswl 0x630(%esp),%eax
		push   %eax
		movswl 0x634(%esp),%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		movswl 0x640(%esp),%edx
		sub    %eax,%edx
		push   %edx
		movswl 0x640(%esp),%edx
		sub    %eax,%edx
		push   %edx
		jmp    jump_1c7b8


/*----------------------------------------------------------------*/
func_1c419:
/*----------------------------------------------------------------*/
		mov    $0xffff,%edx
		mov    0x1c(%esi),%cl
		mov    %esi,%ebx
		test   $0x2,%cl
		je     jump_1c44b
		mov    %esi,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%edx
	jump_1c44b:
		mov    %edi,%eax
		inc    %eax
		mov    EXPORT_SYMBOL(is_multiplayer_game),%ch
		mov    %eax,0x624(%esp)
		test   %ch,%ch
		je     jump_1c5eb
		testb  $0x8,0x1c(%ebx)
		je     jump_1c4ad
		cmpw   $0x0,0x20(%ebx)
		jne    jump_1c4ad
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    $0x3,%cl
		mov    $0x4,%ch
		mov    %cl,0x4(%esp,%eax,2)
		mov    0x630(%esp),%edx
		mov    %ch,0x5(%esp,%eax,2)
		mov    %dx,(%esp,%eax,2)
		mov    0x634(%esp),%edx
		mov    0x624(%esp),%edi
		mov    %dx,0x2(%esp,%eax,2)
		jmp    jump_1c760
	jump_1c4ad:
		testb  $0x4,0x1c(%ebx)
		je     jump_1c4f1
		cmpw   $0x0,0x20(%ebx)
		jne    jump_1c4f1
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    0x630(%esp),%edx
		mov    %dx,(%esp,%eax,2)
		mov    0x634(%esp),%edx
		mov    %dx,0x2(%esp,%eax,2)
		mov    $0x3,%dl
		mov    $0xf,%dh
		mov    %dl,0x4(%esp,%eax,2)
		inc    %edi
		mov    %dh,0x5(%esp,%eax,2)
		jmp    jump_1c760
	jump_1c4f1:
		mov    0x20(%ebx),%cx
		test   %cx,%cx
		je     jump_1c528
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %eax,%edx
		add    $level__things_base,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%edx
	jump_1c528:
		xor    %ecx,%ecx
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    %dx,%cx
		cmp    %eax,%ecx
		je     jump_1c546
		cmpw   $0x0,data_60b30
		jle    jump_1c5cf
	jump_1c546:
		cmp    $0xffff,%dx
		je     jump_1c5cf
		xor    %ecx,%ecx
		mov    %di,%cx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		add    %eax,%eax
		mov    0x630(%esp),%ecx
		mov    %cx,(%esp,%eax,1)
		mov    0x634(%esp),%ecx
		mov    %cx,0x2(%esp,%eax,1)
		xor    %ecx,%ecx
		movswl EXPORT_SYMBOL(Network__Slot),%ebp
		mov    %dx,%cx
		cmp    %ebp,%ecx
		movb   $0x3,0x4(%esp,%eax,1)
		and    $0xffff,%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    %di,%dx
		mov    data_5e4ab(%eax),%cl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    player_colour_for_map(%ecx),%dl
		inc    %edi
		mov    %dl,0x5(%esp,%eax,2)
		jmp    jump_1c760
	jump_1c5cf:
		cmp    $0xffff,%dx
		jne    jump_1c760
		cmpb   $0x0,data_5e395
		je     jump_1c760
		jmp    jump_1c73e
	jump_1c5eb:
		testb  $0x8,0x1c(%ebx)
		je     jump_1c635
		cmpw   $0x0,0x20(%ebx)
		jne    jump_1c635
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    0x630(%esp),%edx
		mov    %dx,(%esp,%eax,2)
		mov    0x634(%esp),%edx
		mov    %dx,0x2(%esp,%eax,2)
		mov    $0x3,%dl
		mov    $0x4,%dh
		mov    %dl,0x4(%esp,%eax,2)
		mov    0x624(%esp),%edi
		mov    %dh,0x5(%esp,%eax,2)
		jmp    jump_1c760
	jump_1c635:
		testb  $0x4,0x1c(%ebx)
		je     jump_1c679
		cmpw   $0x0,0x20(%ebx)
		jne    jump_1c679
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    $0x3,%cl
		mov    $0xf,%ch
		mov    %cl,0x4(%esp,%eax,2)
		mov    0x630(%esp),%edx
		mov    %ch,0x5(%esp,%eax,2)
		mov    %dx,(%esp,%eax,2)
		mov    0x634(%esp),%edx
		inc    %edi
		mov    %dx,0x2(%esp,%eax,2)
		jmp    jump_1c760
	jump_1c679:
		mov    0x20(%ebx),%cx
		test   %cx,%cx
		je     jump_1c6ae
		xor    %edx,%edx
		mov    %cx,%dx
		add    $level__things_base,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%edx
	jump_1c6ae:
		cmp    $0xffff,%dx
		je     jump_1c735
		xor    %ecx,%ecx
		mov    %di,%cx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		add    %eax,%eax
		mov    0x630(%esp),%ecx
		mov    %cx,(%esp,%eax,1)
		mov    0x634(%esp),%ecx
		and    $0xffff,%edx
		mov    %cx,0x2(%esp,%eax,1)
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		cmp    %ecx,%edx
		jne    jump_1c726
		movb   $0x3,0x4(%esp,%eax,1)
		cmpw   $0x0,0x20(%ebx)
		je     jump_1c711
		testb  $0x20,0x1c(%ebx)
		je     jump_1c711
		mov    data_5e396,%dl
		add    $0xb,%dl
		mov    %dl,0x5(%esp,%eax,1)
		jmp    jump_1c732
	jump_1c711:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		movb   $0xb,0x5(%esp,%eax,2)
		jmp    jump_1c732
	jump_1c726:
		mov    $0x3,%dh
		mov    $0xe,%cl
		mov    %dh,0x4(%esp,%eax,1)
		mov    %cl,0x5(%esp,%eax,1)
	jump_1c732:
		inc    %edi
		jmp    jump_1c760
	jump_1c735:
		cmpb   $0x0,data_5e395
		je     jump_1c760
	jump_1c73e:
		push   $0xc
		push   $0x2
		movswl 0x63c(%esp),%eax
		push   $0x2
		dec    %eax
		push   %eax
		movswl 0x640(%esp),%eax
		dec    %eax
		push   %eax
		call   rectangle
		add    $0x14,%esp
	jump_1c760:
		cmp    0x658(%esp),%ebx
		jne    jump_1c7c0
		mov    0x630(%esp),%eax
		mov    %eax,0x640(%esp)
		mov    0x634(%esp),%eax
		mov    %eax,0x60c(%esp)
		mov    0x62c(%esp),%eax
		mov    %eax,0x63c(%esp)
		jmp    jump_1c7c0


/*----------------------------------------------------------------*/
func_1c795:
/*----------------------------------------------------------------*/
		cmpb   $0x0,data_5e395
		je     jump_1c7c0
		push   $0x4
		push   $0x2
		movswl 0x63c(%esp),%eax
		push   $0x2
		dec    %eax
		push   %eax
		movswl 0x640(%esp),%eax
		dec    %eax
		push   %eax
	jump_1c7b8:
		call   rectangle
		add    $0x14,%esp
	jump_1c7c0:
		mov    0x628(%esp),%edx
		inc    %edx
		mov    (%esi),%ax
		mov    %edx,0x628(%esp)
		cmp    $0x12c,%dx
		jge    jump_1c7e2
		test   %ax,%ax
		jne    jump_1c2c5
	jump_1c7e2:
		incl   0x61c(%esp)
	jump_1c7e9:
		movswl 0x620(%esp),%edx
		movswl 0x638(%esp),%eax
		add    %eax,%edx
		movswl 0x61c(%esp),%eax
		inc    %edx
		cmp    %edx,%eax
		jle    jump_1c283
	jump_1c80c:
		incl   0x614(%esp)
	jump_1c813:
		movswl 0x618(%esp),%edx
		movswl 0x638(%esp),%eax
		add    %edx,%eax
		movswl 0x614(%esp),%edx
		inc    %eax
		cmp    %eax,%edx
		jle    jump_1c256
	jump_1c836:
		push   $0x0
		movswl 0x644(%esp),%eax
		push   %eax
		push   $0x80
		push   $0x0
		call   vertical_line
		add    $0x10,%esp
		push   $0x0
		movswl 0x610(%esp),%eax
		push   %eax
		push   $0x80
		push   $0x0
		xor    %ebx,%ebx
		call   horizontal_line
		add    $0x10,%esp
		jmp    jump_1c8c1
	jump_1c86e:
		mov    %eax,%edx
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    data_5e395,%dh
		add    %eax,%eax
		test   %dh,%dh
		je     jump_1c890
		xor    %edx,%edx
		mov    0x4(%esp,%eax,1),%dl
		inc    %edx
		push   $0x0
		jmp    jump_1c8a8
	jump_1c890:
		mov    0x5(%esp,%eax,1),%dl
		add    $0x8,%dl
		and    $0xf,%dl
		and    $0xff,%edx
		push   %edx
		xor    %edx,%edx
		mov    0x8(%esp,%eax,1),%dl
		inc    %edx
	jump_1c8a8:
		movswl %dx,%edx
		push   %edx
		movswl 0xa(%esp,%eax,1),%edx
		push   %edx
		movswl 0xc(%esp,%eax,1),%eax
		push   %eax
		call   scircle
		add    $0x10,%esp
		inc    %ebx
	jump_1c8c1:
		xor    %edx,%edx
		movswl %bx,%eax
		mov    %di,%dx
		cmp    %edx,%eax
		jl     jump_1c86e
		xor    %ebx,%ebx
		jmp    jump_1c902
	jump_1c8d1:
		mov    %eax,%edx
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x5(%esp,%eax,2),%dl
		push   %edx
		xor    %edx,%edx
		mov    0x8(%esp,%eax,2),%dl
		movswl %dx,%edx
		push   %edx
		movswl 0xa(%esp,%eax,2),%edx
		push   %edx
		movswl 0xc(%esp,%eax,2),%eax
		push   %eax
		inc    %ebx
		call   scircle
		add    $0x10,%esp
	jump_1c902:
		xor    %edx,%edx
		movswl %bx,%eax
		mov    %di,%dx
		cmp    %edx,%eax
		jl     jump_1c8d1
		movswl 0x63c(%esp),%eax
		cmp    $0xffffffff,%eax
		je     jump_1c995
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_1c995
		mov    data_5a74e,%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    data_60b30,%dx
		add    %ebx,%eax
		test   %dx,%dx
		jle    jump_1c995
		xor    %ebx,%ebx
		mov    %ax,%bx
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %ebx,%edx
		sub    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		push   $0xc
		cwtl
		push   %eax
		movswl 0x614(%esp),%eax
		push   %eax
		movswl 0x64c(%esp),%eax
		push   %eax
		call   ccircle
		add    $0x10,%esp
	jump_1c995:
		mov    $0xffffffff,%esi
		mov    EXPORT_SYMBOL(is_multiplayer_game),%bh
		mov    %si,data_60b30
		test   %bh,%bh
		jne    jump_1cc47
		cmpb   $0x1,data_60afc
		jne    jump_1cc47
		xor    %ecx,%ecx
	jump_1c9be:
		movswl %cx,%edx
		lea    0x0(,%edx,8),%ebx
		sub    %edx,%ebx
		add    %ebx,%ebx
		cmpl   $0x0,level__Objectives(%ebx)
		jne    jump_1cc3c
		mov    data_9be3e(%ebx),%di
		cmp    $0x10,%di
		ja     jump_1cc3c
		xor    %eax,%eax
		mov    %di,%ax
		jmp    *%cs:jpt_1BE74(,%eax,4)


/*----------------------------------------------------------------*/
func_1c9f7:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x658(%esp),%ecx
		mov    data_9be42(%ebx),%ax
		movswl 0x4(%ecx),%ecx
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    $0x100,%eax
		xor    %edi,%edi
		mov    %eax,%edx
		mov    0x65c(%esp),%di
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%ebp
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		add    $0x40,%eax
		mov    0x658(%esp),%edx
		mov    %eax,%esi
		xor    %eax,%eax
		movswl 0x6(%edx),%edx
		mov    data_9be44(%ebx),%ax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebp
		add    $0x40,%eax
		mov    %eax,%ebx
		mov    $0x40,%eax
		sub    %ebx,%eax
		cwtl
		push   %eax
		mov    $0x40,%eax
		sub    %esi,%eax
		mov    data_53ef4,%dx
		cwtl
		add    %edi,%edx
		push   %eax
		mov    %dx,data_53ef4
		lea    0x0(,%edi,4),%edi
		call   getrdist
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    data_53ef4,%dx
		add    %edi,%eax
		add    $0x8,%esp
		cmp    %eax,%edx
		jle    jump_1cad2
		movw   $0x3,data_53ef4
		cmpb   $0x0,ScannerPulse
		je     jump_1cad2
		test   %si,%si
		jl     jump_1cac6
		cmp    $0x80,%si
		jge    jump_1cac6
		test   %bx,%bx
		jl     jump_1cac6
		cmp    $0x80,%bx
		jl     jump_1cad2
	jump_1cac6:
		push   $0x7f
		push   $0x11
		call   SetBFSampleStatus
		add    $0x8,%esp
	jump_1cad2:
		test   %si,%si
		jl     jump_1caea
		cmp    $0x80,%si
		jge    jump_1caea
		test   %bx,%bx
		jl     jump_1caea
		cmp    $0x80,%bx
		jl     jump_1cb09
	jump_1caea:
		push   $0xc
		movswl data_53ef4,%eax
		push   %eax
		movswl %bx,%eax
		push   %eax
		movswl %si,%eax
		push   %eax
		call   ccircle
		add    $0x10,%esp
		jmp    jump_1cc47
	jump_1cb09:
		mov    data_5e397,%al
		mov    $0xe,%ah
		shl    $0x3,%al
		sub    %al,%ah
		mov    %ah,%al
		and    $0xff,%eax
		mov    0x65c(%esp),%edi
		push   %eax
		imul   $0x3,%edi,%eax
		cwtl
		push   %eax
		movswl %bx,%eax
		push   %eax
		movswl %si,%eax
		push   %eax
		call   ccircle
		add    $0x10,%esp
		add    $0x644,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1cb44:
/*----------------------------------------------------------------*/
		movswl %cx,%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		movzwl data_9be40(,%eax,2),%ebp
		mov    0x658(%esp),%ebx
		add    $level__things_base,%ebp
		movswl 0x4(%ebx),%ebx
		movswl 0x4(%ebp),%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    $0x100,%eax
		xor    %esi,%esi
		mov    %eax,%edx
		mov    0x65c(%esp),%si
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    $0x40,%eax
		mov    %eax,%ebx
		mov    0x658(%esp),%eax
		movswl 0x6(%ebp),%edx
		movswl 0x6(%eax),%eax
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    $0x40,%eax
		mov    %eax,%edi
		mov    $0x40,%eax
		sub    %edi,%eax
		cwtl
		push   %eax
		mov    $0x40,%eax
		sub    %ebx,%eax
		mov    data_53ef4,%dx
		cwtl
		add    %esi,%edx
		push   %eax
		mov    %dx,data_53ef4
		lea    0x0(,%esi,4),%esi
		call   getrdist
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    data_53ef4,%dx
		add    %esi,%eax
		add    $0x8,%esp
		cmp    %eax,%edx
		jle    jump_1cc17
		xor    %ecx,%ecx
		mov    ScannerPulse,%al
		mov    %cx,data_53ef4
		test   %al,%al
		je     jump_1cc17
		push   $0x7f
		push   $0x11
		call   SetBFSampleStatus
		add    $0x8,%esp
	jump_1cc17:
		push   $0xc
		movswl data_53ef4,%eax
		push   %eax
		movswl %di,%eax
		push   %eax
		movswl %bx,%eax
		push   %eax
		call   ccircle
		add    $0x10,%esp
		add    $0x644,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1cc3c:
		inc    %ecx
		cmp    $0x8,%cx
		jl     jump_1c9be
	jump_1cc47:
		add    $0x644,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_1cc54:
		.long   func_1cd2e
		.long   func_1cd2e
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cd2e
		.long   func_1cd2e
		.long   func_1cd2e
		.long   func_1ce2f
		.long   func_1ce2f
		.long   func_1cd2e
		.long   func_1cd2e
		.long   func_1cd2e
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cd2e
		.long   func_1ce65
		.long   func_1ce79
		.long   func_1ce79
		.long   func_1ce43
		.long   func_1ce79
		.long   func_1ce79
		.long   func_1ce43
		.long   func_1cedd
		.long   func_1cf22
		.long   func_1cf2c
		.long   func_1cf6e
		.long   func_1cd2e
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cdad
		.long   func_1cf82
		.long   func_1cd2e
		.long   func_1cf78
		.long   func_1cd2e
		.long   func_1cdad
		.long   func_1cd2e
		.long   func_1cdad
		.long   func_1cd2e
		.long   func_1cd2e
		.long   jump_1d035
		.long   func_1cfa0
		.long   func_1cf96


/*----------------------------------------------------------------*/
which_frame_person:	/* 0x1cd10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		cmpb   $0x2c,0x19(%ebx)
		ja     jump_1d035
		xor    %edx,%edx
		mov    0x19(%ebx),%dl
		jmp    *%cs:vtable_1cc54(,%edx,4)


/*----------------------------------------------------------------*/
func_1cd2e:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%ax
		xor    %edx,%edx
		cmp    $0x1,%ax
		jne    jump_1cd79
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_1cd51
		mov    0x19(%eax),%dl
		xor    %dh,%dh
	jump_1cd51:
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %ecx,%ecx
		add    %eax,%eax
		mov    0xe(%ebx),%cx
		xor    %edx,%edx
		mov    data_5a5e6(%eax),%ax
		mov    0x1a(%ebx),%dl
		and    $0xffff,%eax
		add    $0x10,%edx
		add    %eax,%ecx
		jmp    jump_1d023
	jump_1cd79:
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_1cd90
		mov    0x19(%eax),%dl
		xor    %dh,%dh
	jump_1cd90:
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %edx,%edx
		mov    data_5a546(,%eax,2),%dx
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		lea    (%eax,%edx,1),%ecx
		jmp    jump_1d01b


/*----------------------------------------------------------------*/
func_1cdad:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%di
		xor    %edx,%edx
		cmp    $0x1,%di
		jne    jump_1cdf4
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_1cdd0
		mov    0x19(%eax),%dl
		xor    %dh,%dh
	jump_1cdd0:
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %ecx,%ecx
		mov    data_5a60e(,%eax,2),%cx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x1a(%ebx),%dl
		mov    0xe(%ebx),%ax
		add    $0x10,%edx
		add    %eax,%ecx
		jmp    jump_1d023
	jump_1cdf4:
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_1ce0b
		mov    0x19(%eax),%dl
		xor    %dh,%dh
	jump_1ce0b:
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %ecx,%ecx
		mov    data_5a56e(,%eax,2),%cx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x1a(%ebx),%dl
		mov    0xe(%ebx),%ax
		add    $0x10,%edx
		add    %eax,%ecx
		jmp    jump_1d023


/*----------------------------------------------------------------*/
func_1ce2f:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%si
		cmp    $0x1,%si
		mov    %esi,%eax
		add    $0xc0,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1ce43:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0xd0,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1ce65:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%cx
		cmp    $0x1,%cx
		mov    %ecx,%eax
		add    $0xc5,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1ce79:
/*----------------------------------------------------------------*/
		cmpw   $0x1,0xe(%ebx)
		jne    jump_1ceaf
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0xa0,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		and    $0x3,%edx
		add    $0xc1,%eax
		add    %edx,%eax
		jmp    jump_1d035
	jump_1ceaf:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0xa0,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		xor    %edx,%edx
		mov    0xe(%ebx),%dx
		and    $0x3,%eax
		add    $0xc1,%edx
		add    %edx,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cedd:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%ax
		cmp    $0x1,%ax
		jne    jump_1cf18
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x0(,%eax,2),%edx
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		add    $0xcb,%eax
		add    %edx,%eax
		jmp    jump_1d035
	jump_1cf18:
		add    $0xcd,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cf22:
/*----------------------------------------------------------------*/
		mov    $0xd2,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cf2c:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%di
		cmp    $0x1,%di
		jne    jump_1cf62
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		xor    %edx,%edx
		and    $0x1,%eax
		mov    %di,%dx
		add    %eax,%eax
		add    $0xcc,%edx
		add    %edx,%eax
		jmp    jump_1d035
	jump_1cf62:
		mov    %edi,%eax
		add    $0xce,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cf6e:
/*----------------------------------------------------------------*/
		mov    $0xd3,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cf78:
/*----------------------------------------------------------------*/
		mov    $0x33c,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cf82:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%si
		cmp    $0x1,%si
		mov    %esi,%eax
		add    $0xc9,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cf96:
/*----------------------------------------------------------------*/
		mov    $0xec,%eax
		jmp    jump_1d035


/*----------------------------------------------------------------*/
func_1cfa0:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%cx
		xor    %edx,%edx
		cmp    $0x1,%cx
		jne    jump_1cfe8
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_1cfc3
		mov    0x19(%eax),%dl
		xor    %dh,%dh
	jump_1cfc3:
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %ecx,%ecx
		add    %eax,%eax
		mov    0xe(%ebx),%cx
		xor    %edx,%edx
		mov    data_5a636(%eax),%ax
		mov    0x1a(%ebx),%dl
		and    $0xffff,%eax
		add    $0x10,%edx
		add    %eax,%ecx
		jmp    jump_1d023
	jump_1cfe8:
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_1cfff
		mov    0x19(%eax),%dl
		xor    %dh,%dh
	jump_1cfff:
		xor    %eax,%eax
		mov    %dx,%ax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5a596(%eax),%ax
		mov    0xe(%ebx),%dx
		and    $0xffff,%eax
		lea    (%edx,%eax,1),%ecx
	jump_1d01b:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
	jump_1d023:
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    %ecx,%eax
	jump_1d035:
		cmp    0x12(%ebx),%ax
		je     jump_1d059
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,2),%ecx
		mov    starts_ani,%edx
		mov    (%ecx,%edx,1),%dx
		mov    %dx,0x10(%ebx)
		mov    %ax,0x12(%ebx)
	jump_1d059:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
show_selected_frame:	/* 0x1d060 */
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ecx
		cmpw   $0x0,data_53ef6
		jne    jump_1d084
		mov    starts_ani,%eax
		mov    0x4b0(%eax),%ax
		mov    %ax,data_53ef6
	jump_1d084:
		xor    %ebx,%ebx
		mov    data_53ef6,%bx
		mov    frames,%edx
		lea    0x0(,%ebx,8),%ebx
		add    %edx,%ebx
		mov    0x6(%ebx),%ax
		mov    %ax,data_53ef6
		mov    player_view_map_x,%ax
		mov    0x4(%ecx),%dx
		shl    $0x7,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    player_view_map_y,%dx
		mov    0x6(%ecx),%si
		shl    $0x7,%edx
		sub    %edx,%esi
		movswl %ax,%edx
		movswl %si,%eax
		mov    %edx,%esi
		add    %eax,%edx
		sub    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		sar    $0x3,%esi
		movswl 0x8(%ecx),%edx
		add    $0x80,%esi
		sub    %edx,%eax
		mov    %esi,%edi
		sar    $0x3,%eax
		xor    %edx,%edx
		add    $0x10,%eax
		mov    (%ebx),%dx
		mov    %eax,%esi
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ecx
		add    %eax,%ebx
		cmp    %ecx,%ebx
		jbe    jump_1d172
	jump_1d117:
		xor    %eax,%eax
		mov    h_sprites,%edx
		mov    (%ebx),%ax
		add    %edx,%eax
		cmp    %edx,%eax
		jbe    jump_1d14b
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		mov    0x4(%ebx),%ax
		add    %esi,%eax
		sub    $0x30,%eax
		cwtl
		push   %eax
		mov    0x2(%ebx),%ax
		add    %edi,%eax
		cwtl
		push   %eax
		call   DrawASpriteHires16_A
		add    $0x10,%esp
	jump_1d14b:
		mov    0x8(%ebx),%bx
		and    $0xffff,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ebp
		add    %eax,%ebx
		cmp    %ebp,%ebx
		ja     jump_1d117
	jump_1d172:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_all_changes:	/* 0x1d180 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %ecx,%ecx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		nop
	jump_1d190:
		xor    %eax,%eax
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_1d1a0:
		movswl %ax,%edx
		movswl %cx,%ebx
		shl    $0x4,%edx
		inc    %eax
		movb   $0x1,data_5db2c(%edx,%ebx,1)
		cmp    $0x19,%ax
		jl     jump_1d1a0
		inc    %ecx
		cmp    $0x10,%cx
		jl     jump_1d190
		movb   $0x1,data_60b4f
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_block_changes:	/* 0x1d1d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%edi
		mov    0x1c(%esp),%esi
		movswl %bx,%edx
		sub    $0x80,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		movswl 0x18(%esp),%edx
		sub    $0x80,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		movswl %di,%edx
		mov    %eax,0x18(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x4,%edx
		sbb    %edx,%eax
		sar    $0x4,%eax
		movswl %si,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x4,%edx
		sbb    %edx,%eax
		sar    $0x4,%eax
		mov    %eax,%esi
		test   %ax,%ax
		jl     jump_1d2b8
		cmp    $0x19,%di
		jge    jump_1d2b8
		cmp    $0x10,%bx
		jge    jump_1d2b8
		cmpw   $0x0,0x18(%esp)
		jl     jump_1d2b8
		test   %di,%di
		jge    jump_1d263
		xor    %edi,%edi
	jump_1d263:
		cmp    $0x19,%si
		jl     jump_1d26e
		mov    $0x18,%esi
	jump_1d26e:
		test   %bx,%bx
		jge    jump_1d275
		xor    %ebx,%ebx
	jump_1d275:
		cmpw   $0x10,0x18(%esp)
		jl     jump_1d285
		movl   $0xf,0x18(%esp)
	jump_1d285:
		mov    0x18(%esp),%edx
		mov    %ebx,%ecx
		cmp    %dx,%bx
		jg     jump_1d2b8
	jump_1d290:
		mov    %edi,%eax
		cmp    %si,%di
		jg     jump_1d2ae
	jump_1d297:
		movswl %ax,%ebx
		movswl %cx,%edx
		shl    $0x4,%ebx
		inc    %eax
		movb   $0x3,data_5db2c(%edx,%ebx,1)
		cmp    %si,%ax
		jle    jump_1d297
	jump_1d2ae:
		mov    0x18(%esp),%ebx
		inc    %ecx
		cmp    %bx,%cx
		jle    jump_1d290
	jump_1d2b8:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
swap_screen_vres16:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
#if defined(USE_BFLIB_MOUSE_CURSOR)
		mov    EXPORT_SYMBOL(lbDisplay)+20,%ebx	/* lbDisplay.MouseSprite */
#else
		mov    EXPORT_SYMBOL(mouse_sprite),%ebx
#endif
		movzbw 0x5(%ebx),%si
		add    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%si
		mov    0x4(%ebx),%bl
		sub    $0x10,%esi
		xor    %bh,%bh
		movswl %si,%esi
		add    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%bx	/* lbDisplay.MMouseX but scaled */
		sub    $0x10,%ebx
		push   %esi
		movswl %bx,%ebx
		push   %ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%bx
		sub    $0x10,%ebx
		movswl %bx,%ebx
		push   %ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%bx
		sub    $0x10,%ebx
		movswl %bx,%ebx
		push   %ebx
		call   set_block_changes
		add    $0x10,%esp
		cmpw   $0x270,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jb     jump_1d340
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%bx
		movswl %bx,%ebx
		push   %ebx
		call   func_4cce7
		add    $0x4,%esp
		/* do not use bflibrary for 4bpp cursor - use original */
		call   PlaceMouse_A
		push   %ebx
		call   func_4cc84
		add    $0x4,%esp
		jmp    jump_1d345
	jump_1d340:
		/* do not use bflibrary for 4bpp cursor - use original */
		call   PlaceMouse_A
	jump_1d345:
		cmpb   $0x0,data_60b4f
		je     jump_1d35d
		xor    %dl,%dl
		mov    %dl,data_60b4f
		call   LbScreenSwapVres16
		jmp    jump_1d388
	jump_1d35d:
/* TODO handle this differently when we can switch to 8bpp mouse cursor */
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_update_vscreen_whole_vres16
		call   ac_swap_wscreen
#else
		call   screen_ega_bitmask_allow_all
		mov    $data_5db2c,%esi
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		nop
	jump_1d370:
		push   %ebx
		push   %esi
		call   func_4c797
		inc    %ebx
		add    $0x8,%esp
		add    $0x10,%esi
		cmp    $0x19,%ebx
		jl     jump_1d370
		call   func_4cd4a
#endif
	jump_1d388:
		/* do not use bflibrary for 4bpp cursor - use original */
		call   RemoveMouse_A
		pop    %esi
		pop    %ebx
		ret


jpt_1D596:	/* 0x1d390 */
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d59e
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d59e
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
		.long   func_1d5b3
jpt_1DAA1:	/* 0x1d438 */
		.long   func_1daa8
		.long   func_1db25
		.long   def_1DAA1
		.long   func_1db93
		.long   def_1DAA1


/*----------------------------------------------------------------*/
draw_mapwho:	/* 0x1d450 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		push   $0x190
		push   $0x280
		push   $0x0
		push   $0x0
		mov    $thing_drawlist,%esi
		xor    %edi,%edi
		call   LbScreenSetGraphicsWindow
		movswl player_view_map_y,%edx
		movswl player_view_map_x,%eax
		add    $0x10,%esp
		mov    %di,data_60b10
		sar    $1,%edx
		sar    $1,%eax
		shl    $0x7,%edx
		mov    %di,data_60b0a
		add    %edx,%eax
		mov    $level__MapWho,%edx
		add    %eax,%eax
		mov    %di,data_60b1a
		add    %eax,%edx
		mov    %di,data_60b12
		mov    %edx,0x10(%esp)
		mov    $data_5a8bc,%edx
		mov    %di,data_60b14
		mov    %edx,0x18(%esp)
	jump_1d4c4:
		mov    0x18(%esp),%eax
		movswl (%eax),%eax
		cmp    $0xffffffff,%eax
		je     jump_1d615
		mov    0x10(%esp),%ebx
		add    %eax,%eax
		mov    0x18(%esp),%ecx
		add    %eax,%ebx
		add    $0x2,%ecx
		mov    %ebx,0x10(%esp)
		mov    %ebx,%ebp
		mov    %ecx,0x18(%esp)
		cmp    $level__MapWho+0x600,%ebx
		jb     jump_1d60b
		cmp    $level__MapWho+0x8000-0x600,%ebx
		jae    jump_1d60b
		xor    %ebx,%ebx
		mov    %ebx,0x1c(%esp)
		jmp    jump_1d5f5
	jump_1d510:
		mov    0x0(%ebp),%ax
		test   %ax,%ax
		je     jump_1d5e6
	jump_1d51d:
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		testb  $0x1,0xa(%ebx)
		jne    jump_1d5da
		mov    player_view_map_x,%ax
		mov    %ebx,(%esi)
		shl    $0x7,%eax
		mov    0x4(%ebx),%dx
		sub    %eax,%edx
		mov    player_view_map_y,%ax
		mov    0x6(%ebx),%cx
		shl    $0x7,%eax
		sub    %eax,%ecx
		movswl %dx,%edx
		movswl %cx,%eax
		mov    %edx,%ecx
		add    %eax,%edx
		sub    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		sar    $0x3,%ecx
		add    $0x80,%ecx
		mov    %cx,0x4(%esi)
		movswl 0x8(%ebx),%edx
		sub    %edx,%eax
		sar    $0x3,%eax
		add    $0x10,%eax
		mov    %ax,0x6(%esi)
		cmpb   $0x5,0x18(%ebx)
		jne    jump_1d5c2
		mov    0x19(%ebx),%dh
		cmp    $0x29,%dh
		ja     def_1D596
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:jpt_1D596(,%eax,4)


/*----------------------------------------------------------------*/
func_1d59e:
/*----------------------------------------------------------------*/
		movswl 0x6(%ebx),%eax
		movswl 0x4(%ebx),%edx
		lea    -0x80(%eax),%ecx
		lea    -0x80(%edx),%eax
		add    %ecx,%eax
		mov    %eax,0x8(%esi)
		jmp    def_1D596


/*----------------------------------------------------------------*/
func_1d5b3:
/*----------------------------------------------------------------*/
		movswl 0x4(%ebx),%eax
		movswl 0x6(%ebx),%edx
		add    %edx,%eax
		mov    %eax,0x8(%esi)
		jmp    def_1D596
	jump_1d5c2:
		movswl 0x4(%ebx),%edx
		movswl 0x6(%ebx),%eax
		add    %eax,%edx
		mov    %edx,0x8(%esi)
	def_1D596:	/* 0x1d5cf */
		inc    %edi
		add    $0xc,%esi
		cmp    $0x186,%di
		ja     jump_1d615
	jump_1d5da:
		mov    (%ebx),%ax
		test   %ax,%ax
		jne    jump_1d51d
	jump_1d5e6:
		mov    0x1c(%esp),%ecx
		inc    %ecx
		sub    $0xfe,%ebp
		mov    %ecx,0x1c(%esp)
	jump_1d5f5:
		xor    %eax,%eax
		mov    0x18(%esp),%edx
		mov    0x1c(%esp),%ax
		movswl (%edx),%edx
		cmp    %edx,%eax
		jl     jump_1d510
	jump_1d60b:
		addl   $0x2,0x18(%esp)
		jmp    jump_1d4c4
	jump_1d615:
		movl   $0x0,(%esi)
		cmp    $0x1,%di
		jbe    jump_1d714
		mov    $0x1,%esi
		xor    %ecx,%ecx
		jmp    jump_1d6f3
	jump_1d631:
		lea    0x1(%edx),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %edx,%ebx
		lea    0x0(,%edx,4),%edx
		sub    %ebx,%edx
		lea    0x0(,%eax,4),%eax
		lea    0x0(,%edx,4),%edx
		mov    data_5c874(%eax),%ebp
		cmp    data_5c874(%edx),%ebp
		jae    jump_1d6f2
		mov    thing_drawlist(%edx),%ebx
		mov    %ebx,(%esp)
		mov    data_5c870(%edx),%bx
		mov    %bx,0x4(%esp)
		mov    data_5c872(%edx),%bx
		mov    %bx,0x6(%esp)
		mov    data_5c874(%edx),%ebx
		mov    %ebx,0x8(%esp)
		mov    thing_drawlist(%eax),%ebx
		mov    %ebx,thing_drawlist(%edx)
		mov    data_5c870(%eax),%bx
		mov    %bx,data_5c870(%edx)
		mov    data_5c872(%eax),%bx
		mov    %bx,data_5c872(%edx)
		mov    data_5c874(%eax),%ebx
		mov    %ebx,data_5c874(%edx)
		mov    (%esp),%edx
		mov    %edx,thing_drawlist(%eax)
		mov    0x4(%esp),%edx
		mov    %dx,data_5c870(%eax)
		mov    0x6(%esp),%edx
		mov    %dx,data_5c872(%eax)
		mov    0x8(%esp),%edx
		xor    %esi,%esi
		mov    %edx,data_5c874(%eax)
	jump_1d6f2:
		inc    %ecx
	jump_1d6f3:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %di,%ax
		mov    %cx,%dx
		dec    %eax
		cmp    %eax,%edx
		jl     jump_1d631
		test   %si,%si
		jne    jump_1d714
		mov    $0x1,%esi
		xor    %ecx,%ecx
		jmp    jump_1d6f3
	jump_1d714:
		mov    $thing_drawlist,%esi
	jump_1d719:
		mov    (%esi),%eax
		mov    %eax,0x14(%esp)
		test   %eax,%eax
		je     jump_1dca3
		movzwl 0x10(%eax),%ebp
		mov    frames,%edx
		lea    0x0(,%ebp,8),%ebp
		add    %edx,%ebp
		mov    0x4(%ebp),%bl
		test   %bl,%bl
		je     jump_1d750
		xor    %eax,%eax
		push   $0x7f
		mov    %bl,%al
		push   %eax
		call   SetBFSampleStatus
		add    $0x8,%esp
	jump_1d750:
		mov    0x14(%esp),%eax
		mov    $0xff,%edi
		mov    0x8(%eax),%dx
		mov    %edi,0x20(%esp)
		cmp    $0x600,%dx
		jge    jump_1d76d
		test   %dx,%dx
		jge    jump_1d774
	jump_1d76d:
		movb   $0x3,0x28(%esp)
		jmp    jump_1d7df
	jump_1d774:
		movswl 0x6(%eax),%edx
		mov    $0x6000,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    0x14(%esp),%edx
		movswl 0x4(%edx),%edx
		and    $0xff00,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ebx
		mov    0x14(%esp),%edx
		add    %ebx,%eax
		mov    data_55358,%ebx
		lea    0x0(,%eax,4),%eax
		movswl 0x8(%edx),%edx
		add    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ebx),%eax
		mov    (%eax),%al
		mov    %al,0x28(%esp)
	jump_1d7df:
		mov    0x14(%esp),%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_1d7f8
		cmpb   $0x3,0x28(%esp)
		jne    jump_1d7f8
		xor    %ah,%ah
		mov    %ah,0x28(%esp)
		jmp    jump_1d803
	jump_1d7f8:
		cmpb   $0x4,0x28(%esp)
		je     jump_1d970
	jump_1d803:
		mov    0x14(%esp),%eax
		cmpb   $0x1,0x18(%eax)
		jne    jump_1d970
		testb  $0x2,0x1c(%eax)
		je     jump_1d970
		sub    $level__People,%eax
		mov    %eax,%edx
		mov    $0x5c,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%eax),%al
		xor    %ah,%ah
		shl    $0x3,%eax
		xor    %edx,%edx
		add    $0x461,%eax
		mov    0x0(%ebp),%dx
		mov    %eax,0x24(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%edx
		add    %eax,%ebx
		cmp    %edx,%ebx
		jbe    jump_1da38
	jump_1d88d:
		xor    %edx,%edx
		mov    (%ebx),%dx
		mov    $0x6,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		sub    $0x29,%eax
		cmp    $0x8,%ax
		jae    jump_1d8ce
		and    $0x7,%al
		xor    %edx,%edx
		xor    %ah,%ah
		mov    0x24(%esp),%dx
		and    $0xffff,%eax
		add    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    h_sprites,%ecx
		add    %eax,%eax
		add    %ecx,%eax
		jmp    jump_1d8db
	jump_1d8ce:
		xor    %eax,%eax
		mov    h_sprites,%edx
		mov    (%ebx),%ax
		add    %edx,%eax
	jump_1d8db:
		cmp    h_sprites,%eax
		jbe    jump_1d946
		mov    0x2(%ebx),%dx
		cmp    %dx,%di
		jle    jump_1d8ee
		mov    %edx,%edi
	jump_1d8ee:
		mov    0x20(%esp),%ecx
		mov    0x4(%ebx),%dx
		cmp    %cx,%dx
		jge    jump_1d8ff
		mov    %edx,0x20(%esp)
	jump_1d8ff:
		cmpb   $0x4,0x28(%esp)
		je     jump_1d946
		movswl %di,%ecx
		movswl 0x4(%esi),%edx
		add    %edx,%ecx
		xor    %edx,%edx
		mov    0x2(%ebp),%dl
		add    %ecx,%edx
		cmp    $0x80,%edx
		jl     jump_1d946
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		mov    0x4(%ebx),%dx
		mov    0x6(%esi),%ax
		add    %edx,%eax
		cwtl
		mov    0x2(%ebx),%cx
		push   %eax
		mov    0x4(%esi),%ax
		add    %ecx,%eax
		cwtl
		push   %eax
		call   DrawASpriteHires16_A
		add    $0x10,%esp
	jump_1d946:
		xor    %edx,%edx
		mov    0x8(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		add    %eax,%ebx
		cmp    elements_ani,%ebx
		ja     jump_1d88d
		jmp    jump_1da38
	jump_1d970:
		xor    %edx,%edx
		mov    0x0(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		add    %eax,%ebx
		cmp    elements_ani,%ebx
		jbe    jump_1da38
	jump_1d995:
		xor    %eax,%eax
		mov    h_sprites,%edx
		mov    (%ebx),%ax
		add    %edx,%eax
		cmp    %edx,%eax
		jbe    jump_1da11
		mov    0x2(%ebx),%cx
		cmp    %cx,%di
		jle    jump_1d9b1
		mov    %ecx,%edi
	jump_1d9b1:
		mov    0x20(%esp),%ecx
		mov    0x4(%ebx),%dx
		cmp    %cx,%dx
		jge    jump_1d9c2
		mov    %edx,0x20(%esp)
	jump_1d9c2:
		cmpb   $0x4,0x28(%esp)
		je     jump_1da11
		movswl 0x4(%esi),%edx
		mov    %edx,0xc(%esp)
		mov    0xc(%esp),%ecx
		movswl %di,%edx
		add    %ecx,%edx
		xor    %ecx,%ecx
		mov    0x2(%ebp),%cl
		add    %ecx,%edx
		cmp    $0x80,%edx
		jl     jump_1da11
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		mov    0x4(%ebx),%dx
		mov    0x6(%esi),%ax
		add    %edx,%eax
		cwtl
		mov    0x2(%ebx),%cx
		push   %eax
		mov    0x4(%esi),%ax
		add    %ecx,%eax
		cwtl
		push   %eax
		call   DrawASpriteHires16_A
		add    $0x10,%esp
	jump_1da11:
		xor    %edx,%edx
		mov    0x8(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ecx
		add    %eax,%ebx
		cmp    %ecx,%ebx
		ja     jump_1d995
	jump_1da38:
		cmpb   $0x4,0x28(%esp)
		je     jump_1da71
		mov    0x20(%esp),%eax
		mov    0x6(%esi),%dx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x3(%ebp),%al
		add    %edx,%eax
		cwtl
		mov    0x4(%esi),%bx
		push   %eax
		xor    %eax,%eax
		add    %edi,%ebx
		mov    0x2(%ebp),%al
		add    %ebx,%eax
		cwtl
		push   %eax
		movswl %dx,%eax
		push   %eax
		movswl %bx,%eax
		push   %eax
		call   set_block_changes
		add    $0x10,%esp
	jump_1da71:
		mov    0x14(%esp),%eax
		testb  $0x1,0xb(%eax)
		jne    def_1DAA1
		mov    0x18(%eax),%al
		dec    %al
		cmp    $0x4,%al
		ja     def_1DAA1
		and    $0xff,%eax
		lea    0x0(,%eax,4),%edx
		mov    0x14(%esp),%eax
		sub    $level__things_base,%eax
		jmp    *%cs:jpt_1DAA1(%edx)


/*----------------------------------------------------------------*/
func_1daa8:
/*----------------------------------------------------------------*/
		movswl %di,%ebx
		movswl 0x4(%esi),%edx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%bx	/* lbDisplay.MMouseX but scaled */
		lea    -0x4(%edx),%ecx
		cmp    %ecx,%ebx
		jl     def_1DAA1
		xor    %ebx,%ebx
		mov    0x2(%ebp),%bl
		add    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%dx
		add    $0x4,%ebx
		cmp    %ebx,%edx
		jge    def_1DAA1
		movswl 0x20(%esp),%edx
		movswl 0x6(%esi),%ebx
		xor    %ecx,%ecx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%cx
		lea    -0x4(%edx),%ebx
		cmp    %ebx,%ecx
		jl     def_1DAA1
		xor    %ebx,%ebx
		mov    0x3(%ebp),%bl
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%bx
		add    $0x4,%edx
		cmp    %edx,%ebx
		jge    def_1DAA1
		mov    %ax,data_60b14
		jmp    jump_1dbfb


/*----------------------------------------------------------------*/
func_1db25:
/*----------------------------------------------------------------*/
		movswl %di,%ebx
		movswl 0x4(%esi),%edx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%bx
		cmp    %edx,%ebx
		jl     def_1DAA1
		xor    %ebx,%ebx
		mov    0x2(%ebp),%bl
		add    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%dx
		cmp    %ebx,%edx
		jge    def_1DAA1
		movswl 0x20(%esp),%ebx
		movswl 0x6(%esi),%edx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%bx
		cmp    %edx,%ebx
		jl     def_1DAA1
		xor    %ebx,%ebx
		mov    0x3(%ebp),%bl
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%bx
		cmp    %edx,%ebx
		jge    def_1DAA1
		mov    %ax,data_60b12
		jmp    jump_1dbfb


/*----------------------------------------------------------------*/
func_1db93:
/*----------------------------------------------------------------*/
		movswl %di,%edx
		movswl 0x4(%esi),%ebx
		xor    %ecx,%ecx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%cx	/* lbDisplay.MMouseX but scaled */
		lea    -0xa(%edx),%ebx
		cmp    %ebx,%ecx
		jl     def_1DAA1
		xor    %ebx,%ebx
		mov    0x2(%ebp),%bl
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%bx
		add    $0xa,%edx
		cmp    %edx,%ebx
		jge    def_1DAA1
		movswl 0x20(%esp),%edx
		movswl 0x6(%esi),%ebx
		xor    %ecx,%ecx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%cx
		lea    -0xa(%edx),%ebx
		cmp    %ebx,%ecx
		jl     def_1DAA1
		xor    %ebx,%ebx
		mov    0x3(%ebp),%bl
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%bx
		add    $0xa,%edx
		cmp    %edx,%ebx
		jge    def_1DAA1
		mov    %ax,data_60b1a
	jump_1dbfb:
		mov    %ax,data_60b10
	def_1DAA1:	/* 0x1dc01 */
		mov    0x14(%esp),%eax
		testb  $0x2,0xa(%eax)
		jne    jump_1dc9b
		mov    0x28(%esp),%bl
		cmp    $0x3,%bl
		je     jump_1dc9b
		cmp    $0x4,%bl
		je     jump_1dc9b
		mov    $0xffffff80,%eax
		mov    0x4(%esi),%dx
		add    %edi,%eax
		mov    0x6(%esi),%bx
		add    %eax,%edx
		mov    0x20(%esp),%eax
		mov    %dx,0x4(%esi)
		add    %eax,%ebx
		xor    %edx,%edx
		mov    %bx,0x6(%esi)
		mov    %ebx,%eax
		mov    0x3(%ebp),%dl
		add    %edx,%eax
		push   $0x0
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    0x4(%esi),%cx
		mov    0x2(%ebp),%al
		add    %ecx,%eax
		cwtl
		push   %eax
		movswl %bx,%eax
		push   %eax
		movswl %cx,%eax
		push   %eax
		mov    0x28(%esp),%eax
		movswl 0x8(%eax),%eax
		push   %eax
		add    0x38(%esp),%edx
		shl    $0x3,%edx
		shl    $0x2,%edi
		mov    %edx,%eax
		sub    %edi,%eax
		cwtl
		push   %eax
		mov    0x30(%esp),%eax
		movswl 0x6(%eax),%eax
		add    %edi,%edx
		push   %eax
		movswl %dx,%eax
		push   %eax
		mov    0x38(%esp),%eax
		movswl 0x4(%eax),%eax
		push   %eax
		call   __cover_sprite
		add    $0x28,%esp
	jump_1dc9b:
		add    $0xc,%esi
		jmp    jump_1d719
	jump_1dca3:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
number_people:	/* 0x1dcb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    player_view_map_x,%ax
		shl    $0x7,%eax
		mov    %eax,0x14(%esp)
		mov    player_view_map_y,%ax
		shl    $0x7,%eax
		xor    %ecx,%ecx
		mov    %eax,0x18(%esp)
	jump_1dcd3:
		xor    %eax,%eax
		movswl %cx,%esi
		mov    0x38(%esp),%ax
		add    %esi,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %esi,%esi
		xor    %edx,%edx
		add    %eax,%ebx
		mov    %dx,(%esp,%esi,1)
		mov    %dx,0x8(%esp,%esi,1)
		testb  $0x4,0x1d(%ebx)
		je     jump_1dd4f
		testb  $0x1,0xb(%ebx)
		jne    jump_1dd4f
		mov    0x14(%esp),%edx
		mov    0x4(%ebx),%ax
		mov    0x18(%esp),%edi
		sub    %edx,%eax
		mov    0x6(%ebx),%dx
		sub    %edi,%edx
		cwtl
		movswl %dx,%edx
		mov    %eax,%edi
		sub    %edx,%edi
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		sar    $0x3,%edi
		add    $0x80,%edi
		mov    %edi,0x10(%esp)
		mov    0x10(%esp),%edi
		mov    %di,(%esp,%esi,1)
		movswl 0x8(%ebx),%edx
		sub    %edx,%eax
		sar    $0x3,%eax
		sub    $0x10,%eax
		mov    %ax,0x8(%esp,%esi,1)
	jump_1dd4f:
		inc    %ecx
		cmp    $0x4,%cx
		jl     jump_1dcd3
		xor    %eax,%eax
		mov    %eax,0x1c(%esp)
	jump_1dd60:
		xor    %edx,%edx
		movswl 0x1c(%esp),%eax
		mov    0x38(%esp),%dx
		add    %eax,%edx
		imul   $0x5c,%edx,%edx
		add    $level__People,%edx
		testb  $0x4,0x1d(%edx)
		je     jump_1dee6
		testb  $0x1,0xb(%edx)
		jne    jump_1dee6
		add    %eax,%eax
		cmpw   $0x0,data_53ef8(%eax)
		jne    jump_1ddac
		mov    starts_ani,%edx
		mov    0xf3e(%edx,%eax,1),%dx
		mov    %dx,data_53ef8(%eax)
	jump_1ddac:
		movswl 0x1c(%esp),%edx
		lea    0x0(,%edx,2),%eax
		xor    %esi,%esi
		mov    data_53ef8(%eax),%si
		mov    frames,%ebx
		lea    0x0(,%esi,8),%esi
		add    %ebx,%esi
		xor    %ebx,%ebx
		mov    0x3c(%esp),%bx
		cmp    %ebx,%edx
		jne    jump_1ddea
		testb  $0x3,data_60b46
		jne    jump_1ddff
		mov    0x6(%esi),%dx
		jmp    jump_1ddf8
	jump_1ddea:
		mov    starts_ani,%edx
		mov    0xf3e(%edx,%eax,1),%dx
	jump_1ddf8:
		mov    %dx,data_53ef8(%eax)
	jump_1ddff:
		xor    %edx,%edx
		mov    (%esi),%dx
		lea    0x0(,%edx,4),%eax
		mov    $0xff,%edi
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ecx
		add    %eax,%ebx
		mov    %edi,0x20(%esp)
		cmp    %ecx,%ebx
		jbe    jump_1dee6
	jump_1de2e:
		xor    %eax,%eax
		mov    h_sprites,%edx
		mov    (%ebx),%ax
		add    %edx,%eax
		cmp    %edx,%eax
		jbe    jump_1de8a
		mov    0x2(%ebx),%cx
		cmp    %cx,%di
		jle    jump_1de4a
		mov    %ecx,%edi
	jump_1de4a:
		mov    0x20(%esp),%ecx
		mov    0x4(%ebx),%dx
		cmp    %cx,%dx
		jge    jump_1de5b
		mov    %edx,0x20(%esp)
	jump_1de5b:
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		movswl 0x24(%esp),%eax
		mov    0x4(%ebx),%cx
		mov    0x10(%esp,%eax,2),%dx
		add    %ecx,%edx
		movswl %dx,%edx
		mov    0x8(%esp,%eax,2),%ax
		push   %edx
		add    0x2(%ebx),%ax
		cwtl
		push   %eax
		call   DrawASpriteHires16_A
		add    $0x10,%esp
	jump_1de8a:
		movswl 0x1c(%esp),%eax
		mov    0x20(%esp),%edx
		mov    0x8(%esp,%eax,2),%cx
		add    %edx,%ecx
		xor    %edx,%edx
		mov    0x3(%esi),%dl
		add    %ecx,%edx
		movswl %dx,%edx
		push   %edx
		mov    0x4(%esp,%eax,2),%dx
		xor    %eax,%eax
		mov    0x2(%esi),%al
		add    %edi,%edx
		add    %edx,%eax
		cwtl
		push   %eax
		movswl %cx,%eax
		push   %eax
		movswl %dx,%eax
		push   %eax
		call   set_block_changes
		xor    %eax,%eax
		mov    0x8(%ebx),%ax
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		mov    elements_ani,%ebp
		add    %ebx,%ebx
		add    %ebp,%ebx
		add    $0x10,%esp
		cmp    %ebp,%ebx
		ja     jump_1de2e
	jump_1dee6:
		mov    0x1c(%esp),%ebx
		inc    %ebx
		mov    %ebx,0x1c(%esp)
		cmp    $0x4,%bx
		jl     jump_1dd60
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
copy_back:	/* 0x1df10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		cmpb   $0x0,data_60b4f
		je     jump_1dffb
		mov    $0x19,%eax
		mov    DestinationY,%edx
		sub    %edx,%eax
		mov    DestinationX,%ebx
		push   %eax
		mov    $0x10,%eax
		sub    %ebx,%eax
		push   %eax
		push   $0x0
		push   $0x4
		push   %edx
		push   %ebx
		call   LbCopyScreenBox
		mov    $0x19,%eax
		mov    DestinationY,%edi
		mov    DestinationX,%ebp
		add    $0x18,%esp
		sub    %edi,%eax
		test   %ebp,%ebp
		jne    jump_1df83
		test   %edi,%edi
		je     jump_1e041
		push   %edi
		mov    $0x10,%edx
		push   %edx
		push   %eax
		push   $0x4
		push   %ebp
		push   %ebp
		call   LbCopyScreenBox
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1df83:
		push   %eax
		push   %ebp
		mov    $0x14,%eax
		push   $0x0
		sub    %ebp,%eax
		push   %eax
		push   %edi
		push   $0x0
		call   LbCopyScreenBox
		mov    DestinationY,%ecx
		add    $0x18,%esp
		test   %ecx,%ecx
		je     jump_1e041
		mov    $0x10,%eax
		mov    DestinationX,%edi
		push   %ecx
		sub    %edi,%eax
		push   %eax
		mov    $0x19,%eax
		sub    %ecx,%eax
		push   %eax
		push   $0x4
		push   $0x0
		push   %edi
		call   LbCopyScreenBox
		add    $0x18,%esp
		mov    DestinationY,%edx
		push   %edx
		mov    DestinationX,%ebx
		mov    $0x19,%eax
		push   %ebx
		sub    %edx,%eax
		push   %eax
		mov    $0x14,%eax
		sub    %ebx,%eax
		push   %eax
		push   $0x0
		push   $0x0
		call   LbCopyScreenBox
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_1dffb:
		xor    %esi,%esi
		lea    0x0(%eax),%eax
	jump_1e000:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_1e010:
		movswl %si,%eax
		movswl %bx,%edx
		shl    $0x4,%eax
		cmpb   $0x0,data_5db2c(%edx,%eax,1)
		je     jump_1e033
		movswl %si,%eax
		push   %eax
		movswl %bx,%eax
		push   %eax
		call   copy_screen_cube
		add    $0x8,%esp
	jump_1e033:
		inc    %ebx
		cmp    $0x10,%bx
		jl     jump_1e010
		inc    %esi
		cmp    $0x19,%si
		jl     jump_1e000
	jump_1e041:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_pelement:	/* 0x1e050 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x18(%esp),%edi
		mov    0x1c(%esp),%esi
		xor    %ebx,%ebx
		mov    0x14(%esp),%bx
		mov    frames,%edx
		lea    0x0(,%ebx,8),%ebx
		add    %edx,%ebx
		cmpb   $0x0,0x4(%ebx)
		je     jump_1e088
		xor    %eax,%eax
		push   $0x7f
		mov    0x4(%ebx),%al
		push   %eax
		call   SetBFSampleStatus
		add    $0x8,%esp
	jump_1e088:
		xor    %edx,%edx
		mov    (%ebx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ecx
		add    %eax,%ebx
		cmp    %ecx,%ebx
		jbe    jump_1e102
	jump_1e0aa:
		xor    %eax,%eax
		mov    h_sprites,%edx
		mov    (%ebx),%ax
		add    %edx,%eax
		cmp    %edx,%eax
		jbe    jump_1e0db
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		mov    0x4(%ebx),%ax
		add    %esi,%eax
		cwtl
		push   %eax
		mov    0x2(%ebx),%ax
		add    %edi,%eax
		cwtl
		push   %eax
		call   DrawASpriteLores16_B
		add    $0x10,%esp
	jump_1e0db:
		mov    0x8(%ebx),%bx
		and    $0xffff,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ebp
		add    %eax,%ebx
		cmp    %ebp,%ebx
		ja     jump_1e0aa
	jump_1e102:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_element:	/* 0x1e110 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x18(%esp),%edi
		mov    0x1c(%esp),%esi
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		mov    frames,%edx
		lea    0x0(,%eax,8),%eax
		add    %eax,%edx
		mov    (%edx),%dx
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%edx
		add    %eax,%ebx
		cmp    %edx,%ebx
		jbe    jump_1e1b0
	jump_1e158:
		xor    %eax,%eax
		mov    h_sprites,%ebp
		mov    (%ebx),%ax
		add    %ebp,%eax
		cmp    %ebp,%eax
		jbe    jump_1e189
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		mov    0x4(%ebx),%ax
		add    %esi,%eax
		cwtl
		push   %eax
		mov    0x2(%ebx),%ax
		add    %edi,%eax
		cwtl
		push   %eax
		call   DrawASpriteHires16_A
		add    $0x10,%esp
	jump_1e189:
		mov    0x8(%ebx),%bx
		and    $0xffff,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ecx
		add    %eax,%ebx
		cmp    %ecx,%ebx
		ja     jump_1e158
	jump_1e1b0:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_agent_element:	/* 0x1e1c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    h_sprites,%edi
		xor    %eax,%eax
		mov    0x18(%esp),%ax
		mov    frames,%edx
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ecx
		add    %eax,%ebx
		cmp    %ecx,%ebx
		jbe    jump_1e2f2
		mov    0x14(%esp),%edx
		sub    $level__People,%edx
		mov    $0x5c,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%esi
		shl    $0x5,%esi
		add    %eax,%esi
		lea    0x0(,%esi,4),%esi
		sub    %eax,%esi
		lea    0x0(,%esi,8),%esi
		sub    %eax,%esi
	jump_1e242:
		mov    $0x6,%ebp
		mov    data_5e4ab(%esi),%al
		xor    %edx,%edx
		xor    %ah,%ah
		mov    (%ebx),%dx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		shl    $0x3,%ecx
		sub    $0x29,%eax
		add    $0x461,%ecx
		cmp    $0x8,%ax
		jae    jump_1e28c
		and    $0x7,%al
		xor    %ah,%ah
		xor    %edx,%edx
		mov    %ax,%dx
		xor    %eax,%eax
		mov    %cx,%ax
		add    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		jmp    jump_1e291
	jump_1e28c:
		xor    %eax,%eax
		mov    (%ebx),%ax
	jump_1e291:
		add    %edi,%eax
		mov    %edi,h_sprites
		cmp    %edi,%eax
		jbe    jump_1e2c5
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		push   %edx
		push   %eax
		mov    0x4(%ebx),%dx
		mov    0x28(%esp),%eax
		add    %edx,%eax
		cwtl
		mov    0x2(%ebx),%cx
		push   %eax
		mov    0x28(%esp),%eax
		add    %ecx,%eax
		cwtl
		push   %eax
		call   DrawASpriteHires16_A
		add    $0x10,%esp
	jump_1e2c5:
		mov    h_sprites,%edi
		xor    %edx,%edx
		mov    0x8(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    elements_ani,%ebx
		add    %eax,%eax
		mov    elements_ani,%ebp
		add    %eax,%ebx
		cmp    %ebp,%ebx
		ja     jump_1e242
	jump_1e2f2:
		mov    %edi,h_sprites
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
full_redraw:	/* 0x1e300 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%eax
		xor    %edx,%edx
		mov    %edx,DestinationX
		mov    %edx,DestinationY
		mov    level__HiBoundaryx,%dx
		cmp    %dx,%bx
		jle    jump_1e327
		mov    %edx,%ebx
	jump_1e327:
		mov    level__HiBoundaryy,%cx
		cmp    %cx,%ax
		jle    jump_1e335
		mov    %ecx,%eax
	jump_1e335:
		mov    level__LoBoundaryx,%si
		cmp    %si,%bx
		jge    jump_1e343
		mov    %esi,%ebx
	jump_1e343:
		mov    level__LoBoundaryy,%di
		cmp    %di,%ax
		jge    jump_1e351
		mov    %edi,%eax
	jump_1e351:
		and    $0xfe,%bl
		and    $0xfe,%al
		xor    %bh,%bh
		xor    %ah,%ah
		mov    %bx,player_view_map_x
		mov    %ax,player_view_map_y
		xor    %bl,%bl
		lea    0x0(%eax),%eax
		nop
	jump_1e370:
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		mov    DestinationX,%esi
		mov    player_view_map_y,%ax
		push   %esi
		add    %ebx,%eax
		push   $0x10
		cwtl
		push   %eax
		mov    player_view_map_x,%ax
		add    %ebx,%eax
		cwtl
		push   %eax
		inc    %ebx
		call   draw_horizontal
		add    $0x14,%esp
		cmp    $0x19,%bx
		jb     jump_1e370
		call   set_all_changes
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
scroll_map:	/* 0x1e400 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		mov    0x8(%esp),%eax
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x48
		je     jump_1e413
		xor    %eax,%eax
	jump_1e413:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x4b
		je     jump_1e41e
		xor    %edx,%edx
	jump_1e41e:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x50	/* lbKeyOn[KC_NUMPAD2] */
		je     jump_1e42c
		mov    $0x18e,%eax
	jump_1e42c:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x4d
		je     jump_1e43c
		mov    $0x27e,%edx
		jmp    jump_1e458
	jump_1e43c:
		test   %dx,%dx
		jne    jump_1e458
		test   %ax,%ax
		jne    jump_1e44a
		push   $0x5
		jmp    jump_1e4a5
	jump_1e44a:
		cmp    $0x18e,%ax
		jne    jump_1e454
		push   $0x9
		jmp    jump_1e4a5
	jump_1e454:
		push   $0x1
		jmp    jump_1e4a5
	jump_1e458:
		test   %ax,%ax
		jne    jump_1e47a
		cmp    $0x27e,%dx
		jne    jump_1e46f
		push   $0x6
		call   scroll
		add    $0x4,%esp
		ret
	jump_1e46f:
		push   $0x4
		call   scroll
		add    $0x4,%esp
		ret
	jump_1e47a:
		cmp    $0x27e,%dx
		jne    jump_1e49d
		cmp    $0x18e,%ax
		jne    jump_1e492
		push   $0xa
		call   scroll
		add    $0x4,%esp
		ret
	jump_1e492:
		push   $0x2
		call   scroll
		add    $0x4,%esp
		ret
	jump_1e49d:
		cmp    $0x18e,%ax
		jne    jump_1e4ad
		push   $0x8
	jump_1e4a5:
		call   scroll
		add    $0x4,%esp
	jump_1e4ad:
		ret

vtable_1e4b0:
		.long   func_1e6ae
		.long   func_1e640
		.long   jump_1ea0c
		.long   func_1e5bb
		.long   func_1e720
		.long   func_1e7d4
		.long   jump_1ea0c
		.long   func_1e522
		.long   func_1e871
		.long   func_1e93b


/*----------------------------------------------------------------*/
scroll:	/* 0x1e4e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ax
		dec    %ax
		cmp    $0x9,%ax
		ja     jump_1ea0c
		mov    player_view_map_y,%cx
		mov    player_view_map_x,%si
		mov    player_view_map_x,%dx
		mov    player_view_map_y,%bx
		and    $0xffff,%eax
		inc    %ecx
		inc    %esi
		dec    %edx
		dec    %ebx
		jmp    *%cs:vtable_1e4b0(,%eax,4)


/*----------------------------------------------------------------*/
func_1e522:
/*----------------------------------------------------------------*/
		mov    player_view_map_x,%ax
		cmp    level__HiBoundaryx,%ax
		jge    func_1e871
		mov    player_view_map_y,%ax
		cmp    level__HiBoundaryy,%ax
		jge    func_1e93b
		mov    DestinationY,%edx
		mov    %si,player_view_map_x
		mov    %cx,player_view_map_y
		cmp    $0x18,%edx
		jne    jump_1e570
		xor    %ecx,%ecx
		mov    $0x18,%eax
		mov    %ecx,DestinationY
		jmp    jump_1e580
	jump_1e570:
		lea    0x1(%edx),%ebx
		mov    %ebx,DestinationY
		mov    DestinationY,%ax
		dec    %eax
	jump_1e580:
		and    $0xffff,%eax
		push   %eax
		mov    DestinationX,%esi
		mov    player_view_map_y,%ax
		push   %esi
		add    $0x18,%eax
		push   $0x10
		cwtl
		push   %eax
		mov    player_view_map_x,%ax
		add    $0x18,%eax
		cwtl
		push   %eax
		call   draw_horizontal
		add    $0x14,%esp
		call   set_all_changes
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1e5bb:
/*----------------------------------------------------------------*/
		mov    player_view_map_x,%ax
		cmp    level__LoBoundaryx,%ax
		jle    func_1e7d4
		mov    player_view_map_y,%ax
		cmp    level__LoBoundaryy,%ax
		jle    func_1e720
		mov    DestinationY,%edi
		mov    %dx,player_view_map_x
		mov    %bx,player_view_map_y
		test   %edi,%edi
		jne    jump_1e605
		movl   $0x18,DestinationY
		jmp    jump_1e60e
	jump_1e605:
		lea    -0x1(%edi),%ebp
		mov    %ebp,DestinationY
	jump_1e60e:
		mov    DestinationY,%edx
		push   %edx
		mov    DestinationX,%ebx
		push   %ebx
		push   $0x10
		movswl player_view_map_y,%eax
		push   %eax
		movswl player_view_map_x,%eax
		push   %eax
		call   draw_horizontal
		add    $0x14,%esp
		call   set_all_changes
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1e640:
/*----------------------------------------------------------------*/
		mov    player_view_map_x,%ax
		cmp    level__HiBoundaryx,%ax
		jge    func_1e7d4
		mov    player_view_map_y,%ax
		cmp    level__LoBoundaryy,%ax
		jle    func_1e93b
		mov    DestinationX,%ecx
		mov    %si,player_view_map_x
		mov    %bx,player_view_map_y
		cmp    $0xf,%ecx
		jne    jump_1e68e
		xor    %edi,%edi
		mov    $0xf,%eax
		mov    %edi,DestinationX
		jmp    jump_1e69d
	jump_1e68e:
		lea    0x1(%ecx),%esi
		mov    DestinationX,%ax
		mov    %esi,DestinationX
	jump_1e69d:
		mov    DestinationY,%ebp
		push   %ebp
		and    $0xffff,%eax
		jmp    jump_1e9e9


/*----------------------------------------------------------------*/
func_1e6ae:
/*----------------------------------------------------------------*/
		mov    player_view_map_x,%ax
		cmp    level__LoBoundaryx,%ax
		jle    func_1e871
		mov    player_view_map_y,%ax
		cmp    level__HiBoundaryy,%ax
		jge    func_1e720
		mov    DestinationX,%esi
		mov    %dx,player_view_map_x
		mov    %cx,player_view_map_y
		test   %esi,%esi
		jne    jump_1e6f4
		movl   $0xf,DestinationX
		jmp    jump_1e6fd
	jump_1e6f4:
		lea    -0x1(%esi),%edi
		mov    %edi,DestinationX
	jump_1e6fd:
		mov    DestinationY,%eax
		push   %eax
		mov    DestinationX,%edx
		push   %edx
		push   $0x19
		movswl player_view_map_y,%eax
		push   %eax
		movswl player_view_map_x,%eax
		jmp    jump_1ea03


/*----------------------------------------------------------------*/
func_1e720:
/*----------------------------------------------------------------*/
		mov    player_view_map_x,%ax
		cmp    level__LoBoundaryx,%ax
		jle    jump_1ea0c
		sub    $0x2,%eax
		mov    DestinationY,%ebx
		mov    %ax,player_view_map_x
		test   %ebx,%ebx
		jne    jump_1e752
		movl   $0x18,DestinationY
		jmp    jump_1e75b
	jump_1e752:
		lea    -0x1(%ebx),%ecx
		mov    %ecx,DestinationY
	jump_1e75b:
		mov    DestinationX,%edi
		test   %edi,%edi
		jne    jump_1e771
		movl   $0xf,DestinationX
		jmp    jump_1e77a
	jump_1e771:
		lea    -0x1(%edi),%ebp
		mov    %ebp,DestinationX
	jump_1e77a:
		mov    DestinationY,%edx
		push   %edx
		mov    DestinationX,%ebx
		push   %ebx
		push   $0x19
		movswl player_view_map_y,%eax
		push   %eax
		movswl player_view_map_x,%eax
		push   %eax
		call   func_48719
		add    $0x14,%esp
		mov    DestinationY,%ecx
		push   %ecx
		mov    DestinationX,%esi
		push   %esi
		push   $0x10
		movswl player_view_map_y,%eax
		push   %eax
		movswl player_view_map_x,%eax
		push   %eax
		call   draw_horizontal
		add    $0x14,%esp
		call   set_all_changes
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1e7d4:
/*----------------------------------------------------------------*/
		mov    player_view_map_y,%ax
		cmp    level__LoBoundaryy,%ax
		jle    jump_1ea0c
		mov    %eax,%edi
		sub    $0x2,%edi
		mov    DestinationY,%edx
		mov    %di,player_view_map_y
		test   %edx,%edx
		jne    jump_1e809
		movl   $0x18,DestinationY
		jmp    jump_1e812
	jump_1e809:
		lea    -0x1(%edx),%ebx
		mov    %ebx,DestinationY
	jump_1e812:
		mov    DestinationX,%esi
		cmp    $0xf,%esi
		jne    jump_1e82c
		xor    %ebp,%ebp
		mov    $0xf,%ebx
		mov    %ebp,DestinationX
		jmp    jump_1e83c
	jump_1e82c:
		lea    0x1(%esi),%edi
		mov    DestinationX,%bx
		mov    %edi,DestinationX
	jump_1e83c:
		mov    DestinationY,%eax
		push   %eax
		mov    DestinationX,%edx
		push   %edx
		push   $0x10
		movswl player_view_map_y,%eax
		push   %eax
		movswl player_view_map_x,%eax
		push   %eax
		call   draw_horizontal
		add    $0x14,%esp
		mov    DestinationY,%ecx
		xor    %eax,%eax
		push   %ecx
		jmp    jump_1e9e6


/*----------------------------------------------------------------*/
func_1e871:
/*----------------------------------------------------------------*/
		mov    player_view_map_y,%ax
		cmp    level__HiBoundaryy,%ax
		jge    jump_1ea0c
		mov    %eax,%ebx
		add    $0x2,%ebx
		mov    DestinationY,%edi
		mov    %bx,player_view_map_y
		cmp    $0x18,%edi
		jne    jump_1e8a9
		xor    %eax,%eax
		mov    %eax,DestinationY
		mov    $0x18,%eax
		jmp    jump_1e8b9
	jump_1e8a9:
		lea    0x1(%edi),%ebp
		mov    %ebp,DestinationY
		mov    DestinationY,%ax
		dec    %eax
	jump_1e8b9:
		mov    DestinationX,%edx
		test   %edx,%edx
		jne    jump_1e8cf
		movl   $0xf,DestinationX
		jmp    jump_1e8d8
	jump_1e8cf:
		lea    -0x1(%edx),%ebx
		mov    %ebx,DestinationX
	jump_1e8d8:
		and    $0xffff,%eax
		push   %eax
		mov    DestinationX,%esi
		mov    player_view_map_y,%ax
		push   %esi
		add    $0x18,%eax
		push   $0x10
		cwtl
		push   %eax
		mov    player_view_map_x,%ax
		add    $0x18,%eax
		cwtl
		push   %eax
		call   draw_horizontal
		add    $0x14,%esp
		mov    DestinationY,%edi
		push   %edi
		mov    DestinationX,%ebp
		push   %ebp
		push   $0x19
		movswl player_view_map_y,%eax
		push   %eax
		movswl player_view_map_x,%eax
		push   %eax
		call   func_48719
		add    $0x14,%esp
		call   set_all_changes
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_1e93b:
/*----------------------------------------------------------------*/
		mov    player_view_map_x,%ax
		cmp    level__HiBoundaryx,%ax
		jge    jump_1ea0c
		mov    %eax,%ecx
		add    $0x2,%ecx
		mov    DestinationY,%eax
		mov    %cx,player_view_map_x
		cmp    $0x18,%eax
		jne    jump_1e973
		xor    %ebx,%ebx
		mov    $0x18,%eax
		mov    %ebx,DestinationY
		jmp    jump_1e983
	jump_1e973:
		lea    0x1(%eax),%edx
		mov    %edx,DestinationY
		mov    DestinationY,%ax
		dec    %eax
	jump_1e983:
		mov    DestinationX,%ecx
		cmp    $0xf,%ecx
		jne    jump_1e99d
		xor    %edi,%edi
		mov    $0xf,%ebx
		mov    %edi,DestinationX
		jmp    jump_1e9ad
	jump_1e99d:
		lea    0x1(%ecx),%esi
		mov    DestinationX,%bx
		mov    %esi,DestinationX
	jump_1e9ad:
		and    $0xffff,%eax
		push   %eax
		mov    DestinationX,%ebp
		mov    player_view_map_y,%ax
		push   %ebp
		add    $0x18,%eax
		push   $0x10
		cwtl
		push   %eax
		mov    player_view_map_x,%ax
		add    $0x18,%eax
		cwtl
		push   %eax
		call   draw_horizontal
		add    $0x14,%esp
		mov    DestinationY,%eax
		push   %eax
		xor    %eax,%eax
	jump_1e9e6:
		mov    %bx,%ax
	jump_1e9e9:
		push   %eax
		mov    player_view_map_y,%ax
		sub    $0xf,%eax
		push   $0x19
		cwtl
		push   %eax
		mov    player_view_map_x,%ax
		add    $0xf,%eax
		cwtl
	jump_1ea03:
		push   %eax
		call   func_48719
		add    $0x14,%esp
	jump_1ea0c:
		call   set_all_changes
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
nullsub_2:	/* 0x1ea20 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
init_fireball:	/* 0x1ea30 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%edi
		mov    0x1c(%esp),%esi
		mov    $level__Effects,%ebx
		cmp    $data_96d70,%ebx
		jae    jump_1eaa3
	jump_1ea48:
		cmpb   $0x0,0x18(%ebx)
		jne    jump_1ea98
		mov    0x14(%esp),%eax
		mov    %ax,0x6(%ebx)
		mov    0x18(%esp),%eax
		mov    %ax,0x8(%ebx)
		movswl 0x8(%ebx),%eax
		movb   $0x3,0x18(%ebx)
		push   %eax
		movswl 0x6(%ebx),%eax
		mov    %di,0x4(%ebx)
		push   %eax
		movswl 0x4(%ebx),%eax
		movw   $0x0,0xa(%ebx)
		push   %eax
		movw   $0x0,0x10(%ebx)
		push   %ebx
		movw   $0xffff,0x12(%ebx)
		call   move_on_mapwho
		movb   $0x29,0x19(%ebx)
		add    $0x10,%esp
		mov    %si,0x1c(%ebx)
	jump_1ea98:
		add    $0x1e,%ebx
		cmp    $data_96d70,%ebx
		jb     jump_1ea48
	jump_1eaa3:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_1eaa8:
		.long   jump_1fb10
		.long   func_1ebe5
		.long   func_1ebe5
		.long   func_1ebe5
		.long   func_1ebe5
		.long   func_1ebe5
		.long   func_1ebe5
		.long   func_1ebf0
		.long   func_1ecbc
		.long   func_1fb07
		.long   func_1ed0d
		.long   func_1edb7
		.long   func_1fb07
		.long   func_1ee2f
		.long   func_1eecb
		.long   func_1fb07
		.long   func_1ef51
		.long   func_1efa9
		.long   func_1fb07
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   func_1efc3
		.long   func_1f034
		.long   func_1f473
		.long   func_1f1c9
		.long   func_1f1dc
		.long   func_1f2b8
		.long   jump_1fb10
		.long   jump_1fb10
		.long   jump_1fb10
		.long   func_1f2d8
		.long   func_1f341
		.long   func_1f473
		.long   func_1f48a
		.long   func_1f4a0
		.long   func_1fb07
		.long   func_1f529
		.long   func_1f539
		.long   func_1f65e
		.long   func_1f754
		.long   func_1f763
		.long   func_1fb07
		.long   func_1f7d9
		.long   func_1fb07
		.long   func_1f88c


/*----------------------------------------------------------------*/
move_effects:	/* 0x1eb80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    $level__Effects,%ebx
		cmp    $level__Commands,%ebx
		jae    jump_1fb44
	jump_1eb98:
		cmpb   $0x0,0x18(%ebx)
		je     jump_1fb35
		mov    0x4(%ebx),%ax
		xor    %edx,%edx
		mov    %ax,data_60b28
		mov    0x6(%ebx),%ax
		mov    %edx,0x4(%esp)
		mov    %ax,data_60b2a
		mov    0x8(%ebx),%ax
		mov    0x19(%ebx),%dl
		mov    %ax,data_60b2c
		cmp    $0x34,%dl
		ja     jump_1fb10
		xor    %eax,%eax
		mov    a11,%esi
		mov    %dl,%al
		inc    %esi
		jmp    *%cs:vtable_1eaa8(,%eax,4)


/*----------------------------------------------------------------*/
func_1ebe5:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		jmp    jump_1fb0d


/*----------------------------------------------------------------*/
func_1ebf0:
/*----------------------------------------------------------------*/
		movswl data_60b2a,%edx
		mov    $0x6000,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl data_60b28,%edx
		and    $0xff00,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%esi
		add    %esi,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%esi
		movswl data_60b2c,%edx
		dec    %edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%esi),%eax
		mov    (%eax),%al
		mov    h_col,%edx
		and    $0xff,%eax
		cmpb   $0x0,(%edx,%eax,1)
		jne    jump_1ec74
		push   %ebx
		call   remove_model
		add    $0x4,%esp
	jump_1ec74:
		push   $0x7
		call   random
		xor    %esi,%esi
		add    $0x4,%esp
		mov    %eax,%edi
		test   %ax,%ax
		jle    jump_1ec96
	jump_1ec87:
		push   %ebx
		call   animate_model
		inc    %esi
		add    $0x4,%esp
		cmp    %di,%si
		jl     jump_1ec87
	jump_1ec96:
		push   $0xa
		mov    $0xf3,%esi
		call   random
		mov    $0x28,%edx
		add    $0x4,%esp
		mov    0x19(%ebx),%ch
		add    %eax,%edx
		inc    %ch
		mov    %dx,0x14(%ebx)
		mov    %esi,0x4(%esp)
		mov    %ch,0x19(%ebx)


/*----------------------------------------------------------------*/
func_1ecbc:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%di
		dec    %edi
		mov    %di,0x14(%ebx)
		test   %di,%di
		jge    jump_1eccd
		incb   0x19(%ebx)
	jump_1eccd:
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		push   $0x8
		push   $0x200
		push   $0x100
		push   $0x100
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1ed0d:
/*----------------------------------------------------------------*/
		mov    $0x7f,%eax
		push   %eax
		mov    $0x9,%eax
		push   %eax
		call   SetBFSampleStatus
		mov    data_60b28,%di
		add    $0x8,%esp
		sub    $0x180,%edi
		mov    $0x80,%ebp
		jmp    jump_1ed93
	jump_1ed35:
		mov    data_60b2a,%si
		sub    $0x180,%esi
		jmp    jump_1ed79
	jump_1ed44:
		push   %ebp
		push   $0x200
		mov    data_60b2c,%dx
		push   $0x100
		sub    $0x100,%edx
		push   $0x100
		movswl %dx,%edx
		push   %edx
		push   %eax
		movswl %di,%eax
		push   %eax
		push   %ebx
		add    $0x100,%esi
		call   sprite_colide
		add    $0x20,%esp
	jump_1ed79:
		movswl data_60b2a,%edx
		movswl %si,%eax
		add    $0x280,%edx
		cmp    %edx,%eax
		jl     jump_1ed44
		add    $0x100,%edi
	jump_1ed93:
		movswl data_60b28,%eax
		movswl %di,%edx
		add    $0x280,%eax
		cmp    %eax,%edx
		jl     jump_1ed35
		mov    0x19(%ebx),%ch
		mov    $0x186,%esi
		inc    %ch
		mov    %esi,0x4(%esp)
		mov    %ch,0x19(%ebx)


/*----------------------------------------------------------------*/
func_1edb7:
/*----------------------------------------------------------------*/
		xor    %esi,%esi
		mov    $0xff,%edi
	jump_1edbe:
		xor    %eax,%eax
		mov    0x1c(%ebx),%ax
		push   %eax
		mov    data_60b2c,%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		push   %edi
		call   random
		mov    data_60b2a,%dx
		sub    $0x80,%eax
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   %edi
		call   random
		mov    data_60b28,%cx
		sub    $0x80,%eax
		add    %ecx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		inc    %esi
		call   init_fireball
		add    $0x10,%esp
		cmp    $0x2,%si
		jl     jump_1edbe
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1fb10
		incb   0x19(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1ee2f:
/*----------------------------------------------------------------*/
		mov    $0x7f,%eax
		push   %eax
		mov    $0x9,%eax
		push   %eax
		call   SetBFSampleStatus
		mov    data_60b28,%di
		add    $0x8,%esp
		sub    $0x80,%edi
		mov    $0x80,%ebp
		jmp    jump_1eeb5
	jump_1ee57:
		mov    data_60b2a,%si
		sub    $0x80,%esi
		jmp    jump_1ee9b
	jump_1ee66:
		push   %ebp
		push   $0x200
		mov    data_60b2c,%dx
		push   $0x100
		sub    $0x100,%edx
		push   $0x100
		movswl %dx,%edx
		push   %edx
		push   %eax
		movswl %di,%eax
		push   %eax
		push   %ebx
		add    $0x100,%esi
		call   sprite_colide
		add    $0x20,%esp
	jump_1ee9b:
		movswl data_60b2a,%edx
		movswl %si,%eax
		add    $0x180,%edx
		cmp    %edx,%eax
		jl     jump_1ee66
		add    $0x100,%edi
	jump_1eeb5:
		movswl data_60b28,%eax
		movswl %di,%edx
		add    $0x180,%eax
		cmp    %eax,%edx
		jl     jump_1ee57
		incb   0x19(%ebx)


/*----------------------------------------------------------------*/
func_1eecb:
/*----------------------------------------------------------------*/
		mov    $0x186,%ecx
		xor    %esi,%esi
		mov    %ecx,0x4(%esp)
		mov    $0xff,%edi
		lea    0x0(%eax),%eax
		mov    %ecx,%ecx
	jump_1eee0:
		xor    %eax,%eax
		mov    0x1c(%ebx),%ax
		push   %eax
		mov    data_60b2c,%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		push   %edi
		call   random
		mov    data_60b2a,%dx
		sub    $0x80,%eax
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   %edi
		call   random
		mov    data_60b28,%cx
		sub    $0x80,%eax
		add    %ecx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		inc    %esi
		call   init_fireball
		add    $0x10,%esp
		cmp    $0xa,%si
		jl     jump_1eee0
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1fb10
		incb   0x19(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1ef51:
/*----------------------------------------------------------------*/
		push   $0x7f
		push   $0x9
		call   SetBFSampleStatus
		add    $0x8,%esp
		push   $0x80
		push   $0x200
		mov    data_60b2c,%ax
		push   $0x100
		sub    $0x100,%eax
		push   $0x100
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		mov    $0x186,%esi
		call   sprite_colide
		mov    0x19(%ebx),%ch
		add    $0x20,%esp
		inc    %ch
		mov    %esi,0x4(%esp)
		mov    %ch,0x19(%ebx)


/*----------------------------------------------------------------*/
func_1efa9:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1fb10
		incb   0x19(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1efc3:
/*----------------------------------------------------------------*/
		mov    %dl,%dh
		inc    %dh
		mov    %dh,0x19(%ebx)
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    0xa(%ebx),%cl
		lea    0x0(,%eax,8),%eax
		or     $0x1,%cl
		sub    %edx,%eax
		mov    %cl,0xa(%ebx)
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		xor    %edi,%edi
		mov    0x1c(%ebx),%di
		add    $level__things_base,%edi
		add    $level__People,%edx
		cmp    %edx,%edi
		jb     jump_1f02c
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		jae    jump_1f02c
		mov    %esi,a11
	jump_1f02c:
		movl   $0x17e,0x4(%esp)


/*----------------------------------------------------------------*/
func_1f034:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%cx
		xor    %esi,%esi
		test   %cx,%cx
		jle    jump_1f168
	jump_1f043:
		mov    data_60b28,%ax
		mov    %eax,0xc(%esp)
		mov    data_60b2a,%ax
		mov    %eax,0x8(%esp)
		mov    0x1b(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		push   $0x80
		mov    data_60b2c,%di
		call   goto_zangle
		add    $0xc,%esp
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		call   sight_colide
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_1f0c6
		mov    0xc(%esp),%eax
		mov    %ax,data_60b28
		mov    0x8(%esp),%eax
		mov    %di,data_60b2c
		mov    %ax,data_60b2a
		jmp    jump_1f168
	jump_1f0c6:
		push   $0x40
		push   $0x100
		mov    data_60b2c,%ax
		push   $0x80
		sub    $0x80,%eax
		push   $0x80
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   bullet_colide
		add    $0x20,%esp
		test   %eax,%eax
		je     jump_1f15d
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		xor    %edi,%edi
		mov    0x1c(%ebx),%di
		add    $level__things_base,%edi
		add    $level__People,%edx
		cmp    %edx,%edi
		jb     jump_1f168
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		jae    jump_1f168
		incl   data_60afe
		jmp    jump_1f168
	jump_1f15d:
		inc    %esi
		cmp    0x14(%ebx),%si
		jl     jump_1f043
	jump_1f168:
		movswl data_60b2c,%eax
		push   %eax
		push   $0x40
		call   random
		mov    $0x20,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		add    data_60b2a,%ax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   $0x40
		call   random
		mov    $0x20,%edx
		sub    %eax,%edx
		mov    data_60b28,%cx
		mov    %edx,%eax
		add    %ecx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   %ebx
		call   move_mapwho
		mov    0x19(%ebx),%dh
		mov    0xa(%ebx),%cl
		inc    %dh
		and    $0xfe,%cl
		mov    %dh,0x19(%ebx)
		add    $0x10,%esp
		mov    %cl,0xa(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f1c9:
/*----------------------------------------------------------------*/
		mov    $0x17f,%eax
		inc    %dl
		mov    %eax,0x4(%esp)
		mov    %dl,0x19(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f1dc:
/*----------------------------------------------------------------*/
		xor    %esi,%esi
		mov    $0x40,%edi
	jump_1f1e3:
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		push   $0xb
		call   random
		add    $0x26,%ax
		add    $0x4,%esp
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		call   affect_by_wind
		push   $0x8
		push   %edi
		push   %edi
		push   %edi
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		call   sight_colide
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_1f26a
		mov    0x14(%ebx),%ax
		mov    %eax,%edx
		dec    %edx
		mov    %dx,0x14(%ebx)
		test   %ax,%ax
		jne    jump_1f26f
	jump_1f26a:
		incb   0x19(%ebx)
		jmp    jump_1f292
	jump_1f26f:
		push   $0x3
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_1f287
		push   %ebx
		call   animate_model
		add    $0x4,%esp
	jump_1f287:
		inc    %esi
		cmp    $0x4,%si
		jl     jump_1f1e3
	jump_1f292:
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f2b8:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1fb10
		push   %ebx
		call   remove_model
		add    $0x4,%esp
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f2d8:
/*----------------------------------------------------------------*/
		mov    0xa(%ebx),%al
		mov    0x19(%ebx),%ah
		or     $0x1,%al
		inc    %ah
		mov    %al,0xa(%ebx)
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %ah,0x19(%ebx)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		xor    %edi,%edi
		mov    0x1c(%ebx),%di
		add    $level__things_base,%edi
		add    $level__People,%edx
		cmp    %edx,%edi
		jb     func_1f341
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		jae    func_1f341
		mov    %esi,a11


/*----------------------------------------------------------------*/
func_1f341:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%di
		xor    %esi,%esi
		test   %di,%di
		jle    jump_1f433
	jump_1f350:
		mov    0x1b(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		push   $0x80
		call   goto_zangle
		add    $0xc,%esp
		push   $0x10
		push   $0x80
		push   $0x80
		push   $0x80
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
		test   %ax,%ax
		je     jump_1f403
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		xor    %edi,%edi
		mov    0x1c(%ebx),%di
		add    $level__things_base,%edi
		add    $level__People,%edx
		cmp    %edx,%edi
		jb     jump_1f403
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		jae    jump_1f403
		incl   data_60afe
	jump_1f403:
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		call   sight_colide
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_1f433
		inc    %esi
		cmp    0x14(%ebx),%si
		jl     jump_1f350
	jump_1f433:
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		mov    $0x185,%esi
		call   move_mapwho
		add    $0x10,%esp
		mov    0x19(%ebx),%al
		mov    0xa(%ebx),%ah
		inc    %al
		and    $0xfe,%ah
		mov    %al,0x19(%ebx)
		mov    %esi,0x4(%esp)
		mov    %ah,0xa(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f473:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1fb10
		jmp    func_1fb07


/*----------------------------------------------------------------*/
func_1f48a:
/*----------------------------------------------------------------*/
		mov    $0x187,%eax
		mov    %dl,%ch
		movw   $0x0,0x14(%ebx)
		inc    %ch
		mov    %eax,0x4(%esp)
		mov    %ch,0x19(%ebx)


/*----------------------------------------------------------------*/
func_1f4a0:
/*----------------------------------------------------------------*/
		call   affect_by_wind
		push   $0x8
		push   $0x40
		push   $0x40
		push   $0x40
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   sprite_colide
		mov    data_60b2c,%ax
		add    $0x30,%eax
		add    $0x20,%esp
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		mov    0x14(%ebx),%dx
		inc    %edx
		add    $0x10,%esp
		mov    %dx,0x14(%ebx)
		cmp    $0x2,%dx
		jne    jump_1fb10
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1f51e
		push   %ebx
		call   remove_model
		add    $0x4,%esp
	jump_1f51e:
		movw   $0x0,0x14(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f529:
/*----------------------------------------------------------------*/
		mov    %dl,%dh
		mov    0xa(%ebx),%cl
		inc    %dh
		or     $0x1,%cl
		mov    %dh,0x19(%ebx)
		mov    %cl,0xa(%ebx)


/*----------------------------------------------------------------*/
func_1f539:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%di
		xor    %esi,%esi
		test   %di,%di
		jl     jump_1f62e
	jump_1f548:
		mov    0x1b(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		push   $0x17
		call   random
		add    $0x78,%ax
		add    $0x4,%esp
		and    $0xffff,%eax
		push   %eax
		call   goto_zangle
		add    $0xc,%esp
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		call   sight_colide
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_1f5d5
		push   $0x0
		push   $0x80
		push   $0x80
		push   $0x80
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   bullet_colide
		add    $0x20,%esp
		test   %eax,%eax
		je     jump_1f5dd
	jump_1f5d5:
		movw   $0xffff,0x14(%ebx)
		jmp    jump_1f635
	jump_1f5dd:
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1f613
		movb   $0x2f,0x19(%eax)
		mov    0x1c(%ebx),%dx
		mov    %dx,0x1c(%eax)
		mov    0x1a(%ebx),%dl
		mov    %dl,0x1a(%eax)
	jump_1f613:
		mov    0x14(%ebx),%ax
		dec    %eax
		inc    %esi
		mov    %ax,0x14(%ebx)
		cmp    $0x6,%si
		jge    jump_1f62e
		cmpw   $0x0,0x14(%ebx)
		jge    jump_1f548
	jump_1f62e:
		cmpw   $0x0,0x14(%ebx)
		jge    jump_1f638
	jump_1f635:
		incb   0x19(%ebx)
	jump_1f638:
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f65e:
/*----------------------------------------------------------------*/
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		xor    %esi,%esi
		call   move_mapwho
		mov    0xa(%ebx),%dl
		movb   $0xa,0x19(%ebx)
		and    $0xfe,%dl
		add    $0x10,%esp
		mov    %dl,0xa(%ebx)
		mov    $0xff,%ebp
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		nop
	jump_1f6a0:
		push   %ebp
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		push   $0x1b8
		movswl data_5ab60(,%eax,2),%edi
		call   random
		mov    %eax,%edx
		and    $0xffff,%edx
		imul   %edi,%edx
		movswl data_60b28,%eax
		sar    $0x8,%edx
		add    $0x4,%esp
		add    %edx,%eax
		push   %ebp
		mov    %eax,0x14(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		push   $0x1b8
		movswl data_5ad60(,%eax,2),%edi
		call   random
		mov    %eax,%edx
		and    $0xffff,%edx
		imul   %edi,%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		add    $0x4,%esp
		mov    %eax,%edx
		movswl data_60b2c,%eax
		push   %eax
		movswl %dx,%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1f744
		movb   $0x7,0x19(%eax)
		mov    0x1c(%ebx),%dx
		mov    %dx,0x1c(%eax)
	jump_1f744:
		inc    %esi
		cmp    $0x10,%si
		jge    jump_1fb10
		jmp    jump_1f6a0


/*----------------------------------------------------------------*/
func_1f754:
/*----------------------------------------------------------------*/
		movl   $0xf4,0x4(%esp)
		mov    %dl,%ch
		inc    %ch
		mov    %ch,0x19(%ebx)


/*----------------------------------------------------------------*/
func_1f763:
/*----------------------------------------------------------------*/
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		add    $0x80,%ax
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		push   $0x1e
		call   random
		add    $0x64,%ax
		add    $0x4,%esp
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_1fb10
		mov    0x19(%ebx),%al
		mov    0xa(%ebx),%ah
		inc    %al
		or     $0x1,%ah
		mov    %al,0x19(%ebx)
		mov    %ah,0xa(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f7d9:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xa(%ebx),%cl
		mov    0x1c(%ebx),%ax
		or     $0x1,%cl
		add    $level__things_base,%eax
		mov    %cl,0xa(%ebx)
		mov    0x3c(%eax),%ax
		xor    %edi,%edi
		and    $0x18,%ah
		xor    %al,%al
		mov    %ax,%di
		sar    $0xb,%edi
		mov    $0x400,%ebp
		mov    %edi,%eax
		mov    data_60b28,%dx
		shl    $0x7,%eax
		shl    $0x7,%edi
		sub    %eax,%edx
		mov    %eax,(%esp)
		mov    %dx,0x14(%esp)
		jmp    jump_1f872
	jump_1f81e:
		mov    (%esp),%edx
		mov    data_60b2a,%si
		sub    %edx,%esi
		jmp    jump_1f85d
	jump_1f82c:
		push   %ebp
		push   $0x100
		push   $0x100
		push   $0x100
		movswl data_60b2c,%eax
		push   %eax
		movswl %si,%eax
		push   %eax
		movswl 0x2c(%esp),%eax
		push   %eax
		push   %ebx
		add    $0x100,%esi
		call   sprite_colide
		add    $0x20,%esp
	jump_1f85d:
		movswl data_60b2a,%eax
		lea    (%eax,%edi,1),%edx
		movswl %si,%eax
		cmp    %edx,%eax
		jbe    jump_1f82c
		incb   0x15(%esp)
	jump_1f872:
		movswl data_60b28,%eax
		movswl 0x14(%esp),%edx
		add    %edi,%eax
		cmp    %eax,%edx
		jbe    jump_1f81e
		incb   0x19(%ebx)
		jmp    jump_1fb10


/*----------------------------------------------------------------*/
func_1f88c:
/*----------------------------------------------------------------*/
		xor    %dh,%dh
		xor    %edi,%edi
		mov    %dh,0x18(%esp)
	jump_1f894:
		movswl 0x8(%ebx),%eax
		push   %eax
		movswl %di,%eax
		shl    $0x6,%eax
		and    $0xff,%eax
		movswl data_5ad60(,%eax,2),%ebp
		shl    $0x7,%ebp
		movswl 0x6(%ebx),%edx
		sar    $0x8,%ebp
		movswl data_5ab60(,%eax,2),%eax
		add    %ebp,%edx
		shl    $0x7,%eax
		movswl %dx,%edx
		sar    $0x8,%eax
		push   %edx
		movswl 0x4(%ebx),%edx
		add    %edx,%eax
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1f8ea
		movb   $0xd,0x19(%eax)
		mov    0x1c(%ebx),%dx
		mov    %dx,0x1c(%eax)
	jump_1f8ea:
		inc    %edi
		cmp    $0x4,%di
		jl     jump_1f894
		xor    %esi,%esi
	jump_1f8f3:
		movswl 0x8(%ebx),%eax
		movswl %si,%edx
		push   %eax
		xor    %eax,%eax
		shl    $0x5,%edx
		mov    0x1c(%esp),%al
		add    %edx,%eax
		and    $0xff,%eax
		lea    0x0(,%eax,2),%edi
		push   $0x40
		movswl data_5ad60(%edi),%ebp
		call   random
		mov    $0x80,%edx
		and    $0xffff,%eax
		sub    %eax,%edx
		add    $0x9c,%edx
		imul   %ebp,%edx
		movswl 0x6(%ebx),%eax
		sar    $0x8,%edx
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   $0x40
		movswl data_5ab60(%edi),%edi
		call   random
		mov    $0x80,%edx
		and    $0xffff,%eax
		sub    %eax,%edx
		lea    0x9c(%edx),%eax
		imul   %edi,%eax
		movswl 0x4(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1f98c
		movb   $0x10,0x19(%eax)
		mov    0x1c(%ebx),%dx
		mov    %dx,0x1c(%eax)
	jump_1f98c:
		inc    %esi
		cmp    $0x8,%si
		jl     jump_1f8f3
		xor    %esi,%esi
		lea    0x0(%eax),%eax
		nop
	jump_1f9a0:
		movswl 0x8(%ebx),%eax
		movswl %si,%edx
		push   %eax
		xor    %eax,%eax
		shl    $0x4,%edx
		mov    0x1c(%esp),%al
		add    %edx,%eax
		and    $0xff,%eax
		lea    0x0(,%eax,2),%edi
		push   $0x40
		movswl data_5ad60(%edi),%ebp
		call   random
		mov    $0x80,%edx
		and    $0xffff,%eax
		sub    %eax,%edx
		lea    0x138(%edx),%eax
		imul   %ebp,%eax
		movswl 0x6(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   $0x40
		movswl data_5ab60(%edi),%edi
		call   random
		mov    $0x80,%edx
		and    $0xffff,%eax
		sub    %eax,%edx
		lea    0x138(%edx),%eax
		imul   %eax,%edi
		sar    $0x8,%edi
		movswl 0x4(%ebx),%eax
		add    %edi,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1fa39
		movb   $0x10,0x19(%eax)
		mov    0x1c(%ebx),%dx
		mov    %dx,0x1c(%eax)
	jump_1fa39:
		inc    %esi
		cmp    $0x10,%si
		jl     jump_1f9a0
		xor    %esi,%esi
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_1fa50:
		push   $0x7
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_1fafc
		movswl 0x8(%ebx),%eax
		xor    %edx,%edx
		push   %eax
		movswl %si,%eax
		mov    0x1c(%esp),%dl
		shl    $0x5,%eax
		add    %edx,%eax
		and    $0xff,%eax
		lea    0x0(,%eax,2),%edi
		push   $0x40
		movswl data_5ad60(%edi),%ebp
		call   random
		mov    $0x80,%edx
		and    $0xffff,%eax
		sub    %eax,%edx
		lea    0x1d4(%edx),%eax
		imul   %ebp,%eax
		movswl 0x6(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		push   $0x40
		movswl data_5ab60(%edi),%edi
		call   random
		mov    $0x80,%edx
		and    $0xffff,%eax
		sub    %eax,%edx
		lea    0x1d4(%edx),%eax
		imul   %edi,%eax
		movswl 0x4(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		add    $0x4,%esp
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_1fafc
		movb   $0x10,0x19(%eax)
		mov    0x1c(%ebx),%dx
		mov    %dx,0x1c(%eax)
	jump_1fafc:
		inc    %esi
		cmp    $0x20,%si
		jl     jump_1fa50


/*----------------------------------------------------------------*/
func_1fb07:
/*----------------------------------------------------------------*/
		push   %ebx
		call   remove_model
	jump_1fb0d:
		add    $0x4,%esp
	jump_1fb10:
		mov    0x4(%esp),%esi
		cmp    0x12(%ebx),%si
		je     jump_1fb35
		test   %si,%si
		je     jump_1fb35
		xor    %edx,%edx
		mov    starts_ani,%eax
		mov    %si,%dx
		mov    (%eax,%edx,2),%ax
		mov    %ax,0x10(%ebx)
		mov    %si,0x12(%ebx)
	jump_1fb35:
		add    $0x1e,%ebx
		cmp    $level__Commands,%ebx
		jb     jump_1eb98
	jump_1fb44:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

jpt_21874:	/* 0x1fb50 */
		.long   func_21e86
		.long   func_21e86
		.long   func_21e86
		.long   func_21e86
		.long   func_21ef3
		.long   func_21f03
		.long   func_21f15
		.long   func_21f82
		.long   func_2200d
		.long   def_21874
		.long   def_21874
		.long   func_2273c
		.long   func_2273c
		.long   func_2273c
		.long   func_2273c
		.long   func_2273c
		.long   func_2273c
		.long   func_2273c
		.long   func_2273c
		.long   def_21874
		.long   def_21874
		.long   func_2201c
		.long   func_227b0
		.long   func_227c8
		.long   def_21874


/*----------------------------------------------------------------*/
equip_team:	/* 0x1fbc0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x68,%esp
		mov    $0x18,%ah
		mov    $0x2,%dl
		xor    %dh,%dh
		xor    %bl,%bl
		xor    %bh,%bh
		mov    %ah,-0x8(%ebp)
		mov    %dl,-0xc(%ebp)
		mov    %dh,-0x10(%ebp)
		mov    %dh,-0x14(%ebp)
		mov    %dh,-0x18(%ebp)
		mov    %dh,-0x1c(%ebp)
		xor    %dl,%dl
		mov    %dh,-0x20(%ebp)
		mov    %dx,-0x2c(%ebp)
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    %dh,data_55592
		mov    %bx,-0x38(%ebp)
	jump_1fc04:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x38(%ebp),%ax
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_5e5c0(%ebx,%eax,8)
		je     jump_1fc4b
		incb   data_55592
	jump_1fc4b:
		mov    -0x38(%ebp),%ecx
		inc    %ecx
		mov    %cx,-0x38(%ebp)
		cmp    $0x4,%cx
		jb     jump_1fc04
		xor    %bh,%bh
		mov    %bh,-0x24(%ebp)
	jump_1fc5e:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_5e5c0(%ebx,%eax,8)
		jne    jump_1fcaf
		mov    -0x24(%ebp),%ch
		inc    %ch
		mov    %ch,-0x24(%ebp)
		cmp    $0x4,%ch
		jb     jump_1fc5e
	jump_1fcaf:
		cmpb   $0x4,-0x24(%ebp)
		jne    jump_1fcba
		xor    %dl,%dl
		mov    %dl,-0x24(%ebp)
	jump_1fcba:
		xor    %dh,%dh
		mov    %dh,-0x4(%ebp)
		jmp    jump_1fcc8
	jump_1fcc1:
		mov    %dl,%bh
		inc    %bh
		mov    %bh,-0x4(%ebp)
	jump_1fcc8:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		cmpw   $0x0,data_5e5c3(%eax,%edx,4)
		jne    jump_1fcc1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p246(,%eax,4),%edx
		push   %edx
		mov    -0x18(%ebp),%bl
		call   DisplayScreenTitle
		add    $0x4,%esp
		test   %bl,%bl
		jne    jump_227f6
	jump_1fd31:
		mov    -0x2c(%ebp),%eax
		inc    %eax
		push   $0xfc0
		mov    %ax,-0x2c(%ebp)
		call   process_day
		add    $0x4,%esp
		test   %al,%al
		je     jump_1fd58
		cmpb   $0x1,EXPORT_SYMBOL(research)
		jne    jump_1fd58
		call   CompleteResearch
	jump_1fd58:
		call   LbCopyScreenFromBackMCGA
		call   DrawAcceptGadget
		call   DrawMenuGadget
		mov    -0xc(%ebp),%ah
		cmp    $0x2,%ah
		jne    jump_1fdb1
		push   $0xc
		mov    data_5b5f0,%ax
		mov    data_5b5ec,%cx
		push   $0xfffffffe
		sub    %cx,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5ee,%ax
		push   %eax
		xor    %eax,%eax
		mov    %cx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_equip(,%eax,4),%esi
		push   %esi
		jmp    jump_1fe39
	jump_1fdb1:
		cmp    $0x1,%ah
		jne    jump_1fdf5
		push   $0xc
		mov    data_5b5e6,%ax
		mov    data_5b5e2,%bx
		push   $0xfffffffe
		sub    %bx,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5e4,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_mods(,%eax,4),%ecx
		push   %ecx
		jmp    jump_1fe39
	jump_1fdf5:
		test   %ah,%ah
		jne    jump_1fe41
		push   $0xc
		mov    data_5b5dc,%ax
		mov    data_5b5e2,%dx
		push   $0xfffffffe
		sub    %dx,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5da,%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5d8,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_team(,%eax,4),%ebx
		push   %ebx
	jump_1fe39:
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_1fe41:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		jne    jump_1fedf
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b68e,%si
		push   $0xfffffffe
		cmp    %si,%ax
		jbe    jump_1fe98
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b692,%ax
		jae    jump_1fe98
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b68c,%ax
		jbe    jump_1fe98
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b690,%ax
		jae    jump_1fe98
		mov    $0x166,%eax
		jmp    jump_1fe9d
	jump_1fe98:
		mov    $0x1ef,%eax
	jump_1fe9d:
		and    $0xffff,%eax
		mov    data_5b68c,%cx
		push   %eax
		mov    data_5b690,%ax
		sub    %cx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b68e,%ax
		push   %eax
		xor    %eax,%eax
		mov    %cx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p270(,%eax,4),%edi
		push   %edi
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_1fedf:
		mov    $0x1ef,%ebx
		mov    -0xc(%ebp),%cl
		mov    %ebx,%esi
		mov    %bx,-0x38(%ebp)
		test   %cl,%cl
		jne    jump_1fef9
		movw   $0x166,-0x38(%ebp)
		jmp    jump_1ff0f
	jump_1fef9:
		cmp    $0x2,%cl
		jne    jump_1ff05
		mov    $0x166,%esi
		jmp    jump_1ff0f
	jump_1ff05:
		cmp    $0x1,%cl
		jne    jump_1ff0f
		mov    $0x166,%ebx
	jump_1ff0f:
		push   $0xc
		xor    %eax,%eax
		push   $0xfffffffe
		mov    -0x38(%ebp),%ax
		mov    data_5b5d8,%dx
		push   %eax
		mov    data_5b5dc,%ax
		sub    %dx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5da,%ax
		push   %eax
		xor    %eax,%eax
		mov    %dx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_team(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		xor    %eax,%eax
		push   $0xfffffffe
		mov    %si,%ax
		mov    data_5b5ec,%cx
		push   %eax
		mov    data_5b5f0,%ax
		sub    %cx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5ee,%ax
		push   %eax
		xor    %eax,%eax
		mov    %cx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_equip(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		xor    %eax,%eax
		push   $0xfffffffe
		mov    %bx,%ax
		mov    data_5b5e2,%si
		push   %eax
		mov    data_5b5e6,%ax
		sub    %si,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5e4,%ax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_mods(,%eax,4),%esi
		push   %esi
		call   DrawScreenGadget
		add    $0x1c,%esp
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b5da,%di
		cmp    %di,%ax
		jbe    jump_2006f
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b5de,%ax
		jae    jump_2006f
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		mov    data_5b5d8,%bx
		cmp    %bx,%ax
		jbe    jump_2006f
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		mov    data_5b5dc,%cx
		cmp    %cx,%ax
		jae    jump_2006f
		cmpb   $0x0,-0xc(%ebp)
		je     jump_2006f
		testb  $0x1,-0x2c(%ebp)
		je     jump_2006f
		push   $0xc
		mov    %cx,%ax
		push   $0xfffffffe
		sub    %bx,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_team(,%eax,4),%edi
		push   %edi
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_2006f:
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b5e4,%di
		cmp    %di,%ax
		jbe    jump_20100
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b5e8,%ax
		jae    jump_20100
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b5e2,%ax
		jbe    jump_20100
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		mov    data_5b5e6,%cx
		cmp    %cx,%ax
		jae    jump_20100
		cmpb   $0x1,-0xc(%ebp)
		je     jump_20100
		testb  $0x1,-0x2c(%ebp)
		je     jump_20100
		push   $0xc
		mov    data_5b5e2,%si
		mov    %cx,%ax
		push   $0xfffffffe
		sub    %si,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_mods(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_20100:
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b5ee,%di
		cmp    %di,%ax
		jbe    jump_20191
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b5f2,%ax
		jae    jump_20191
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b5ec,%ax
		jbe    jump_20191
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b5f0,%ax
		jae    jump_20191
		cmpb   $0x2,-0xc(%ebp)
		je     jump_20191
		testb  $0x1,-0x2c(%ebp)
		je     jump_20191
		push   $0xc
		mov    data_5b5f0,%ax
		mov    data_5b5ec,%si
		push   $0xfffffffe
		sub    %si,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_equip(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_20191:
		call   ShowGameTime
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		mov    m_logos,%ecx
		add    %edx,%eax
		push   %ecx
		lea    0x0(,%eax,4),%eax
		push   $0x20
		sub    %edx,%eax
		push   $0x20
		lea    0x0(,%eax,8),%eax
		push   $0x7
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0x9
		mov    data_5e4ab(%eax),%dl
		mov    data_5e4ac(%eax),%al
		push   %edx
		and    $0xff,%eax
		xor    %edi,%edi
		push   %eax
		mov    %di,-0x38(%ebp)
		call   draw_logo
		add    $0x1c,%esp
		mov    $0x6,%edi
		jmp    jump_201fa
	jump_201ef:
		test   %ax,%ax
		je     jump_201fa
		cmp    $0x2,%ax
		jne    jump_20216
	jump_201fa:
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_5b5b0(,%eax,2),%si
		add    $0x30,%esi
		jmp    jump_2022f
	jump_20216:
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_5b5b0(,%eax,2),%si
		add    $0x32,%esi
	jump_2022f:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(selected_team)(%edx),%bl
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		lea    (%edx,%eax,1),%ebx
		mov    data_5e5c0(%ecx),%al
		add    %ebx,%ebx
		test   %al,%al
		je     jump_202ba
		inc    %edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    m_sprites,%eax
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5b2(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5b0(%ebx),%ax
		push   %eax
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		push   $0xc
		jmp    jump_202bc
	jump_202ba:
		push   $0xa
	jump_202bc:
		xor    %eax,%eax
		push   $0x24
		mov    data_5b5b2(%ebx),%ax
		push   %edi
		add    $0x4,%eax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		call   rectangle
		add    $0x14,%esp
		mov    -0x38(%ebp),%eax
		inc    %eax
		mov    %ax,-0x38(%ebp)
		cmp    $0x4,%ax
		jb     jump_201ef
		xor    %edi,%edi
		movzbl -0x24(%ebp),%esi
		mov    -0x2c(%ebp),%di
		lea    0x0(,%esi,4),%ebx
		push   %edi
		mov    %esi,%eax
		add    %esi,%ebx
		push   $0xfc
		xor    %esi,%eax
		mov    data_5b5b4(,%ebx,2),%dx
		push   $0x58
		mov    data_5b5b2(,%ebx,2),%ax
		sub    $0x2,%dx
		push   %eax
		and    $0xffff,%edx
		push   %edx
		push   %eax
		xor    %eax,%eax
		mov    data_5b5b0(,%ebx,2),%ax
		push   %eax
		call   func_29030
		add    $0x1c,%esp
		push   %edi
		mov    data_5b5b6(,%ebx,2),%ax
		push   $0xfc
		sub    $0x2,%ax
		push   $0x58
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b5b0(,%ebx,2),%ax
		xor    %edx,%edx
		push   %eax
		mov    data_5b5b2(,%ebx,2),%dx
		push   %edx
		push   %eax
		call   func_29030
		add    $0x1c,%esp
		push   %edi
		mov    data_5b5b6(,%ebx,2),%ax
		push   $0xfc
		mov    data_5b5b4(,%ebx,2),%dx
		sub    $0x2,%ax
		push   $0x58
		and    $0xffff,%eax
		sub    $0x2,%dx
		push   %eax
		and    $0xffff,%edx
		push   %edx
		push   %eax
		xor    %eax,%eax
		mov    data_5b5b0(,%ebx,2),%ax
		push   %eax
		call   func_29030
		add    $0x1c,%esp
		push   %edi
		mov    data_5b5b6(,%ebx,2),%ax
		push   $0xfc
		sub    $0x2,%ax
		push   $0x58
		and    $0xffff,%eax
		push   %eax
		mov    data_5b5b4(,%ebx,2),%ax
		sub    $0x2,%ax
		and    $0xffff,%eax
		xor    %edx,%edx
		push   %eax
		mov    data_5b5b2(,%ebx,2),%dx
		push   %edx
		push   %eax
		call   func_29030
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		movswl data_5e5ba(%eax),%edx
		add    $0x1c,%esp
		cmp    $0xffffffff,%edx
		jle    jump_20c95
		mov    data_5e5b9(%eax),%al
		and    $0xff,%eax
		mov    text_cyborg_names(,%eax,4),%edi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   %edi
		mov    text_spec_agent(,%eax,4),%edx
		push   %edx
		push   $aSS
		lea    -0x68(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xa
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x166
		push   $0xe
		push   $0x58
		push   $0x9e
		lea    -0x68(%ebp),%eax
		push   %eax
		call   new_show_text
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		xor    %ebx,%ebx
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(selected_team)(%esi),%bl
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_5e5bc(%edx,%eax,8),%ax
		and    $0x1,%al
		xor    %ah,%ah
		mov    %ax,-0x38(%ebp)
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		imul   $0x2a,%eax,%ebx
		xor    %edx,%edx
		mov    data_5b55c(%ebx),%dx
		add    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    m_sprites,%eax
		add    $0x28,%esp
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b560(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b55e(%ebx),%ax
		push   %eax
		call   LbSpriteDrawMCGA
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		mov    data_5e5bc(%eax),%ax
		and    $0x18,%al
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    data_5b568(%ebx),%dx
		sar    $0x3,%eax
		add    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    m_sprites,%eax
		add    $0xc,%esp
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b56c(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b56a(%ebx),%ax
		push   %eax
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		mov    data_5e5bc(%ecx,%eax,1),%ax
		and    $0x6,%al
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    data_5b562(%ebx),%dx
		sar    $1,%eax
		add    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    m_sprites,%edx
		add    %eax,%eax
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b566(%ebx),%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b564(%ebx),%ax
		push   %eax
		call   LbSpriteDrawMCGA
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		mov    data_5e5bc(%eax),%dl
		add    $0xc,%esp
		test   $0x18,%dl
		je     jump_206dd
		mov    data_5e5bc(%eax),%ax
		and    $0x18,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x3,%eax
		add    $0x2,%eax
		imul   $0x1eb,%eax,%eax
		push   $0x0
		push   $0x0
		push   $0x6
		xor    %edx,%edx
		push   $0xfffffffe
		mov    m_sprites,%ecx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		push   %ecx
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		push   $0xe
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		push   $0xe4
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16e
		mov    strings_cybmod_names(%edx,%eax,4),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
	jump_206dd:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		testb  $0x6,data_5e5bc(%eax)
		je     jump_2078e
		mov    data_5e5bc(%eax),%ax
		and    $0x6,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $1,%eax
		dec    %eax
		imul   $0x1eb,%eax,%eax
		push   $0x0
		push   $0x0
		push   $0x6
		xor    %edx,%edx
		push   $0xfffffffe
		mov    m_sprites,%edi
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		push   %edi
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		push   $0xe
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		push   $0xfc
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16e
		mov    strings_cybmod_names(%edx,%eax,4),%ebx
		push   %ebx
		call   new_show_text
		add    $0x28,%esp
	jump_2078e:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		xor    %ebx,%ebx
		lea    0x0(,%ecx,8),%ecx
		mov    -0x24(%ebp),%bl
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		testb  $0x18,data_5e5bd(%eax)
		je     jump_208d1
		mov    data_5e5bc(%eax),%ax
		and    $0x18,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0xb,%eax
		lea    0x3b(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    m_sprites,%edx
		add    %eax,%eax
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		imul   $0x2a,%eax,%eax
		xor    %edx,%edx
		mov    data_5b584(%eax),%dx
		mov    data_5b582(%eax),%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		mov    m_sprites,%ecx
		push   $0xfffffffe
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %ecx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		mov    data_5e5bc(%eax),%ax
		and    $0x18,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0xb,%eax
		add    $0xb,%eax
		imul   $0x1eb,%eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0xe
		mov    EXPORT_SYMBOL(language),%dl
		push   $0x8a
		lea    0x0(,%edx,4),%edx
		push   $0x16e
		mov    strings_cybmod_names(%edx,%eax,4),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
	jump_208d1:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		xor    %ebx,%ebx
		lea    0x0(,%ecx,8),%ecx
		mov    -0x24(%ebp),%bl
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		testb  $0x6,data_5e5bd(%eax)
		je     jump_20a10
		mov    data_5e5bc(%eax),%ax
		xor    %edx,%edx
		and    $0x6,%ah
		xor    %al,%al
		mov    %ax,%dx
		sar    $0x9,%edx
		add    $0x38,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    m_sprites,%eax
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		imul   $0x2a,%eax,%eax
		xor    %edx,%edx
		mov    data_5b57e(%eax),%dx
		mov    data_5b57c(%eax),%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   LbSpriteDrawMCGA
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		mov    data_5e5bc(%eax),%ax
		and    $0x6,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0x9,%eax
		add    $0xe,%eax
		imul   $0x1eb,%eax,%eax
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		xor    %edx,%edx
		mov    m_sprites,%edi
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		push   %edi
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		push   $0xe
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		push   $0x72
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16e
		mov    strings_cybmod_names(%edx,%eax,4),%ebx
		push   %ebx
		call   new_show_text
		add    $0x28,%esp
	jump_20a10:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		movzbl -0x24(%ebp),%esi
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		testb  $0x60,data_5e5bc(%eax)
		je     jump_20b55
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		imul   $0x2a,%edx,%edx
		mov    data_5e5bc(%eax),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		xor    %ebx,%ebx
		sar    $0x5,%eax
		mov    data_5b56e(%edx),%bx
		add    %eax,%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    m_sprites,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b572(%edx),%ax
		push   %eax
		xor    %eax,%eax
		mov    data_5b570(%edx),%ax
		push   %eax
		call   LbSpriteDrawMCGA
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		mov    data_5e5bc(%eax),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x5,%eax
		add    $0x5,%eax
		imul   $0x1eb,%eax,%eax
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		xor    %edx,%edx
		mov    m_sprites,%ecx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		push   %ecx
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0xe
		mov    EXPORT_SYMBOL(language),%dl
		push   $0xce
		lea    0x0(,%edx,4),%edx
		push   $0x16e
		mov    strings_cybmod_names(%edx,%eax,4),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
	jump_20b55:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		xor    %ebx,%ebx
		lea    0x0(,%ecx,8),%ecx
		mov    -0x24(%ebp),%bl
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		mov    data_5e5bc(%eax),%cx
		test   $0x180,%cx
		je     jump_20c95
		mov    %cx,%ax
		and    $0x180,%ax
		and    $0xffff,%eax
		sar    $0x7,%eax
		lea    0x35(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    m_sprites,%edx
		add    %eax,%eax
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		imul   $0x2a,%eax,%eax
		xor    %edx,%edx
		mov    data_5b578(%eax),%dx
		mov    data_5b576(%eax),%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   LbSpriteDrawMCGA
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		mov    data_5e5bc(%ecx,%eax,1),%ax
		and    $0x180,%ax
		and    $0xffff,%eax
		sar    $0x7,%eax
		add    $0x8,%eax
		imul   $0x1eb,%eax,%eax
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		xor    %edx,%edx
		mov    m_sprites,%edi
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		push   %edi
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		push   $0xe
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		push   $0xa2
		mov    EXPORT_SYMBOL(language),%al
		push   $0x16e
		mov    strings_cybmod_names(%edx,%eax,4),%ebx
		push   %ebx
		call   new_show_text
		add    $0x28,%esp
	jump_20c95:
		push   $0x58
		push   $0x7c
		push   $0xfe
		push   $0x7c
		push   $0x16a
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0x84
		push   $0x108
		push   $0x84
		push   $0x16a
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0xae
		push   $0x10a
		push   $0xae
		push   $0x16a
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0xd2
		push   $0xfc
		push   $0xd2
		push   $0x16a
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0xe8
		push   $0x12e
		push   $0xe8
		push   $0x16a
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0x100
		push   $0x108
		push   $0x100
		mov    $0x16e,%ebx
		xor    %esi,%esi
		push   $0x16a
		mov    %si,-0x38(%ebp)
		mov    $0x134,%esi
		call   func_1b3a0
		add    $0x14,%esp
	jump_20d53:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		mov    data_5e5c3(%ecx,%eax,4),%di
		test   %di,%di
		je     jump_20e8a
		cmp    $0x11,%di
		jne    jump_20dbf
		mov    m_sprites,%eax
		add    $0xa8,%eax
		jmp    jump_20dda
	jump_20dbf:
		xor    %edx,%edx
		mov    %di,%dx
		add    $0xd,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    m_sprites,%edx
		add    %eax,%eax
		add    %edx,%eax
	jump_20dda:
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		xor    %eax,%eax
		mov    %di,%ax
		cmpb   $0x0,data_5a69a(%eax)
		je     jump_20e8a
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x38(%ebp),%dx
		add    %ecx,%eax
		lea    0x0(,%edx,4),%edx
		add    %edx,%eax
		movswl data_5e5c1(%eax),%edx
		mov    data_5e5c3(%eax),%ax
		and    $0xffff,%eax
		dec    %eax
		imul   $0x1f5,%eax,%eax
		push   %edx
		movswl data_57bf9(%eax),%eax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		call   draw_ammo_for_this_weapon
		add    $0x10,%esp
	jump_20e8a:
		mov    -0x38(%ebp),%ecx
		add    $0x20,%ebx
		cmp    $0x3,%cx
		jne    jump_20e9e
		mov    $0x16e,%ebx
		add    $0x20,%esi
	jump_20e9e:
		mov    -0x38(%ebp),%edi
		inc    %edi
		mov    %di,-0x38(%ebp)
		cmp    $0x8,%di
		jb     jump_20d53
		mov    -0xc(%ebp),%bl
		cmp    $0x1,%bl
		jb     jump_20ecc
		jbe    jump_21194
		cmp    $0x2,%bl
		je     jump_212e9
		jmp    jump_216ee
	jump_20ecc:
		test   %bl,%bl
		jne    jump_216ee
		push   $0x0
		push   $0xfc
		push   $0xa
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x54
		push   $0xe
		xor    %eax,%eax
		push   $0x6c
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    gui_strings_p150(,%eax,4),%edi
		push   %edi
		mov    $0x7c,%esi
		call   new_show_text
		xor    %edi,%edi
		add    $0x28,%esp
		mov    %di,-0x38(%ebp)
		xor    %edi,%edi
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %ebx,%ebx
	jump_20f20:
		mov    %edi,%ebx
	jump_20f22:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %bx,%ax
		xor    %ecx,%ecx
		mov    -0x38(%ebp),%dx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%cl
		cmp    %ecx,%edx
		jne    jump_20f76
		inc    %eax
		push   %eax
		push   $aD_0
		lea    -0x68(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   %edi
		push   %edi
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0xdd
		xor    %eax,%eax
		push   $0xe
		mov    %si,%ax
		push   %eax
		push   $0x1f8
		lea    -0x68(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_20f76:
		inc    %ebx
		cmp    $0x4,%bx
		jb     jump_20f22
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		movswl data_5e5ba(%eax),%edx
		cmp    $0xffffffff,%edx
		jle    jump_20ff5
		push   %edi
		push   %edi
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0xdd
		xor    %edx,%edx
		push   $0xe
		mov    %si,%dx
		mov    data_5e5b9(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   $0x208
		mov    text_cyborg_names(,%eax,4),%edx
		push   %edx
		jmp    jump_21023
	jump_20ff5:
		push   %edi
		push   %edi
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0xdd
		xor    %eax,%eax
		push   $0xe
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x208
		mov    text_empty_slot(,%eax,4),%ebx
		push   %ebx
	jump_21023:
		call   new_show_text
		add    $0x28,%esp
		mov    -0x38(%ebp),%eax
		inc    %eax
		add    $0xc,%esi
		mov    %ax,-0x38(%ebp)
		cmp    $0x12,%ax
		jb     jump_20f20
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_216ee
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_216ee
		cmpw   $0x76,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_216ee
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_216ee
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		sub    $0x7c,%edx
		mov    $0xc,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,-0x38(%ebp)
		cmp    $0x12,%ax
		jae    jump_216ee
		imul   $0xc,%eax,%esi
		xor    %ebx,%ebx
		add    $0x7c,%esi
		xor    %edi,%edi
	jump_210ab:
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    %bx,%ax
		xor    %edx,%edx
		mov    -0x38(%ebp),%cx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		cmp    %edx,%ecx
		jne    jump_210fd
		inc    %eax
		push   %eax
		push   $aD_0
		lea    -0x68(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   %edi
		push   %edi
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		xor    %eax,%eax
		push   $0xe
		mov    %si,%ax
		push   %eax
		push   $0x1f8
		lea    -0x68(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_210fd:
		inc    %ebx
		cmp    $0x4,%bx
		jb     jump_210ab
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		movswl data_5e5ba(%eax),%edx
		cmp    $0xffffffff,%edx
		jle    jump_216ee
		imul   $0xc,-0x38(%ebp),%dx
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x54
		add    $0x7c,%dx
		push   $0xe
		and    $0xffff,%edx
		mov    data_5e5b9(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   $0x208
		mov    text_cyborg_names(,%eax,4),%edi
		push   %edi
		call   new_show_text
		add    $0x28,%esp
		jmp    jump_216ee
	jump_21194:
		cmpb   $0x0,-0x10(%ebp)
		jne    jump_211a4
		call   ShowAvailableParts
		jmp    jump_216ee
	jump_211a4:
		push   $0xea
		push   $0x10e
		push   $0x270
		push   $0x10e
		push   $0x1f6
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xea
		push   $0x126
		push   $0x270
		push   $0x126
		push   $0x1f6
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xea
		push   $0x13e
		push   $0x270
		push   $0x13e
		push   $0x1f6
		call   func_1b3a0
		xor    %eax,%eax
		add    $0x14,%esp
		mov    -0x10(%ebp),%al
		push   %eax
		push   $0x1
		mov    -0x14(%ebp),%bl
		call   ShowInfoOnEquipItem
		add    $0x8,%esp
		test   %bl,%bl
		jne    jump_21286
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%bx	/* lbDisplay.MMouseX but scaled */
		push   $0xfffffffe
		cmp    $0x1f4,%bx
		jbe    jump_21258
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_21258
		cmpw   $0x13e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_21258
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_21258
		mov    $0x166,%eax
		jmp    jump_2125d
	jump_21258:
		mov    $0x1ef,%eax
	jump_2125d:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x13e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    data_54618(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_21286:
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   $0xfffffffe
		cmp    $0x10e,%ax
		jbe    jump_212be
		cmpw   $0x126,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_212be
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_212be
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_212be
		mov    $0x166,%eax
		jmp    jump_212c3
	jump_212be:
		mov    $0x1ef,%eax
	jump_212c3:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x10e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    gui_strings_p264(,%eax,4),%ecx
		push   %ecx
		jmp    jump_216e6
	jump_212e9:
		cmpb   $0x0,-0x10(%ebp)
		jne    jump_212f9
		call   ShowAvailableEquipment
		jmp    jump_216ee
	jump_212f9:
		push   $0xea
		push   $0x10e
		push   $0x270
		push   $0x10e
		push   $0x1f6
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xea
		push   $0x126
		push   $0x270
		push   $0x126
		push   $0x1f6
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xea
		push   $0x13e
		push   $0x270
		push   $0x13e
		push   $0x1f6
		call   func_1b3a0
		xor    %eax,%eax
		add    $0x14,%esp
		mov    -0x10(%ebp),%al
		push   %eax
		push   $0x2
		call   ShowInfoOnEquipItem
		add    $0x8,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		push   $0xfffffffe
		cmp    $0x10e,%dx
		jbe    jump_213a6
		cmpw   $0x126,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_213a6
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_213a6
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_213a6
		mov    $0x166,%eax
		jmp    jump_213ab
	jump_213a6:
		mov    $0x1ef,%eax
	jump_213ab:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x10e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    gui_strings_p264(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		mov    -0x14(%ebp),%al
		add    $0x1c,%esp
		test   %al,%al
		je     jump_2152d
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		xor    %ebx,%ebx
		lea    0x0(,%ecx,8),%ecx
		mov    -0x24(%ebp),%bl
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		movzbl -0x4(%ebp),%esi
		lea    0x0(,%eax,8),%eax
		lea    0x0(,%esi,4),%esi
		add    %ecx,%eax
		xor    %edx,%edx
		mov    data_5e5c3(%esi,%eax,1),%dx
		dec    %edx
		imul   $0x1f5,%edx,%edx
		mov    data_5e5c1(%esi,%eax,1),%ax
		cmp    data_57bf9(%edx),%ax
		jge    jump_2152d
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x54
		push   $0xf
		xor    %eax,%eax
		push   $0x100
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_reload(,%eax,4),%edx
		push   %edx
		call   new_show_text
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		xor    %edx,%edx
		mov    data_5e5c3(%esi,%eax,1),%dx
		dec    %edx
		imul   $0x1f5,%edx,%edx
		movswl data_5e5c1(%esi,%eax,1),%eax
		movswl data_57bf9(%edx),%edx
		sub    %eax,%edx
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		dec    %eax
		imul   $0x1f5,%eax,%eax
		imul   data_57bfb(%eax),%edx
		add    $0x28,%esp
		push   %edx
		push   $aD_1
		lea    -0x68(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		push   $0xe
		push   $0x100
		push   $0x22c
		lea    -0x68(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
	jump_2152d:
		cmpb   $0x0,-0x14(%ebp)
		je     jump_21595
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%si	/* lbDisplay.MMouseX but scaled */
		push   $0xfffffffe
		cmp    $0x1f4,%si
		jbe    jump_2156d
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_2156d
		cmpw   $0x13e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_2156d
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_2156d
		mov    $0x166,%eax
		jmp    jump_21572
	jump_2156d:
		mov    $0x1ef,%eax
	jump_21572:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x13e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    text_button_sell(,%eax,4),%edi
		push   %edi
		jmp    jump_215f3
	jump_21595:
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		push   $0xfffffffe
		cmp    $0x1f4,%ax
		jbe    jump_215cd
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_215cd
		cmpw   $0x13e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_215cd
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_215cd
		mov    $0x166,%eax
		jmp    jump_215d2
	jump_215cd:
		mov    $0x1ef,%eax
	jump_215d2:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x13e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    data_54618(,%eax,4),%esi
		push   %esi
	jump_215f3:
		call   DrawScreenGadget
		add    $0x1c,%esp
		cmpb   $0x0,-0x14(%ebp)
		je     jump_216ee
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%ebx,%eax,1),%edx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		lea    0x0(,%eax,4),%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    data_5e5c3(%edx),%ax
		dec    %eax
		imul   $0x1f5,%eax,%eax
		cmpw   $0x960,data_57c05(%eax)
		jne    jump_216ee
		mov    data_5e5c1(%edx),%dx
		cmp    data_57bf9(%eax),%dx
		jge    jump_216ee
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%si	/* lbDisplay.MMouseX but scaled */
		push   $0xfffffffe
		cmp    $0x1f4,%si
		jbe    jump_216c0
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_216c0
		cmpw   $0x126,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_216c0
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_216c0
		mov    $0x166,%eax
		jmp    jump_216c5
	jump_216c0:
		mov    $0x1ef,%eax
	jump_216c5:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x126
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    text_button_reload(,%eax,4),%edx
		push   %edx
	jump_216e6:
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_216ee:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%edx
		push   %edx
		push   $aD_0
		lea    -0x68(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0xfffffffe
		push   $0x166
		mov    m_sprites,%ebx
		push   %ebx
		lea    -0x68(%ebp),%eax
		push   %eax
		call   get_word_width
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x7c,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		add    $0x1f4,%eax
		push   $0x10
		mov    %ax,-0x38(%ebp)
		xor    %eax,%eax
		push   $0x58
		mov    -0x38(%ebp),%ax
		push   %eax
		lea    -0x68(%ebp),%eax
		push   %eax
		call   new_show_text
		mov    -0x20(%ebp),%cl
		add    $0x28,%esp
		test   %cl,%cl
		je     jump_217aa
		mov    m_sprites,%eax
		add    $0x1ce,%eax
		push   %eax
		push   $0x98
		push   $0x14
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
	jump_217aa:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
		je     jump_2187c
		cmpb   $0x0,-0x1c(%ebp)
		je     jump_2187c
		mov    -0x10(%ebp),%bl
		cmp    $0x11,%bl
		jne    jump_217d5
		mov    m_sprites,%eax
		add    $0xa8,%eax
		jmp    jump_217ef
	jump_217d5:
		xor    %edx,%edx
		mov    %bl,%dl
		add    $0xd,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    m_sprites,%edx
		add    %eax,%eax
		add    %edx,%eax
	jump_217ef:
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		cmpb   $0x0,data_5a69a(%eax)
		je     jump_2184a
		dec    %eax
		imul   $0x1f5,%eax,%eax
		movswl -0x34(%ebp),%edx
		push   %edx
		movswl data_57bf9(%eax),%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		push   %eax
		call   draw_ammo_for_this_weapon
		add    $0x10,%esp
	jump_2184a:
		cmpb   $0x18,-0x8(%ebp)
		jne    jump_21864
	jump_21850:
		push   $0x18
		push   $0x0
		push   $data_5b5b0
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,-0x8(%ebp)
	jump_21864:
		mov    -0x8(%ebp),%dh
		cmp    $0x18,%dh
		ja     def_21874
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:jpt_21874(,%eax,4)
	jump_2187c:
		cmpb   $0x0,-0x1c(%ebp)
		je     jump_21ab0
		movw   $0x12,-0x38(%ebp)
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_218bf
		cmpw   $0x50,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_218bf
		cmpw   $0x50,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_218bf
		cmpw   $0xa2,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_218bf
		mov    EXPORT_SYMBOL(selected_team),%al
		jmp    jump_21954
	jump_218bf:
		cmpw   $0x50,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_218f3
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_218f3
		cmpw   $0x50,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_218f3
		cmpw   $0xa2,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_218f3
		mov    data_60aa5,%al
		jmp    jump_21954
	jump_218f3:
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_21924
		cmpw   $0x50,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_21924
		cmpw   $0xa2,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_21924
		cmpw   $0xf6,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_21924
		mov    data_60aa6,%al
		jmp    jump_21954
	jump_21924:
		cmpw   $0x50,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_2195a
		cmpw   $0x90,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_2195a
		cmpw   $0xa2,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_2195a
		cmpw   $0xf6,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_2195a
		mov    data_60aa7,%al
	jump_21954:
		xor    %ah,%ah
		mov    %ax,-0x38(%ebp)
	jump_2195a:
		mov    -0x38(%ebp),%esi
		cmp    $0x12,%si
		je     jump_2199b
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0xff,data_5e5b9(%ebx,%eax,8)
		jne    jump_219ac
	jump_2199b:
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		mov    EXPORT_SYMBOL(selected_team)(%eax),%al
		xor    %ah,%ah
		mov    %ax,-0x38(%ebp)
	jump_219ac:
		xor    %eax,%eax
		mov    -0x38(%ebp),%al
		push   %eax
		call   GetNextAvailableWeaponSlot2
		mov    %al,%cl
		xor    %ch,%ch
		add    $0x4,%esp
		cmp    $0x7,%cx
		jbe    jump_219e7
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		mov    EXPORT_SYMBOL(selected_team)(%eax),%al
		xor    %ah,%ah
		mov    %ax,-0x38(%ebp)
		xor    %eax,%eax
		mov    -0x38(%ebp),%al
		push   %eax
		call   GetNextAvailableWeaponSlot2
		add    $0x4,%esp
		mov    %al,%cl
		xor    %ch,%ch
	jump_219e7:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %cx,%ax
		mov    -0x30(%ebp),%edx
		mov    %dx,data_5e5c3(%ebx,%eax,4)
		mov    -0x34(%ebp),%edx
		mov    %dx,data_5e5c1(%ebx,%eax,4)
		xor    %dh,%dh
		mov    %dh,-0x4(%ebp)
		jmp    jump_21a48
	jump_21a41:
		mov    %al,%ah
		inc    %ah
		mov    %ah,-0x4(%ebp)
	jump_21a48:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%ebx,%eax,1),%edx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		cmpw   $0x0,data_5e5c3(%edx,%eax,4)
		jne    jump_21a41
		xor    %cl,%cl
		xor    %ch,%ch
		xor    %al,%al
		mov    %cl,-0x10(%ebp)
		mov    %ch,-0x14(%ebp)
		mov    %al,-0x1c(%ebp)
		jmp    jump_21850
	jump_21ab0:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jne    jump_21ac2
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		je     jump_21b0f
	jump_21ac2:
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		cmpw   $0x14,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_21afb
		cmpw   $0x8c,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_21afb
		cmpw   $0x98,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_21afb
		cmpw   $0x9e,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_21afb
		movb   $0x17,-0x8(%ebp)
		jmp    jump_21b0f
	jump_21afb:
		push   $0x18
		push   $0x1
		push   $data_5b5b0
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,-0x8(%ebp)
	jump_21b0f:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		je     jump_2184a
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		cmpb   $0x15,-0x8(%ebp)
		jne    jump_21c63
		cmpb   $0x0,-0x10(%ebp)
		je     jump_21c63
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_21c63
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_21c63
		cmpw   $0x126,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_21c63
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_21c63
		xor    %esi,%esi
		mov    %si,-0x38(%ebp)
	jump_21b7a:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		xor    %ebx,%ebx
		sub    %edx,%eax
		mov    -0x24(%ebp),%bl
		lea    0x0(,%eax,8),%eax
		mov    EXPORT_SYMBOL(selected_team)(%ebx),%bl
		sub    %edx,%eax
		and    $0xff,%ebx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%edx,%eax,1),%ebx
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    data_5e5c3(%eax),%bx
		test   %bx,%bx
		je     jump_21c4c
		xor    %ecx,%ecx
		mov    %bx,%cx
		xor    %esi,%esi
		lea    0x0(,%ecx,2),%ebx
		movswl data_5e5c1(%eax),%edi
		mov    weapon_max_ammo(%ebx),%si
		mov    %edi,-0x3c(%ebp)
		mov    %esi,%edi
		mov    data_5a712(%ebx),%bx
		sub    -0x3c(%ebp),%edi
		and    $0xffff,%ebx
		imul   %edi,%ebx
		cmp    EXPORT_SYMBOL(players)(%edx),%ebx
		ja     jump_21c4c
		cmp    -0x3c(%ebp),%esi
		jle    jump_21c4c
		dec    %ecx
		imul   $0x1f5,%ecx,%ecx
		cmpw   $0x960,data_57c05(%ecx)
		jne    jump_21c4c
		sub    %ebx,EXPORT_SYMBOL(players)(%edx)
		xor    %edx,%edx
		mov    data_5e5c3(%eax),%dx
		mov    weapon_max_ammo(,%edx,2),%dx
		mov    %dx,data_5e5c1(%eax)
	jump_21c4c:
		mov    -0x38(%ebp),%edi
		inc    %edi
		mov    %di,-0x38(%ebp)
		cmp    $0x8,%di
		jb     jump_21b7a
		jmp    jump_21850
	jump_21c63:
		mov    -0x8(%ebp),%dl
		cmp    $0xb,%dl
		jb     jump_21dbf
		cmp    $0x12,%dl
		ja     jump_21dbf
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x8(%ebp),%dl
		add    %ebx,%eax
		cmpw   $0x0,data_5e597(%eax,%edx,4)
		je     jump_21dbf
		sub    $0xb,%dl
		mov    %dl,-0x4(%ebp)
		xor    %edx,%edx
		mov    -0x4(%ebp),%dl
		mov    $0x1,%bl
		lea    0x0(,%edx,4),%edx
		mov    $0x18,%bh
		add    %edx,%eax
		mov    $0x2,%cl
		mov    %bl,-0x14(%ebp)
		mov    data_5e5c3(%eax),%dl
		mov    %bh,-0x8(%ebp)
		mov    %dl,-0x10(%ebp)
		mov    data_5e5c3(%eax),%dx
		mov    %cl,-0xc(%ebp)
		mov    %edx,-0x30(%ebp)
		mov    data_5e5c1(%eax),%dx
		mov    %bl,-0x1c(%ebp)
		mov    %edx,-0x34(%ebp)
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    %dx,data_5e5c3(%eax)
		mov    %dx,-0x38(%ebp)
		mov    %dx,data_5e5c1(%eax)
	jump_21d24:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x38(%ebp),%dx
		add    %ebx,%eax
		lea    0x0(,%edx,4),%edx
		add    %edx,%eax
		mov    data_5e5c3(%eax),%di
		cmp    %di,%cx
		jne    jump_21da8
		mov    data_5e5c7(%eax),%dx
		mov    %dx,data_5e5c3(%eax)
		mov    %di,data_5e5c7(%eax)
		mov    data_5e5c5(%eax),%dx
		mov    %dx,data_5e5c1(%eax)
		mov    %di,data_5e5c5(%eax)
	jump_21da8:
		mov    -0x38(%ebp),%eax
		inc    %eax
		mov    %ax,-0x38(%ebp)
		cmp    $0x7,%ax
		jae    jump_2184a
		jmp    jump_21d24
	jump_21dbf:
		mov    -0x8(%ebp),%bl
		test   %bl,%bl
		je     jump_21dd9
		cmp    $0x1,%bl
		je     jump_21dd9
		cmp    $0x2,%bl
		je     jump_21dd9
		cmp    $0x3,%bl
		jne    jump_2184a
	jump_21dd9:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x8(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		movswl data_5e5ba(%eax),%edx
		cmp    $0xffffffff,%edx
		jle    jump_21850
		mov    -0x8(%ebp),%dl
		mov    data_5e5c0(%eax),%dh
		inc    %dl
		test   %dh,%dh
		je     jump_21e6d
		mov    data_55592,%bh
		dec    %bh
		mov    %bh,data_55592
		jne    jump_21e60
		mov    %bh,%dh
		inc    %dh
		mov    %dl,data_5e5c0(%eax)
		mov    %dh,data_55592
		jmp    jump_21850
	jump_21e60:
		xor    %ch,%ch
		mov    %ch,data_5e5c0(%eax)
		jmp    jump_21850
	jump_21e6d:
		mov    data_55592,%bl
		inc    %bl
		mov    %dl,data_5e5c0(%eax)
		mov    %bl,data_55592
		jmp    jump_21850


/*----------------------------------------------------------------*/
func_21e86:
/*----------------------------------------------------------------*/
		mov    -0x8(%ebp),%al
		mov    %al,-0x24(%ebp)
		xor    %al,%al
		mov    %al,-0x4(%ebp)
		jmp    jump_21e9a
	jump_21e93:
		mov    %dl,%dh
		inc    %dh
		mov    %dh,-0x4(%ebp)
	jump_21e9a:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x4(%ebp),%dl
		add    %ebx,%eax
		cmpw   $0x0,data_5e5c3(%eax,%edx,4)
		jne    jump_21e93
		xor    %dl,%dl
		mov    %dl,-0x14(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_21ef3:
/*----------------------------------------------------------------*/
		xor    %bh,%bh
		mov    %bh,-0x14(%ebp)
		mov    %bh,-0x10(%ebp)
		mov    %bh,-0xc(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_21f03:
/*----------------------------------------------------------------*/
		xor    %dl,%dl
		mov    $0x1,%bl
		mov    %dl,-0x14(%ebp)
		mov    %dl,-0x10(%ebp)
		mov    %bl,-0xc(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_21f15:
/*----------------------------------------------------------------*/
		xor    %cl,%cl
		mov    $0x2,%al
		mov    %cl,-0x14(%ebp)
		mov    %cl,-0x10(%ebp)
		mov    %al,-0xc(%ebp)
		mov    %cl,-0x4(%ebp)
		jmp    jump_21f2e
	jump_21f27:
		mov    %al,%ah
		inc    %ah
		mov    %ah,-0x4(%ebp)
	jump_21f2e:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		cmpw   $0x0,data_5e5c3(%ebx,%eax,4)
		jne    jump_21f27
		jmp    def_21874


/*----------------------------------------------------------------*/
func_21f82:
/*----------------------------------------------------------------*/
		cmpb   $0x0,data_55592
		jbe    def_21874
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    data_5e4a6(%ebx),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		mov    %eax,%edx
		lea    0x0(,%eax,4),%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    data_5e4a4(%ebx),%ax
		add    %eax,%edx
		mov    $0x3,%ecx
		mov    %edx,data_60a9c
		mov    data_5e4a0(%ebx),%eax
		xor    %edx,%edx
		div    %ecx
		mov    $0xa,%edi
		mov    %eax,data_5e4a0(%ebx)
		mov    $0x1,%bh
		mov    %edi,-0x40(%ebp)
		mov    %bh,-0x18(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_2200d:
/*----------------------------------------------------------------*/
		mov    $0x1,%dh
		xor    %esi,%esi
		mov    %dh,-0x18(%ebp)
		mov    %esi,-0x40(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_2201c:
/*----------------------------------------------------------------*/
		cmpb   $0x0,-0x10(%ebp)
		jne    jump_221eb
		mov    $0x14,%edx
		mov    -0xc(%ebp),%cl
		mov    %dx,-0x38(%ebp)
		cmp    $0x1,%cl
		jne    jump_2203d
		movw   $0x12,-0x38(%ebp)
	jump_2203d:
		push   $0x38
		push   $0xab
		push   $0x139
		push   $0x35
		push   $0xfa
		push   $0x0
		xor    %eax,%eax
		push   $0x0
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%ax	/* lbDisplay.MouseY but scaled */
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%ax	/* lbDisplay.MouseX but scaled */
		push   %eax
		xor    %eax,%eax
		mov    -0x38(%ebp),%ax
		push   %eax
		call   which_item_selected
		mov    -0xc(%ebp),%ch
		add    $0x28,%esp
		mov    %al,-0x10(%ebp)
		cmp    $0x1,%ch
		jb     jump_22094
		jbe    jump_221c7
		cmp    $0x2,%ch
		je     jump_221d9
		jmp    def_21874
	jump_22094:
		test   %ch,%ch
		jne    def_21874
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		lea    -0x3e(%eax),%edx
		mov    $0x6,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %eax
		mov    %al,-0x28(%ebp)
		test   %al,%al
		je     jump_221bd
		cmp    $0x13,%al
		jae    jump_221bd
		xor    %ebx,%ebx
		mov    %al,%bl
		push   %ebx
		call   ThisPlayerInTeam
		add    $0x4,%esp
		test   %al,%al
		jne    jump_221bd
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		lea    -0x1(%ebx),%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		movswl data_5e5ba(%ecx,%eax,8),%eax
		cmp    $0xffffffff,%eax
		jle    jump_221bd
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_5e5c0(%ecx,%eax,8)
		je     jump_22149
		decb   data_55592
	jump_22149:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(selected_team)(%edx),%cl
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		xor    %cl,%cl
		mov    %cl,data_5e5c0(%ebx,%eax,8)
		mov    -0x28(%ebp),%al
		dec    %al
		mov    %dl,%cl
		mov    %al,EXPORT_SYMBOL(selected_team)(%edx)
		mov    %al,%dl
		and    $0xff,%edx
		mov    data_55592,%ch
		lea    0x0(,%edx,4),%eax
		inc    %ch
		add    %edx,%eax
		inc    %cl
		mov    %ch,data_55592
		mov    %cl,data_5e5c0(%ebx,%eax,8)
	jump_221bd:
		xor    %al,%al
		mov    %al,-0x10(%ebp)
		jmp    def_21874
	jump_221c7:
		cmp    $0x12,%al
		jbe    def_21874
		xor    %bh,%bh
		mov    %bh,-0x10(%ebp)
		jmp    def_21874
	jump_221d9:
		cmp    $0x14,%al
		jbe    def_21874
		xor    %bl,%bl
		mov    %bl,-0x10(%ebp)
		jmp    def_21874
	jump_221eb:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_225c0
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_225c0
		cmpw   $0x13e,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_225c0
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_225c0
		mov    -0xc(%ebp),%cl
		cmp    $0x1,%cl
		jb     def_21874
		jbe    jump_22243
		cmp    $0x2,%cl
		je     jump_222dc
		jmp    def_21874
	jump_22243:
		cmpb   $0x0,-0x14(%ebp)
		jne    jump_222d2
		cmpb   $0x0,-0x20(%ebp)
		jne    jump_22269
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		push   %eax
		call   PurchasePart
		add    $0x8,%esp
		jmp    jump_222d2
	jump_22269:
		xor    %eax,%eax
		mov    %ax,-0x38(%ebp)
	jump_2226f:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x38(%ebp),%ax
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_5e5c0(%ebx,%eax,8)
		je     jump_222c4
		xor    %eax,%eax
		mov    -0x38(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		push   %eax
		call   PurchasePart
		add    $0x8,%esp
	jump_222c4:
		mov    -0x38(%ebp),%edx
		inc    %edx
		mov    %dx,-0x38(%ebp)
		cmp    $0x4,%dx
		jb     jump_2226f
	jump_222d2:
		xor    %al,%al
		mov    %al,-0x10(%ebp)
		jmp    def_21874
	jump_222dc:
		cmpb   $0x0,-0x14(%ebp)
		jne    jump_22390
		cmpb   $0x0,-0x20(%ebp)
		jne    jump_22302
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		push   %eax
		call   PurchaseWeapon
		add    $0x8,%esp
		jmp    jump_2236f
	jump_22302:
		xor    %edi,%edi
		mov    %di,-0x38(%ebp)
	jump_22308:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x38(%ebp),%dx
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_5e5c0(%ebx,%eax,8)
		je     jump_22361
		xor    %eax,%eax
		mov    -0x38(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		push   %eax
		call   PurchaseWeapon
		add    $0x8,%esp
	jump_22361:
		mov    -0x38(%ebp),%edi
		inc    %edi
		mov    %di,-0x38(%ebp)
		cmp    $0x4,%di
		jb     jump_22308
	jump_2236f:
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		mov    EXPORT_SYMBOL(selected_team)(%eax),%al
		and    $0xff,%eax
		push   %eax
		call   GetNextAvailableWeaponSlot
		add    $0x4,%esp
		mov    %al,-0x4(%ebp)
		jmp    def_21874
	jump_22390:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%ebx,%eax,1),%edx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		lea    0x0(,%eax,4),%eax
		add    %edx,%eax
		mov    data_5e5c3(%eax),%dx
		mov    data_5e5c1(%eax),%cx
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %edx,%edx
		mov    weapon_max_ammo(,%eax,2),%dx
		movswl %cx,%eax
		cmp    %edx,%eax
		jge    jump_2243e
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		dec    %eax
		imul   $0x1f5,%eax,%eax
		mov    data_57bf5(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%edx
		mov    $0x64,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %eax,EXPORT_SYMBOL(players)(%ebx)
		jmp    jump_2245e
	jump_2243e:
		xor    %eax,%eax
		mov    -0x10(%ebp),%al
		dec    %eax
		imul   $0x1f5,%eax,%eax
		mov    EXPORT_SYMBOL(players)(%ebx),%edx
		mov    data_57bf5(%eax),%eax
		add    %eax,%edx
		mov    %edx,EXPORT_SYMBOL(players)(%ebx)
	jump_2245e:
		xor    %dl,%dl
		mov    %dl,-0x10(%ebp)
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		xor    %edx,%edx
		mov    %dx,data_5e5c3(%ebx,%eax,4)
		mov    %dx,data_5e5c1(%ebx,%eax,4)
		xor    %ah,%ah
		mov    %ax,-0x38(%ebp)
		cmp    $0x7,%ax
		jae    jump_22555
	jump_224c9:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x38(%ebp),%dx
		add    %ebx,%eax
		lea    0x0(,%edx,4),%edx
		add    %edx,%eax
		mov    data_5e5c7(%eax),%dx
		xor    %edi,%edi
		mov    %dx,data_5e5c3(%eax)
		mov    %di,data_5e5c7(%eax)
		mov    -0x38(%ebp),%ebx
		mov    data_5e5c5(%eax),%dx
		inc    %ebx
		mov    %dx,data_5e5c1(%eax)
		mov    %bx,-0x38(%ebp)
		mov    %di,data_5e5c5(%eax)
		cmp    $0x7,%bx
		jb     jump_224c9
	jump_22555:
		xor    %dl,%dl
		mov    %dl,-0x4(%ebp)
		jmp    jump_22563
	jump_2255c:
		mov    %al,%bl
		inc    %bl
		mov    %bl,-0x4(%ebp)
	jump_22563:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		cmpw   $0x0,data_5e5c3(%ebx,%eax,4)
		jne    jump_2255c
		xor    %dh,%dh
		mov    %dh,-0x14(%ebp)
		jmp    def_21874
	jump_225c0:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_226d3
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_226d3
		cmpw   $0x126,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_226d3
		cmpw   $0x13c,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_226d3
		cmpb   $0x0,-0x14(%ebp)
		je     def_21874
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    -0x24(%ebp),%al
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%bl
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%eax,%edx,1),%ebx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    -0x10(%ebp),%bl
		dec    %ebx
		imul   $0x1f5,%ebx,%ebx
		movswl data_5e5c1(%eax),%esi
		movswl data_57bf9(%ebx),%ecx
		mov    data_57bfb(%ebx),%edi
		sub    %esi,%ecx
		imul   %edi,%ecx
		cmp    EXPORT_SYMBOL(players)(%edx),%ecx
		ja     def_21874
		xor    %esi,%esi
		mov    data_5e5c3(%eax),%si
		dec    %esi
		imul   $0x1f5,%esi,%esi
		mov    data_5e5c1(%eax),%di
		cmp    data_57bf9(%esi),%di
		jge    def_21874
		cmpw   $0x960,data_57c05(%esi)
		jne    def_21874
		sub    %ecx,EXPORT_SYMBOL(players)(%edx)
		mov    data_57bf9(%ebx),%dx
		mov    %dx,data_5e5c1(%eax)
		jmp    def_21874
	jump_226d3:
		xor    %dl,%dl
		mov    %dl,-0x10(%ebp)
		mov    %dl,-0x14(%ebp)
		mov    %dl,-0x4(%ebp)
		jmp    jump_226e7
	jump_226e0:
		mov    %al,%ah
		inc    %ah
		mov    %ah,-0x4(%ebp)
	jump_226e7:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    -0x24(%ebp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%ebx,%eax,1),%edx
		xor    %eax,%eax
		mov    -0x4(%ebp),%al
		cmpw   $0x0,data_5e5c3(%edx,%eax,4)
		jne    jump_226e0
		jmp    def_21874


/*----------------------------------------------------------------*/
func_2273c:
/*----------------------------------------------------------------*/
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    -0x24(%ebp),%dl
		mov    EXPORT_SYMBOL(selected_team)(%edx),%dl
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    -0x8(%ebp),%dl
		add    %ebx,%eax
		cmpw   $0x0,data_5e597(%eax,%edx,4)
		je     def_21874
		sub    $0xb,%dl
		mov    %dl,-0x4(%ebp)
		xor    %edx,%edx
		mov    -0x4(%ebp),%dl
		mov    data_5e5c3(%eax,%edx,4),%al
		mov    $0x1,%ah
		mov    $0x2,%dl
		mov    %al,-0x10(%ebp)
		mov    %ah,-0x14(%ebp)
		mov    %dl,-0xc(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_227b0:
/*----------------------------------------------------------------*/
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		jne    def_21874
		mov    $0x1,%al
		mov    $0xb,%esi
		mov    %al,-0x18(%ebp)
		mov    %esi,-0x40(%ebp)
		jmp    def_21874


/*----------------------------------------------------------------*/
func_227c8:
/*----------------------------------------------------------------*/
		cmpb   $0x0,-0x20(%ebp)
		je     jump_227d5
		xor    %cl,%cl
		mov    %cl,-0x20(%ebp)
		jmp    def_21874
	jump_227d5:
		movb   $0x1,-0x20(%ebp)
	def_21874:	/* 0x227d9 */
		movb   $0x18,-0x8(%ebp)
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,-0x18(%ebp)
		je     jump_1fd31
	jump_227f6:
		mov    $0x1,%eax
		mov    $AniName,%edi
		mov    $aDataMseloutDat,%esi
		xor    %edx,%edx
		xor    %bl,%bl
		mov    %eax,EXPORT_SYMBOL(MouseSwap)
		mov    %edx,MouseOldW
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		push   $0x2
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		call   LbCopyScreenToBackMCGA
		mov    -0x40(%ebp),%eax
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_ammo_for_this_weapon:	/* 0x22850 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%eax
		test   %ax,%ax
		jl     jump_228bf
		cmp    %bx,%ax
		jle    jump_22865
		mov    %ebx,%eax
	jump_22865:
		test   %bx,%bx
		jne    jump_2287a
		test   %ax,%ax
		jl     jump_22876
		mov    $0x18,%eax
		jmp    jump_22897
	jump_22876:
		xor    %eax,%eax
		jmp    jump_22897
	jump_2287a:
		movswl %ax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%edx
		movswl %bx,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_22897:
		push   $0xc
		push   $0x6
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x18(%esp),%ax
		add    $0x16,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x18(%esp),%ax
		add    $0x4,%eax
		push   %eax
		call   rectangle
		add    $0x14,%esp
	jump_228bf:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
which_item_selected:	/* 0x228d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		xor    %eax,%eax
		mov    0x24(%esp),%ax
		lea    0x0(,%eax,2),%edx
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		xor    %ebx,%ebx
		cmp    %edx,%eax
		jle    jump_22a04
		xor    %edx,%edx
		mov    0x2c(%esp),%dx
		add    %edx,%edx
		cmp    %edx,%eax
		jge    jump_22a04
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x28(%esp),%ax
		mov    0x18(%esp),%dx
		add    %eax,%eax
		cmp    %eax,%edx
		jle    jump_22a04
		xor    %eax,%eax
		mov    0x30(%esp),%ax
		add    %eax,%eax
		cmp    %eax,%edx
		jge    jump_22a04
		xor    %eax,%eax
		mov    0x34(%esp),%ax
		add    %eax,%eax
		sub    %eax,%edx
		mov    $0xc,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x1c(%esp),%ecx
		mov    %al,%dl
		test   %ecx,%ecx
		je     jump_22956
		xor    %ah,%ah
		mov    %ax,(%ecx)
	jump_22956:
		xor    %ecx,%ecx
		movsbl %dl,%eax
		mov    %si,%cx
		cmp    %ecx,%eax
		jge    jump_22a04
		cmp    $0x12,%si
		jb     jump_229fd
		jbe    jump_229c1
		cmp    $0x14,%si
		jne    jump_229fd
		mov    $EXPORT_SYMBOL(weapons),%eax
		mov    0x20(%esp),%dh
	jump_22985:
		movsbl %dl,%ecx
		cmp    $0xffffffff,%ecx
		jle    jump_229fd
		inc    %ebx
		cmp    %si,%bx
		ja     jump_229fd
		test   %dh,%dh
		jne    jump_229a9
		cmpw   $0x960,0x11(%eax)
		jne    jump_229ba
		jmp    jump_229b8
	jump_229a9:
		mov    0x11(%eax),%cx
		test   %cx,%cx
		jl     jump_229ba
		cmp    $0x64,%cx
		jge    jump_229ba
	jump_229b8:
		dec    %dl
	jump_229ba:
		add    $0x1f5,%eax
		jmp    jump_22985
	jump_229c1:
		mov    $EXPORT_SYMBOL(cybmods),%eax
	jump_229c6:
		movsbl %dl,%ecx
		cmp    $0xffffffff,%ecx
		jle    jump_229fd
		inc    %ebx
		cmp    %si,%bx
		ja     jump_229fd
		cmpb   $0x0,0x20(%esp)
		jne    jump_229e5
		cmpw   $0x960,0x8(%eax)
		jne    jump_229f6
		jmp    jump_229f4
	jump_229e5:
		mov    0x8(%eax),%di
		test   %di,%di
		jl     jump_229f6
		cmp    $0x64,%di
		jge    jump_229f6
	jump_229f4:
		dec    %dl
	jump_229f6:
		add    $0x1eb,%eax
		jmp    jump_229c6
	jump_229fd:
		cmp    %si,%bx
		jbe    jump_22a04
		xor    %ebx,%ebx
	jump_22a04:
		mov    %ebx,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ShowInfoOnEquipItem:	/* 0x22a10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		cmpb   $0x2,0x3c(%esp)
		jne    jump_22ce8
		mov    0x40(%esp),%dl
		cmp    $0x11,%dl
		jne    jump_22a37
		mov    m_sprites,%eax
		add    $0x1d4,%eax
		jmp    jump_22a51
	jump_22a37:
		xor    %ebx,%ebx
		mov    %dl,%bl
		add    $0x3f,%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    m_sprites,%ebx
		add    %eax,%eax
		add    %ebx,%eax
	jump_22a51:
		push   %eax
		push   $0x6a
		push   $0x1f6
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		movzbl 0x40(%esp),%ebp
		lea    -0x1(%ebp),%ebx
		imul   $0x1f5,%ebx,%ebx
		movzbl EXPORT_SYMBOL(weapons)(%ebx),%esi
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		lea    0x0(,%eax,4),%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_weapon_names(%esi,%eax,4),%edi
		push   %edi
		push   $aS
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x54
		push   $0xe
		push   $0xc4
		push   $0x1f8
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x54
		push   $0xf
		xor    %eax,%eax
		push   $0xd0
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_cost(,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
		mov    data_57bf5(%ebx),%esi
		push   %esi
		push   $aD_1
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x54
		push   $0xe
		push   $0xd0
		push   $0x22c
		lea    0x24(%esp),%eax
		push   %eax
		mov    $0xdc,%edi
		call   new_show_text
		mov    data_5a69a(%ebp),%dh
		add    $0x28,%esp
		test   %dh,%dh
		je     jump_22bd8
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ebp
		push   %ebp
		push   $0x54
		push   $0xf
		xor    %eax,%eax
		push   $0xdc
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_ammo(,%eax,4),%edx
		push   %edx
		call   new_show_text
		movswl data_57bf9(%ebx),%eax
		add    $0x28,%esp
		inc    %eax
		push   %eax
		push   $aD_1
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x54
		push   $0xe
		push   $0xdc
		push   $0x22c
		lea    0x24(%esp),%eax
		push   %eax
		mov    $0xe8,%edi
		call   new_show_text
		add    $0x28,%esp
	jump_22bd8:
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		xor    %esi,%esi
		push   $0xf
		mov    %di,%si
		xor    %eax,%eax
		push   %esi
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_range(,%eax,4),%ebp
		push   %ebp
		xor    %ebx,%ebx
		call   new_show_text
		add    $0x28,%esp
		mov    0x40(%esp),%bl
		lea    -0x1(%ebx),%ebp
		imul   $0x1f5,%ebp,%ebp
		movswl data_57bff(%ebp),%eax
		push   %eax
		push   $aD_1
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x54
		push   $0xe
		push   %esi
		push   $0x22c
		lea    0x24(%esp),%eax
		push   %eax
		add    $0xc,%edi
		call   new_show_text
		mov    data_5a69a(%ebx),%cl
		add    $0x28,%esp
		test   %cl,%cl
		je     jump_22e0c
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x54
		xor    %ebx,%ebx
		push   $0xf
		mov    %di,%bx
		xor    %eax,%eax
		push   %ebx
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_shot(,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
		mov    data_57bfb(%ebp),%esi
		push   %esi
		push   $aD_1
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x54
		push   $0xe
		push   %ebx
		push   $0x22c
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_22ce8:
		xor    %eax,%eax
		mov    0x40(%esp),%al
		dec    %eax
		imul   $0x1eb,%eax,%ebx
		push   $0x0
		push   $0x0
		push   $0x6
		mov    m_sprites,%edx
		push   $0xfffffffe
		movzbl EXPORT_SYMBOL(cybmods)(%ebx),%esi
		push   %edx
		lea    0x0(,%esi,4),%eax
		push   $0x54
		sub    %esi,%eax
		push   $0xe
		lea    0x0(,%eax,4),%esi
		xor    %eax,%eax
		push   $0x6e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_cybmod_names(%esi,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x54
		push   $0xf
		xor    %eax,%eax
		push   $0x7e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_cost(,%eax,4),%edi
		push   %edi
		call   new_show_text
		add    $0x28,%esp
		mov    data_55781(%ebx),%ebp
		push   %ebp
		push   $aD_1
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x54
		push   $0xe
		push   $0x7e
		push   $0x22c
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		mov    data_55785(%ebx),%bl
		and    $0xff,%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    $data_54960,%ebx
		lea    0x0(,%eax,4),%eax
		add    $0x28,%esp
		add    %eax,%ebx
		je     jump_22e0c
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		push   $0xc
		push   $0x54
		mov    m_sprites,%edx
		push   %edx
		push   $0xea
		push   $0x78
		xor    %ebx,%ebx
		push   $0x8e
		mov    EXPORT_SYMBOL(language),%bl
		push   $0x1f8
		mov    data_54960(%eax,%ebx,4),%ecx
		push   %ecx
		call   show_text_file
		add    $0x2c,%esp
	jump_22e0c:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
WhichIconSelected:	/* 0x22e20 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0x10(%esp),%bh
		mov    0xc(%esp),%dl
		mov    %bh,%bl
		test   %dl,%dl
		jne    jump_22e5e
		xor    %cl,%cl
	jump_22e35:
		cmp    0x8(%eax),%bh
		je     jump_22e9e
		cmp    0x9(%eax),%cl
		je     jump_22e59
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    EXPORT_SYMBOL(lbKeyOn)(%edx),%cl	/* lbKeyOn[edx] */
		je     jump_22e59
		mov    %cl,EXPORT_SYMBOL(lbKeyOn)(%edx)
		mov    0x8(%eax),%bl
	jump_22e59:
		add    $0xa,%eax
		jmp    jump_22e35
	jump_22e5e:
		cmp    0x8(%eax),%bh
		je     jump_22e9e
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    (%eax),%dx
		jbe    jump_22e99
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    0x4(%eax),%dx
		jae    jump_22e99
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    0x2(%eax),%dx
		jbe    jump_22e99
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    0x6(%eax),%dx
		jae    jump_22e99
		mov    0x8(%eax),%bl
	jump_22e99:
		add    $0xa,%eax
		jmp    jump_22e5e
	jump_22e9e:
		mov    %bl,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ShowAvailableParts:	/* 0x22eb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    $0x70,%esi
		xor    %ebx,%ebx
	jump_22ebe:
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0x1eb,%eax,%eax
		cmpb   $0xff,EXPORT_SYMBOL(cybmods)(%eax)
		je     jump_22f33
		cmpw   $0x960,data_55788(%eax)
		jne    jump_22f30
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0xdd
		xor    %edx,%edx
		push   $0xe
		mov    %si,%dx
		push   %edx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_cybmod_names(%edx,%eax,4),%ebp
		push   %ebp
		add    $0xc,%esi
		call   new_show_text
		add    $0x28,%esp
	jump_22f30:
		inc    %ebx
		jmp    jump_22ebe
	jump_22f33:
		push   $0x38
		push   $0xab
		push   $0x139
		push   $0x35
		push   $0xfa
		push   $0x0
		lea    0x18(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		push   $0x12
		call   which_item_selected
		mov    %eax,%edx
		add    $0x28,%esp
		test   %ax,%ax
		je     jump_22fd3
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		imul   $0xc,0x14(%esp),%ax
		push   $0x54
		add    $0x70,%ax
		push   $0xe
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %dx,%ax
		dec    %eax
		imul   $0x1eb,%eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_cybmod_names(%edx,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
	jump_22fd3:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ShowAvailableEquipment:	/* 0x22fe0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    $0x70,%ebx
		xor    %esi,%esi
	jump_22fee:
		xor    %edx,%edx
		mov    %si,%dx
		imul   $0x1f5,%edx,%eax
		cmpb   $0xff,EXPORT_SYMBOL(weapons)(%eax)
		je     jump_2306d
		cmpw   $0x960,data_57c05(%eax)
		jne    jump_2306a
		imul   $0x1eb,%edx,%edx
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0xdd
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(cybmods)(%edx),%dl
		push   $0xe
		mov    %bx,%ax
		and    $0xff,%edx
		push   %eax
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f8
		mov    strings_weapon_names(%edx,%eax,4),%ebp
		push   %ebp
		add    $0xc,%ebx
		call   new_show_text
		add    $0x28,%esp
	jump_2306a:
		inc    %esi
		jmp    jump_22fee
	jump_2306d:
		push   $0x38
		push   $0xab
		push   $0x139
		push   $0x35
		push   $0xfa
		push   $0x0
		lea    0x18(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		push   $0x14
		call   which_item_selected
		mov    %eax,%edx
		add    $0x28,%esp
		test   %ax,%ax
		je     jump_2310e
		push   $0x0
		push   $0x0
		push   $0x6
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		imul   $0xc,0x14(%esp),%ax
		push   $0x54
		add    $0x70,%ax
		push   $0xe
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %dx,%ax
		dec    %eax
		imul   $0x1eb,%eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(language),%dl
		lea    0x0(,%edx,4),%edx
		push   $0x1f8
		mov    strings_weapon_names(%edx,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
	jump_2310e:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
PurchasePart:	/* 0x23120 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%cl
		xor    %edx,%edx
		mov    %cl,%dl
		lea    -0x1(%edx),%eax
		imul   $0x1eb,%eax,%esi
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ebx,%eax
		mov    data_55781(%esi),%edi
		mov    %eax,%ebx
		cmp    EXPORT_SYMBOL(players)(%eax),%edi
		ja     jump_2336a
		movzbl 0x18(%esp),%esi
		movzbl EXPORT_SYMBOL(selected_team)(%esi),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		movswl data_5e5ba(%eax),%ebx
		cmp    $0xffffffff,%ebx
		jle    jump_2336a
		cmp    $0x4,%cl
		jae    jump_231e4
		mov    data_5e5bc(%eax),%si
		lea    0x0(,%edx,2),%ebx
		and    $0x6,%esi
		xor    %edx,%edx
		mov    %si,%dx
		cmp    %ebx,%edx
		je     jump_2336a
		mov    data_5e5bc(%eax),%dh
		and    $0xf9,%dh
		mov    %cl,%dl
		mov    %dh,data_5e5bc(%eax)
		xor    %dh,%dh
		mov    data_5e5bc(%eax),%bx
		add    %edx,%edx
		or     %edx,%ebx
		mov    %bx,data_5e5bc(%eax)
		jmp    jump_2332b
	jump_231e4:
		cmp    $0x7,%cl
		jae    jump_2323b
		mov    data_5e5bc(%eax),%bx
		lea    0x0(,%edx,8),%edx
		and    $0x18,%bl
		xor    %bh,%bh
		sub    $0x18,%edx
		and    $0xffff,%ebx
		cmp    %edx,%ebx
		je     jump_2336a
		mov    data_5e5bc(%eax),%dl
		and    $0xe7,%dl
		xor    %dh,%dh
		mov    %dl,data_5e5bc(%eax)
		mov    %cl,%dl
		sub    $0x3,%edx
		mov    data_5e5bc(%eax),%di
		shl    $0x3,%edx
		or     %edx,%edi
		mov    %di,data_5e5bc(%eax)
		jmp    jump_2332b
	jump_2323b:
		cmp    $0xa,%cl
		jae    jump_23281
		mov    data_5e5bc(%eax),%bx
		shl    $0x5,%edx
		and    $0x60,%bl
		xor    %bh,%bh
		sub    $0xc0,%edx
		and    $0xffff,%ebx
		cmp    %edx,%ebx
		je     jump_2336a
		mov    %cl,%dl
		mov    data_5e5bc(%eax),%ch
		xor    %dh,%dh
		and    $0x9f,%ch
		sub    $0x6,%edx
		mov    %ch,data_5e5bc(%eax)
		shl    $0x5,%edx
		jmp    jump_23324
	jump_23281:
		cmp    $0xd,%cl
		jae    jump_232d4
		mov    data_5e5bc(%eax),%bx
		shl    $0x7,%edx
		and    $0x180,%bx
		sub    $0x480,%edx
		and    $0xffff,%ebx
		cmp    %edx,%ebx
		je     jump_2336a
		mov    %cl,%dl
		xor    %dh,%dh
		mov    data_5e5bc(%eax),%di
		sub    $0x9,%edx
		and    $0xfffffe7f,%edi
		shl    $0x7,%edx
		mov    %edi,%ebx
		mov    %di,data_5e5bc(%eax)
		or     %edx,%ebx
		mov    %bx,data_5e5bc(%eax)
		jmp    jump_2332b
	jump_232d4:
		cmp    $0x10,%cl
		jae    jump_232ff
		mov    data_5e5bc(%eax),%bx
		xor    %dh,%dh
		and    $0x18,%bh
		sub    $0xc,%edx
		xor    %bl,%bl
		shl    $0xb,%edx
		cmp    %dx,%bx
		je     jump_2336a
		andb   $0xe7,data_5e5bd(%eax)
		jmp    jump_23324
	jump_232ff:
		cmp    $0x13,%cl
		jae    jump_2332b
		mov    data_5e5bc(%eax),%bx
		xor    %dh,%dh
		and    $0x6,%bh
		sub    $0xf,%edx
		xor    %bl,%bl
		shl    $0x9,%edx
		cmp    %dx,%bx
		je     jump_2336a
		andb   $0xf9,data_5e5bd(%eax)
	jump_23324:
		or     %dx,data_5e5bc(%eax)
	jump_2332b:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    %cl,%dl
		dec    %edx
		imul   $0x1eb,%edx,%edx
		mov    EXPORT_SYMBOL(players)(%eax),%ebp
		mov    data_55781(%edx),%edx
		sub    %edx,%ebp
		mov    %ebp,EXPORT_SYMBOL(players)(%eax)
	jump_2336a:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
PurchaseWeapon:	/* 0x23370 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x4,%esp
		movzbl 0x14(%esp),%esi
		push   %esi
		call   GetNextAvailableWeaponSlot
		mov    %al,0x4(%esp)
		add    $0x4,%esp
		xor    %eax,%eax
		mov    0x10(%esp),%al
		dec    %eax
		imul   $0x1f5,%eax,%ebx
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_57bf5(%ebx),%ecx
		mov    %eax,%edx
		cmp    EXPORT_SYMBOL(players)(%eax),%ecx
		ja     jump_23425
		cmpb   $0x8,(%esp)
		jae    jump_23425
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(selected_team)(%esi),%cl
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		movswl data_5e5ba(%eax),%ecx
		cmp    $0xffffffff,%ecx
		jle    jump_23425
		xor    %ecx,%ecx
		mov    (%esp),%cl
		lea    0x0(,%ecx,4),%ecx
		add    %ecx,%eax
		movzbw 0x10(%esp),%si
		mov    data_57bf9(%ebx),%cx
		mov    %si,data_5e5c3(%eax)
		mov    %cx,data_5e5c1(%eax)
		mov    data_57bf5(%ebx),%eax
		sub    %eax,EXPORT_SYMBOL(players)(%edx)
	jump_23425:
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GetNextAvailableWeaponSlot:	/* 0x23430 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    EXPORT_SYMBOL(Network__Slot),%si
		xor    %ch,%ch
		xor    %cl,%cl
	jump_2343d:
		movswl %si,%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebx,8),%ebx
		mov    0xc(%esp),%al
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %cl,%al
		cmpw   $0x0,data_5e5c3(%ebx,%eax,4)
		je     jump_23491
		inc    %ch
		inc    %cl
		cmp    $0x8,%cl
		jb     jump_2343d
	jump_23491:
		mov    %ch,%al
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GetNextAvailableWeaponSlot2:	/* 0x234a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    EXPORT_SYMBOL(Network__Slot),%si
		xor    %ch,%ch
		xor    %cl,%cl
	jump_234ad:
		movswl %si,%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0xc(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %cl,%al
		cmpw   $0x0,data_5e5c3(%ebx,%eax,4)
		je     jump_234f9
		inc    %ch
		inc    %cl
		cmp    $0x8,%cl
		jb     jump_234ad
	jump_234f9:
		mov    %ch,%al
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ThisPlayerInTeam:	/* 0x23510 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%bh
		xor    %cl,%cl
		xor    %bl,%bl
	jump_23519:
		xor    %eax,%eax
		mov    %bl,%al
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_team)(%eax),%dl
		xor    %eax,%eax
		mov    %bh,%al
		dec    %eax
		cmp    %eax,%edx
		jne    jump_23534
		mov    $0x1,%cl
		mov    %cl,%al
		pop    %ebx
		ret
	jump_23534:
		inc    %bl
		cmp    $0x4,%bl
		jb     jump_23519
		mov    %cl,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GetTeamMemberName:	/* 0x23540 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x4,%esp
		mov    EXPORT_SYMBOL(Network__Slot),%si
		push   $0x45
		call   random
		add    $0x4,%esp
		mov    %al,%ch
		jmp    jump_2356f
	jump_2355a:
		inc    %cl
		cmp    $0x12,%cl
		jb     jump_2357d
		mov    (%esp),%dh
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		test   %dh,%dh
		jne    jump_235c1
	jump_2356f:
		mov    $0x1,%ah
		mov    EXPORT_SYMBOL(Network__Slot),%si
		xor    %cl,%cl
		mov    %ah,(%esp)
	jump_2357d:
		movswl %si,%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    %cl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmp    data_5e5b9(%ebx,%eax,8),%ch
		jne    jump_2355a
		inc    %ch
		cmp    $0x45,%ch
		jb     jump_235b8
		xor    %ch,%ch
	jump_235b8:
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		jmp    jump_2356f
	jump_235c1:
		mov    %ch,%al
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_map_data:	/* 0x235d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		xor    %ebx,%ebx
		add    $0xc,%esi
		lea    0x0(%eax),%eax
		mov    %ecx,%ecx
	jump_235e0:
		movswl %bx,%eax
		lea    0x0(,%eax,4),%eax
		add    %esi,%eax
		mov    (%eax),%ecx
		lea    (%esi,%ecx,1),%edx
		inc    %ebx
		mov    %edx,(%eax)
		cmp    $0x3000,%bx
		jl     jump_235e0
		mov    %esi,data_55358
		pop    %esi
		pop    %ebx
		ret
unkn_unused_func_div92:	/* 0x23610 */
		push   %ebx
		push   %esi
		mov    $level__People,%ecx
		cmp    $level__Vehicles,%ecx
		jae    jump_23647
		mov    %ecx,%ebx
		neg    %ebx
		mov    $0x5c,%esi
		add    %ecx,%ebx
	jump_2362a:
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		and    $0x3,%al
		xor    %ah,%ah
		mov    %ax,0x40(%ecx)
		add    %esi,%ecx
		add    %esi,%ebx
		cmp    $level__Vehicles,%ecx
		jb     jump_2362a
	jump_23647:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
adjust_vehicles:	/* 0x23650 */
/*----------------------------------------------------------------*/
		mov    $level__Vehicles,%edx
		cmp    $level__Objects,%edx
		jae    jump_237a5
	jump_23661:
		cmpb   $0x0,0x18(%edx)
		je     jump_23796
		mov    0x19(%edx),%al
		cmp    $0xf,%al
		jb     jump_236c8
		cmp    $0x10,%al
		jbe    jump_23796
		cmp    $0x20,%al
		jb     jump_236a3
		cmp    $0x23,%al
		jbe    jump_23796
		cmp    $0x26,%al
		jb     jump_2377a
		cmp    $0x27,%al
		jbe    jump_23796
		cmp    $0x29,%al
		jbe    jump_23790
		jmp    jump_23796
	jump_236a3:
		cmp    $0x13,%al
		jb     jump_2374e
		cmp    $0x14,%al
		jbe    jump_23796
		cmp    $0x1c,%al
		jb     jump_23796
		cmp    $0x1d,%al
		jbe    jump_23764
		jmp    jump_23796
	jump_236c8:
		cmp    $0x5,%al
		jb     jump_236e6
		cmp    $0x6,%al
		jbe    jump_2370c
		cmp    $0x9,%al
		jb     jump_23796
		cmp    $0xa,%al
		jbe    jump_23722
		cmp    $0xc,%al
		jbe    jump_23796
		jmp    jump_23738
	jump_236e6:
		cmp    $0x1,%al
		jb     jump_23796
		cmp    $0x2,%al
		ja     jump_23796
		movw   $0x258,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_2370c:
		movw   $0x64,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_23722:
		movw   $0x50,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_23738:
		movw   $0x1e,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_2374e:
		movw   $0x28,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_23764:
		movw   $0xa,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_2377a:
		movw   $0x78,0x14(%edx)
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
		ret
	jump_23790:
		movw   $0x73,0x14(%edx)
	jump_23796:
		add    $0x2a,%edx
		cmp    $level__Objects,%edx
		jb     jump_23661
	jump_237a5:
		ret


/*----------------------------------------------------------------*/
reset_mission_info:	/* 0x237b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edi
		push   %ebp
		mov    $0x1,%al
		mov    $0x7,%edi
		xor    %edx,%edx
		xor    %ah,%ah
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    %edx,data_60af0
		mov    %ah,data_60af4
		mov    %ah,data_60af5
		mov    %ah,data_60af6
		mov    %ah,data_60af7
		mov    %ah,data_60af8
		mov    %ah,data_60af9
		mov    %ah,data_60afa
		mov    %al,data_60afc
		mov    %ah,data_60afd
		mov    %ebx,data_60afe
		mov    %ebx,a11
		mov    %ebx,data_60b06
		mov    %ah,data_60afb
		mov    %al,SoundActive
		mov    %al,MusicActive
		mov    %al,ScannerPulse
		mov    %edi,game_speed
		mov    %cx,data_60b32
		mov    $0x10,%ebx
		mov    %al,%dh
		xor    %dl,%dl
		xor    %al,%dh
		mov    %bx,data_5532c
		mov    %dx,data_5532e
		xor    %al,%al
	jump_2384c:
		xor    %edx,%edx
		mov    %ax,%dx
		xor    %ebp,%ebp
		inc    %eax
		mov    %ebp,data_60a7c(,%edx,4)
		cmp    $0x8,%ax
		jb     jump_2384c
		push   $0x408
		push   %ebp
		push   $data_60674
		mov    %ebp,data_60ae8
		call   ac_LbMemorySet
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_default_player:	/* 0x23880 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		xor    %edx,%edx
		mov    %dx,0xc(%esp)
		mov    0xc(%esp),%al
		shl    $0x3,%al
		mov    %dx,EXPORT_SYMBOL(Network__Slot)
		mov    %al,0x10(%esp)
		mov    $0x3,%ebp
	jump_238a5:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    0xc(%esp),%bl
		xor    %ecx,%ecx
		mov    %bl,data_605e0(,%eax,2)
		mov    %cx,data_605de(,%eax,2)
		mov    %cx,packets(,%eax,2)
		mov    %cx,data_605d6(,%eax,2)
		mov    %cx,data_605d8(,%eax,2)
		xor    %bl,%bl
		mov    %bl,data_605e1(,%eax,2)
		mov    EXPORT_SYMBOL(level__Seed),%bx
		mov    %bx,data_605da(,%eax,2)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		test   %dx,%dx
		jne    jump_2392a
		xor    %ch,%ch
		mov    $0x1,%dl
		mov    %ch,data_5e4ad(%eax)
		mov    %dl,data_5e4aa(%eax)
		jmp    jump_2393a
	jump_2392a:
		xor    %bh,%bh
		mov    $0x2,%cl
		mov    %bh,data_5e4ad(%eax)
		mov    %cl,data_5e4aa(%eax)
	jump_2393a:
		xor    %ebx,%ebx
		xor    %cl,%cl
		mov    %eax,%eax
	jump_23940:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %cl,data_5e555(%edx,%eax,1)
		inc    %ebx
		mov    %cl,data_5e587(%edx,%eax,1)
		cmp    $0x32,%bx
		jne    jump_23940
		mov    0xc(%esp),%al
		mov    %al,data_5e4ac(%edx)
		xor    %ebx,%ebx
		mov    %al,data_5e4ab(%edx)
		mov    $0x1,%esi
		mov    %ebx,data_5e4a0(%edx)
		mov    $0x55,%edi
		mov    %si,data_5e4a4(%edx)
		mov    EXPORT_SYMBOL(cheat_credits),%bl
		mov    %di,data_5e4a6(%edx)
		test   %bl,%bl
		je     jump_239c2
		movl   $0x5f5e100,EXPORT_SYMBOL(players)(%edx)
		jmp    jump_239cc
	jump_239c2:
		movl   $0x7530,EXPORT_SYMBOL(players)(%edx)
	jump_239cc:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %bh,%bh
		mov    %bh,data_5e552(%eax)
		mov    %bh,data_5e4ad(%eax)
		xor    %edx,%edx
		mov    %bh,data_5e4bf(%eax)
		xor    %bl,%bl
		mov    %dx,data_5e4a8(%eax)
		mov    0x10(%esp),%dl
		mov    %bx,(%esp)
		mov    %dl,data_5e551(%eax)
		xor    %esi,%esi
		jmp    jump_23a23
	jump_23a1d:
		cmp    $0x8,%dx
		jae    jump_23a88
	jump_23a23:
		push   %ebp
		call   random
		add    $0x4,%esp
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    %eax,%ecx
		mov    (%esp),%dx
		xor    %ah,%ch
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ebx
		and    $0x1,%cl
		mov    %cx,data_5e5bc(%ebx)
		movw   $0x10,data_5e5ba(%ebx)
		call   GetTeamMemberName
		mov    %al,data_5e5b9(%ebx)
		jmp    jump_23ab7
	jump_23a88:
		xor    %edx,%edx
		mov    (%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $0xffffffff,%ecx
		xor    %edx,%edx
		mov    %cx,data_5e5ba(%ebx,%eax,8)
		mov    $0xff,%cl
		mov    %dx,data_5e5bc(%ebx,%eax,8)
		mov    %cl,data_5e5b9(%ebx,%eax,8)
	jump_23ab7:
		mov    (%esp),%edi
		cmp    $0x4,%di
		jae    jump_23b0d
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		mov    (%esp),%al
		mov    %edx,%ecx
		xor    %ebx,%ebx
		shl    $0x5,%ecx
		inc    %al
		add    %edx,%ecx
		mov    %di,%bx
		lea    0x0(,%ecx,4),%ecx
		mov    %al,0x14(%esp)
		sub    %edx,%ecx
		lea    0x0(,%ebx,4),%eax
		lea    0x0(,%ecx,8),%ecx
		add    %ebx,%eax
		sub    %edx,%ecx
		mov    0x14(%esp),%dl
		mov    %dl,data_5e5c0(%ecx,%eax,8)
		mov    (%esp),%al
		mov    %al,EXPORT_SYMBOL(selected_team)(%ebx)
		jmp    jump_23b44
	jump_23b0d:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %dl,%dl
		mov    %dl,data_5e5c0(%ebx,%eax,8)
	jump_23b44:
		xor    %ecx,%ecx
		xor    %edi,%edi
	jump_23b48:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    (%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		lea    (%ebx,%eax,1),%edx
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %di,data_5e5c1(%edx,%eax,4)
		inc    %ecx
		mov    %di,data_5e5c3(%edx,%eax,4)
		cmp    $0x8,%cx
		jb     jump_23b48
		movw   $0x2,data_5e5c3(%edx)
		mov    data_5a73e,%ax
		mov    %ax,data_5e5c1(%edx)
		mov    (%esp),%edx
		inc    %edx
		mov    %dx,(%esp)
		cmp    $0x12,%dx
		jb     jump_23a1d
		mov    0x10(%esp),%dh
		mov    0xc(%esp),%esi
		add    $0x8,%dh
		inc    %esi
		mov    %dh,0x10(%esp)
		mov    %si,0xc(%esp)
		cmp    $0x8,%si
		jb     jump_238a5
		xor    %esi,%esi
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_23bf0:
		cmpb   $0x0,EXPORT_SYMBOL(byte_60B51)
		je     jump_23c17
		test   %si,%si
		je     jump_23c17
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %dl,%dl
		mov    %dl,data_5539e(,%eax,2)
		jmp    jump_23c3a
	jump_23c17:
		push   $0x7
		call   random
		xor    %edx,%edx
		mov    %si,%dx
		mov    %al,%bl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		inc    %bl
		add    $0x4,%esp
		mov    %bl,data_5539e(,%eax,2)
	jump_23c3a:
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		add    %ebx,%ebx
		xor    %edi,%edi
		push   $0x14
		mov    %di,EXPORT_SYMBOL(country_states)(%ebx)
		call   random
		and    $0xffff,%eax
		lea    0x28(%eax),%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%eax
		add    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		shl    $0x6,%eax
		mov    $0x1e,%dh
		mov    %eax,data_553a2(%ebx)
		inc    %esi
		mov    %dh,data_5539f(%ebx)
		add    $0x4,%esp
		mov    %dh,data_553a0(%ebx)
		cmp    $0x32,%si
		jne    jump_23bf0
		xor    %esi,%esi
		mov    $0x1eb,%ebp
		lea    0x0(%eax),%eax
	jump_23cb0:
		cmpb   $0x0,EXPORT_SYMBOL(cheat_credits)
		je     jump_23d31
		xor    %eax,%eax
		mov    %si,%ax
		imul   %ebp,%eax
		mov    $0x960,%edx
		xor    %edi,%edi
		mov    %dx,data_55788(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		nop
	jump_23ce0:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_23cf0:
		xor    %eax,%eax
		mov    %si,%ax
		mov    %eax,%ecx
		imul   %ebp,%ecx
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		lea    (%ecx,%eax,1),%edx
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %ecx,%ecx
		inc    %ebx
		mov    %cx,data_5578a(%edx,%eax,2)
		cmp    $0x18,%bx
		jb     jump_23cf0
		inc    %edi
		cmp    $0xa,%di
		jae    jump_23d9b
		jmp    jump_23ce0
	jump_23d31:
		xor    %eax,%eax
		mov    %si,%ax
		lea    0x0(,%eax,2),%edx
		imul   %ebp,%eax
		mov    data_5b474(%edx),%dx
		xor    %edi,%edi
		mov    %dx,data_55788(%eax)
	jump_23d50:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_23d60:
		xor    %eax,%eax
		mov    %si,%ax
		mov    %eax,%ecx
		imul   %ebp,%ecx
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		lea    (%ecx,%eax,1),%edx
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %ecx,%ecx
		inc    %ebx
		mov    %cx,data_5578a(%edx,%eax,2)
		cmp    $0x18,%bx
		jb     jump_23d60
		inc    %edi
		cmp    $0xa,%di
		jb     jump_23d50
	jump_23d9b:
		inc    %esi
		cmp    $0x12,%si
		jb     jump_23cb0
		xor    %edi,%edi
		mov    $0x1f5,%ebp
		lea    0x0(%eax),%eax
	jump_23db0:
		cmpb   $0x0,EXPORT_SYMBOL(cheat_credits)
		je     jump_23e49
		xor    %eax,%eax
		mov    %di,%ax
		imul   %ebp,%eax
		cmpb   $0xfe,EXPORT_SYMBOL(weapons)(%eax)
		je     jump_23ed1
		xor    %ebx,%ebx
		mov    $0x960,%edx
		mov    %ebx,0x8(%esp)
		mov    %dx,data_57c05(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_23df0:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_23e00:
		xor    %ecx,%ecx
		mov    %di,%cx
		mov    %ecx,%esi
		imul   %ebp,%esi
		xor    %edx,%edx
		mov    0x8(%esp),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		shl    $0x4,%eax
		mov    %bx,%dx
		add    %esi,%eax
		inc    %ebx
		movw   $0x0,data_57c07(%eax,%edx,2)
		cmp    $0x18,%bx
		jb     jump_23e00
		mov    0x8(%esp),%ebx
		inc    %ebx
		mov    %ebx,0x8(%esp)
		cmp    $0xa,%bx
		jb     jump_23df0
		jmp    jump_23ec5
	jump_23e49:
		xor    %eax,%eax
		mov    %di,%ax
		lea    0x0(,%eax,2),%edx
		imul   %ebp,%eax
		xor    %esi,%esi
		mov    data_5b498(%edx),%dx
		mov    %esi,0x4(%esp)
		mov    %dx,data_57c05(%eax)
		lea    0x0(%eax),%eax
	jump_23e70:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_23e80:
		xor    %ecx,%ecx
		mov    %di,%cx
		mov    %ecx,%esi
		imul   %ebp,%esi
		xor    %edx,%edx
		mov    0x4(%esp),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		lea    (%esi,%eax,1),%edx
		xor    %eax,%eax
		mov    %bx,%ax
		inc    %ebx
		movw   $0x0,data_57c07(%edx,%eax,2)
		cmp    $0x18,%bx
		jb     jump_23e80
		mov    0x4(%esp),%eax
		inc    %eax
		mov    %eax,0x4(%esp)
		cmp    $0xa,%ax
		jb     jump_23e70
	jump_23ec5:
		mov    data_5b830(%ecx),%al
		mov    %al,data_57de8(%esi)
	jump_23ed1:
		inc    %edi
		cmp    $0x14,%di
		jb     jump_23db0
		push   $0x1e9
		push   $0x0
		push   $EXPORT_SYMBOL(research)
		mov    $0xffffffff,%edi
		call   ac_LbMemorySet
		mov    $0x2,%ch
		add    $0xc,%esp
		mov    %edi,data_55597
		mov    %ch,EXPORT_SYMBOL(research)
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
cheat:	/* 0x23f10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		xor    %ah,%ah
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %ah,EXPORT_SYMBOL(cheat_worldmap)
		mov    %ah,EXPORT_SYMBOL(cheats_speedup)
		mov    %ah,EXPORT_SYMBOL(cheat_credits)
		mov    %ah,EXPORT_SYMBOL(cheats_mission)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aNukThem
		add    $0x23,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_23fa5
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aNukThem
		add    $0x11,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_23fac
	jump_23fa5:
		movb   $0x1,EXPORT_SYMBOL(cheat_worldmap)
	jump_23fac:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aWatchTheClock
		add    $0x23,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_24020
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aWatchTheClock
		add    $0x11,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_24027
	jump_24020:
		movb   $0x1,EXPORT_SYMBOL(cheats_speedup)
	jump_24027:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aDoItAgain
		add    $0x23,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_2409b
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aDoItAgain
		add    $0x11,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_240a2
	jump_2409b:
		movb   $0x1,EXPORT_SYMBOL(cheats_mission)
	jump_240a2:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aRobABank
		add    $0x23,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_24116
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aRobABank
		add    $0x11,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_24147
	jump_24116:
		mov    $0x1,%al
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %al,EXPORT_SYMBOL(cheat_credits)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movl   $0x5f5e100,EXPORT_SYMBOL(players)(%eax)
	jump_24147:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aToTheTop
		add    $0x23,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_241bf
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aToTheTop
		add    $0x11,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_24330
	jump_241bf:
		mov    $0x1,%ah
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %ah,EXPORT_SYMBOL(cheat_worldmap)
		mov    %ah,EXPORT_SYMBOL(cheat_credits)
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    $0x5f5e100,%ebx
		xor    %edi,%edi
		mov    %ebx,EXPORT_SYMBOL(players)(%eax)
		mov    $0x1eb,%ebp
		nop
	jump_24200:
		xor    %eax,%eax
		mov    %di,%ax
		imul   %ebp,%eax
		mov    $0x960,%edx
		xor    %esi,%esi
		mov    %dx,data_55788(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_24220:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_24230:
		xor    %ecx,%ecx
		mov    %di,%cx
		imul   %ebp,%ecx
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %esi,%edx
		inc    %ebx
		mov    %dx,data_5578a(%ecx,%eax,2)
		cmp    $0x18,%bx
		jb     jump_24230
		inc    %esi
		cmp    $0xa,%si
		jb     jump_24220
		inc    %edi
		cmp    $0x12,%di
		jb     jump_24200
		xor    %ebx,%ebx
		mov    %ebx,0x4(%esp)
		mov    $0x1f5,%ebp
		lea    0x0(%eax),%eax
	jump_24280:
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		imul   %ebp,%eax
		cmpb   $0xfe,EXPORT_SYMBOL(weapons)(%eax)
		je     jump_2431d
		mov    $0x960,%ecx
		xor    %edi,%edi
		mov    %cx,data_57c05(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %ebx,%ebx
	jump_242b0:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_242c0:
		xor    %esi,%esi
		mov    0x4(%esp),%si
		mov    %esi,%ecx
		imul   %ebp,%ecx
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		lea    (%ecx,%eax,1),%edx
		xor    %eax,%eax
		mov    %bx,%ax
		inc    %ebx
		movw   $0x0,data_57c07(%edx,%eax,2)
		cmp    $0x18,%bx
		jb     jump_242c0
		inc    %edi
		cmp    $0xa,%di
		jb     jump_242b0
		mov    data_5b830(%esi),%al
		mov    data_57bf5(%ecx),%esi
		mov    %al,data_57de8(%ecx)
		test   %esi,%esi
		jge    jump_2431d
		mov    %esi,%eax
		neg    %eax
		mov    %eax,data_57bf5(%ecx)
	jump_2431d:
		mov    0x4(%esp),%esi
		inc    %esi
		mov    %esi,0x4(%esp)
		cmp    $0x14,%si
		jb     jump_24280
	jump_24330:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aCooperTeam
		add    $0x23,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_243a8
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		push   $aCooperTeam
		add    $0x11,%eax
		push   %eax
		call   ac_stricmp
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_246aa
	jump_243a8:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    $0x1,%bl
		lea    0x0(,%eax,8),%eax
		mov    $0x5f5e100,%edi
		sub    %edx,%eax
		mov    %bl,EXPORT_SYMBOL(cheat_worldmap)
		mov    %bl,EXPORT_SYMBOL(cheat_credits)
		mov    %edi,EXPORT_SYMBOL(players)(%eax)
		xor    %edi,%edi
		mov    $0x1eb,%ebp
		lea    0x0(%eax),%eax
		mov    %edx,%edx
	jump_243f0:
		xor    %eax,%eax
		mov    %di,%ax
		imul   %ebp,%eax
		mov    $0x960,%edx
		xor    %esi,%esi
		mov    %dx,data_55788(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_24410:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_24420:
		xor    %eax,%eax
		mov    %di,%ax
		mov    %eax,%ecx
		imul   %ebp,%ecx
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %esi,%edx
		inc    %ebx
		mov    %dx,data_5578a(%ecx,%eax,2)
		cmp    $0x18,%bx
		jb     jump_24420
		inc    %esi
		cmp    $0xa,%si
		jb     jump_24410
		inc    %edi
		cmp    $0x12,%di
		jb     jump_243f0
		xor    %ebx,%ebx
		mov    %ebx,(%esp)
		mov    $0x1f5,%ebp
		lea    0x0(%eax),%eax
		mov    %ecx,%ecx
	jump_24470:
		xor    %eax,%eax
		mov    (%esp),%ax
		imul   %ebp,%eax
		cmpb   $0xfe,EXPORT_SYMBOL(weapons)(%eax)
		je     jump_24509
		mov    $0x960,%ecx
		xor    %edi,%edi
		mov    %cx,data_57c05(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_244a0:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_244b0:
		xor    %esi,%esi
		mov    (%esp),%si
		mov    %esi,%ecx
		imul   %ebp,%ecx
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		shl    $0x4,%eax
		mov    %bx,%dx
		add    %ecx,%eax
		inc    %ebx
		movw   $0x0,data_57c07(%eax,%edx,2)
		cmp    $0x18,%bx
		jb     jump_244b0
		inc    %edi
		cmp    $0xa,%di
		jb     jump_244a0
		mov    data_5b830(%esi),%al
		mov    %al,data_57de8(%ecx)
		mov    data_57bf5(%ecx),%eax
		test   %eax,%eax
		jge    jump_24509
		neg    %eax
		mov    %eax,data_57bf5(%ecx)
	jump_24509:
		mov    (%esp),%esi
		inc    %esi
		mov    %esi,(%esp)
		cmp    $0x14,%si
		jb     jump_24470
		xor    %ebx,%ebx
		mov    $0xc,%esi
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_24530:
		call   GetTeamMemberName
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    %bx,%dx
		mov    %al,0x8(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ecx,%eax
		mov    0x8(%esp),%dl
		mov    %dl,data_5e5b9(%eax)
		mov    $0x10,%edx
		mov    $0x6,%edi
		mov    %dx,data_5e5ba(%eax)
		xor    %edx,%edx
		mov    $0x1fff,%ecx
		mov    %di,%dx
		mov    %cx,data_5e5bc(%eax)
		xor    %ecx,%ecx
		mov    weapon_max_ammo(,%edx,2),%dx
		mov    %di,%cx
		mov    %dx,data_5e5c1(%eax)
		lea    0x4(%eax),%edx
		mov    %di,data_5e5c3(%eax)
		mov    weapon_max_ammo(,%ecx,2),%cx
		mov    %di,data_5e5c3(%edx)
		mov    %cx,data_5e5c1(%edx)
		mov    $0x1,%edi
		xor    %ecx,%ecx
		lea    0x8(%eax),%edx
		mov    %di,%cx
		mov    %di,data_5e5c3(%edx)
		mov    weapon_max_ammo(,%ecx,2),%cx
		mov    %cx,data_5e5c1(%edx)
		xor    %ecx,%ecx
		lea    0xc(%eax),%edx
		mov    %si,%cx
		mov    %si,data_5e5c3(%edx)
		mov    weapon_max_ammo(,%ecx,2),%cx
		mov    %cx,data_5e5c1(%edx)
		lea    0x10(%eax),%edx
		movw   $0x11,data_5e5c3(%edx)
		xor    %ecx,%ecx
		mov    data_5e5c3(%edx),%cx
		mov    weapon_max_ammo(,%ecx,2),%cx
		mov    $0x11,%edi
		mov    %cx,data_5e5c1(%edx)
		xor    %ecx,%ecx
		lea    0x14(%eax),%edx
		mov    %di,%cx
		mov    %di,data_5e5c3(%edx)
		mov    weapon_max_ammo(,%ecx,2),%cx
		mov    %cx,data_5e5c1(%edx)
		lea    0x18(%eax),%edx
		movw   $0x7,data_5e5c3(%edx)
		xor    %ecx,%ecx
		mov    data_5e5c3(%edx),%cx
		mov    weapon_max_ammo(,%ecx,2),%cx
		mov    $0x7,%edi
		mov    %cx,data_5e5c1(%edx)
		xor    %edx,%edx
		add    $0x1c,%eax
		mov    %di,%dx
		mov    %di,data_5e5c3(%eax)
		mov    weapon_max_ammo(,%edx,2),%dx
		inc    %ebx
		mov    %dx,data_5e5c1(%eax)
		cmp    $0x12,%bx
		jb     jump_24530
	jump_246aa:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
		ret


/*----------------------------------------------------------------*/
transfer_people_into_player:	/* 0x246d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    0x20(%esp),%edi
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		jne    jump_24c06
		xor    %edx,%edx
		mov    %edx,0x8(%esp)
		mov    %eax,%eax
	jump_246f0:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		xor    %ecx,%ecx
		sub    %edx,%eax
		mov    0x8(%esp),%cx
		mov    %eax,%edx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		mov    data_5e5c0(%eax),%bl
		test   %bl,%bl
		je     jump_24bf3
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %bl,%cl
		mov    data_5e551(%edx),%al
		dec    %ecx
		add    %ecx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edx
		add    %eax,%edx
		mov    %edx,%eax
		mov    data_60afc,%bh
		sub    $level__things_base,%eax
		mov    %edx,(%esp)
		mov    %eax,0x4(%esp)
		test   $0x2,%bh
		je     jump_249fb
		mov    $level__People,%ebp
		cmp    $level__Vehicles,%ebp
		jae    jump_249fb
	jump_2477e:
		mov    0x4(%esp),%ebx
		cmp    0x20(%ebp),%bx
		jne    jump_249ec
		testb  $0x1,0xb(%ebp)
		jne    jump_249ec
		mov    0x1c(%ebp),%ch
		test   $0x1,%ch
		je     jump_247e7
		xor    %ecx,%ecx
		mov    %di,%cx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%edx
		add    $0x32,%edx
		push   %ecx
		mov    %edx,EXPORT_SYMBOL(players)(%eax)
		push   %ebp
		movw   $0x0,0x20(%ebp)
		mov    data_60afd,%al
		inc    %al
		add    $0x8,%esp
		mov    %al,data_60afd
		jmp    jump_249ec
	jump_247e7:
		test   $0x8,%ch
		je     jump_2483a
		xor    %ecx,%ecx
		mov    %di,%cx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%esi
		add    $0x96,%esi
		push   %ecx
		mov    %esi,EXPORT_SYMBOL(players)(%eax)
		push   %ebp
		movw   $0x0,0x20(%ebp)
		mov    data_60afd,%ch
		inc    %ch
		add    $0x8,%esp
		mov    %ch,data_60afd
		jmp    jump_249ec
	jump_2483a:
		test   $0x4,%ch
		je     jump_2488d
		xor    %ecx,%ecx
		mov    %di,%cx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%ebx
		add    $0x96,%ebx
		push   %ecx
		mov    %ebx,EXPORT_SYMBOL(players)(%eax)
		push   %ebp
		movw   $0x0,0x20(%ebp)
		mov    data_60afd,%cl
		inc    %cl
		add    $0x8,%esp
		mov    %cl,data_60afd
		jmp    jump_249ec
	jump_2488d:
		test   $0x10,%ch
		je     jump_248e0
		xor    %ecx,%ecx
		mov    %di,%cx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%edx
		add    $0x12c,%edx
		push   %ecx
		mov    %edx,EXPORT_SYMBOL(players)(%eax)
		push   %ebp
		movw   $0x0,0x20(%ebp)
		mov    data_60afd,%bh
		inc    %bh
		add    $0x8,%esp
		mov    %bh,data_60afd
		jmp    jump_249ec
	jump_248e0:
		test   $0x2,%ch
		je     jump_249ec
		mov    data_60afd,%bl
		movw   $0x0,0x20(%ebp)
		inc    %bl
		mov    0x14(%ebp),%cx
		mov    %bl,data_60afd
		test   %cx,%cx
		jl     jump_249e2
		xor    %ebx,%ebx
	jump_2490c:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%esi
		shl    $0x5,%esi
		add    %edx,%esi
		lea    0x0(,%esi,4),%esi
		sub    %edx,%esi
		lea    0x0(,%esi,8),%esi
		sub    %edx,%esi
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%esi
		cmpb   $0xff,data_5e5b9(%esi)
		jne    jump_249d7
		mov    data_60afb,%dl
		mov    0x3c(%ebp),%ax
		inc    %dl
		mov    %ax,data_5e5bc(%esi)
		mov    $0x10,%eax
		mov    %dl,data_60afb
		mov    %ax,data_5e5ba(%esi)
		call   GetTeamMemberName
		mov    %al,data_5e5b9(%esi)
		xor    %esi,%esi
	jump_24980:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    %si,%ax
		xor    %ebx,%edx
		mov    %dx,data_5e5c3(%ecx,%eax,4)
		xor    %edx,%edx
		inc    %esi
		mov    %dx,data_5e5c1(%ecx,%eax,4)
		cmp    $0x8,%si
		jae    jump_249e2
		jmp    jump_24980
	jump_249d7:
		inc    %ebx
		cmp    $0x12,%bx
		jb     jump_2490c
	jump_249e2:
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		push   %ebp
		add    $0x8,%esp
	jump_249ec:
		add    $0x5c,%ebp
		cmp    $level__Vehicles,%ebp
		jb     jump_2477e
	jump_249fb:
		mov    (%esp),%eax
		cmpw   $0x0,0x14(%eax)
		jge    jump_24ac7
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    0x8(%esp),%dx
		lea    0x0(,%edx,4),%eax
		xor    %ebx,%ebx
		add    %edx,%eax
		mov    $0xffffffff,%esi
		mov    $0xff,%bh
		mov    %si,data_5e5ba(%ecx,%eax,8)
		xor    %edx,%edx
		mov    %bh,data_5e5b9(%ecx,%eax,8)
		mov    %dx,data_5e5be(%ecx,%eax,8)
		xor    %dl,%bl
		mov    %dx,data_5e5bc(%ecx,%eax,8)
		mov    %bl,data_5e5c0(%ecx,%eax,8)
		xor    %ebx,%ebx
		xor    %esi,%esi
	jump_24a6e:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    0x8(%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %si,data_5e5c3(%ecx,%eax,4)
		inc    %ebx
		mov    %si,data_5e5c1(%ecx,%eax,4)
		cmp    $0x8,%bx
		jae    jump_24bf3
		jmp    jump_24a6e
	jump_24ac7:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    0x8(%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $0x10,%esi
		mov    (%esp),%edx
		mov    %si,data_5e5ba(%ecx,%eax,8)
		mov    0x3c(%edx),%dx
		mov    %dx,data_5e5bc(%ecx,%eax,8)
		testb  $0x8,data_60afc
		jne    jump_24bf3
		xor    %ebx,%ebx
		xor    %esi,%esi
	jump_24b22:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%ecx
		shl    $0x5,%ecx
		add    %edx,%ecx
		lea    0x0(,%ecx,4),%ecx
		sub    %edx,%ecx
		lea    0x0(,%ecx,8),%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    0x8(%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %si,data_5e5c3(%ecx,%eax,4)
		inc    %ebx
		mov    %si,data_5e5c1(%ecx,%eax,4)
		cmp    $0x8,%bx
		jb     jump_24b22
		mov    (%esp),%eax
		mov    0x3a(%eax),%ax
		xor    %ebx,%ebx
		test   %ax,%ax
		je     jump_24bf3
	jump_24b83:
		cmp    $0x8,%bx
		jae    jump_24bf3
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%esi
		shl    $0x5,%esi
		add    %edx,%esi
		lea    0x0(,%esi,4),%esi
		sub    %edx,%esi
		lea    0x0(,%esi,8),%esi
		sub    %edx,%esi
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x8(%esp),%dx
		mov    %ax,%cx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %eax,%esi
		xor    %eax,%eax
		add    $level__things_base,%ecx
		mov    %bx,%ax
		mov    0x14(%ecx),%dx
		mov    %dx,data_5e5c1(%esi,%eax,4)
		mov    0x19(%ecx),%dl
		xor    %dh,%dh
		mov    %dx,data_5e5c3(%esi,%eax,4)
		inc    %ebx
		mov    0x1c(%ecx),%ax
		test   %ax,%ax
		jne    jump_24b83
	jump_24bf3:
		mov    0x8(%esp),%eax
		inc    %eax
		mov    %eax,0x8(%esp)
		cmp    $0x12,%ax
		jb     jump_246f0
	jump_24c06:
		test   %di,%di
		jbe    jump_24c53
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_24c53
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		push   $0x417
		sub    %edx,%eax
		push   $EXPORT_SYMBOL(players)
		add    $EXPORT_SYMBOL(players),%eax
		push   %eax
		xor    %ebx,%ebx
		call   LbMemoryCopy
		add    $0xc,%esp
		mov    %bx,EXPORT_SYMBOL(Network__Slot)
	jump_24c53:
		mov    data_60afe,%eax
		mov    a11,%ebx
		cmp    %ebx,%eax
		jbe    jump_24c68
		mov    %ebx,data_60afe
	jump_24c68:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_24c70:
		.long   func_24df7
		.long   func_24e01
		.long   func_24e0b
		.long   func_24e15


/*----------------------------------------------------------------*/
init_players_people:	/* 0x24c80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		xor    %eax,%eax
	jump_24c89:
		xor    %edx,%edx
		mov    %ax,%dx
		xor    %ebx,%ebx
		inc    %eax
		mov    %bx,(%esp,%edx,2)
		cmp    $0x8,%ax
		jb     jump_24c89
		xor    %esi,%esi
		xor    %ecx,%ecx
	jump_24c9f:
		mov    %ecx,%eax
	jump_24ca1:
		xor    %edx,%edx
		mov    %si,%dx
		mov    %edx,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		shl    $0x5,%ebx
		inc    %eax
		mov    %ecx,data_5dcbc(%ebx,%edx,4)
		cmp    $0x8,%ax
		jb     jump_24ca1
		inc    %esi
		cmp    $0x4,%si
		jb     jump_24c9f
		xor    %ecx,%ecx
		mov    %ecx,0x10(%esp)
		lea    0x0(%eax),%eax
		mov    %ecx,%ecx
	jump_24cd0:
		xor    %edx,%edx
		mov    0x28(%esp),%dx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		mov    data_5e5c0(%eax),%dl
		test   %dl,%dl
		je     jump_24e9f
		mov    %dl,%al
		xor    %edx,%edx
		and    $0xff,%eax
		mov    data_5e551(%ebx),%dl
		add    %eax,%edx
		dec    %edx
		imul   $0x5c,%edx,%edx
		mov    $level__People,%ebp
		mov    $0x1,%esi
		add    %edx,%ebp
		mov    %si,-0x2(%esp,%eax,2)
		mov    0x3a(%ebp),%di
		test   %di,%di
		je     jump_24d62
	jump_24d46:
		xor    %eax,%eax
		mov    %di,%ax
		add    $level__things_base,%eax
		push   %eax
		mov    0x1c(%eax),%di
		call   remove_model
		add    $0x4,%esp
		test   %di,%di
		jne    jump_24d46
	jump_24d62:
		xor    %edx,%edx
		mov    0x28(%esp),%dx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		movw   $0x0,0x3a(%ebp)
		mov    data_5e5bc(%eax),%dx
		mov    %dx,0x3c(%ebp)
		mov    data_5e5ba(%eax),%ax
		mov    %ax,0x14(%ebp)
		mov    0x2c(%esp),%ax
		or     $0x4,%ah
		mov    %ax,0x1c(%ebp)
		mov    0xa(%ebp),%di
		mov    0x3c(%ebp),%ax
		and    $0xfffffef6,%edi
		and    $0x6,%al
		xor    %ah,%ah
		movb   $0x0,0x19(%ebp)
		and    $0xffff,%eax
		movw   $0x0,0xc(%ebp)
		sar    $1,%eax
		mov    %di,0xa(%ebp)
		cmp    $0x3,%eax
		ja     jump_24e1d
		jmp    *%cs:vtable_24c70(,%eax,4)


/*----------------------------------------------------------------*/
func_24df7:
/*----------------------------------------------------------------*/
		movb   $0x28,0x56(%ebp)
		movb   $0x28,0x55(%ebp)
		jmp    jump_24e1d


/*----------------------------------------------------------------*/
func_24e01:
/*----------------------------------------------------------------*/
		movb   $0x30,0x56(%ebp)
		movb   $0x30,0x55(%ebp)
		jmp    jump_24e1d


/*----------------------------------------------------------------*/
func_24e0b:
/*----------------------------------------------------------------*/
		movb   $0x38,0x56(%ebp)
		movb   $0x38,0x55(%ebp)
		jmp    jump_24e1d


/*----------------------------------------------------------------*/
func_24e15:
/*----------------------------------------------------------------*/
		movb   $0x40,0x56(%ebp)
		movb   $0x40,0x55(%ebp)
	jump_24e1d:
		xor    %edi,%edi
	jump_24e1f:
		xor    %edx,%edx
		mov    0x28(%esp),%dx
		mov    %edx,%esi
		shl    $0x5,%esi
		xor    %ebx,%ebx
		add    %edx,%esi
		mov    0x10(%esp),%bx
		lea    0x0(,%esi,4),%esi
		lea    0x0(,%ebx,4),%eax
		sub    %edx,%esi
		add    %ebx,%eax
		lea    0x0(,%esi,8),%esi
		lea    0x0(,%eax,8),%eax
		sub    %edx,%esi
		add    %esi,%eax
		xor    %esi,%esi
		mov    %di,%si
		lea    0x0(,%esi,4),%esi
		add    %esi,%eax
		cmpw   $0x0,data_5e5c3(%eax)
		jbe    jump_24e98
		movswl data_5e5c1(%eax),%edx
		mov    data_5e5c3(%eax),%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		push   %ebp
		shl    $0x5,%ebx
		call   init_a_players_weapon
		add    $0xc,%esp
		mov    %eax,data_5dcbc(%esi,%ebx,1)
	jump_24e98:
		inc    %edi
		cmp    $0x8,%di
		jb     jump_24e1f
	jump_24e9f:
		mov    0x10(%esp),%ebx
		inc    %ebx
		mov    %ebx,0x10(%esp)
		cmp    $0x12,%bx
		jb     jump_24cd0
		cmpw   $0x1002,0x2c(%esp)
		je     jump_24f4c
		mov    $level__things_base,%ebp
		xor    %edi,%edi
	jump_24ec6:
		xor    %ebx,%ebx
		mov    %di,%bx
		cmpw   $0x0,(%esp,%ebx,2)
		jne    jump_24f41
		xor    %edx,%edx
		mov    0x28(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %eax,%ebx
		imul   $0x5c,%ebx,%ebx
		mov    $level__People,%esi
		add    %ebx,%esi
		mov    0x3a(%esi),%bx
		test   %bx,%bx
		je     jump_24f2b
	jump_24f12:
		xor    %eax,%eax
		mov    %bx,%ax
		add    %ebp,%eax
		push   %eax
		mov    0x1c(%eax),%bx
		call   remove_model
		add    $0x4,%esp
		test   %bx,%bx
		jne    jump_24f12
	jump_24f2b:
		push   %esi
		call   remove_model
		add    $0x4,%esp
		push   $0x5c
		push   $0x0
		push   %esi
		call   ac_LbMemorySet
		add    $0xc,%esp
	jump_24f41:
		inc    %edi
		cmp    $0x8,%di
		jb     jump_24ec6
	jump_24f4c:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_a_players_weapon:	/* 0x24f60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		movswl 0x8(%esi),%eax
		push   %eax
		movswl 0x6(%esi),%eax
		push   %eax
		movswl 0x4(%esi),%eax
		push   %eax
		call   init_weapon
		add    $0xc,%esp
		mov    %eax,%ebx
		test   %eax,%eax
		je     jump_24fac
		movw   $0xffff,0x12(%eax)
		movb   $0x0,0x1a(%eax)
		mov    0x10(%esp),%dl
		movw   $0x0,0xe(%eax)
		push   %esi
		mov    %dl,0x19(%eax)
		mov    0x18(%esp),%edx
		push   %eax
		mov    %dx,0x14(%eax)
		call   weapon_to_person
		add    $0x8,%esp
	jump_24fac:
		mov    %ebx,%eax
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
clear_savegame:	/* 0x24fc0 */
/*----------------------------------------------------------------*/
		mov    $level__End,%eax
		sub    $EXPORT_SYMBOL(level__Seed),%eax
		push   %eax
		push   $0x0
		push   $EXPORT_SYMBOL(level__Seed)
		call   ac_LbMemorySet
		add    $0xc,%esp
		ret


/*----------------------------------------------------------------*/
free_map_level:	/* 0x24fe0 */
/*----------------------------------------------------------------*/
		push   $mission_load_files
		call   LbDataFreeAll
		add    $0x4,%esp
		push   $unkn1_empty_load_files
		call   LbDataFreeAll
		mov    EXPORT_SYMBOL(SoundAble),%ah
		add    $0x4,%esp
		test   %ah,%ah
		je     jump_25016
		call   StopAllSounds
		push   $sound_load_files
		call   LbDataFreeAll
		add    $0x4,%esp
	jump_25016:
		ret


/*----------------------------------------------------------------*/
set_structure_ends:	/* 0x25020 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    $level__Vehicles,%ebx
		mov    $level__Objects,%ecx
		mov    EXPORT_SYMBOL(byte_60B42),%ah
		mov    $level__Weapons,%esi
		test   %ah,%ah
		jne    jump_2509f
		mov    $data_8dcb4,%edx
		cmp    $level__People,%edx
		jb     jump_2505f
	jump_2504c:
		cmpb   $0x0,0x18(%edx)
		jne    jump_2505f
		mov    %edx,%ebx
		sub    $0x5c,%edx
		cmp    $level__People,%edx
		jae    jump_2504c
	jump_2505f:
		mov    $data_8e766,%edx
		cmp    $level__Vehicles,%edx
		jb     jump_2507f
	jump_2506c:
		cmpb   $0x0,0x18(%edx)
		jne    jump_2507f
		mov    %edx,%ecx
		sub    $0x2a,%edx
		cmp    $level__Vehicles,%edx
		jae    jump_2506c
	jump_2507f:
		mov    $data_91652,%edx
		cmp    $level__Objects,%edx
		jb     jump_2509f
	jump_2508c:
		cmpb   $0x0,0x18(%edx)
		jne    jump_2509f
		mov    %edx,%esi
		sub    $0x1e,%edx
		cmp    $level__Objects,%edx
		jae    jump_2508c
	jump_2509f:
		mov    %esi,last_object
		mov    %ecx,last_vehicle
		mov    %ebx,last_person
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_level_data:	/* 0x25110 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    map_buf,%edx
		push   %edx
		call   init_map_data
		add    $0x4,%esp
		mov    h_sprites_data,%ebx
		push   %ebx
		mov    h_sprites_end,%ecx
		push   %ecx
		mov    h_sprites,%esi
		push   %esi
		call   ac_LbSpriteSetup
		add    $0xc,%esp
		mov    data_55334,%edi
		push   %edi
		mov    data_55320,%ebp
		push   %ebp
		mov    data_5531c,%eax
		push   %eax
		call   ac_LbSpriteSetup
		mov    EXPORT_SYMBOL(is_multiplayer_game),%ah
		xor    %edx,%edx
		add    $0xc,%esp
		mov    %edx,data_60ac8
		test   %ah,%ah
		jne    jump_25176
		call   init_computer_players
	jump_25176:
		call   adjust_vehicles
		push   $0x12
		call   ac_AppScreenSetup
		add    $0x4,%esp
#if !defined(DOS) /* new bflibrary has generic screen clearing routine */
		push   $0x0
		call   ac_LbScreenClear
		add    $0x4,%esp
#else
		push   $0x0
		call   LbScreenClearVres16
		add    $0x4,%esp
#endif
		mov    EXPORT_SYMBOL(is_multiplayer_game),%dl
		test   %dl,%dl
		je     jump_251ad
		push   $aDataHpal01Dat
		lea    0x4(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_251d3
	jump_251ad:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(current_levno),%ax
		mov    level_palettes(%eax),%al
		and    $0xff,%eax
		push   %eax
		push   $aDataHpal02dDat
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
	jump_251d3:
		mov    EXPORT_SYMBOL(GraphicsPalette),%ebx
		push   %ebx
		lea    0x4(%esp),%eax
		push   %eax
		call   LbFileReadRNC
		add    $0x8,%esp
		push   $0x0
		mov    EXPORT_SYMBOL(WScreen),%ecx
		push   %ecx
		call   LbScreenSurfaceClear
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(WScreen),%esi
		push   %esi
		call   ac_LbPaletteSet
		mov    EXPORT_SYMBOL(pointer_sprites),%eax
		add    $0x4,%esp
		add    $0x6,%eax
		xor    %dh,%dh
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   %eax
		call   ac_LbMouseChangeSprite
		add    $0x4,%esp
#else
		mov    %eax,EXPORT_SYMBOL(mouse_sprite)
#endif
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    %dh,data_60b50
		call   set_structure_ends
		call   ClearBFSampleStatus
		mov    $0x10,%cl
		mov    $0x14,%al
		mov    $0xd48,%edx
		mov    $0x1,%ah
		mov    level__LoBoundaryy,%bx
		mov    %cl,data_9bc77
		mov    %al,data_9bc76
		mov    %ah,data_9bc79
		movswl data_5ab80,%eax
		mov    %cl,data_9bc78
		shl    $0x4,%eax
		mov    %dx,data_9bc74
		sar    $0x8,%eax
		mov    $0x28,%dl
		mov    %ax,level__Worlds
		movswl data_5ad80,%eax
		mov    $0xa,%dh
		shl    $0x4,%eax
		mov    %dl,data_9bc7a
		sar    $0x8,%eax
		mov    %dh,data_9bc7b
		mov    %ax,data_9bc72
		cmp    $0x12,%bx
		jge    jump_252a7
		movw   $0x12,level__LoBoundaryy
	jump_252a7:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
load_map_level:	/* 0x252b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		mov    0x10(%esp),%bx
		call   clear_savegame
		mov    %bx,EXPORT_SYMBOL(current_levno)
		and    $0xffff,%ebx
		mov    $0xa,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ebx,%edx
		add    $0x30,%eax
		sar    $0x1f,%edx
		mov    %al,0x9(%esi)
		mov    %ebx,%eax
		idiv   %ecx
		add    $0x30,%edx
		mov    EXPORT_SYMBOL(DrawFlags),%ah
		mov    %dl,0xa(%esi)
		cmp    $0x2,%ah
		jne    jump_253a9
		mov    EXPORT_SYMBOL(VGABuffer),%edx
		add    $0x0c80,%edx
		mov    EXPORT_SYMBOL(WScreen),%ebx
		push   $EXPORT_SYMBOL(level__Seed)
		lea    0x1f408(%ebx),%eax
		mov    %edx,EXPORT_SYMBOL(VScreen)
		push   %esi
		add    $0x1f418,%ebx
		mov    %eax,UScreen
		mov    %ebx,BScreen
		call   LbFileReadRNC
		mov    EXPORT_SYMBOL(level__MapNumber),%dx
		add    $0x8,%esp
		test   %dx,%dx
		jne    jump_2534a
		movw   $0x1,EXPORT_SYMBOL(level__MapNumber)
	jump_2534a:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(level__MapNumber),%bx
		mov    $0xa,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    $0x30,%eax
		mov    %ebx,%edx
		mov    %al,data_53f3c
		sar    $0x1f,%edx
		mov    %ebx,%eax
		idiv   %ecx
		add    $0x30,%edx
		push   $mission_load_files
		mov    %dl,data_53f3d
		call   ac_LbDataLoadAll
		mov    EXPORT_SYMBOL(SoundAble),%dl
		add    $0x4,%esp
		test   %dl,%dl
		je     jump_253a4
		push   $sound_load_files
		call   ac_LbDataLoadAll
		add    $0x4,%esp
		call   sound_bank_setup
	jump_253a4:
		call   init_hires_blocks
	jump_253a9:
		cmpb   $0x4,EXPORT_SYMBOL(DrawFlags)
		jne    jump_253e2
		push   $EXPORT_SYMBOL(level__Seed)
		push   %esi
		call   LbFileReadRNC
		mov    EXPORT_SYMBOL(level__MapNumber),%cx
		add    $0x8,%esp
		test   %cx,%cx
		jne    jump_253d5
		movw   $0x1,EXPORT_SYMBOL(level__MapNumber)
	jump_253d5:
		push   $unkn1_empty_load_files
		call   ac_LbDataLoadAll
		add    $0x4,%esp
	jump_253e2:
		call   init_level_data
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_effect:	/* 0x253f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $level__Effects,%ebx
		cmp    $level__Commands,%ebx
		jae    jump_25459
	jump_253fe:
		cmpb   $0x0,0x18(%ebx)
		jne    jump_2544e
		mov    0x8(%esp),%eax
		mov    %ax,0x4(%ebx)
		mov    0xc(%esp),%eax
		mov    %ax,0x6(%ebx)
		mov    0x10(%esp),%eax
		mov    %ax,0x8(%ebx)
		movswl 0x8(%ebx),%eax
		push   %eax
		movswl 0x6(%ebx),%eax
		movb   $0x3,0x18(%ebx)
		push   %eax
		movswl 0x4(%ebx),%eax
		movw   $0x0,0xa(%ebx)
		push   %eax
		movw   $0x0,0x10(%ebx)
		push   %ebx
		movw   $0xffff,0x12(%ebx)
		call   move_on_mapwho
		add    $0x10,%esp
		mov    %ebx,%eax
		pop    %ebx
		ret
	jump_2544e:
		add    $0x1e,%ebx
		cmp    $level__Commands,%ebx
		jb     jump_253fe
	jump_25459:
		xor    %eax,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_weapon:	/* 0x25460 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $level__Weapons,%ebx
		cmp    $level__Effects,%ebx
		jae    jump_254c7
	jump_2546e:
		mov    0x18(%ebx),%ah
		test   %ah,%ah
		je     jump_2547a
		cmp    $0x6,%ah
		jl     jump_254bc
	jump_2547a:
		push   $0x24
		push   $0x0
		push   %ebx
		call   ac_LbMemorySet
		add    $0xc,%esp
		mov    0x8(%esp),%eax
		mov    %ax,0x4(%ebx)
		mov    0xc(%esp),%eax
		mov    %ax,0x6(%ebx)
		mov    0x10(%esp),%eax
		mov    %ax,0x8(%ebx)
		cwtl
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		push   %ebx
		movb   $0x4,0x18(%ebx)
		call   move_on_mapwho
		add    $0x10,%esp
		mov    %ebx,%eax
		pop    %ebx
		ret
	jump_254bc:
		add    $0x24,%ebx
		cmp    $level__Effects,%ebx
		jb     jump_2546e
	jump_254c7:
		xor    %eax,%eax
		pop    %ebx
		ret
new_weapon:	/* 0x254d0 */
		push   %ebx
		mov    $level__Weapons,%ebx
		cmp    $level__Effects,%ebx
		jae    jump_25506
	jump_254de:
		mov    0x18(%ebx),%ah
		test   %ah,%ah
		je     jump_254ea
		cmp    $0x6,%ah
		jl     jump_254fb
	jump_254ea:
		push   $0x24
		push   $0x0
		push   %ebx
		call   ac_LbMemorySet
		add    $0xc,%esp
		mov    %ebx,%eax
		pop    %ebx
		ret
	jump_254fb:
		add    $0x24,%ebx
		cmp    $level__Effects,%ebx
		jb     jump_254de
	jump_25506:
		xor    %eax,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
NetworkPlayersCount:	/* 0x25510 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    Network__NumberOfSlots,%si
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		jmp    jump_25540
	jump_2551f:
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lgs    NetUserNcb(,%eax,2),%eax
		cmpb   $0x0,%gs:0x2(%eax)
		je     jump_2553f
		cmpb   $0xff,%gs:0x31(%eax)
		je     jump_2553f
		inc    %ecx
	jump_2553f:
		inc    %ebx
	jump_25540:
		xor    %edx,%edx
		movswl %si,%eax
		mov    %bx,%dx
		cmp    %eax,%edx
		jl     jump_2551f
		mov    %ecx,%eax
		mov    %si,Network__NumberOfSlots
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
single_play:	/* 0x25560 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %ebx,%ebx
	jump_25563:
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		call   process_action
		inc    %ebx
		add    $0x4,%esp
		cmp    $0x8,%bx
		jb     jump_25563
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
multi_play:	/* 0x25580 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x100,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(level__Seed),%dx
		mov    %dx,data_605da(,%eax,2)
		mov    level__PersonCount_UNSURE,%dx
		mov    %dx,data_605dc(,%eax,2)
		mov    data_605de(,%eax,2),%dx
		inc    %edx
		xor    %edi,%edi
		mov    %dx,data_605de(,%eax,2)
		call   NetworkPlayersCount
		cmp    $0x1,%ax
		jne    jump_255ed
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		movb   $0x2,data_605e1(,%eax,2)
	jump_255ed:
		call   ExchangeNetwork_Packet
		xor    %esi,%esi
		jmp    jump_25600
	jump_255f6:
		push   %eax
		call   process_action
		inc    %esi
		add    $0x4,%esp
	jump_25600:
		xor    %eax,%eax
		movswl Network__NumberOfSlots,%edx
		mov    %si,%ax
		cmp    %edx,%eax
		jl     jump_255f6
		mov    $0x6,%esi
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x43
		jne    jump_25627
		test   %di,%di
		je     jump_256e2
	jump_25627:
		push   $0x5
		push   $0xc
		movswl %si,%eax
		push   %eax
		push   $0x0
		mov    h_font,%edx
		push   %edx
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		push   %eax
		xor    %edi,%edi
		add    $0xc,%esi
		call   func_4f3d2
		add    $0x18,%esp
		jmp    jump_256c9
	jump_25652:
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lgs    NetUserNcb(,%eax,2),%eax
		cmpb   $0x0,%gs:0x2(%eax)
		je     jump_256c8
		cmpb   $0xff,%gs:0x31(%eax)
		je     jump_256c8
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		mov    data_605de(%eax),%bx
		mov    data_605da(%eax),%ax
		push   %ebx
		and    $0xffff,%eax
		push   %eax
		push   %edx
		push   $a01dPlayer05dSe
		lea    0x10(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x14,%esp
		push   $0xc
		movswl %si,%eax
		push   %eax
		push   $0x8c
		mov    h_font,%ebx
		push   %ebx
		lea    0x10(%esp),%eax
		push   %eax
		add    $0xc,%esi
		call   func_4f420
		add    $0x14,%esp
	jump_256c8:
		inc    %edi
	jump_256c9:
		xor    %edx,%edx
		movswl Network__NumberOfSlots,%eax
		mov    %di,%dx
		cmp    %eax,%edx
		jl     jump_25652
		call   set_all_changes
	jump_256e2:
		add    $0x100,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
initialise_player:	/* 0x256f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $0x1,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(is_multiplayer_game),%ah
		mov    %dx,EXPORT_SYMBOL(Network__Slot)
		mov    %cx,Network__NumberOfSlots
		cmp    $0x1,%ah
		jne    jump_25776
		call   __NETCheckBios__
		call   NetworkCmdlineSetup
		cmp    $0xfffe,%ax
		jb     jump_25747
		jbe    jump_25730
		cmp    $0xffff,%ax
		jne    jump_25747
		push   $aLoginHasFailed
		jmp    jump_25735
	jump_25730:
		push   $aLoginAborted
	jump_25735:
		call   ac_printf
		add    $0x4,%esp
		push   $0x1
		call   ac_exit
		add    $0x4,%esp
	jump_25747:
		xor    %eax,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%ax
		push   %eax
		call   set_network_player
		add    $0x8,%esp
		call   StartNetwork
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		push   %eax
		xor    %ebx,%ebx
		call   ExchangeNetwork_PlayerInfo
		add    $0x4,%esp
		mov    %ebx,%eax
		pop    %ebx
		ret
	jump_25776:
		push   $0x0
		xor    %dl,%dl
		push   $0x0
		mov    %dl,EXPORT_SYMBOL(is_multiplayer_game)
		call   set_network_player
		add    $0x8,%esp
		mov    %ebx,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_network_player:	/* 0x25790 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		xor    %esi,%esi
		mov    0xc(%esp),%si
		mov    %esi,%ebx
		shl    $0x5,%ebx
		add    %esi,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %esi,%ebx
		lea    0x0(,%ebx,8),%ebx
		mov    $EXPORT_SYMBOL(players),%eax
		sub    %esi,%ebx
		push   $0x417
		add    %ebx,%eax
		push   %eax
		push   $EXPORT_SYMBOL(players)
		call   LbMemoryCopy
		lea    0x0(,%esi,8),%eax
		sub    %esi,%eax
		xor    %edx,%edx
		mov    %dx,packets(,%eax,2)
		mov    %dx,data_605d6(,%eax,2)
		mov    %dx,data_605d8(,%eax,2)
		mov    %dx,data_605de(,%eax,2)
		add    $0xc,%esp
		mov    %dx,data_605da(,%eax,2)
		mov    0xc(%esp),%dl
		mov    %dl,data_605e0(,%eax,2)
		movb   $0x1,data_605e1(,%eax,2)
		mov    0xc(%esp),%al
		shl    $0x3,%al
		mov    %al,data_5e551(%ebx)
		mov    EXPORT_SYMBOL(current_levno),%ax
		mov    %ax,data_5e553(%ebx)
		pop    %esi
		pop    %ebx
		ret

jpt_25910:	/* 0x25830 */
		.long   func_25918
		.long   jump_258fc
		.long   func_25918
		.long   func_25918
		.long   func_25918
		.long   func_25918
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   func_25918
		.long   func_25918
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   func_25918
		.long   jump_258fc
		.long   jump_258fc
		.long   func_25918
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_258fc
		.long   jump_2591d
		.long   jump_258fc
		.long   func_25918
		.long   jump_258fc
		.long   jump_2591d
		.long   jump_2591d
		.long   jump_2591d
		.long   jump_258fc
		.long   func_25918

/*----------------------------------------------------------------*/
give_person_new_command:	/* 0x258f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%edx
		cmpw   $0x0,0x20(%edx)
		je     jump_25900
jump_258fc:
		xor    %eax,%eax
		pop    %ebx
		ret
	jump_25900:
		mov    0x19(%edx),%bl
		cmp    $0x2c,%bl
		ja     jump_2591d
		mov    %bl,%dl
		and    $0xff,%edx
		jmp    *%cs:jpt_25910(,%edx,4)


func_25918:
		mov    $0x1,%eax
jump_2591d:
		pop    %ebx
		ret

jpt_25A67:	/* 0x25920 */
		.long   def_25A67
		.long   func_25a6f
		.long   func_25b45
		.long   func_25c00
		.long   func_25d74
		.long   func_25e1f
		.long   func_25ef5
		.long   func_25f0d
		.long   func_2601f
		.long   func_261c0
		.long   func_2627c
		.long   func_262e0
		.long   func_26592
		.long   func_26616
		.long   func_2669a
		.long   func_2671e
		.long   func_267be
		.long   func_26c98
		.long   func_26dfc
		.long   func_26e4a
		.long   func_264c8
		.long   def_25A67
		.long   func_26d37
		.long   func_26e94
		.long   func_25bbb
		.long   func_26362
		.long   def_25A67
		.long   def_25A67
		.long   def_25A67
		.long   def_25A67
		.long   def_25A67
		.long   def_25A67
		.long   def_25A67
		.long   func_25a6f
		.long   func_25b45
		.long   func_25c58
		.long   func_25dbc
		.long   func_25e7e
		.long   func_25ef5
		.long   func_25f53
		.long   func_260db
		.long   func_26211
		.long   func_2627c
		.long   func_26315
		.long   func_265c7
		.long   func_2664b
		.long   func_266cf
		.long   func_26761
		.long   func_26a18
		.long   func_26cd9
		.long   func_26dfc
		.long   func_26e4a
		.long   func_26524
		.long   def_25A67
		.long   func_26d80
		.long   func_26e94
		.long   func_25bbb
		.long   func_2640e
		.long   func_25cd6


/*----------------------------------------------------------------*/
process_action:	/* 0x25a10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    0x48(%esp),%edi
		xor    %ebx,%ebx
		mov    %di,%bx
		lea    0x0(,%ebx,8),%eax
		sub    %ebx,%eax
		mov    $packets,%esi
		add    %eax,%eax
		add    %eax,%esi
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		mov    $EXPORT_SYMBOL(players),%edx
		sub    %ebx,%eax
		add    %eax,%edx
		mov    0xd(%esi),%ah
		mov    %edx,0x8(%esp)
		cmp    $0x3a,%ah
		ja     def_25A67
		xor    %eax,%eax
		mov    0xd(%esi),%al
		jmp    *%cs:jpt_25A67(,%eax,4)


/*----------------------------------------------------------------*/
func_25a6f:
/*----------------------------------------------------------------*/
		cmpw   $0x1,Network__NumberOfSlots
		jle    jump_25afa
		xor    %edx,%edx
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    %di,%dx
		cmp    %eax,%edx
		jne    jump_25b20
		xor    %eax,%eax
		mov    data_5e553,%ax
		push   %eax
		push   $level_fname
		xor    %ebx,%ebx
		call   load_map_level
		jmp    jump_25ab1
	jump_25aa8:
		push   $0x2
		push   %eax
		inc    %ebx
		call   init_players_people
	jump_25ab1:
		add    $0x8,%esp
		xor    %eax,%eax
		movswl Network__NumberOfSlots,%edx
		mov    %bx,%ax
		cmp    %edx,%eax
		jl     jump_25aa8
		xor    %ebx,%ebx
		jmp    jump_25ae8
	jump_25ac8:
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %bl,data_5e4ab(%eax)
		inc    %ebx
	jump_25ae8:
		xor    %edx,%edx
		movswl Network__NumberOfSlots,%eax
		mov    %bx,%dx
		cmp    %eax,%edx
		jl     jump_25ac8
		jmp    jump_25b20
	jump_25afa:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(current_levno),%ax
		push   %eax
		push   $level_fname
		call   load_map_level
		add    $0x8,%esp
		xor    %eax,%eax
		push   $0x2
		mov    %di,%ax
		push   %eax
		call   init_players_people
		add    $0x8,%esp
	jump_25b20:
		xor    %edx,%edx
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    %di,%dx
		cmp    %eax,%edx
		jne    def_25A67
		call   setup_panel
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25b45:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %di,%ax
		cmp    %eax,%edx
		jne    jump_25b6f
		mov    data_60afc,%bh
		or     $0x8,%bh
		mov    %bh,%cl
		mov    %bh,data_60afc
		and    $0xfe,%cl
		mov    %cl,data_60afc
	jump_25b6f:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     def_25A67
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		call   StopNetwork
		xor    %edi,%edi
		mov    $0xa,%eax
		add    $0x4,%esp
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_25ba0:
		mov    0x4(%esp),%edx
		add    %eax,%edx
		add    $0xa,%edi
		mov    %edx,0x4(%esp)
		cmp    $0x186a0,%edi
		jge    def_25A67
		jmp    jump_25ba0


/*----------------------------------------------------------------*/
func_25bbb:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		movsbl 0xb6(%eax),%eax
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25bf0
		movb   $0x0,0x19(%ebx)
	jump_25bf0:
		movb   $0x0,0x58(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25c00:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25c31
		movb   $0x2,0x19(%ebx)
	jump_25c31:
		movb   $0x2,0x58(%ebx)
		mov    (%esi),%ax
		mov    %ax,0x2e(%ebx)
		mov    0x2(%esi),%ax
		mov    %ax,0x30(%ebx)
		mov    0x4(%esi),%ax
		mov    %ax,0x32(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25c58:
/*----------------------------------------------------------------*/
		mov    $level__People,%ebp
		xor    %edi,%edi
	jump_25c5f:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    %edi,%eax
		imul   $0x5c,%eax,%ebx
		add    %ebp,%ebx
		testb  $0x4,0x1d(%ebx)
		je     jump_25cca
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25c8a
		movb   $0x2,0x19(%ebx)
	jump_25c8a:
		movb   $0x2,0x58(%ebx)
		mov    (%esi),%ax
		xor    %edx,%edx
		xor    %al,%al
		mov    %ax,%dx
		mov    %edi,%eax
		sar    $1,%eax
		shl    $0x7,%eax
		add    %edx,%eax
		add    $0x40,%eax
		mov    %ax,0x2e(%ebx)
		mov    %edi,%eax
		mov    0x2(%esi),%dx
		and    $0x1,%al
		xor    %ah,%ah
		xor    %dl,%dl
		shl    $0x7,%eax
		add    %edx,%eax
		add    $0x40,%eax
		mov    %ax,0x30(%ebx)
		mov    0x4(%esi),%ax
		mov    %ax,0x32(%ebx)
	jump_25cca:
		inc    %edi
		cmp    $0x4,%edi
		jge    def_25A67
		jmp    jump_25c5f


/*----------------------------------------------------------------*/
func_25cd6:
/*----------------------------------------------------------------*/
		xor    %edi,%edi
	jump_25cd8:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    %edi,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		testb  $0x4,0x1d(%ebx)
		je     jump_25d65
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25d08
		movb   $0x2,0x19(%ebx)
	jump_25d08:
		mov    %edi,%eax
		movb   $0x2,0x58(%ebx)
		sar    $1,%eax
		mov    (%esi),%cx
		lea    0x0(,%eax,2),%edx
		xor    %cl,%cl
		dec    %edx
		movzwl %cx,%ebp
		shl    $0x9,%edx
		shl    $0x7,%eax
		add    %ebp,%edx
		add    %edx,%eax
		add    $0x40,%eax
		mov    %ax,0x2e(%ebx)
		mov    %edi,%eax
		and    $0x1,%al
		xor    %ah,%ah
		mov    %eax,%edx
		add    %eax,%edx
		dec    %edx
		shl    $0x9,%edx
		mov    %edx,0x2c(%esp)
		mov    0x2(%esi),%dx
		mov    0x2c(%esp),%ecx
		xor    %dl,%dl
		shl    $0x7,%eax
		add    %ecx,%edx
		add    %edx,%eax
		add    $0x40,%eax
		mov    %ax,0x30(%ebx)
		mov    0x4(%esi),%ax
		mov    %ax,0x32(%ebx)
	jump_25d65:
		inc    %edi
		cmp    $0x4,%edi
		jge    def_25A67
		jmp    jump_25cd8


/*----------------------------------------------------------------*/
func_25d74:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25da5
		movb   $0x4,0x19(%ebx)
	jump_25da5:
		movb   $0x4,0x58(%ebx)
		mov    (%esi),%ax
		mov    %ax,0x2c(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25dbc:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edi
		add    %eax,%edi
		mov    $0x5c,%ebp
		mov    $0x4,%ebx
		jmp    jump_25dfe
	jump_25dda:
		testb  $0x4,0x1d(%edi)
		je     jump_25dfb
		push   %edi
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25df1
		mov    %bl,0x19(%edi)
	jump_25df1:
		mov    %bl,0x58(%edi)
		mov    (%esi),%ax
		mov    %ax,0x2c(%edi)
	jump_25dfb:
		add    $0x5c,%edi
	jump_25dfe:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   %ebp,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		jae    def_25A67
		jmp    jump_25dda


/*----------------------------------------------------------------*/
func_25e1f:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25e50
		movb   $0x5,0x19(%ebx)
	jump_25e50:
		push   %ebx
		call   count_weapons
		add    $0x4,%esp
		cmp    $0x8,%ax
		jge    jump_25e65
		movb   $0x9,0x58(%ebx)
		jmp    jump_25e6b
	jump_25e65:
		mov    0x19(%ebx),%al
		mov    %al,0x58(%ebx)
	jump_25e6b:
		mov    (%esi),%ax
		mov    %ax,0x2c(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25e7e:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edi
		mov    $level__People,%ebp
		add    %eax,%edi
		mov    $0x5c,%ebx
		jmp    jump_25eac
	jump_25e9c:
		mov    0x19(%edi),%al
		mov    %al,0x58(%edi)
	jump_25ea2:
		mov    (%esi),%ax
		mov    %ax,0x2c(%edi)
	jump_25ea9:
		add    $0x5c,%edi
	jump_25eac:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   %ebx,%eax
		add    %ebp,%eax
		cmp    %eax,%edi
		jae    def_25A67
		testb  $0x4,0x1d(%edi)
		je     jump_25ea9
		push   %edi
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_25ee0
		movb   $0x5,0x19(%edi)
	jump_25ee0:
		push   %edi
		call   count_weapons
		add    $0x4,%esp
		cmp    $0x8,%ax
		jge    jump_25e9c
		movb   $0x9,0x58(%edi)
		jmp    jump_25ea2


/*----------------------------------------------------------------*/
func_25ef5:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%edx
		mov    (%esi),%al
		mov    %al,0xb6(%edx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25f0d:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    $level__things_base,%ebx
		mov    (%esi),%dx
		add    %edx,%ebx
		mov    $level__things_base,%edx
		movb   $0x0,0x46(%eax)
		sub    %edx,%ebx
		mov    %bx,0x44(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_25f53:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		movsbl 0xb6(%edx),%eax
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		xor    %ebx,%ebx
		mov    (%esi),%bx
		mov    $level__People,%edi
		add    $level__things_base,%ebx
		add    %eax,%edi
		mov    %ebx,%eax
		movb   $0x0,0x46(%edi)
		sub    $level__things_base,%eax
		mov    0x8(%esp),%edx
		mov    %ax,0x44(%edi)
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edi
		add    %eax,%edi
		mov    $0x5c,%ebp
		jmp    jump_25ffd
	jump_25fa9:
		testb  $0x4,0x1d(%edi)
		je     jump_25ffa
		mov    0x8(%esp),%edx
		movsbl 0xb6(%edx),%edx
		add    %edx,%eax
		imul   %ebp,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		je     jump_25ffa
		xor    %eax,%eax
		mov    0x19(%ebx),%al
		push   %eax
		push   $0x0
		push   %edi
		call   choose_best_weapon_or_same
		and    $0xffff,%eax
		add    $level__things_base,%eax
		mov    0x19(%ebx),%dh
		mov    0x19(%eax),%dl
		add    $0xc,%esp
		cmp    %dh,%dl
		jne    jump_25ff6
		sub    $level__things_base,%eax
		mov    %ax,0x44(%edi)
	jump_25ff6:
		movb   $0x0,0x46(%edi)
	jump_25ffa:
		add    $0x5c,%edi
	jump_25ffd:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		lea    0x4(%eax),%edx
		imul   %ebp,%edx
		add    $level__People,%edx
		cmp    %edx,%edi
		jae    def_25A67
		jmp    jump_25fa9


/*----------------------------------------------------------------*/
func_2601f:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		mov    0x44(%ebx),%dx
		test   %dx,%dx
		je     jump_2607f
		xor    %eax,%eax
		mov    $level__things_base,%edi
		mov    %dx,%ax
		push   %ebx
		add    %eax,%edi
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2607f
		cmpw   $0x0,0x14(%edi)
		jl     jump_2607f
		movswl 0x4(%esi),%eax
		push   %eax
		movswl 0x2(%esi),%eax
		push   %eax
		movswl (%esi),%eax
		push   %eax
		push   %ebx
		call   person_use_weapon
		add    $0x10,%esp
	jump_2607f:
		mov    0x1c(%ebx),%ax
		and    $0x1002,%eax
		cmp    $0x2,%ax
		jne    def_25A67
		mov    $level__People,%edi
		mov    last_person,%ebp
		sub    $level__things_base,%ebx
		cmp    %edi,%ebp
		jbe    def_25A67
	jump_260ab:
		cmp    0x20(%edi),%bx
		jne    jump_260c8
		movswl 0x4(%esi),%eax
		push   %eax
		movswl 0x2(%esi),%eax
		push   %eax
		movswl (%esi),%eax
		push   %eax
		push   %edi
		call   person_use_weapon
		add    $0x10,%esp
	jump_260c8:
		mov    last_person,%ebp
		add    $0x5c,%edi
		cmp    %ebp,%edi
		jae    def_25A67
		jmp    jump_260ab


/*----------------------------------------------------------------*/
func_260db:
/*----------------------------------------------------------------*/
		movzbl 0xb5(%edx),%ebp
		imul   $0x5c,%ebp,%ebp
		mov    $level__things_base,%eax
		neg    %eax
		add    $level__People,%ebp
		add    %ebp,%eax
		mov    %eax,0x18(%esp)
		jmp    jump_2619c
	jump_260fd:
		cmpw   $0x0,0x44(%ebp)
		je     jump_26143
		xor    %eax,%eax
		mov    0x44(%ebp),%ax
		mov    0x1d(%ebp),%ch
		add    $level__things_base,%eax
		test   $0x4,%ch
		je     jump_26143
		cmpw   $0x0,0x14(%eax)
		jl     jump_26143
		push   %ebp
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_26143
		movswl 0x4(%esi),%eax
		push   %eax
		movswl 0x2(%esi),%eax
		push   %eax
		movswl (%esi),%eax
		push   %eax
		push   %ebp
		call   person_use_weapon
		add    $0x10,%esp
	jump_26143:
		mov    0x1c(%ebp),%ax
		and    $0x1002,%eax
		cmp    $0x2,%ax
		jne    jump_2618e
		mov    $level__People,%ebx
		mov    last_person,%eax
		mov    0x18(%esp),%edi
		cmp    %ebx,%eax
		jbe    jump_2618e
	jump_26164:
		cmp    0x20(%ebx),%di
		jne    jump_26181
		movswl 0x4(%esi),%eax
		push   %eax
		movswl 0x2(%esi),%eax
		push   %eax
		movswl (%esi),%eax
		push   %eax
		push   %ebx
		call   person_use_weapon
		add    $0x10,%esp
	jump_26181:
		mov    last_person,%edx
		add    $0x5c,%ebx
		cmp    %edx,%ebx
		jb     jump_26164
	jump_2618e:
		mov    0x18(%esp),%ebx
		add    $0x5c,%ebx
		add    $0x5c,%ebp
		mov    %ebx,0x18(%esp)
	jump_2619c:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebp
		jae    def_25A67
		jmp    jump_260fd


/*----------------------------------------------------------------*/
func_261c0:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_261f1
		movb   $0x5,0x19(%ebx)
	jump_261f1:
		movb   $0x6,0x58(%ebx)
		mov    (%esi),%ax
		push   %ebx
		mov    %ax,0x2c(%ebx)
		call   which_frame_person
		add    $0x4,%esp
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26211:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edi
		mov    $level__People,%ebp
		add    %eax,%edi
		mov    $0x5c,%ebx
		jmp    jump_2625e
	jump_2622f:
		testb  $0x4,0x1d(%edi)
		je     jump_2625b
		push   %edi
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_26247
		movb   $0x5,0x19(%edi)
	jump_26247:
		movb   $0x6,0x58(%edi)
		mov    (%esi),%ax
		push   %edi
		mov    %ax,0x2c(%edi)
		call   which_frame_person
		add    $0x4,%esp
	jump_2625b:
		add    $0x5c,%edi
	jump_2625e:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   %ebx,%eax
		add    %ebp,%eax
		cmp    %eax,%edi
		jae    def_25A67
		jmp    jump_2622f


/*----------------------------------------------------------------*/
func_2627c:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%edx
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		push   %ebx
		call   give_person_new_command
		add    $0x4,%esp
		test   %ax,%ax
		je     def_25A67
		mov    (%esi),%ax
		movb   $0xa,0x19(%ebx)
		movb   $0xa,0x58(%ebx)
		mov    %ax,0x44(%ebx)
		mov    (%esi),%ax
		movb   $0x0,0x46(%ebx)
		push   %ebx
		mov    %ax,0x2c(%ebx)
		call   which_frame_person
		add    $0x4,%esp
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_262e0:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		movsbl 0xb6(%edx),%eax
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edx
		movw   $0x0,0x44(%edx,%eax,1)
		movb   $0x0,0x46(%edx,%eax,1)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26315:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    $level__People,%eax
		mov    $0x5c,%edi
		jmp    jump_26344
	jump_26331:
		testb  $0x4,0x1d(%eax)
		je     jump_26341
		movw   $0x0,0x44(%eax)
		movb   $0x0,0x46(%eax)
	jump_26341:
		add    $0x5c,%eax
	jump_26344:
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    $0x4,%edx
		imul   %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jae    def_25A67
		jmp    jump_26331


/*----------------------------------------------------------------*/
func_26362:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		movsbl 0xb6(%edx),%edx
		mov    0xb5(%ebx),%al
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		cmpw   $0x0,0x24(%ebx)
		je     def_25A67
		movswl 0x6(%ebx),%edx
		mov    $0x6000,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%ebx),%edx
		and    $0xff00,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%edi
		add    %edi,%eax
		lea    0x0(,%eax,4),%edi
		mov    data_55358,%eax
		movswl 0x8(%ebx),%edx
		add    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%edi),%eax
		cmpb   $0x2,(%eax)
		je     def_25A67
		movb   $0x7,0x19(%ebx)
		mov    0xa(%ebx),%dh
		movb   $0x7,0x58(%ebx)
		and    $0xf7,%dh
		mov    %dh,0xa(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2640e:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edi
		mov    $level__People,%ecx
		add    %eax,%edi
		mov    $0x100,%ebp
		jmp    jump_264a7
	jump_2642f:
		testb  $0x4,0x1d(%edi)
		je     jump_264a4
		cmpw   $0x0,0x24(%edi)
		je     jump_264a4
		movswl 0x6(%edi),%edx
		mov    $0x6000,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		movswl 0x4(%edi),%edx
		and    $0xff00,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		shl    $0x7,%ebx
		add    %ebx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%ebx
		movswl 0x8(%edi),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ebx),%eax
		cmpb   $0x2,(%eax)
		je     jump_264a4
		movb   $0x7,0x19(%edi)
		mov    0xa(%edi),%dh
		movb   $0x7,0x58(%edi)
		and    $0xf7,%dh
		mov    %dh,0xa(%edi)
	jump_264a4:
		add    $0x5c,%edi
	jump_264a7:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    %ecx,%eax
		cmp    %eax,%edi
		jae    def_25A67
		jmp    jump_2642f


/*----------------------------------------------------------------*/
func_264c8:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		movsbl 0xb6(%edx),%eax
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		testb  $0x1,0xb(%eax)
		jne    def_25A67
		cmpw   $0xffff,(%esi)
		je     jump_264fa
		mov    (%esi),%dl
		mov    %dl,0x49(%eax)
	jump_264fa:
		cmpw   $0xffff,0x2(%esi)
		je     jump_26507
		mov    0x2(%esi),%dl
		mov    %dl,0x4d(%eax)
	jump_26507:
		cmpw   $0xffff,0x4(%esi)
		je     def_25A67
		mov    0x4(%esi),%dl
		mov    %dl,0x51(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26524:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    $level__People,%eax
		mov    $0x5c,%edi
		jmp    jump_26574
	jump_26540:
		testb  $0x4,0x1d(%eax)
		je     jump_26571
		testb  $0x1,0xb(%eax)
		jne    jump_26571
		cmpw   $0xffff,(%esi)
		je     jump_26557
		mov    (%esi),%dl
		mov    %dl,0x49(%eax)
	jump_26557:
		cmpw   $0xffff,0x2(%esi)
		je     jump_26564
		mov    0x2(%esi),%dl
		mov    %dl,0x4d(%eax)
	jump_26564:
		cmpw   $0xffff,0x4(%esi)
		je     jump_26571
		mov    0x4(%esi),%dl
		mov    %dl,0x51(%eax)
	jump_26571:
		add    $0x5c,%eax
	jump_26574:
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    $0x4,%edx
		imul   %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jae    def_25A67
		jmp    jump_26540


/*----------------------------------------------------------------*/
func_26592:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		xor    %edx,%edx
		mov    (%esi),%dx
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edx
		add    %edx,%eax
		testb  $0x1,0xb(%eax)
		jne    def_25A67
		mov    0x2(%esi),%dl
		mov    %dl,0x49(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_265c7:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    $level__People,%eax
		mov    $0x5c,%edi
		mov    0x8(%esp),%ebx
		jmp    jump_265fc
	jump_265e7:
		testb  $0x4,0x1d(%eax)
		je     jump_265f9
		testb  $0x1,0xb(%eax)
		jne    jump_265f9
		mov    0x2(%esi),%dl
		mov    %dl,0x49(%eax)
	jump_265f9:
		add    $0x5c,%eax
	jump_265fc:
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    $0x4,%edx
		imul   %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jae    def_25A67
		jmp    jump_265e7


/*----------------------------------------------------------------*/
func_26616:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		xor    %edx,%edx
		mov    (%esi),%dx
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edx
		add    %edx,%eax
		testb  $0x1,0xb(%eax)
		jne    def_25A67
		mov    0x2(%esi),%dl
		mov    %dl,0x4d(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2664b:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    $level__People,%eax
		mov    $0x5c,%edi
		mov    0x8(%esp),%ebx
		jmp    jump_26680
	jump_2666b:
		testb  $0x4,0x1d(%eax)
		je     jump_2667d
		testb  $0x1,0xb(%eax)
		jne    jump_2667d
		mov    0x2(%esi),%dl
		mov    %dl,0x4d(%eax)
	jump_2667d:
		add    $0x5c,%eax
	jump_26680:
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    $0x4,%edx
		imul   %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jae    def_25A67
		jmp    jump_2666b


/*----------------------------------------------------------------*/
func_2669a:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		xor    %edx,%edx
		mov    (%esi),%dx
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edx
		add    %edx,%eax
		testb  $0x1,0xb(%eax)
		jne    def_25A67
		mov    0x2(%esi),%dl
		mov    %dl,0x51(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_266cf:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    $level__People,%eax
		mov    $0x5c,%edi
		jmp    jump_26700
	jump_266eb:
		testb  $0x4,0x1d(%eax)
		je     jump_266fd
		testb  $0x1,0xb(%eax)
		jne    jump_266fd
		mov    0x2(%esi),%dl
		mov    %dl,0x51(%eax)
	jump_266fd:
		add    $0x5c,%eax
	jump_26700:
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    $0x4,%edx
		imul   %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jae    def_25A67
		jmp    jump_266eb


/*----------------------------------------------------------------*/
func_2671e:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		movsbl 0xb6(%edx),%eax
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%edx
		mov    $level__People,%eax
		add    %edx,%eax
		testb  $0x8,0xa(%eax)
		jne    def_25A67
		movb   $0x1c,0x19(%eax)
		movb   $0x1c,0x58(%eax)
		movw   $0xffff,0x42(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26761:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebp
		add    $level__People,%eax
		mov    $0x5c,%edi
		mov    0x8(%esp),%ebx
		jmp    jump_267a4
	jump_26781:
		testb  $0x4,0x1d(%eax)
		je     jump_267a1
		testb  $0x8,0xa(%eax)
		jne    jump_267a1
		cmpb   $0x0,0x19(%eax)
		jne    jump_267a1
		movb   $0x1c,0x19(%eax)
		movb   $0x1c,0x58(%eax)
		movw   $0xffff,0x42(%eax)
	jump_267a1:
		add    $0x5c,%eax
	jump_267a4:
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    $0x4,%edx
		imul   %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jae    def_25A67
		jmp    jump_26781


/*----------------------------------------------------------------*/
func_267be:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		movsbl 0xb6(%edx),%eax
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		testb  $0x1,0xb(%ebx)
		jne    def_25A67
		mov    0x3c(%ebx),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x5,%eax
		mov    %eax,0x4(%esp)
		test   %eax,%eax
		je     def_25A67
		cmpw   $0x0,0x14(%ebx)
		jl     def_25A67
		mov    0x24(%ebx),%ax
		test   %ax,%ax
		je     jump_26838
	jump_26817:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_2682f
		movw   $0xfff6,0x14(%eax)
		jmp    jump_26838
	jump_2682f:
		mov    0x1e(%eax),%ax
		test   %ax,%ax
		jne    jump_26817
	jump_26838:
		mov    %ebx,%eax
		sub    $level__things_base,%eax
		mov    %eax,0x10(%esp)
		mov    0x4(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x24(%esp)
		mov    0x4(%esp),%eax
		movw   $0xfff6,0x14(%ebx)
		add    %eax,%eax
		xor    %edi,%edi
		mov    %eax,0x14(%esp)
		test   %eax,%eax
		jle    def_25A67
	jump_26868:
		push   $0x7f
		push   $0x16
		call   SetBFSampleStatus
		add    $0x8,%esp
		push   $0xff
		call   random
		mov    %ax,0x30(%esp)
		add    $0x4,%esp
		mov    0x10(%esp),%eax
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		push   $0x2c
		mov    0x24(%esp),%ax
		push   %eax
		push   $0x9
		call   random
		and    $0xffff,%eax
		add    $0x4,%esp
		inc    %eax
		push   %eax
		xor    %eax,%eax
		push   $0x0
		mov    0x3c(%esp),%al
		push   %eax
		movswl 0x8(%ebx),%eax
		add    $0x80,%eax
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		call   create_ammo_effect
		add    $0x20,%esp
		movswl 0x8(%ebx),%eax
		push   %eax
		push   $0xff
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		movzwl 0x28(%esp),%ebp
		movswl data_5ad60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x24(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		mov    0x20(%esp),%edx
		imul   %eax,%edx
		sar    $0x8,%edx
		movswl 0x6(%ebx),%eax
		add    %edx,%eax
		cwtl
		push   %eax
		push   $0xff
		call   random
		and    $0xffff,%eax
		add    $0x4,%esp
		movswl data_5ab60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x28(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		imul   0x24(%esp),%eax
		movswl 0x4(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_2696a
		mov    0x20(%esp),%edx
		movb   $0xa,0x19(%eax)
		mov    %dx,0x1c(%eax)
	jump_2696a:
		movswl 0x8(%ebx),%eax
		push   %eax
		push   $0xff
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		movzwl 0x28(%esp),%ebp
		movswl data_5ad60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x24(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		mov    0x20(%esp),%edx
		imul   %eax,%edx
		sar    $0x8,%edx
		movswl 0x6(%ebx),%eax
		add    %edx,%eax
		cwtl
		push   %eax
		push   $0xff
		call   random
		and    $0xffff,%eax
		add    $0x4,%esp
		movswl data_5ab60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x28(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		imul   0x24(%esp),%eax
		movswl 0x4(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_26a06
		mov    0x10(%esp),%edx
		movb   $0x7,0x19(%eax)
		mov    %dx,0x1c(%eax)
	jump_26a06:
		mov    0x14(%esp),%ebp
		inc    %edi
		cmp    %ebp,%edi
		jge    def_25A67
		jmp    jump_26868


/*----------------------------------------------------------------*/
func_26a18:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		jmp    jump_26c74
	jump_26a2f:
		testb  $0x4,0x1d(%ebx)
		je     jump_26c71
		testb  $0x1,0xb(%ebx)
		jne    jump_26c71
		mov    0x3c(%ebx),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x5,%eax
		mov    %eax,0x4(%esp)
		test   %eax,%eax
		je     jump_26c71
		cmpw   $0x0,0x14(%ebx)
		jl     jump_26c71
		mov    %ebx,%eax
		sub    $level__things_base,%eax
		mov    %eax,(%esp)
		mov    0x4(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x28(%esp)
		mov    0x4(%esp),%eax
		movw   $0xfff6,0x14(%ebx)
		add    %eax,%eax
		xor    %edi,%edi
		mov    %eax,0xc(%esp)
		test   %eax,%eax
		jle    jump_26c71
	jump_26a99:
		push   $0x7f
		push   $0x16
		call   SetBFSampleStatus
		add    $0x8,%esp
		push   $0xff
		call   random
		mov    %ax,0x30(%esp)
		add    $0x4,%esp
		mov    (%esp),%eax
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		push   $0x2c
		mov    0x34(%esp),%ax
		push   %eax
		push   $0x9
		call   random
		and    $0xffff,%eax
		add    $0x4,%esp
		inc    %eax
		push   %eax
		movzbl 0x38(%esp),%ebp
		push   $0x0
		movswl 0x8(%ebx),%eax
		push   %ebp
		add    $0x80,%eax
		movswl data_5ad60(,%ebp,2),%edx
		push   %eax
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x5,%eax
		movswl 0x6(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		movswl data_5ab60(,%ebp,2),%ebp
		push   %eax
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		shl    $0x5,%eax
		movswl 0x4(%ebx),%ebp
		sar    $0x8,%eax
		add    %ebp,%eax
		push   %eax
		call   create_ammo_effect
		add    $0x20,%esp
		movswl 0x8(%ebx),%eax
		push   %eax
		push   $0xff
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		movzwl 0x2c(%esp),%ebp
		movswl data_5ad60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x24(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		imul   0x20(%esp),%eax
		sar    $0x8,%eax
		movswl 0x6(%ebx),%edx
		add    %edx,%eax
		cwtl
		push   %eax
		push   $0xff
		call   random
		and    $0xffff,%eax
		add    $0x4,%esp
		movswl data_5ab60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x28(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		imul   0x24(%esp),%eax
		movswl 0x4(%ebx),%ebp
		sar    $0x8,%eax
		add    %ebp,%eax
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_26bc9
		mov    0x30(%esp),%edx
		movb   $0xa,0x19(%eax)
		mov    %dx,0x1c(%eax)
	jump_26bc9:
		movswl 0x8(%ebx),%eax
		push   %eax
		push   $0xff
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		movzwl 0x2c(%esp),%ebp
		movswl data_5ad60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x24(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		mov    0x20(%esp),%edx
		imul   %eax,%edx
		sar    $0x8,%edx
		movswl 0x6(%ebx),%eax
		add    %edx,%eax
		cwtl
		push   %eax
		push   $0xff
		call   random
		and    $0xffff,%eax
		add    $0x4,%esp
		movswl data_5ab60(,%eax,2),%eax
		push   %ebp
		mov    %eax,0x28(%esp)
		call   random
		add    $0x4,%esp
		and    $0xffff,%eax
		imul   0x24(%esp),%eax
		movswl 0x4(%ebx),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		cwtl
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_26c64
		mov    (%esp),%edx
		movb   $0x7,0x19(%eax)
		mov    %dx,0x1c(%eax)
	jump_26c64:
		mov    0xc(%esp),%eax
		inc    %edi
		cmp    %eax,%edi
		jl     jump_26a99
	jump_26c71:
		add    $0x5c,%ebx
	jump_26c74:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jae    def_25A67
		jmp    jump_26a2f


/*----------------------------------------------------------------*/
func_26c98:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		movsbl 0xb6(%edx),%eax
		mov    0xb5(%edx),%bl
		add    %eax,%ebx
		imul   $0x5c,%ebx,%ebx
		push   $0x0
		add    $level__People,%ebx
		push   %ebx
		call   choose_best_weapon
		movb   $0xff,0x49(%ebx)
		movb   $0xff,0x4d(%ebx)
		movb   $0xff,0x51(%ebx)
		add    $0x8,%esp
		mov    %ax,0x44(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26cd9:
/*----------------------------------------------------------------*/
		movzbl 0xb5(%edx),%edi
		imul   $0x5c,%edi,%edi
		mov    $level__People,%ebp
		add    $level__People,%edi
		mov    $0x5c,%ebx
		jmp    jump_26d19
	jump_26cf5:
		testb  $0x4,0x1d(%edi)
		je     jump_26d16
		push   $0x0
		push   %edi
		call   choose_best_weapon
		movb   $0xff,0x49(%edi)
		movb   $0xff,0x4d(%edi)
		movb   $0xff,0x51(%edi)
		add    $0x8,%esp
		mov    %ax,0x44(%edi)
	jump_26d16:
		add    $0x5c,%edi
	jump_26d19:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   %ebx,%eax
		add    %ebp,%eax
		cmp    %eax,%edi
		jae    def_25A67
		jmp    jump_26cf5


/*----------------------------------------------------------------*/
func_26d37:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ebx
		movsbl 0xb6(%edx),%eax
		xor    %edx,%edx
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    %eax,%ebx
		testb  $0x8,0xa(%ebx)
		jne    def_25A67
		xor    %eax,%eax
		mov    (%esi),%al
		push   %eax
		push   $0x0
		push   %ebx
		call   choose_best_weapon_or_same
		add    $0xc,%esp
		mov    %ax,0x44(%ebx)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26d80:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		imul   $0x5c,%eax,%eax
		mov    $level__People,%edi
		mov    $level__things_base,%ebp
		add    %eax,%edi
		mov    $0x5c,%ebx
		jmp    jump_26ddb
	jump_26d9e:
		testb  $0x4,0x1d(%edi)
		je     jump_26dd8
		xor    %eax,%eax
		mov    0x44(%edi),%ax
		add    %ebp,%eax
		cmp    $level__Weapons,%eax
		jb     jump_26dd8
		cmpw   $0x0,0x14(%eax)
		jge    jump_26dd8
		cmpb   $0xa,0x19(%edi)
		je     jump_26dd8
		mov    0x19(%eax),%al
		and    $0xff,%eax
		push   %eax
		push   $0x0
		push   %edi
		call   choose_best_weapon_or_same
		add    $0xc,%esp
		mov    %ax,0x44(%edi)
	jump_26dd8:
		add    $0x5c,%edi
	jump_26ddb:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xb5(%edx),%al
		add    $0x4,%eax
		imul   %ebx,%eax
		add    $level__People,%eax
		cmp    %eax,%edi
		jae    def_25A67
		jmp    jump_26d9e


/*----------------------------------------------------------------*/
func_26dfc:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		movsbl 0xb6(%eax),%eax
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		testb  $0x8,0xa(%eax)
		jne    def_25A67
		movb   $0x1f,0x19(%eax)
		movb   $0x1f,0x58(%eax)
		mov    (%esi),%dx
		mov    %dx,0x2a(%eax)
		mov    0x2(%esi),%dx
		mov    %dx,0x2c(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26e4a:
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		movsbl 0xb6(%eax),%eax
		mov    0xb5(%ebx),%dl
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		testb  $0x8,0xa(%eax)
		jne    def_25A67
		movb   $0x20,0x19(%eax)
		movb   $0x20,0x58(%eax)
		mov    (%esi),%dx
		mov    %dx,0x2a(%eax)
		mov    0x2(%esi),%dx
		mov    %dx,0x2c(%eax)
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_26e94:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   $0x2
		mov    %di,%ax
		push   %eax
		call   init_players_people
		add    $0x8,%esp
	def_25A67:	/* 0x26ea4 */
		movb   $0x0,0xd(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_27219:	/* 0x26eb0 */
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27221
		.long   func_27255
		.long   func_2725f
		.long   func_27280


/*----------------------------------------------------------------*/
LoadSaveGame:	/* 0x26ef0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    $0xd,%dl
		mov    $0x2,%ebp
		xor    %ah,%ah
		mov    %dl,0x8(%esp)
		xor    %edx,%edx
		mov    %ah,0x4(%esp)
		mov    %dx,(%esp)
		mov    %eax,%eax
	jump_26f10:
		xor    %eax,%eax
		mov    (%esp),%ax
		mov    %eax,%ecx
		mov    %dx,data_54c4a(,%eax,8)
		inc    %ecx
		mov    %dx,data_54c48(,%eax,8)
		mov    %cx,(%esp)
		cmp    $0xa,%cx
		jb     jump_26f10
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %bl,%bl
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    EXPORT_SYMBOL(byte_60B4C),%al
		mov    $0x1,%bh
		mov    %al,0xc(%esp)
		mov    %bh,EXPORT_SYMBOL(byte_60B4C)
		xor    %bh,%bh
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_26f60:
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		mov    data_54c4c(,%eax,8),%edx
		push   %edx
		inc    %ebx
		call   ac_load_save_text
		add    $0x8,%esp
		cmp    $0xa,%bx
		jb     jump_26f60
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p237(,%eax,4),%ebx
		push   %ebx
		call   DisplayScreenTitle
		add    $0x4,%esp
		cmpb   $0x0,0x4(%esp)
		jne    jump_272c7
		mov    $0x6,%edi
	jump_26fa4:
		incw   (%esp)
		call   LbCopyScreenFromBackMCGA
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b7ec,%ax
		jbe    jump_26ff0
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b7f0,%ax
		jae    jump_26ff0
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b7ea,%ax
		jbe    jump_26ff0
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b7ee,%ax
		jae    jump_26ff0
		mov    $0x166,%eax
		jmp    jump_26ff5
	jump_26ff0:
		mov    $0x1ef,%eax
	jump_26ff5:
		push   $0xc
		push   $0xfffffffe
		and    $0xffff,%eax
		mov    data_5b7ea,%dx
		push   %eax
		mov    data_5b7ee,%ax
		sub    %dx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b7ec,%ax
		push   %eax
		xor    %eax,%eax
		mov    %dx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_load(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b7f6,%ax
		jbe    jump_2707e
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b7fa,%ax
		jae    jump_2707e
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b7f4,%ax
		jbe    jump_2707e
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b7f8,%ax
		jae    jump_2707e
		mov    $0x166,%eax
		jmp    jump_27083
	jump_2707e:
		mov    $0x1ef,%eax
	jump_27083:
		push   $0xc
		push   $0xfffffffe
		and    $0xffff,%eax
		mov    data_5b7f4,%bx
		push   %eax
		mov    data_5b7f8,%ax
		sub    %bx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b7f6,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_save(,%eax,4),%esi
		push   %esi
		call   DrawScreenGadget
		add    $0x1c,%esp
		call   DrawMenuGadget
		xor    %esi,%esi
	jump_270d0:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    savegame_slot,%al
		mov    %si,%dx
		mov    $0x1ef,%ebx
		cmp    %eax,%edx
		jne    jump_270ea
		mov    $0x166,%ebx
	jump_270ea:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %bx,%ax
		mov    %si,%dx
		push   %eax
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %edx,%ebx
		mov    data_5b77e(%eax),%bx
		push   $0x10
		add    %di,%bx
		mov    data_5b77c(%eax),%ax
		and    $0xffff,%ebx
		add    %di,%ax
		push   %ebx
		and    $0xffff,%eax
		push   %eax
		mov    data_54c4c(,%edx,8),%ebx
		push   %ebx
		inc    %esi
		call   new_show_text
		add    $0x28,%esp
		cmp    $0xa,%si
		jb     jump_270d0
		cmpb   $0xa,savegame_slot
		jae    jump_271c6
		push   $0xe
		xor    %eax,%eax
		push   $0xfffffffe
		mov    0x8(%esp),%al
		push   %eax
		push   $0xf
		xor    %edx,%edx
		push   $0x1
		mov    savegame_slot,%dl
		push   $0x166
		mov    m_sprites,%ecx
		lea    0x0(,%edx,8),%eax
		push   %ecx
		mov    data_54c4c(%eax),%esi
		add    $data_54c48,%eax
		push   %esi
		lea    0x2(%eax),%ebx
		push   %ebx
		push   %eax
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		push   $0x14
		mov    data_5b77e(%eax),%dx
		push   $0x14
		add    %di,%dx
		mov    data_5b77c(%eax),%ax
		and    $0xffff,%edx
		add    %di,%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   get_line
		add    $0x38,%esp
	jump_271c6:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_271ec
		push   $0xd
		push   $0x1
		xor    %dh,%dh
		push   $data_5b77c
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,0x8(%esp)
	jump_271ec:
		cmpb   $0xd,0x8(%esp)
		jne    jump_27208
		push   $0xd
		push   $0x0
		push   $data_5b77c
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,0x8(%esp)
	jump_27208:
		mov    0x8(%esp),%bh
		cmp    $0xc,%bh
		ja     def_27219
		xor    %eax,%eax
		mov    %bh,%al
		jmp    *%cs:jpt_27219(,%eax,4)


func_27221:
		mov    savegame_slot,%dh
		cmp    $0xa,%dh
		jae    jump_2723a
		xor    %eax,%eax
		mov    %dh,%al
		xor    %edx,%edx
		mov    %dx,data_54c4a(,%eax,8)
	jump_2723a:
		mov    0x8(%esp),%al
		mov    %al,savegame_slot
		xor    %eax,%eax
		mov    0x8(%esp),%al
		movw   $0x1,data_54c4a(,%eax,8)
		jmp    def_27219


func_27255:
		mov    $0x1,%dl
		xor    %ebp,%ebp
		mov    %dl,0x4(%esp)
		jmp    def_27219


func_2725f:
		cmpb   $0xa,savegame_slot
		jae    jump_272a6
		xor    %eax,%eax
		mov    savegame_slot,%al
		push   %eax
		call   load_player
		mov    $0x1,%ah
		add    $0x4,%esp
		mov    %ah,0x4(%esp)
		jmp    jump_272a6


func_27280:
		mov    savegame_slot,%cl
		cmp    $0xa,%cl
		jae    jump_272a6
		xor    %eax,%eax
		mov    %cl,%al
		push   %eax
		mov    data_54c4c(,%eax,8),%ebp
		push   %ebp
		call   save_player
		mov    $0x1,%ch
		add    $0x8,%esp
		mov    %ch,0x4(%esp)

	jump_272a6:
		xor    %ebp,%ebp

	def_27219:	/* 0x272a8 */
		movb   $0xd,0x8(%esp)
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,0x4(%esp)
		je     jump_26fa4
	jump_272c7:
		xor    %edi,%edi
		mov    %di,(%esp)
		lea    0x0(%eax),%eax
	jump_272d0:
		xor    %eax,%eax
		mov    (%esp),%ax
		mov    %eax,%ecx
		mov    %di,data_54c4a(,%eax,8)
		inc    %ecx
		mov    %di,data_54c48(,%eax,8)
		mov    %cx,(%esp)
		cmp    $0xa,%cx
		jb     jump_272d0
		mov    0xc(%esp),%al
		mov    $AniName,%edi
		mov    $aDataMlosaoutDa,%esi
		xor    %edx,%edx
		xor    %bl,%bl
		mov    %al,EXPORT_SYMBOL(byte_60B4C)
		mov    %edx,MouseOldW
		mov    $0x1,%eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %eax,EXPORT_SYMBOL(MouseSwap)
		push   $0x2
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		xor    %ebx,%ebx
		call   LbCopyScreenToBackMCGA
		mov    %ebx,EXPORT_SYMBOL(MouseSwap)
		call   cheat
		mov    %ebp,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_27360:
		.long   func_27410
		.long   func_2741a
		.long   func_27424
		.long   func_2742b
		.long   func_27432
		.long   func_27439
		.long   func_27440
		.long   func_27447
		.long   func_2744e
		.long   func_27455
		.long   jump_2748b
		.long   jump_2748b
		.long   jump_2748b
		.long   jump_2748b
		.long   jump_2748b
		.long   jump_2748b
		.long   jump_2748b
		.long   func_2745c
		.long   func_27463
		.long   func_2746a
		.long   func_27471
		.long   func_27478
		.long   func_2747f


/*----------------------------------------------------------------*/
atoi_hex:	/* 0x273c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebp
		mov    %ebp,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		test   %cx,%cx
		jne    jump_273e0
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_273e0:
		mov    %ecx,%ebx
		xor    %eax,%eax
		dec    %ebx
		xor    %edx,%edx
		test   %bx,%bx
		jl     jump_27498
	jump_273f0:
		movswl %bx,%esi
		mov    (%esi,%ebp,1),%cl
		sub    $0x30,%cl
		cmp    $0x16,%cl
		ja     jump_2748b
		and    $0xff,%ecx
		jmp    *%cs:vtable_27360(,%ecx,4)


/*----------------------------------------------------------------*/
func_27410:
/*----------------------------------------------------------------*/
		movswl %dx,%ecx
		xor    %esi,%esi
		jmp    jump_27487


/*----------------------------------------------------------------*/
func_2741a:
/*----------------------------------------------------------------*/
		mov    $0x1,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27424:
/*----------------------------------------------------------------*/
		mov    $0x2,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_2742b:
/*----------------------------------------------------------------*/
		mov    $0x3,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27432:
/*----------------------------------------------------------------*/
		mov    $0x4,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27439:
/*----------------------------------------------------------------*/
		mov    $0x5,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27440:
/*----------------------------------------------------------------*/
		mov    $0x6,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27447:
/*----------------------------------------------------------------*/
		mov    $0x7,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_2744e:
/*----------------------------------------------------------------*/
		mov    $0x8,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27455:
/*----------------------------------------------------------------*/
		mov    $0x9,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_2745c:
/*----------------------------------------------------------------*/
		mov    $0xa,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27463:
/*----------------------------------------------------------------*/
		mov    $0xb,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_2746a:
/*----------------------------------------------------------------*/
		mov    $0xc,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27471:
/*----------------------------------------------------------------*/
		mov    $0xd,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_27478:
/*----------------------------------------------------------------*/
		mov    $0xe,%esi
		jmp    jump_27484


/*----------------------------------------------------------------*/
func_2747f:
/*----------------------------------------------------------------*/
		mov    $0xf,%esi
	jump_27484:
		movswl %dx,%ecx
	jump_27487:
		shl    %cl,%esi
		or     %esi,%eax
	jump_2748b:
		dec    %ebx
		add    $0x4,%edx
		test   %bx,%bx
		jge    jump_273f0
	jump_27498:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_main)	/* 0x274a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x88,%esp
		mov    0x9c(%esp),%ebx
#if defined(DOS) /* disable keyboard input check */
		movb   $0xf,0x65(%esp)
		lea    0x64(%esp),%eax
		push   %eax
		push   %eax
		push   $0x10
		lea    0xc(%esp),%edi
		mov    $aIntroNul,%esi
		call   ac_dos_int386
		add    $0xc,%esp
		mov    $0x1,%edx
		mov    0x64(%esp),%al
		mov    0x98(%esp),%ecx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
#else
		mov    $0x1,%edx
		mov    $0x0,%al
		mov    $aIntroNul,%esi
#endif

#if 0 /* remade intro run and command line args parsing */
		mov    %al,0x84(%esp)
		mov    %al,data_60b38
		cmp    %dx,%cx
		jle    jump_27558
	jump_274f2:
		mov    %esp,%edi
		mov    $data_53568,%esi
		push   %edi
		sub    %ecx,%ecx
		dec    %ecx
		mov    $0x0,%al
		repnz scas %es:(%edi),%al
		dec    %edi
	jump_27502:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_2751e
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_27502
	jump_2751e:
		pop    %edi
		movswl %dx,%eax
		mov    %esp,%edi
		mov    (%ebx,%eax,4),%esi
		push   %edi
		sub    %ecx,%ecx
		dec    %ecx
		mov    $0x0,%al
		repnz scas %es:(%edi),%al
		dec    %edi
	jump_27530:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_2754c
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_27530
	jump_2754c:
		pop    %edi
		inc    %edx
		cmp    0x98(%esp),%dx
		jl     jump_274f2
	jump_27558:
		mov    %esp,%eax
		push   %eax
		mov    $0x1,%edi
		call   ac_system
		mov    $0x2,%dl
		mov    $0x1,%ah
		add    $0x4,%esp
		mov    %di,EXPORT_SYMBOL(current_levno)
		mov    %di,EXPORT_SYMBOL(level__MapNumber)
		xor    %dh,%dh
		xor    %cl,%cl
		mov    %dl,EXPORT_SYMBOL(DrawFlags)
		mov    %dh,EXPORT_SYMBOL(is_multiplayer_game)
		mov    %dh,EXPORT_SYMBOL(byte_60B42)
		mov    %dh,EXPORT_SYMBOL(byte_60B44)
		mov    %dh,EXPORT_SYMBOL(byte_60B3B)
		mov    %ah,EXPORT_SYMBOL(byte_60B3A)
		mov    %dh,EXPORT_SYMBOL(byte_60B4C)
		mov    %ah,EXPORT_SYMBOL(byte_60B47)
		mov    %dh,EXPORT_SYMBOL(cheat_credits)
		mov    %ah,EXPORT_SYMBOL(SoundAble)
		mov    %ah,EXPORT_SYMBOL(MusicAble)
		mov    %dh,EXPORT_SYMBOL(cheat_worldmap)
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(debug_k)
		mov    %cl,EXPORT_SYMBOL(byte_60B51)
		mov    %cl,EXPORT_SYMBOL(language)
		mov    %cl,EXPORT_SYMBOL(unused_option_p)
		mov    %cl,EXPORT_SYMBOL(cheats_speedup)
		mov    %cl,EXPORT_SYMBOL(cheats_mission)
		mov    0x98(%esp),%ecx
		mov    %edi,0x80(%esp)
		cmp    %di,%cx
		jle    jump_2776d
	jump_27603:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		mov    (%eax),%ch
		cmp    $0x2f,%ch
		je     jump_2761e
		cmp    $0x2d,%ch
		jne    jump_2774e
	jump_2761e:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		mov    0x1(%eax),%al
		cmp    $0x53,%al
		jb     jump_27692
		jbe    jump_2782f
		cmp    $0x69,%al
		jb     jump_27672
		jbe    jump_2778f
		cmp    $0x6e,%al
		jb     jump_27665
		jbe    jump_2786c
		cmp    $0x70,%al
		jb     jump_278a2
		jbe    jump_27723
		cmp    $0x73,%al
		je     jump_2782f
		jmp    jump_278a2
	jump_27665:
		cmp    $0x6c,%al
		je     jump_27823
		jmp    jump_278a2
	jump_27672:
		cmp    $0x64,%al
		jb     jump_27689
		jbe    jump_27717
		cmp    $0x68,%al
		je     jump_27786
		jmp    jump_278a2
	jump_27689:
		cmp    $0x63,%al
		je     jump_276e6
		jmp    jump_278a2
	jump_27692:
		cmp    $0x48,%al
		jb     jump_276ca
		jbe    jump_27786
		cmp    $0x4c,%al
		jb     jump_276bd
		jbe    jump_27823
		cmp    $0x4e,%al
		jb     jump_278a2
		jbe    jump_2786c
		cmp    $0x50,%al
		je     jump_27723
		jmp    jump_278a2
	jump_276bd:
		cmp    $0x49,%al
		je     jump_2778f
		jmp    jump_278a2
	jump_276ca:
		cmp    $0x43,%al
		jb     jump_276d9
		jbe    jump_276e6
		cmp    $0x44,%al
		je     jump_27717
		jmp    jump_278a2
	jump_276d9:
		cmp    $0x3f,%al
		je     jump_27842
		jmp    jump_278a2
	jump_276e6:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		add    $0x2,%eax
		push   %eax
		call   ac_atoi
		add    $0x4,%esp
		mov    %al,EXPORT_SYMBOL(language)
		cmp    $0x3,%al
		jb     jump_2774e
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(language)
		jmp    jump_2774e
	jump_27717:
		movb   $0x1,EXPORT_SYMBOL(byte_60B4C)
		jmp    jump_2774e
	jump_27723:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		add    $0x2,%eax
		push   %eax
		call   ac_atoi
		add    $0x4,%esp
		mov    %al,EXPORT_SYMBOL(unused_option_p)
		cmp    $0x10,%al
		jbe    jump_2774e
		movb   $0x10,EXPORT_SYMBOL(unused_option_p)
	jump_2774e:
		mov    0x80(%esp),%esi
		inc    %esi
		mov    0x98(%esp),%edi
		mov    %esi,0x80(%esp)
		cmp    %di,%si
		jl     jump_27603
	jump_2776d:
		mov    EXPORT_SYMBOL(DrawFlags),%ah
		test   $0x2,%ah
		je     jump_278c3
		push   $EXPORT_SYMBOL(load_files_vres16)
		jmp    jump_278d5
	jump_27786:
		movb   $0x2,EXPORT_SYMBOL(DrawFlags)
		jmp    jump_2774e
	jump_2778f:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		cmpb   $0x69,0x2(%eax)
		jne    jump_277be
		cmpb   $0x72,0x3(%eax)
		jne    jump_277be
		cmpb   $0x71,0x4(%eax)
		jne    jump_277be
		add    $0x5,%eax
		push   %eax
		call   ac_atoi
		add    $0x4,%esp
		mov    %ax,EXPORT_SYMBOL(sndcard_irq)
	jump_277be:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		cmpb   $0x64,0x2(%eax)
		jne    jump_277ed
		cmpb   $0x6d,0x3(%eax)
		jne    jump_277ed
		cmpb   $0x61,0x4(%eax)
		jne    jump_277ed
		add    $0x5,%eax
		push   %eax
		call   ac_atoi
		add    $0x4,%esp
		mov    %ax,EXPORT_SYMBOL(sndcard_dma)
	jump_277ed:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		cmpb   $0x69,0x2(%eax)
		jne    jump_2774e
		cmpb   $0x6f,0x3(%eax)
		jne    jump_2774e
		add    $0x4,%eax
		push   %eax
		call   atoi_hex
		add    $0x4,%esp
		mov    %ax,EXPORT_SYMBOL(sndcard_ioaddr)
		jmp    jump_2774e
	jump_27823:
		movb   $0x4,EXPORT_SYMBOL(DrawFlags)
		jmp    jump_2774e
	jump_2782f:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(SoundAble)
		mov    %dh,EXPORT_SYMBOL(MusicAble)
		jmp    jump_2774e
	jump_27842:
		mov    0x84(%esp),%al
		xor    %ah,%ah
		mov    %ax,0x64(%esp)
		lea    0x64(%esp),%eax
		push   %eax
		push   %eax
		push   $0x10
		call   ac_dos_int386
		add    $0xc,%esp
		call   print_command_opts
		push   $0x1
		jmp    ac_exit
	jump_2786c:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%esi
		mov    $EXPORT_SYMBOL(Network__Name),%edi
		add    $0x2,%esi
		push   %edi
	jump_27880:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_2789c
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_27880
	jump_2789c:
		pop    %edi
		jmp    jump_2774e
	jump_278a2:
		movswl 0x80(%esp),%eax
		mov    (%ebx,%eax,4),%eax
		inc    %eax
		push   %eax
		push   $aInvalidOptionS
		call   ac_printf
		add    $0x8,%esp
		push   $0x1
		jmp    ac_exit
#else
		mov    EXPORT_SYMBOL(DrawFlags),%ah
		test   $0x2,%ah
		je     jump_278c3
		push   $EXPORT_SYMBOL(load_files_vres16)
		jmp    jump_278d5
#endif
	jump_278c3:
		test   $0x4,%ah
		je     jump_278dd
		xor    %dh,%dh
		push   $EXPORT_SYMBOL(load_files_mcga)
		mov    %dh,EXPORT_SYMBOL(byte_60B42)
	jump_278d5:
		call   ac_LbDataLoadAll
		add    $0x4,%esp
	jump_278dd:
		mov    EXPORT_SYMBOL(pointer_data),%ebx
		push   %ebx
		mov    EXPORT_SYMBOL(pointer_sprites_end),%ecx
		push   %ecx
		mov    EXPORT_SYMBOL(pointer_sprites),%esi
		push   %esi
		call   ApSpriteSetup_ForceHeight
		mov    EXPORT_SYMBOL(pointer_sprites),%eax
		add    $0x6,%eax
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   %eax
		call   ac_LbMouseChangeSprite
		add    $0x4,%esp
#else
		mov    %eax,EXPORT_SYMBOL(mouse_sprite)
#endif
		mov    $0x1,%eax
		add    $0xc,%esp
		mov    %ax,EXPORT_SYMBOL(MouseSwap)
		call   LbMouseSetup
		call   nullsub_3
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_2794d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sndcard_ioaddr),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sndcard_dma),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sndcard_irq),%ax
		push   %eax
		call   init_sound
		add    $0xc,%esp
		mov    %al,EXPORT_SYMBOL(SoundAble)
	jump_2794d:
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_27988
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sndcard_ioaddr),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sndcard_dma),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sndcard_irq),%ax
		push   %eax
		push   $fname2
		push   $fname1
		call   InitMIDI
		add    $0x14,%esp
		mov    %al,EXPORT_SYMBOL(MusicAble)
	jump_27988:
		cmpb   $0x0,EXPORT_SYMBOL(byte_60B42)
		je     jump_27998
		call   nullsub_2
		jmp    jump_279c7
	jump_27998:
		call   OpenIKeyboard_0
		call   syndicate
		mov    EXPORT_SYMBOL(debug_k),%si
	jump_279a9:
		movswl %si,%eax
		mov    EXPORT_SYMBOL(debug_k),%ebx
		sub    %eax,%ebx
		cmp    $0x48,%ebx
		ja     jump_279c2
		incl   0x80(%esp)
		jmp    jump_279a9
	jump_279c2:
		call   CloseIKeyboard
	jump_279c7:
		call   reset_input
		push   $EXPORT_SYMBOL(load_files_vres16)
		call   LbDataFreeAll
		add    $0x4,%esp
		call   ShutdownMIDI
		call   FreeSound
		call   nullsub_3
		mov    0x84(%esp),%al
		mov    %al,0x64(%esp)
		lea    0x64(%esp),%eax
		push   %eax
		push   %eax
		xor    %dh,%dh
		push   $0x10
		mov    %dh,0x71(%esp)
		call   ac_dos_int386
		add    $0xc,%esp
		add    $0x88,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
print_command_opts:	/* 0x27a20 */
/*----------------------------------------------------------------*/
		push   $aSyndicateHelpO
		call   ac_printf
		add    $0x4,%esp
		push   $aIirqNSetSoundI
		call   ac_printf
		add    $0x4,%esp
		push   $aIdmaNSetSoundD
		call   ac_printf
		add    $0x4,%esp
		push   $aIioNSetSoundIo
		call   ac_printf
		add    $0x4,%esp
		push   $aSNoSound
		call   ac_printf
		add    $0x4,%esp
		ret
timer2_cb:	/* 0x27a70 */
		incl   EXPORT_SYMBOL(debug_k)
		incb   data_60b50
		movb   $0x1,data_60b34
		ret

/*----------------------------------------------------------------*/
KInt_0:	/* 0x27a90 */
/*----------------------------------------------------------------*/
		pusha
#if defined(DOS)
		push   %ds
		push   %es
		push   %fs
		push   %gs
		mov    %esp,%ebp
		cld
		call   __GETDS
		incl   EXPORT_SYMBOL(debug_k)
		incb   data_60b50
		movb   $0x1,data_60b34
		mov    EXPORT_SYMBOL(debug_k),%ebx
		test   $0x3,%bl
		jne    jump_27ad5
		xor    %eax,%eax
		mov    KbOldIntNum,%ax
		push   %eax
		mov    KbOldInt,%ecx
		push   %ecx
		call   _chain_intr
		add    $0x8,%esp
	jump_27ad5:
		push   $0x20
		push   $0x20
		call   outp
		add    $0x8,%esp
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
#endif
		popa
		iret


/*----------------------------------------------------------------*/
OpenIKeyboard_0:	/* 0x27af0 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		jne    jump_27b03
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_27b36
	jump_27b03:
		push   $timer2_cb
		call   AIL_register_timer
		add    $0x4,%esp
		mov    %eax,timer2
		cmp    $0xffffffff,%eax
		je     jump_27b80
		push   $0x48
		push   %eax
		call   AIL_set_timer_frequency
		add    $0x8,%esp
		mov    timer2,%edx
		push   %edx
		call   AIL_start_timer
		add    $0x4,%esp
		pop    %ebx
		ret
	jump_27b36:
		push   $0x8
		call   ac_dos_getvect
		add    $0x4,%esp
		push   $0x36
		push   $0x43
		mov    %dx,KbOldIntNum
		mov    %eax,KbOldInt
		call   outp
		add    $0x8,%esp
		push   $0x0
		push   $0x40
		call   outp
		add    $0x8,%esp
		push   $0x40
		push   $0x40
		call   outp
		add    $0x8,%esp
		push   %cs
		push   $KInt_0
		push   $0x8
		call   ac_dos_setvect
		add    $0xc,%esp
	jump_27b80:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CloseIKeyboard:	/* 0x27b90 */
/*----------------------------------------------------------------*/
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		jne    jump_27be0
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		jne    jump_27be0
		push   $0x36
		push   $0x43
		call   outp
		add    $0x8,%esp
		push   $0x0
		push   $0x40
		call   outp
		add    $0x8,%esp
		push   $0x0
		push   $0x40
		call   outp
		xor    %eax,%eax
		add    $0x8,%esp
		mov    KbOldIntNum,%ax
		push   %eax
		mov    KbOldInt,%edx
		push   %edx
		push   $0x8
		call   ac_dos_setvect
		add    $0xc,%esp
	jump_27be0:
		ret


/*----------------------------------------------------------------*/
LbMouseSetup:	/* 0x27bf0 */
/*----------------------------------------------------------------*/
		call   OpenIKeyboardMs
		jmp    func_2b440


/*----------------------------------------------------------------*/
GLOBAL_FUNC(reset_input)	/* 0x27c00 */
/*----------------------------------------------------------------*/
		call   LbMouseReset
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %ebx,%ebx
		xor    %eax,%eax
		mov    InOldIntNum,%ax
		push   %eax
		mov    InOldInt,%edx
		push   %edx
		push   $0x9
		call   ac_dos_setvect
		add    $0xc,%esp
		ret


/*----------------------------------------------------------------*/
ASM_LbSpriteSetup:	/* 0x27c30 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%edx
		mov    0x10(%esp),%ebx
		cmp    %edx,%eax
		jae    jump_27c4f
	jump_27c41:
		mov    (%eax),%ecx
		add    $0x6,%eax
		add    %ebx,%ecx
		mov    %ecx,-0x6(%eax)
		cmp    %edx,%eax
		jb     jump_27c41
	jump_27c4f:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ApSpriteSetup_ForceHeight)	/* 0x27c60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%ecx
		cmp    %ecx,%eax
		jae    jump_27ca4
		mov    0x14(%esp),%edx
		add    $0x14,%edx
	jump_27c75:
		mov    EXPORT_SYMBOL(DrawFlags),%bl
		cmp    $0x2,%bl
		jb     jump_27c9d
		jbe    jump_27c93
		cmp    $0x4,%bl
		jne    jump_27c9d
		mov    (%eax),%ebx
		movb   $0x20,0x5(%eax)
		add    %edx,%ebx
		mov    %ebx,(%eax)
		jmp    jump_27c9d
	jump_27c93:
		mov    (%eax),%esi
		movb   $0x20,0x5(%eax)
		add    %edx,%esi
		mov    %esi,(%eax)
	jump_27c9d:
		add    $0x6,%eax
		cmp    %ecx,%eax
		jb     jump_27c75
	jump_27ca4:
		pop    %esi
		pop    %ebx
		ret

/*----------------------------------------------------------------*/
KInt:	/* 0x27cb0 */
/*----------------------------------------------------------------*/
		pusha
#if defined(DOS)
		push   %ds
		push   %es
		push   %fs
		push   %gs
		mov    %esp,%ebp
		cld
		call   __GETDS
		push   $0x60
		call   inp
		add    $0x4,%esp
		mov    %al,EXPORT_SYMBOL(lbInkey)
		mov    EXPORT_SYMBOL(lbInkey),%al
		and    $0x7f,%al
		xor    %ah,%ah
		cmpb   $0x7f,EXPORT_SYMBOL(lbInkey)
		jbe    jump_27cef
		and    $0xffff,%eax
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)(%eax)	/* lbKeyOn[eax] */
		jmp    jump_27cfb
	jump_27cef:
		and    $0xffff,%eax
		movb   $0x1,EXPORT_SYMBOL(lbKeyOn)(%eax)
	jump_27cfb:
		push   $0x61
		call   inp
		mov    %eax,%ebx
		or     $0x80,%al
		add    $0x4,%esp
		and    $0xffff,%eax
		push   %eax
		push   $0x61
		call   outp
		xor    %eax,%eax
		add    $0x8,%esp
		mov    %bx,%ax
		push   %eax
		push   $0x61
		call   outp
		mov    EXPORT_SYMBOL(byte_60B4C),%bh
		add    $0x8,%esp
		test   %bh,%bh
		je     jump_27d4b
		xor    %eax,%eax
		mov    InOldIntNum,%ax
		push   %eax
		mov    InOldInt,%edx
		push   %edx
		call   _chain_intr
		add    $0x8,%esp
	jump_27d4b:
		push   $0x20
		push   $0x20
		call   outp
		add    $0x8,%esp
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
#endif
		popa
		iret


/*----------------------------------------------------------------*/
OpenIKeyboardMs:	/* 0x27d60 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %eax,%eax
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		nop
	jump_27d70:
		movswl %ax,%edx
		xor    %bl,%bl
		inc    %eax
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)(%edx)	/* lbKeyOn[edx] */
		cmp    $0x80,%ax
		jl     jump_27d70
		push   $0x9
		call   ac_dos_getvect
		add    $0x4,%esp
		push   %cs
		push   $KInt
		push   $0x9
		mov    %dx,InOldIntNum
		mov    %eax,InOldInt
		call   ac_dos_setvect
		add    $0xc,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
correct_buttons:	/* 0x27db0 */
/*----------------------------------------------------------------*/
		cmpb   $0x1,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jbe    jump_27dc1
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
	jump_27dc1:
		mov    EXPORT_SYMBOL(lbDisplay)+103,%dh	/* lbDisplay.LeftButton */
		cmp    $0x1,%dh
		jne    jump_27dd7
		mov    EXPORT_SYMBOL(lbDisplay)+103,%al	/* lbDisplay.LeftButton */
		add    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
	jump_27dd7:
		cmpb   $0x1,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		jbe    jump_27de8
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
	jump_27de8:
		mov    EXPORT_SYMBOL(lbDisplay)+104,%ch	/* lbDisplay.RightButton */
		cmp    $0x1,%ch
		jne    jump_27dfe
		mov    EXPORT_SYMBOL(lbDisplay)+104,%al	/* lbDisplay.RightButton */
		add    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
	jump_27dfe:
		ret


/*----------------------------------------------------------------*/
map_selection:	/* 0x27e00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		xor    %ah,%ah
		mov    %ah,(%esp)
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		push   $mmapblk_load_files
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    $0x1,%edx
		mov    %ah,EXPORT_SYMBOL(is_multiplayer_game)
		mov    %edx,EXPORT_SYMBOL(MouseSwap)
		call   ac_LbDataLoadAll
		add    $0x4,%esp
		xor    %ebx,%ebx
		call   display_cities
		mov    %ebx,EXPORT_SYMBOL(MouseSwap)
		mov    $0x10,%edi
	jump_27e48:
		call   LbCopyScreenFromBackMCGA
		call   DrawMenuGadget
		push   $0xfc0
		mov    0x4(%esp),%bh
		dec    %esi
		inc    %bh
		call   process_day
		mov    %bh,0x4(%esp)
		add    $0x4,%esp
		test   %al,%al
		je     jump_27f12
		cmpb   $0x1,EXPORT_SYMBOL(research)
		jne    jump_27e80
		call   CompleteResearch
	jump_27e80:
		xor    %ch,%ch
		mov    %ch,0x4(%esp)
	jump_27e86:
		xor    %ebx,%ebx
		mov    0x4(%esp),%bl
		mov    next_mission_countries(%ebx),%al
		cmp    $0x32,%al
		jae    jump_27ef3
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    data_5539e(,%eax,2),%dl
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%eax),%al
		and    $0xff,%eax
		mov    BScreen,%ecx
		mov    player_colour_for_map(%eax),%al
		xor    %ah,%ah
		push   %ecx
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    next_mission_countries(%ebx),%al
		cwtl
		push   %eax
		call   _draw_map_area
		add    $0xc,%esp
	jump_27ef3:
		xor    %eax,%eax
		mov    0x4(%esp),%al
		mov    %al,%dh
		mov    $0xff,%dl
		inc    %dh
		mov    %dl,next_mission_countries(%eax)
		mov    %dh,0x4(%esp)
		cmp    $0x8,%dh
		jb     jump_27e86
	jump_27f12:
		call   ShowGameTime
		xor    %eax,%eax
		mov    (%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    data_55030,%al
		push   %eax
		call   draw_connecting_cities
		add    $0x8,%esp
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x2e
		je     jump_27f62
		cmpb   $0x0,EXPORT_SYMBOL(cheats_mission)
		je     jump_27f62
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%dl
		mov    %dl,data_5539e(,%eax,2)
		call   display_cities
	jump_27f62:
		xor    %eax,%eax
		mov    data_55030,%al
		push   %eax
		call   show_city_info
		add    $0x4,%esp
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %si,%ax
		mov    data_55030,%dl
		push   %eax
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    data_5b062(%eax),%dx
		mov    data_5b066(%eax),%bx
		push   $0xfc
		add    %bx,%dx
		push   $0x58
		and    $0xffff,%edx
		mov    data_5b064(%eax),%cx
		push   %edx
		mov    map_countries(%eax),%dx
		add    %cx,%dx
		mov    data_5b068(%eax),%al
		and    $0xffff,%edx
		and    $0xff,%eax
		push   %edx
		mov    data_5b418(,%eax,4),%dx
		add    $0x8,%dx
		mov    data_5b416(,%eax,4),%ax
		add    %dx,%dx
		add    $0x8,%ax
		and    $0xffff,%edx
		add    %ax,%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   func_29030
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    data_5b068(%eax),%al
		and    $0xff,%eax
		lea    0x0(,%eax,4),%eax
		mov    data_5b418(%eax),%dx
		add    %di,%dx
		add    $0x1c,%esp
		add    %dx,%dx
		push   $0xfc
		and    $0xffff,%edx
		push   %edx
		mov    data_5b416(%eax),%dx
		add    %di,%dx
		add    %dx,%dx
		and    $0xffff,%edx
		push   %edx
		mov    data_5b418(%eax),%dx
		dec    %dx
		mov    data_5b416(%eax),%ax
		add    %dx,%dx
		dec    %ax
		and    $0xffff,%edx
		add    %ax,%ax
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   func_187a0
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		add    $0x14,%esp
		mov    data_5df14,%ebp
		mov    data_5b068(%eax),%al
		push   %ebp
		and    $0xff,%eax
		push   %edi
		lea    0x0(,%eax,4),%eax
		xor    %edx,%edx
		push   %edi
		mov    data_5b418(%eax),%dx
		mov    data_5b416(%eax),%ax
		push   %edx
		and    $0xffff,%eax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %eax
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_5e4ab(%eax),%dl
		mov    data_5e4ac(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   %eax
		call   draw_logo
		add    $0x1c,%esp
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		je     jump_28212
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		cmpw   $0x176,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_281a7
		cmpw   $0x180,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_281a7
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_281a7
		cmpw   $0x166,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_281a7
		xor    %ebx,%ebx
		mov    data_55030,%bl
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    %ebx,%edx
		add    %eax,%eax
		xor    %ebx,%edx
		mov    EXPORT_SYMBOL(Network__Slot),%cx
		mov    data_5539e(%eax),%dl
		cmp    %cx,%dx
		jne    jump_281a7
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_281a7
		push   %ebx
		push   $0xf6
		call   adjust_tax
		add    $0x8,%esp
	jump_281a7:
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jbe    jump_28212
		cmpw   $0x1be,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_28212
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_28212
		cmpw   $0x166,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_28212
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %edx,%ebx
		add    %eax,%eax
		xor    %edx,%ebx
		mov    EXPORT_SYMBOL(Network__Slot),%cx
		mov    data_5539e(%eax),%bl
		cmp    %cx,%bx
		jne    jump_28212
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_28212
		push   %edx
		push   $0xa
		call   adjust_tax
		add    $0x8,%esp
	jump_28212:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_2822f
		push   $mmapblk_load_files
		call   LbDataFreeAll
		add    $0x4,%esp
		xor    %eax,%eax
		jmp    jump_2847e
	jump_2822f:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		je     jump_28294
		xor    %eax,%eax
		mov    data_55030,%al
		push   %eax
		call   can_i_play_this_city
		add    $0x4,%esp
		cmp    $0x1,%al
		jne    jump_28294
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		push   $mmapblk_load_files
		mov    data_5b071(%eax),%al
		xor    %ah,%ah
		mov    %dl,data_60b36
		mov    %ax,EXPORT_SYMBOL(current_levno)
		call   LbDataFreeAll
		mov    $0x9,%eax
		add    $0x4,%esp
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_28294:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_27e48
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   check_for_click_on_cityadjust_tax
		cmp    $0x32,%al
		je     jump_282b7
		mov    %al,data_55030
	jump_282b7:
		cmp    EXPORT_SYMBOL(lbDisplay__MouseX_640),%di	/* lbDisplay.MouseX but scaled */
		jae    jump_28345
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_28345
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_28345
		cmpw   $0x174,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_28345
		xor    %eax,%eax
		mov    data_55030,%al
		push   %eax
		call   can_i_play_this_city
		add    $0x4,%esp
		cmp    $0x1,%al
		jne    jump_28345
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		push   $mmapblk_load_files
		mov    data_5b071(%eax),%al
		xor    %ah,%ah
		mov    %dl,data_60b36
		mov    %ax,EXPORT_SYMBOL(current_levno)
		call   LbDataFreeAll
		mov    $0x9,%eax
		add    $0x4,%esp
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_28345:
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jbe    jump_28388
		cmpw   $0x274,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_28388
		cmpw   $0x15a,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_28388
		cmpw   $0x174,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_28388
		push   $mmapblk_load_files
		call   LbDataFreeAll
		add    $0x4,%esp
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_28388:
		cmpw   $0x176,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jbe    jump_283f6
		cmpw   $0x180,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_283f6
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jbe    jump_283f6
		cmpw   $0x166,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_283f6
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %edx,%ebx
		add    %eax,%eax
		xor    %edx,%ebx
		mov    EXPORT_SYMBOL(Network__Slot),%cx
		mov    data_5539e(%eax),%bl
		cmp    %cx,%bx
		jne    jump_283f6
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_283f6
		push   %edx
		push   $0xff
		call   adjust_tax
		add    $0x8,%esp
	jump_283f6:
		cmpw   $0x1b4,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_27e48
		cmpw   $0x1be,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_27e48
		cmpw   $0x158,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_27e48
		cmpw   $0x166,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_27e48
		xor    %edx,%edx
		mov    data_55030,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %edx,%ebx
		add    %eax,%eax
		xor    %edx,%ebx
		mov    EXPORT_SYMBOL(Network__Slot),%cx
		mov    data_5539e(%eax),%bl
		cmp    %cx,%bx
		jne    jump_27e48
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_27e48
		push   %edx
		push   $0x1
		call   adjust_tax
		add    $0x8,%esp
		jmp    jump_27e48
	jump_2847e:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_for_click_on_cityadjust_tax:	/* 0x28490 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    world_map,%edi
		xor    %ah,%ah
		mov    %ah,(%esp)
	jump_284a1:
		xor    %ebx,%ebx
		mov    (%esp),%bl
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    map_countries(%eax),%dx
		jbe    jump_28551
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    map_countries(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		lea    0x80(%ecx),%esi
		cmp    %esi,%edx
		jge    jump_28551
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		mov    data_5b062(%eax),%si
		cmp    %si,%dx
		jbe    jump_28551
		xor    %edx,%edx
		xor    %eax,%eax
		mov    %si,%dx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%ax
		lea    0x58(%edx),%esi
		cmp    %esi,%eax
		jge    jump_28551
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%ax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    %eax,%esi
		xor    %edx,%edx
		shl    $0x6,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		sub    %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		imul   $0xb00,%ebx,%ebx
		add    %esi,%eax
		lea    (%edi,%ebx,1),%edx
		cmpb   $0x0,(%edx,%eax,1)
		je     jump_28551
		mov    (%esp),%al
		jmp    jump_28564
	jump_28551:
		mov    (%esp),%bh
		inc    %bh
		mov    %bh,(%esp)
		cmp    $0x32,%bh
		jne    jump_284a1
		mov    %bh,%al
	jump_28564:
		mov    %edi,world_map
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
display_cities:	/* 0x28580 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %bl,%bl
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		nop
	jump_28590:
		xor    %edx,%edx
		mov    %bl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    data_5539e(,%eax,2),%dl
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%eax),%al
		and    $0xff,%eax
		mov    BScreen,%edx
		mov    player_colour_for_map(%eax),%al
		xor    %ah,%ah
		push   %edx
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    %bl,%al
		cwtl
		push   %eax
		call   _draw_map_area
		mov    data_55034,%ecx
		add    $0xc,%esp
		test   %ecx,%ecx
		jne    jump_285fd
		call   LbCopyScreenFromBackMCGA
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
	jump_285fd:
		inc    %bl
		cmp    $0x32,%bl
		jne    jump_28590
		movl   $0x1,data_55034
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
show_city_info:	/* 0x28610 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x54
		mov    %edx,%ebx
		push   $0xf
		xor    %edx,%ebx
		push   $0x13a
		mov    0x14(%ebp),%bl
		push   $0x8
		lea    0x0(,%ebx,4),%esi
		push   $0xfffffffe
		add    %ebx,%esi
		push   $0x54
		lea    0x0(,%esi,4),%esi
		push   %edx
		mov    %ebx,%edx
		sub    %ebx,%esi
		xor    %ebx,%edx
		mov    data_5b072(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    EXPORT_SYMBOL(gui_strings)(%edx,%eax,4),%ecx
		push   %ecx
		call   GetLineWidth
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x118,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x14,%esp
		add    $0xb8,%eax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    data_5b072(%esi),%dl
		push   %eax
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(language),%dl
		lea    0x0(,%edx,4),%edx
		mov    EXPORT_SYMBOL(gui_strings)(%edx,%eax,4),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x166
		push   $0xf
		xor    %eax,%eax
		push   $0x14e
		mov    EXPORT_SYMBOL(language),%al
		lea    0x0(,%ebx,4),%esi
		push   $0xc2
		mov    text_city_pop(,%eax,4),%edx
		add    %ebx,%esi
		push   %edx
		add    %esi,%esi
		call   new_show_text
		add    $0x28,%esp
		mov    data_553a2(%esi),%ecx
		push   %ecx
		push   $aD_2
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x54
		push   $0xf
		push   $0x14e
		push   $0x10c
		lea    -0x28(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x166
		push   $0xf
		xor    %eax,%eax
		push   $0x15c
		mov    EXPORT_SYMBOL(language),%al
		push   $0xc2
		mov    text_city_tax(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%dx
		mov    data_5539e(%esi),%al
		cmp    %dx,%ax
		je     jump_287ae
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%esi)
		jne    jump_28873
	jump_287ae:
		xor    %ebx,%ebx
		mov    0x14(%ebp),%bl
		push   %ebx
		call   show_tax_and_revenue
		add    $0x4,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		push   $0xf
		xor    %eax,%eax
		push   $0x16a
		mov    EXPORT_SYMBOL(language),%al
		push   $0xc2
		mov    text_city_stat(,%eax,4),%esi
		push   %esi
		call   new_show_text
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(country_states)(,%eax,2),%bx
		add    $0x28,%esp
		cmp    $0xff,%bx
		jne    jump_28952
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%cx
		push   $0xfffffffe
		cmp    $0x15a,%cx
		jbe    jump_28848
		cmpw   $0x174,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_28848
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_28848
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_28848
		mov    $0x166,%eax
		jmp    jump_2884d
	jump_28848:
		mov    $0x1ef,%eax
	jump_2884d:
		and    $0xffff,%eax
		push   %eax
		push   $0x82
		xor    %eax,%eax
		push   $0x15a
		mov    EXPORT_SYMBOL(language),%al
		push   $0x10
		mov    gui_strings_p267(,%eax,4),%edi
		push   %edi
		jmp    jump_2894a
	jump_28873:
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		push   $0xf
		xor    %eax,%eax
		push   $0x15c
		mov    EXPORT_SYMBOL(language),%al
		push   $0x10c
		mov    data_546cc(,%eax,4),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0x166
		push   $0xf
		xor    %eax,%eax
		push   $0x16a
		mov    EXPORT_SYMBOL(language),%al
		push   $0xc2
		mov    data_546c0(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		push   %ebx
		call   can_i_play_this_city
		add    $0x4,%esp
		cmp    $0x1,%al
		jne    jump_28952
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%si
		push   $0xfffffffe
		cmp    $0x15a,%si
		jbe    jump_28924
		cmpw   $0x174,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_28924
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_28924
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_28924
		mov    $0x166,%eax
		jmp    jump_28929
	jump_28924:
		mov    $0x1ef,%eax
	jump_28929:
		and    $0xffff,%eax
		push   %eax
		push   $0x82
		xor    %eax,%eax
		push   $0x15a
		mov    EXPORT_SYMBOL(language),%al
		push   $0x10
		mov    gui_strings_p267(,%eax,4),%ebx
		push   %ebx
	jump_2894a:
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_28952:
		xor    %edx,%edx
		mov    0x14(%ebp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(Network__Slot),%bx
		mov    data_5539e(%eax),%dl
		cmp    %bx,%dx
		je     jump_28985
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		jne    jump_28a77
	jump_28985:
		xor    %edx,%edx
		mov    0x14(%ebp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    EXPORT_SYMBOL(country_states)(%eax),%si
		cmp    $0x2f,%si
		jge    jump_289c2
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_city_mood_vhappy(,%eax,4),%edx
		push   %edx
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_28ab2
	jump_289c2:
		cmp    $0x5f,%si
		jge    jump_289e8
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_city_mood_happy(,%eax,4),%edi
		push   %edi
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_28ab2
	jump_289e8:
		cmp    $0xa0,%si
		jge    jump_28a0f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_city_mood_content(,%eax,4),%esi
		push   %esi
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_28ab2
	jump_28a0f:
		cmp    $0xd1,%si
		jge    jump_28a36
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_city_mood_unhappy(,%eax,4),%ecx
		push   %ecx
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_28ab2
	jump_28a36:
		cmp    $0xfe,%si
		jge    jump_28a5a
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_city_mood_discontent(,%eax,4),%ebx
		push   %ebx
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_28ab2
	jump_28a5a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_city_mood_rebellious(,%eax,4),%edx
		push   %edx
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_28ab2
	jump_28a77:
		xor    %edx,%edx
		mov    data_5539e(%eax),%dl
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $EXPORT_SYMBOL(players),%eax
		add    $0x23,%eax
		push   %eax
		push   $aS_0
		lea    -0x28(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
	jump_28ab2:
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x54
		push   $0xf
		push   $0x16a
		push   $0x10c
		lea    -0x28(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_connecting_cities:	/* 0x28af0 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x8,%esp
		xor    %edx,%edx
		mov    0x10(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(Network__Slot),%bx
		mov    data_5539e(%eax),%dl
		cmp    %bx,%dx
		jne    jump_28c27
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_28c27
		xor    %ah,%ah
		mov    %ah,0x4(%esp)
	jump_28b32:
		xor    %edx,%edx
		mov    0x10(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x4(%esp),%al
		add    %edx,%eax
		mov    data_5b069(%eax),%dl
		test   %dl,%dl
		je     jump_28c14
		mov    %dl,%al
		and    $0xff,%eax
		lea    -0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    data_5539e(,%eax,2),%dl
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%eax),%al
		and    $0xff,%eax
		mov    player_colour_for_map(%eax),%al
		mov    0x14(%esp),%dh
		mov    %al,(%esp)
		test   $0x4,%dh
		je     jump_28bb9
		xor    %bl,%bl
		mov    %bl,(%esp)
	jump_28bb9:
		xor    %edx,%edx
		mov    0x10(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %ebx,%ebx
		lea    0x0(,%eax,4),%eax
		mov    0x4(%esp),%bl
		sub    %edx,%eax
		add    %eax,%ebx
		mov    data_5b069(%ebx),%al
		dec    %al
		and    $0xff,%eax
		push   %eax
		call   can_i_play_this_city
		add    $0x4,%esp
		test   %al,%al
		je     jump_28c14
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(WScreen),%edx
		mov    (%esp),%al
		push   %edx
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    data_5b069(%ebx),%al
		dec    %eax
		cwtl
		push   %eax
		call   _draw_map_area
		add    $0xc,%esp
	jump_28c14:
		mov    0x4(%esp),%bh
		inc    %bh
		mov    %bh,0x4(%esp)
		cmp    $0x8,%bh
		jne    jump_28b32
	jump_28c27:
		xor    %bl,%bl
		lea    0x0(%eax),%eax
		nop
	jump_28c30:
		xor    %edx,%edx
		mov    %bl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(,%eax,2)
		jne    jump_28c9e
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e4ab(%eax),%al
		and    $0xff,%eax
		mov    0x14(%esp),%ch
		mov    player_colour_for_map(%eax),%al
		test   $0x4,%ch
		je     jump_28c85
		xor    %al,%al
	jump_28c85:
		mov    EXPORT_SYMBOL(WScreen),%ecx
		xor    %ah,%ah
		push   %ecx
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    %bl,%al
		cwtl
		push   %eax
		call   _draw_map_area
		add    $0xc,%esp
	jump_28c9e:
		inc    %bl
		cmp    $0x32,%bl
		jne    jump_28c30
		add    $0x8,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
_draw_map_area:	/* 0x28cb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x14(%esp),%cl
		movzbl 0x10(%esp),%esi
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		lea    0x0(,%eax,4),%eax
		mov    %esi,%edx
		sub    %esi,%eax
		lea    0x0(,%esi,4),%esi
		add    %edx,%esi
		lea    0x0(,%esi,4),%esi
		mov    world_map,%ebx
		sub    %edx,%esi
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    data_5b062(%esi),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		shl    $0x6,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		xor    %edx,%edx
		mov    map_countries(%esi),%dx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    0x18(%esp),%edx
		add    %edi,%eax
		add    %edx,%eax
		xor    %dh,%dh
		lea    0x0(%eax),%eax
		nop
	jump_28d30:
		xor    %dl,%dl
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_28d40:
		cmpb   $0x0,(%ebx)
		je     jump_28d47
		mov    %cl,(%eax)
	jump_28d47:
		inc    %ebx
		inc    %dl
		inc    %eax
		cmp    $0x40,%dl
		jne    jump_28d40
		inc    %dh
		add    $0x100,%eax
		cmp    $0x2c,%dh
		jne    jump_28d30
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
can_i_play_this_city:	/* 0x28d60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    EXPORT_SYMBOL(Network__Slot),%si
		mov    0xc(%esp),%cl
		cmpb   $0x0,EXPORT_SYMBOL(cheat_worldmap)
		je     jump_28d7d
		mov    $0x1,%al
		jmp    jump_28e7f
	jump_28d7d:
		xor    %edx,%edx
		mov    %cl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5539e(%eax),%dl
		cmp    %si,%dx
		jne    jump_28da8
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		jne    jump_28e7d
	jump_28da8:
		xor    %ebx,%ebx
		mov    %cl,%bl
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		cmpb   $0x1,data_5b071(%eax)
		jne    jump_28dea
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5539e(%eax),%dl
		cmp    %si,%dx
		jne    jump_28e03
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_28e03
	jump_28dea:
		xor    %edx,%edx
		mov    %cl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(,%eax,2)
		jne    jump_28e0f
	jump_28e03:
		mov    $0x1,%al
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		pop    %esi
		pop    %ebx
		ret
	jump_28e0f:
		xor    %bh,%bh
	jump_28e11:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5539e(%eax),%dl
		cmp    %si,%dx
		jne    jump_28e76
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		je     jump_28e76
		xor    %bl,%bl
	jump_28e3a:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		mov    data_5b069(%edx,%eax,1),%al
		dec    %al
		cmp    %cl,%al
		jne    jump_28e6f
		mov    $0x1,%al
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		pop    %esi
		pop    %ebx
		ret
	jump_28e6f:
		inc    %bl
		cmp    $0x8,%bl
		jne    jump_28e3a
	jump_28e76:
		inc    %bh
		cmp    $0x32,%bh
		jb     jump_28e11
	jump_28e7d:
		xor    %al,%al
	jump_28e7f:
		mov    %si,EXPORT_SYMBOL(Network__Slot)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
show_tax_and_revenue:	/* 0x28e90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x28,%esp
		xor    %edx,%edx
		mov    0x34(%esp),%dl
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		add    %ebx,%ebx
		mov    $0xf4240,%ecx
		xor    %edx,%edx
		mov    data_553a2(%ebx),%eax
		div    %ecx
		mov    %eax,%edx
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_553a0(%ebx),%edx
		add    %eax,%eax
		imul   %edx,%eax
		mov    $0xa,%ecx
		xor    %edx,%edx
		div    %ecx
		push   %eax
		push   $aD_2
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x54
		push   $0xf
		push   $0x15c
		push   $0x10c
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		movsbl data_553a0(%ebx),%eax
		push   %eax
		push   $aD_3
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		push   $0xf
		push   $0x15c
		push   $0x184
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0x8
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x54
		push   $0xf
		push   $0x15c
		push   $0x160
		push   $data_5366c
		call   new_show_text
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(Network__Slot),%dx
		mov    data_5539e(%ebx),%al
		add    $0x28,%esp
		cmp    %dx,%ax
		jne    jump_28fd5
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%ebx)
		je     jump_28fd5
		mov    m_sprites,%eax
		add    $0x42,%eax
		push   %eax
		push   $0x15a
		push   $0x176
		call   LbSpriteDrawMCGA
		mov    m_sprites,%eax
		add    $0xc,%esp
		add    $0x48,%eax
		push   %eax
		push   $0x15a
		push   $0x1b4
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
	jump_28fd5:
		add    $0x28,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
adjust_tax:	/* 0x28fe0 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %edx,%edx
		mov    0xc(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_553a0(,%eax,2),%bl
		add    0x8(%esp),%bl
		test   %bl,%bl
		jge    jump_29003
		xor    %bl,%bl
		jmp    jump_2900a
	jump_29003:
		cmp    $0x64,%bl
		jle    jump_2900a
		mov    $0x64,%bl
	jump_2900a:
		xor    %edx,%edx
		mov    0xc(%esp),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %bl,data_553a0(,%eax,2)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_29030:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    0x3c(%esp),%ecx
		mov    0x40(%esp),%edx
		xor    %eax,%eax
		xor    %esi,%esi
		mov    0x34(%esp),%ax
		mov    %cx,%si
		sub    %eax,%esi
		mov    $0x2,%ebp
		test   %esi,%esi
		jge    jump_29058
		neg    %esi
	jump_29058:
		xor    %edi,%edi
		xor    %eax,%eax
		mov    0x38(%esp),%di
		mov    %dx,%ax
		sub    %edi,%eax
		mov    %eax,%edi
		test   %eax,%eax
		jge    jump_2906e
		neg    %edi
	jump_2906e:
		cmp    %edi,%esi
		jl     jump_29167
		lea    0x0(,%edi,2),%eax
		mov    %eax,%ebx
		mov    %eax,0x10(%esp)
		sub    %esi,%edi
		sub    %esi,%ebx
		add    %edi,%edi
		mov    0x34(%esp),%esi
		mov    %edi,0x14(%esp)
		cmp    %si,%cx
		jae    jump_290c2
		xor    %esi,%esi
		xor    %eax,%eax
		xor    %edi,%edi
		mov    0x34(%esp),%ax
		mov    %cx,%si
		mov    %dx,%di
		mov    0x38(%esp),%ecx
		mov    %eax,0x4(%esp)
		cmp    %cx,%dx
		jbe    jump_290ec
		mov    %ebp,%ecx
		mov    %ebp,0x1c(%esp)
		neg    %ecx
		mov    %ecx,0x1c(%esp)
		jmp    jump_290f0
	jump_290c2:
		xor    %esi,%esi
		xor    %edi,%edi
		xor    %eax,%eax
		mov    0x34(%esp),%si
		mov    %cx,%ax
		mov    0x38(%esp),%di
		mov    %eax,0x4(%esp)
		cmp    %di,%dx
		jae    jump_290ec
		mov    %ebp,%edx
		mov    %ebp,0x1c(%esp)
		neg    %edx
		mov    %edx,0x1c(%esp)
		jmp    jump_290f0
	jump_290ec:
		mov    %ebp,0x1c(%esp)
	jump_290f0:
		testb  $0x4,0x4c(%esp)
		je     jump_290fd
		mov    0x48(%esp),%al
		jmp    jump_29101
	jump_290fd:
		mov    0x44(%esp),%al
	jump_29101:
		and    $0xff,%eax
		push   %eax
		push   %edi
		push   %esi
		call   pixel_plot
		add    $0xc,%esp
		cmp    0x4(%esp),%esi
		jge    jump_29248
	jump_2911b:
		add    %ebp,%esi
		test   %ebx,%ebx
		jge    jump_29127
		add    0x10(%esp),%ebx
		jmp    jump_29133
	jump_29127:
		mov    0x1c(%esp),%eax
		mov    0x14(%esp),%edx
		add    %eax,%edi
		add    %edx,%ebx
	jump_29133:
		testb  $0x4,0x4c(%esp)
		je     jump_29140
		mov    0x48(%esp),%al
		jmp    jump_29144
	jump_29140:
		mov    0x44(%esp),%al
	jump_29144:
		and    $0xff,%eax
		push   %eax
		push   %edi
		push   %esi
		call   pixel_plot
		add    $0xc,%esp
		decw   0x4c(%esp)
		cmp    0x4(%esp),%esi
		jl     jump_2911b
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_29167:
		lea    0x0(,%esi,2),%eax
		sub    %edi,%esi
		mov    %eax,%ebx
		add    %esi,%esi
		mov    %eax,0x8(%esp)
		mov    %esi,0xc(%esp)
		mov    0x38(%esp),%esi
		sub    %edi,%ebx
		cmp    %si,%dx
		jae    jump_291b2
		xor    %edi,%edi
		xor    %eax,%eax
		xor    %esi,%esi
		mov    0x38(%esp),%ax
		mov    %cx,%di
		mov    %dx,%si
		mov    0x34(%esp),%edx
		mov    %eax,(%esp)
		cmp    %dx,%cx
		jbe    jump_291db
		mov    %ebp,%ecx
		mov    %ebp,0x18(%esp)
		neg    %ecx
		mov    %ecx,0x18(%esp)
		jmp    jump_291df
	jump_291b2:
		xor    %edi,%edi
		xor    %esi,%esi
		xor    %eax,%eax
		mov    0x34(%esp),%di
		mov    %dx,%ax
		mov    0x38(%esp),%si
		mov    %eax,(%esp)
		cmp    %di,%cx
		jae    jump_291db
		mov    %ebp,%edx
		mov    %ebp,0x18(%esp)
		neg    %edx
		mov    %edx,0x18(%esp)
		jmp    jump_291df
	jump_291db:
		mov    %ebp,0x18(%esp)
	jump_291df:
		testb  $0x4,0x4c(%esp)
		je     jump_291ec
		mov    0x48(%esp),%al
		jmp    jump_291f0
	jump_291ec:
		mov    0x44(%esp),%al
	jump_291f0:
		and    $0xff,%eax
		push   %eax
		push   %esi
		push   %edi
		call   pixel_plot
		add    $0xc,%esp
		cmp    (%esp),%esi
		jge    jump_29248
	jump_29205:
		add    %ebp,%esi
		test   %ebx,%ebx
		jge    jump_29211
		add    0x8(%esp),%ebx
		jmp    jump_2921d
	jump_29211:
		mov    0x18(%esp),%ecx
		mov    0xc(%esp),%eax
		add    %ecx,%edi
		add    %eax,%ebx
	jump_2921d:
		testb  $0x4,0x4c(%esp)
		je     jump_2922a
		mov    0x48(%esp),%al
		jmp    jump_2922e
	jump_2922a:
		mov    0x44(%esp),%al
	jump_2922e:
		and    $0xff,%eax
		push   %eax
		push   %esi
		push   %edi
		call   pixel_plot
		add    $0xc,%esp
		incw   0x4c(%esp)
		cmp    (%esp),%esi
		jl     jump_29205
	jump_29248:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
move_it:	/* 0x29250 */
/*----------------------------------------------------------------*/
		call   move_worlds
		call   move_people
		call   move_weapons
		call   move_effects
		call   move_objects
		jmp    move_vehicles


/*----------------------------------------------------------------*/
remove_model:	/* 0x29270 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		push   %edx
		call   move_off_mapwho
		add    $0x4,%esp
		mov    0x4(%esp),%eax
		movb   $0x0,0x18(%eax)
		ret


/*----------------------------------------------------------------*/
animate_model:	/* 0x29290 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x10(%edx),%ax
		mov    frames,%ebx
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		mov    0x6(%eax),%ax
		mov    %ax,0x10(%edx)
		xor    %eax,%eax
		mov    0x10(%edx),%ax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		mov    0x5(%eax),%al
		and    $0x1,%al
		xor    %ah,%ah
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
move_worlds:	/* 0x292d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   $0x9
		call   random
		add    data_9bc78,%al
		sub    $0x2,%al
		mov    %al,data_9bc78
		xor    %eax,%eax
		xor    %edx,%edx
		mov    data_9bc78,%al
		mov    data_9bc77,%dl
		movswl data_5ab60(,%eax,2),%ebx
		imul   %edx,%ebx
		movswl data_5ad60(,%eax,2),%eax
		imul   %edx,%eax
		add    $0x4,%esp
		sar    $0x8,%ebx
		sar    $0x8,%eax
		mov    %bx,level__Worlds
		mov    %ax,data_9bc72
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
affect_by_wind:	/* 0x29330 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    level__Worlds,%ax
		mov    data_60b28,%dx
		mov    data_60b2a,%bx
		add    %eax,%edx
		add    data_9bc72,%bx
		mov    %dx,data_60b28
		mov    %bx,data_60b2a
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
getdist:	/* 0x29360 */
/*----------------------------------------------------------------*/
		push   %ebx
		movswl 0x8(%esp),%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		mov    %eax,%ebx
		movswl 0xc(%esp),%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    %ax,%bx
		jle    jump_29386
		mov    %ebx,%eax
	jump_29386:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
goto_angle:	/* 0x29390 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0xc(%esp),%bx
		mov    0x8(%esp),%dx
		movswl data_5ab60(,%ebx,2),%ecx
		imul   %edx,%ecx
		movswl data_60b28,%eax
		sar    $0x8,%ecx
		add    %ecx,%eax
		mov    %ax,data_60b28
		movswl data_5ad60(,%ebx,2),%eax
		imul   %eax,%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		mov    %ax,data_60b2a
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
goto_zangle:	/* 0x293e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0xc(%esp),%bx
		mov    0x8(%esp),%dx
		movswl data_5ab60(,%ebx,2),%ecx
		imul   %edx,%ecx
		movswl data_60b28,%eax
		sar    $0x8,%ecx
		add    %ecx,%eax
		mov    %ax,data_60b28
		movswl data_5ad60(,%ebx,2),%eax
		mov    %eax,%ebx
		imul   %edx,%ebx
		movswl data_60b2a,%eax
		sar    $0x8,%ebx
		add    %ebx,%eax
		mov    %ax,data_60b2a
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		movswl data_5ab60(,%eax,2),%eax
		imul   %eax,%edx
		movswl data_60b2c,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		mov    %ax,data_60b2c
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_angle:	/* 0x29460 */
/*----------------------------------------------------------------*/
		movswl 0x8(%esp),%eax
		push   %eax
		movswl 0x8(%esp),%eax
		push   %eax
		call   arctan
		add    $0x8,%esp
		ret


/*----------------------------------------------------------------*/
goto_point:	/* 0x29480 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		movswl 0x10(%esp),%edx
		mov    %edx,%ebx
		imul   %edx,%ebx
		movswl 0x14(%esp),%eax
		mov    %eax,%ecx
		imul   %eax,%ecx
		add    %ebx,%ecx
		xor    %ebx,%ebx
		mov    0xc(%esp),%bx
		mov    %ebx,%esi
		imul   %ebx,%esi
		cmp    %ecx,%esi
		ja     jump_294fa
		push   %eax
		push   %edx
		call   arctan
		xor    %edx,%edx
		mov    %ax,%dx
		movswl data_5ab60(,%edx,2),%ecx
		imul   %ebx,%ecx
		mov    %eax,%esi
		movswl data_60b28,%eax
		sar    $0x8,%ecx
		add    %ecx,%eax
		mov    %ax,data_60b28
		movswl data_5ad60(,%edx,2),%eax
		mov    %eax,%edx
		imul   %ebx,%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		add    $0x8,%esp
		mov    %ax,data_60b2a
		mov    %esi,%eax
		pop    %esi
		pop    %ebx
		ret
	jump_294fa:
		mov    0x10(%esp),%eax
		mov    data_60b28,%dx
		mov    data_60b2a,%bx
		add    %eax,%edx
		mov    0x14(%esp),%eax
		mov    %dx,data_60b28
		add    %eax,%ebx
		mov    $0xffffffff,%eax
		mov    %bx,data_60b2a
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
move_mapwho:	/* 0x29530 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%eax
		mov    0x14(%esp),%ecx
		mov    0x18(%esp),%edi
		movswl %cx,%edx
		sar    $0x8,%edx
		mov    %edx,%ebx
		movswl %di,%edx
		sar    $0x8,%edx
		cmp    $0x1,%bx
		jge    jump_29558
		mov    $0x7e00,%ecx
	jump_29558:
		cmp    $0x1,%dx
		jge    jump_29563
		mov    $0x5e00,%edi
	jump_29563:
		cmp    $0x7f,%bx
		jl     jump_2956e
		mov    $0x200,%ecx
	jump_2956e:
		cmp    $0x5f,%dx
		jl     jump_29579
		mov    $0x200,%edi
	jump_29579:
		andb   $0xf,0x1d(%esp)
		mov    %edi,%edx
		and    $0x7f,%dh
		xor    %dl,%dl
		movswl %dx,%edx
		mov    %edx,%ebx
		movswl %cx,%edx
		sar    $0x8,%edx
		sar    $1,%ebx
		and    $0x7f,%edx
		or     %ebx,%edx
		mov    0x6(%eax),%bx
		and    $0x7f,%bh
		xor    %bl,%bl
		movswl %bx,%ebx
		mov    %ebx,%esi
		movswl 0x4(%eax),%ebx
		sar    $0x8,%ebx
		sar    $1,%esi
		and    $0x7f,%ebx
		or     %esi,%ebx
		add    %edx,%edx
		add    %ebx,%ebx
		add    $level__MapWho,%edx
		add    $level__MapWho,%ebx
		cmp    %ebx,%edx
		je     jump_29640
		testb  $0x4,0xa(%eax)
		je     jump_29608
		mov    0x2(%eax),%si
		test   %si,%si
		je     jump_295e5
		xor    %ebx,%ebx
		mov    %si,%bx
		add    $level__things_base,%ebx
	jump_295e5:
		mov    (%eax),%si
		mov    %si,(%ebx)
		cmpw   $0x0,(%eax)
		je     jump_29604
		xor    %ebx,%ebx
		mov    (%eax),%bx
		add    $level__things_base,%ebx
		mov    0x2(%eax),%si
		mov    %si,0x2(%ebx)
	jump_29604:
		andb   $0xfb,0xa(%eax)
	jump_29608:
		testb  $0x4,0xa(%eax)
		jne    jump_29640
		mov    %eax,%ebx
		sub    $level__things_base,%ebx
		movw   $0x0,0x2(%eax)
		mov    %ebx,%esi
		mov    (%edx),%bx
		mov    %bx,(%eax)
		test   %bx,%bx
		je     jump_29639
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		mov    %si,0x2(%ebx)
	jump_29639:
		mov    %si,(%edx)
		orb    $0x4,0xa(%eax)
	jump_29640:
		mov    %cx,0x4(%eax)
		mov    0x1c(%esp),%edx
		mov    %di,0x6(%eax)
		mov    %dx,0x8(%eax)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
move_off_mapwho:	/* 0x29660 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		testb  $0x4,0xa(%eax)
		je     jump_296c8
		mov    0x6(%eax),%dx
		and    $0x7f,%dh
		xor    %dl,%dl
		movswl %dx,%edx
		mov    %edx,%ebx
		movswl 0x4(%eax),%edx
		sar    $0x8,%edx
		sar    $1,%ebx
		and    $0x7f,%edx
		or     %ebx,%edx
		add    %edx,%edx
		mov    0x2(%eax),%bx
		add    $level__MapWho,%edx
		test   %bx,%bx
		je     jump_296a3
		xor    %edx,%edx
		mov    %bx,%dx
		add    $level__things_base,%edx
	jump_296a3:
		mov    (%eax),%bx
		mov    %bx,(%edx)
		mov    (%eax),%cx
		test   %cx,%cx
		je     jump_296c4
		xor    %edx,%edx
		mov    %cx,%dx
		add    $level__things_base,%edx
		mov    0x2(%eax),%bx
		mov    %bx,0x2(%edx)
	jump_296c4:
		andb   $0xfb,0xa(%eax)
	jump_296c8:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
move_on_mapwho:	/* 0x296d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		testb  $0x4,0xa(%eax)
		jne    jump_29738
		mov    0x10(%esp),%dx
		and    $0x7f,%dh
		xor    %dl,%dl
		mov    %edx,%ebx
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		and    $0xffff,%ebx
		sar    $0x8,%edx
		sar    $1,%ebx
		and    $0x7f,%edx
		or     %ebx,%edx
		add    %edx,%edx
		mov    %eax,%ebx
		add    $level__MapWho,%edx
		sub    $level__things_base,%ebx
		movw   $0x0,0x2(%eax)
		mov    %ebx,%ecx
		mov    (%edx),%bx
		mov    %bx,(%eax)
		test   %bx,%bx
		je     jump_29731
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		mov    %cx,0x2(%ebx)
	jump_29731:
		mov    %cx,(%edx)
		orb    $0x4,0xa(%eax)
	jump_29738:
		mov    0xc(%esp),%edx
		mov    %dx,0x4(%eax)
		mov    0x10(%esp),%edx
		mov    %dx,0x6(%eax)
		mov    0x14(%esp),%edx
		mov    %dx,0x8(%eax)
		pop    %ebx
		ret

jpt_2998D:	/* 0x29760 */
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_297e5
		.long   func_29818
		.long   func_2980f

/*----------------------------------------------------------------*/
multi_out:	/* 0x29790 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    $0x7,%ebp
		mov    $0xc,%dl
		xor    %ah,%ah
		mov    %dl,0x4(%esp)
		mov    $0x5a,%edx
		mov    %ah,(%esp)
		mov    %dx,EXPORT_SYMBOL(current_levno)
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p240(,%eax,4),%edx
		mov    $0x1,%bh
		push   %edx
		mov    %bh,EXPORT_SYMBOL(is_multiplayer_game)
		call   DisplayScreenTitle
		add    $0x4,%esp
		mov    $0x10,%edi
		jmp    jump_29844


func_297e5:
		mov    0x4(%esp),%al
		xor    %edx,%edx
		inc    %al
		mov    0x4(%esp),%dl
		mov    %al,data_55038
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    data_5b524(,%eax,2),%ax
		mov    %ax,EXPORT_SYMBOL(current_levno)
		jmp    def_2998D

func_2980f:
		mov    $0x1,%dl
		xor    %ebp,%ebp
		mov    %dl,(%esp)
		jmp    def_2998D

func_29818:
		cmpb   $0x0,data_55038
		je     def_2998D
		movb   $0x1,(%esp)

	def_2998D:	/* 0x29825 */
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
		mov    $0xc,%bh
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
		mov    %bh,0x4(%esp)
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,(%esp)
		jne    jump_29995
	jump_29844:
		call   LbCopyScreenFromBackMCGA
		call   DrawAcceptGadget
		call   DrawMenuGadget
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		mov    m_logos,%ebx
		add    %edx,%eax
		push   %ebx
		lea    0x0(,%eax,4),%eax
		push   $0x20
		sub    %edx,%eax
		push   $0x20
		lea    0x0(,%eax,8),%eax
		push   $0x7
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0x9
		mov    data_5e4ab(%eax),%dl
		mov    data_5e4ac(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   %eax
		xor    %esi,%esi
		call   draw_logo
		add    $0x1c,%esp
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_298b0:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    data_55038,%al
		mov    %si,%dx
		dec    %eax
		mov    $0x1ef,%ebx
		cmp    %eax,%edx
		jne    jump_298cb
		mov    $0x166,%ebx
	jump_298cb:
		push   $0x0
		push   $0x0
		push   $0xe
		mov    m_sprites,%ecx
		push   $0xfffffffe
		xor    %eax,%eax
		xor    %edx,%edx
		push   %ecx
		mov    %bx,%ax
		mov    %si,%dx
		push   %eax
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %edx,%ebx
		mov    data_5b6fc(%eax),%bx
		push   %edi
		add    $0x6,%bx
		mov    data_5b6fa(%eax),%ax
		and    $0xffff,%ebx
		add    $0x2,%ax
		push   %ebx
		and    $0xffff,%eax
		push   %eax
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    data_5b520(,%eax,2),%edx
		push   %edx
		inc    %esi
		call   new_show_text
		add    $0x28,%esp
		cmp    $0xa,%si
		jb     jump_298b0
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_29960
		push   $0xc
		push   $0x1
		xor    %ch,%ch
		push   $data_5b6fa
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,0x4(%esp)
	jump_29960:
		cmpb   $0xc,0x4(%esp)
		jne    jump_2997c
		push   $0xc
		push   $0x0
		push   $data_5b6fa
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,0x4(%esp)
	jump_2997c:
		cmpb   $0xb,0x4(%esp)
		ja     def_2998D
		xor    %eax,%eax
		mov    0x4(%esp),%al
		jmp    *%cs:jpt_2998D(,%eax,4)
	jump_29995:
		mov    $0x1,%ebx
		mov    $AniName,%edi
		mov    $aDataMmultoutDa,%esi
		xor    %ecx,%ecx
		mov    %ebx,EXPORT_SYMBOL(MouseSwap)
		mov    %ecx,MouseOldW
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		xor    %ch,%ch
		push   $0x2
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		call   LbCopyScreenToBackMCGA
		xor    %edx,%edx
		mov    data_55038,%dl
		sub    %ebx,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    data_5b524(,%eax,2),%ax
		mov    %ax,EXPORT_SYMBOL(current_levno)
		mov    %ebp,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ExchangeNetwork_Packet:	/* 0x29a10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		call   StartNetwork
		xor    %edx,%edx
		mov    %edx,0x14(%esp)
		mov    $packets,%ebp
		jmp    jump_29b4f
	jump_29a2c:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		cmp    %edx,%eax
		jne    jump_29b01
		mov    Network__NumberOfSlots,%bx
		xor    %edi,%edi
		test   %bx,%bx
		jle    jump_29b4b
	jump_29a4d:
		movswl %di,%ebx
		cmpb   $0x1,Network__Status(%ebx)
		jne    jump_29aef
		movswl EXPORT_SYMBOL(Network__Slot),%esi
		lea    0x0(,%esi,8),%eax
		sub    %esi,%eax
		add    %eax,%eax
		push   $0xe
		add    %ebp,%eax
		push   %eax
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_60648(%eax),%dx
		push   %edx
		mov    NetUserNcb(%eax),%ecx
		push   %ecx
		mov    %eax,%esi
		call   net_send
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_29aef
		push   %ebx
		push   $EXPORT_SYMBOL(Network__Name)
		lgs    NetUserNcb(%esi),%eax
		push   $aSD
		movb   $0x0,%gs:0x2(%eax)
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0x1
		lea    0xc(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    data_60648(%esi),%ax
		push   %eax
		mov    NetUserNcb(%esi),%eax
		push   %eax
		call   __NETListen__
		xor    %cl,%cl
		add    $0x18,%esp
		mov    %cl,Network__Status(%ebx)
	jump_29aef:
		mov    Network__NumberOfSlots,%cx
		inc    %edi
		cmp    %cx,%di
		jge    jump_29b4b
		jmp    jump_29a4d
	jump_29b01:
		cmpb   $0x1,Network__Status(%eax)
		jne    jump_29b4b
		xor    %edi,%edi
	jump_29b0c:
		xor    %ebx,%ebx
		mov    0x14(%esp),%bx
		lea    0x0(,%ebx,8),%eax
		sub    %ebx,%eax
		add    %eax,%eax
		push   %edi
		add    %ebp,%eax
		push   %eax
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		xor    %ebx,%ebx
		mov    data_60648(,%eax,2),%bx
		push   %ebx
		mov    NetUserNcb(,%eax,2),%edx
		push   %edx
		call   net_receive
		add    $0x10,%esp
		test   %ax,%ax
		jle    jump_29b0c
	jump_29b4b:
		incl   0x14(%esp)
	jump_29b4f:
		xor    %eax,%eax
		movswl Network__NumberOfSlots,%edx
		mov    0x14(%esp),%ax
		cmp    %edx,%eax
		jl     jump_29a2c
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ExchangeNetwork_PlayerInfo:	/* 0x29b70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		push   $aExchangingInfo
		call   ac_printf
		mov    Network__NumberOfSlots,%dx
		add    $0x4,%esp
		cmp    $0x1,%dx
		jle    jump_29cd4
		mov    0x14(%esp),%ebx
		cmp    EXPORT_SYMBOL(Network__Slot),%bx
		jne    jump_29cd4
		xor    %edi,%edi
		mov    $0x417,%ebp
		jmp    jump_29cc0
	jump_29baf:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		cmp    %edx,%eax
		jne    jump_29c55
		xor    %esi,%esi
		jmp    jump_29c3f
	jump_29bc5:
		cmpb   $0x0,Network__Status(%ebx)
		je     jump_29c3e
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		cmp    %eax,%ebx
		je     jump_29c3e
		push   $aSending
		call   ac_printf
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		add    $0x4,%esp
		sub    %edx,%eax
		push   %ebp
		add    $EXPORT_SYMBOL(players),%eax
		push   %eax
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		xor    %edx,%edx
		mov    data_60648(,%eax,2),%dx
		push   %edx
		mov    NetUserNcb(,%eax,2),%ebx
		push   %ebx
		call   SendNetwork
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_29c3e
		mov    $0xffffffff,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_29c3e:
		inc    %esi
	jump_29c3f:
		xor    %ebx,%ebx
		movswl Network__NumberOfSlots,%eax
		mov    %si,%bx
		cmp    %eax,%ebx
		jl     jump_29bc5
		jmp    jump_29cbf
	jump_29c55:
		cmpb   $0x1,Network__Status(%eax)
		jne    jump_29cbf
		push   $aReceiving
		call   ac_printf
		add    $0x4,%esp
		mov    %ebp,%esi
	jump_29c6d:
		xor    %ebx,%ebx
		mov    %di,%bx
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ebx,%eax
		push   %esi
		add    $EXPORT_SYMBOL(players),%eax
		push   %eax
		lea    0x0(,%ebx,4),%eax
		mov    %ebx,%edx
		sub    %ebx,%eax
		xor    %ebx,%edx
		mov    data_60648(,%eax,2),%dx
		push   %edx
		mov    NetUserNcb(,%eax,2),%edx
		push   %edx
		call   ReceiveNetwork
		add    $0x10,%esp
		cmp    $0x417,%eax
		jne    jump_29c6d
	jump_29cbf:
		inc    %edi
	jump_29cc0:
		xor    %eax,%eax
		movswl Network__NumberOfSlots,%edx
		mov    %di,%ax
		cmp    %edx,%eax
		jl     jump_29baf
	jump_29cd4:
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
NetworkCmdlineSetup:	/* 0x29ce0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    $0x1,%edx
		mov    $0x1,%ah
		push   $0x12
		mov    EXPORT_SYMBOL(byte_60B4C),%bl
		mov    %edx,0x4c(%esp)
		mov    %ah,EXPORT_SYMBOL(byte_60B4C)
		call   ac_AppScreenSetup
		add    $0x4,%esp
	jump_29d08:
		push   $aHowManyPlayers
		call   ac_puts
		add    $0x4,%esp
		mov    %esp,%eax
		push   %eax
		call   ac_gets
		add    $0x4,%esp
		mov    %esp,%eax
		push   %eax
		call   ac_atoi
		add    $0x4,%esp
		mov    %ax,Network__NumberOfSlots
		test   %ax,%ax
		je     jump_29d08
		cmp    $0x8,%ax
		jg     jump_29d08
		cmp    $0x1,%ax
		jne    jump_29d4c
		mov    $0xfffffffd,%eax
		jmp    jump_2a2a2
	jump_29d4c:
		push   $aNumberOfPlayer
		mov    %bl,EXPORT_SYMBOL(byte_60B4C)
		call   ac_printf
		add    $0x4,%esp
		xor    %ebx,%ebx
		mov    Network__NumberOfSlots,%cx
		mov    %bx,0x4c(%esp)
		test   %cx,%cx
		jle    jump_29d95
		mov    Network__NumberOfSlots,%di
	jump_29d79:
		movswl 0x4c(%esp),%eax
		mov    0x4c(%esp),%esi
		xor    %dl,%dl
		inc    %esi
		mov    %dl,Network__Status(%eax)
		mov    %si,0x4c(%esp)
		cmp    %di,%si
		jl     jump_29d79
	jump_29d95:
		mov    $EXPORT_SYMBOL(Network__Name),%ebx
	jump_29d9a:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_29db0
		mov    $0xfffffffe,%eax
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_29db0:
		mov    $0xffffffff,%edx
		xor    %eax,%eax
		mov    Network__NumberOfSlots,%cx
		mov    %ax,0x4c(%esp)
		mov    %dx,EXPORT_SYMBOL(Network__Slot)
		test   %cx,%cx
		jle    jump_29ea8
	jump_29dd3:
		lea    0x2c(%esp),%edi
		mov    %ebx,%esi
		push   %edi
	jump_29dda:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_29df6
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_29dda
	jump_29df6:
		pop    %edi
		lea    0x2c(%esp),%edi
		mov    0x4c(%esp),%dl
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		add    $0x30,%dl
		xor    %al,%al
		lea    0x2c(%esp),%edi
		mov    %al,0x2d(%esp,%ecx,1)
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		lea    0x2c(%esp),%eax
		mov    %dl,0x2c(%esp,%ecx,1)
		movswl 0x4c(%esp),%ecx
		push   %eax
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		mov    data_60648(%eax),%cx
		push   %ecx
		mov    NetUserNcb(%eax),%edx
		push   %edx
		mov    %eax,%edi
		call   __NETAdd__
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_29e65
		mov    0x4c(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(Network__Slot)
		jmp    jump_29ea8
	jump_29e65:
		cwtl
		cmp    $0xfffffff3,%eax
		jne    jump_29e8e
		lea    0x2c(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    data_60648(%edi),%ax
		push   %eax
		mov    NetUserNcb(%edi),%ecx
		push   %ecx
		call   __NETDelete__
		add    $0xc,%esp
		decw   0x4c(%esp)
	jump_29e8e:
		mov    0x4c(%esp),%esi
		inc    %esi
		mov    Network__NumberOfSlots,%di
		mov    %si,0x4c(%esp)
		cmp    %di,%si
		jl     jump_29dd3
	jump_29ea8:
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		cmp    $0xffffffff,%eax
		je     jump_29d9a
		push   $aSearchingForOt
		call   ac_printf
		add    $0x4,%esp
		xor    %edx,%edx
		mov    Network__NumberOfSlots,%bx
		mov    %dx,0x4c(%esp)
		test   %bx,%bx
		jle    jump_2a006
	jump_29edc:
		mov    0x4c(%esp),%eax
		mov    EXPORT_SYMBOL(Network__Slot),%dx
		cmp    %dx,%ax
		je     jump_29fcf
		movswl %dx,%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    data_60648(,%eax,2),%cx
		mov    NetUserNcb(,%eax,2),%ebx
		movswl 0x4c(%esp),%eax
		lea    0x0(,%eax,4),%ebp
		sub    %eax,%ebp
		add    %ebp,%ebp
		add    $0x1a,%ebx
		mov    %eax,0x40(%esp)
		mov    NetUserNcb(%ebp),%eax
		mov    data_60648(%ebp),%dx
		add    $0x1a,%eax
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
	jump_29f3f:
		mov    (%esi),%al
		mov    %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_29f5d
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,%es:0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_29f3f
	jump_29f5d:
		pop    %eax
		pop    %es
		pop    %ds
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		mov    0x40(%esp),%edi
		lea    0x0(,%ebx,4),%eax
		push   %edi
		sub    %ebx,%eax
		push   $EXPORT_SYMBOL(Network__Name)
		lgs    NetUserNcb(,%eax,2),%ebx
		mov    data_60648(%ebp),%cx
		mov    NetUserNcb(%ebp),%eax
		mov    %gs:0x3(%ebx),%dl
		mov    %ecx,%gs
		push   $aSD
		mov    %dl,%gs:0x3(%eax)
		lea    0x38(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0x1
		lea    0x38(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    data_60648(%ebp),%ax
		push   %eax
		mov    NetUserNcb(%ebp),%ebp
		push   %ebp
		call   __NETListen__
		add    $0x18,%esp
	jump_29fcf:
		movswl 0x4c(%esp),%ecx
		xor    %dl,%dl
		lea    0x0(,%ecx,8),%eax
		mov    %dl,Network__Status(%ecx)
		sub    %ecx,%eax
		mov    0x4c(%esp),%ecx
		mov    Network__NumberOfSlots,%si
		inc    %ecx
		mov    %dl,data_605e1(,%eax,2)
		mov    %cx,0x4c(%esp)
		cmp    %si,%cx
		jl     jump_29edc
	jump_2a006:
		push   $aCommunicateWit
		call   ac_printf
		xor    %edi,%edi
		add    $0x4,%esp
		mov    Network__NumberOfSlots,%ax
		mov    %di,0x4c(%esp)
		test   %ax,%ax
		jle    jump_2a1ef
	jump_2a029:
		movswl 0x4c(%esp),%ecx
		mov    0x4c(%esp),%eax
		xor    %bh,%bh
		mov    EXPORT_SYMBOL(Network__Slot),%si
		mov    %bh,Network__Status(%ecx)
		cmp    %si,%ax
		je     jump_2a1d5
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		lgs    NetUserNcb(,%eax,2),%eax
		cmpb   $0x0,%gs:0x2(%eax)
		je     jump_2a06d
		cmpb   $0xff,%gs:0x31(%eax)
		jne    jump_2a1d5
	jump_2a06d:
		movswl 0x4c(%esp),%ebp
		lea    0x0(,%ebp,4),%eax
		sub    %ebp,%eax
		add    %eax,%eax
		mov    %eax,0x44(%esp)
		lgs    NetUserNcb(%eax),%eax
		xor    %ebx,%ebx
		mov    %gs:0x31(%eax),%bl
		mov    %gs:0x2(%eax),%al
		push   %ebx
		and    $0xff,%eax
		push   %eax
		push   %ebp
		push   $aCallingDDD
		call   ac_printf
		add    $0x10,%esp
		push   %ebp
		push   $EXPORT_SYMBOL(Network__Name)
		push   $aSD
		lea    0x38(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		lea    0x34(%esp),%eax
		push   $0x0
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		push   %eax
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		xor    %ebx,%ebx
		mov    data_60648(,%eax,2),%bx
		push   %ebx
		mov    NetUserNcb(,%eax,2),%edx
		push   %edx
		call   __NETCall__
		add    $0x18,%esp
		test   %ax,%ax
		jne    jump_2a1d5
		push   %ebp
		push   $aCancellingPlay
		call   ac_printf
		add    $0x8,%esp
		mov    0x44(%esp),%ebx
		xor    %eax,%eax
		mov    data_60648(%ebx),%ax
		push   %eax
		mov    NetUserNcb(%ebx),%ebx
		push   %ebx
		call   __NETCancel__
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		lea    0x0(,%ebx,4),%eax
		add    $0x8,%esp
		sub    %ebx,%eax
		mov    0x44(%esp),%edx
		mov    data_60648(,%eax,2),%cx
		mov    NetUserNcb(,%eax,2),%ebx
		mov    0x44(%esp),%eax
		mov    data_60648(%edx),%dx
		mov    NetUserNcb(%eax),%eax
		add    $0xa,%ebx
		add    $0xa,%eax
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
	jump_2a170:
		mov    (%esi),%al
		mov    %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2a18e
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,%es:0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_2a170
	jump_2a18e:
		pop    %eax
		pop    %es
		pop    %ds
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    0x48(%esp),%edi
		mov    0x44(%esp),%ebx
		lgs    NetUserNcb(,%eax,2),%eax
		mov    data_60648(%ebx),%dx
		mov    NetUserNcb(%ebx),%ebx
		mov    %gs:0x2(%eax),%al
		mov    %edx,%gs
		inc    %edi
		mov    %al,%gs:0x2(%ebx)
		mov    $0x1,%al
		mov    %edi,0x48(%esp)
		mov    %al,Network__Status(%ebp)
	jump_2a1d5:
		mov    0x4c(%esp),%ebx
		inc    %ebx
		mov    Network__NumberOfSlots,%cx
		mov    %bx,0x4c(%esp)
		cmp    %cx,%bx
		jl     jump_2a029
	jump_2a1ef:
		push   $aPleaseWait
		call   ac_printf
		add    $0x4,%esp
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_2a212
	jump_2a205:
		mov    $0xfffffffe,%eax
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2a212:
		mov    Network__NumberOfSlots,%si
	jump_2a219:
		mov    Network__NumberOfSlots,%dx
		xor    %eax,%eax
		xor    %edi,%edi
		mov    %ax,0x4c(%esp)
		test   %dx,%dx
		jle    jump_2a276
	jump_2a22e:
		movswl 0x4c(%esp),%ecx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		lgs    NetUserNcb(,%eax,2),%eax
		cmpb   $0x0,%gs:0x2(%eax)
		je     jump_2a252
		cmpb   $0xff,%gs:0x31(%eax)
		jne    jump_2a25f
	jump_2a252:
		mov    0x4c(%esp),%eax
		cmp    EXPORT_SYMBOL(Network__Slot),%ax
		jne    jump_2a260
	jump_2a25f:
		inc    %edi
	jump_2a260:
		mov    0x4c(%esp),%ebx
		inc    %ebx
		mov    Network__NumberOfSlots,%cx
		mov    %bx,0x4c(%esp)
		cmp    %cx,%bx
		jl     jump_2a22e
	jump_2a276:
		cmp    %si,%di
		je     jump_2a286
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		jne    jump_2a205
		jmp    jump_2a219
	jump_2a286:
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		lea    0x0(,%ebx,8),%eax
		sub    %ebx,%eax
		movb   $0x1,data_605e1(,%eax,2)
		mov    0x48(%esp),%eax
	jump_2a2a2:
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
StartNetwork:	/* 0x2a2b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		xor    %esi,%esi
		xor    %ebx,%ebx
		jmp    jump_2a328
	jump_2a2bb:
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lgs    NetUserNcb(,%eax,2),%eax
		cmpb   $0x0,%gs:0x2(%eax)
		je     jump_2a31a
		cmpb   $0xff,%gs:0x31(%eax)
		je     jump_2a31a
		cmpb   $0x0,Network__Status(%edx)
		jne    jump_2a327
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		cmp    %ecx,%edx
		je     jump_2a327
		mov    %gs:0x31(%eax),%ch
		test   %ch,%ch
		je     jump_2a310
		mov    %ch,%al
		and    $0xff,%eax
		push   %eax
		push   $0x10a
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2a310:
		xor    %eax,%eax
		mov    %bx,%ax
		mov    $0x1,%dl
		inc    %esi
		jmp    jump_2a321
	jump_2a31a:
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %dl,%dl
	jump_2a321:
		mov    %dl,Network__Status(%eax)
	jump_2a327:
		inc    %ebx
	jump_2a328:
		xor    %edx,%edx
		movswl Network__NumberOfSlots,%eax
		mov    %bx,%dx
		cmp    %eax,%edx
		jl     jump_2a2bb
		mov    %esi,%eax
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
StopNetwork:	/* 0x2a340 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		xor    %esi,%esi
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    0x28(%esp),%si
		cmp    %esi,%eax
		jne    jump_2a45a
		xor    %esi,%esi
		jmp    jump_2a3ef
	jump_2a364:
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		cmp    %eax,%edx
		je     jump_2a3ee
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		mov    data_60648(%eax),%dx
		mov    NetUserNcb(%eax),%eax
		mov    %edx,%gs
		cmpb   $0x0,%gs:0x2(%eax)
		je     jump_2a3c5
		cmpb   $0xff,%gs:0x31(%eax)
		je     jump_2a3c5
		and    $0xffff,%edx
		push   %edx
		push   %eax
		call   __NETCancel__
		xor    %eax,%eax
		add    $0x8,%esp
		mov    data_60648(%ebx),%ax
		push   %eax
		mov    NetUserNcb(%ebx),%ebp
		push   %ebp
		call   __NETHangUp__
		jmp    jump_2a3eb
	jump_2a3c5:
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_60648(,%eax,2),%dx
		push   %edx
		mov    NetUserNcb(,%eax,2),%edi
		push   %edi
		call   __NETCancel__
	jump_2a3eb:
		add    $0x8,%esp
	jump_2a3ee:
		inc    %esi
	jump_2a3ef:
		xor    %edx,%edx
		movswl Network__NumberOfSlots,%eax
		mov    %si,%dx
		cmp    %eax,%edx
		jl     jump_2a364
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		push   %eax
		push   $EXPORT_SYMBOL(Network__Name)
		push   $aSD
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		lea    0x10(%esp),%eax
		add    $0x10,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %eax
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_60648(,%eax,2),%dx
		push   %edx
		mov    NetUserNcb(,%eax,2),%esi
		push   %esi
		call   __NETDelete__
		add    $0xc,%esp
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2a45a:
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_60648(%eax),%dx
		push   %edx
		mov    NetUserNcb(%eax),%edx
		push   %edx
		mov    %eax,%ebx
		call   __NETCancel__
		xor    %eax,%eax
		add    $0x8,%esp
		mov    data_60648(%ebx),%ax
		push   %eax
		mov    NetUserNcb(%ebx),%ecx
		push   %ecx
		call   __NETHangUp__
		lgs    NetUserNcb(%ebx),%eax
		movb   $0x0,%gs:0x2(%eax)
		xor    %ah,%ah
		mov    %ah,Network__Status(%esi)
		lgs    NetUserNcb(%ebx),%eax
		add    $0x8,%esp
		movb   $0xff,%gs:0x31(%eax)
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
SetupNetwork:	/* 0x2a4d0 */
		push   %ebx
		push   %esi
		cmpl   $0x0,Network__MasterNcb
		jne    jump_2a4e5
		cmpw   $0x0,data_5505a
		je     jump_2a4ea
	jump_2a4e5:
		xor    %eax,%eax
		pop    %esi
		pop    %ebx
		ret
	jump_2a4ea:
		call   NetMyLowAlloc
		mov    %dx,data_5505a
		mov    %eax,Network__MasterNcb
		test   %eax,%eax
		jne    jump_2a508
		test   %dx,%dx
		je     jump_2a5ad
	jump_2a508:
		call   __NETCheckBios__
		cwtl
		cmp    $0xffffffff,%eax
		jne    jump_2a52f
		push   $aNetbios
		call   ac_system
		add    $0x4,%esp
		call   __NETCheckBios__
		cwtl
		cmp    $0xffffffff,%eax
		je     jump_2a5ad
	jump_2a52f:
		xor    %ebx,%ebx
		mov    0xc(%esp),%bx
		push   %ebx
		push   $Network_SendBuffer
		call   __NETUnkn1__
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_2a5ad
		push   %ebx
		push   $Network_ReceiveBuffer
		call   __NETUnkn1__
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_2a5ad
		xor    %esi,%esi
	jump_2a55e:
		call   NetMyLowAlloc
		mov    %edx,%ecx
		xor    %edx,%edx
		mov    %si,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %cx,data_60648(,%eax,2)
		mov    %ebx,NetUserNcb(,%eax,2)
		mov    data_60648(,%eax,2),%dx
		mov    %ebx,%eax
		test   %eax,%eax
		jne    jump_2a597
		test   %dx,%dx
		je     jump_2a5ad
	jump_2a597:
		inc    %esi
		cmp    $0x8,%si
		jb     jump_2a55e
		mov    0xc(%esp),%eax
		mov    %ax,Network__RecvBufferSize
		xor    %eax,%eax
		pop    %esi
		pop    %ebx
		ret
	jump_2a5ad:
		mov    $0xffffffff,%eax
		pop    %esi
		pop    %ebx
		ret
ResetNetwork:	/* 0x2a5c0 */
		push   %ebx
		push   %esi
		xor    %ebx,%ebx
	jump_2a5c4:
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_60648(,%eax,2),%dx
		push   %edx
		mov    NetUserNcb(,%eax,2),%edx
		push   %edx
		inc    %ebx
		call   ResetNetSlot
		add    $0x8,%esp
		cmp    $0x8,%bx
		jb     jump_2a5c4
		xor    %eax,%eax
		mov    data_5df22,%ax
		push   %eax
		mov    data_5df1e,%ebx
		push   %ebx
		call   NetMyFree
		xor    %eax,%eax
		add    $0x8,%esp
		mov    data_5df2e,%ax
		push   %eax
		mov    data_5df2a,%ecx
		push   %ecx
		call   NetMyFree
		xor    %eax,%eax
		add    $0x8,%esp
		mov    data_5505a,%ax
		push   %eax
		mov    Network__MasterNcb,%esi
		push   %esi
		call   ResetNetSlot
		add    $0x8,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETBios__:	/* 0x2a640 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x78,%esp
		mov    0x88(%esp),%esi
		mov    0x84(%esp),%ebx
		push   $0x32
		push   $0x0
		lea    0x8(%esp),%eax
		mov    %esi,%gs
		push   %eax
		movb   $0x0,%gs:0x31(%ebx)
		call   ac_memset
		add    $0xc,%esp
		mov    %esi,%gs
		push   $0x1c
		mov    $0x100,%edx
		mov    %gs:0x40(%ebx),%ax
		push   $0x0
		mov    %ebx,0x18(%esp)
		lea    0x58(%esp),%ebx
		mov    %ax,0x2c(%esp)
		push   %ebx
		mov    %ax,0x2e(%esp)
		mov    %edx,0x28(%esp)
		call   ac_memset
		add    $0xc,%esp
		push   $0x1c
		push   $0x0
		lea    0x3c(%esp),%ebx
		push   %ebx
		call   ac_memset
		add    $0xc,%esp
		push   $0xc
		push   $0x0
		lea    0x74(%esp),%ebx
		push   %ebx
		call   ac_memset
		add    $0xc,%esp
		lea    0x6c(%esp),%eax
		push   %eax
		call   segread
		lea    0x4(%esp),%eax
		add    $0x4,%esp
		mov    %eax,0x64(%esp)
		lea    0x6c(%esp),%eax
		push   %eax
		lea    0x38(%esp),%eax
		push   %eax
		lea    0x58(%esp),%eax
		push   %eax
		mov    $0x300,%ebx
		mov    $0x5c,%ecx
		push   $0x31
		mov    %ebx,0x60(%esp)
		mov    %ecx,0x64(%esp)
		call   ac_dos_int386x
		add    $0x10,%esp
		cmpl   $0x0,0x4c(%esp)
		je     jump_2a71e
		push   $0xfffffffd
		push   $0x195
		push   $aNetC
		call   ErrLogNetwork
		mov    $0xffffffff,%eax
		add    $0xc,%esp
		jmp    jump_2a720
	jump_2a71e:
		xor    %eax,%eax
	jump_2a720:
		add    $0x78,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETCheckBios__:	/* 0x2a730 */
/*----------------------------------------------------------------*/
		push   $0x5c
		call   ac_dos_getvect
		add    $0x4,%esp
		test   %eax,%eax
		jne    jump_2a749
		test   %dx,%dx
		jne    jump_2a749
		mov    $0xffffffff,%eax
		ret
	jump_2a749:
		mov    data_5505a,%dx
		mov    Network__MasterNcb,%eax
		mov    %edx,%gs
		and    $0xffff,%edx
		push   %edx
		push   %eax
		movb   $0x7f,%gs:(%eax)
		call   __NETBios__
		cwtl
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_2a777
		mov    $0xffffffff,%eax
		ret
	jump_2a777:
		lgs    Network__MasterNcb,%eax
		cmpb   $0x3,%gs:0x1(%eax)
		je     jump_2a78b
		mov    $0xffffffff,%eax
		ret
	jump_2a78b:
		xor    %eax,%eax
		ret


/*----------------------------------------------------------------*/
ResetNetSlot:	/* 0x2a790 */
/*----------------------------------------------------------------*/
		mov    0x8(%esp),%ax
		mov    0x4(%esp),%edx
		test   %edx,%edx
		jne    jump_2a7a2
		test   %ax,%ax
		je     jump_2a7b1
	jump_2a7a2:
		and    $0xffff,%eax
		push   %eax
		push   %edx
		call   NetMyFree
		add    $0x8,%esp
	jump_2a7b1:
		ret


/*----------------------------------------------------------------*/
NetMyLowAlloc:	/* 0x2a7c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x3c,%esp
		push   $0x1c
		push   $0x0
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_memset
		add    $0xc,%esp
		push   $0x1c
		push   $0x0
		lea    0x24(%esp),%eax
		push   %eax
		call   ac_memset
		add    $0xc,%esp
		lea    0x1c(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		mov    $0x5,%ebx
		mov    $0x100,%edx
		push   $0x31
		mov    %edx,0xc(%esp)
		mov    %ebx,0x10(%esp)
		call   ac_dos_int386
		add    $0xc,%esp
		mov    0x34(%esp),%ecx
		test   %ecx,%ecx
		je     jump_2a830
		push   $0xfffffffe
		push   $0x1c7
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
		xor    %edx,%edx
		xor    %eax,%eax
		jmp    jump_2a872
	jump_2a830:
		mov    0x28(%esp),%gs
		xor    %ebx,%ebx
		xor    %esi,%esi
		mov    %gs,0x38(%esp)
		mov    %gs,%edx
		test   %ecx,%ecx
		jne    jump_2a847
		test   %dx,%dx
		je     jump_2a86c
	jump_2a847:
		mov    $0x42,%ecx
		mov    %gs,%edx
		xor    %edi,%edi
		xor    %al,%al
		push   %es
		push   %edi
		mov    %edx,%es
		mov    %al,%ah
		shr    $1,%ecx
		repnz stos %ax,%es:(%edi)
		adc    %ecx,%ecx
		repnz stos %al,%es:(%edi)
		pop    %edi
		pop    %es
		mov    0x1c(%esp),%eax
		mov    %ax,%gs:0x40(%ebx)
	jump_2a86c:
		mov    0x38(%esp),%edx
		mov    %esi,%eax
	jump_2a872:
		add    $0x3c,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETAdd__:	/* 0x2a880 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x18(%esp),%ebp
		mov    0x1c(%esp),%edx
		mov    0x20(%esp),%ebx
		add    $0x1a,%ebp
		mov    %ds,%ecx
		mov    %ebp,%eax
		mov    %edx,(%esp)
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
	jump_2a8aa:
		mov    (%esi),%al
		mov    %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2a8c8
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,%es:0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_2a8aa
	jump_2a8c8:
		pop    %eax
		pop    %es
		pop    %ds
		mov    (%esp),%edx
		mov    $data_5377c,%ebx
	jump_2a8d3:
		mov    (%esp),%ecx
		mov    %ebp,%edi
		push   %es
		mov    %ecx,%es
		xor    %eax,%eax
		mov    %eax,%ecx
		dec    %ecx
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		pop    %es
		cmp    $0xf,%ecx
		jae    jump_2a91f
		mov    %ebp,%eax
		mov    %ds,%ecx
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
		sub    %ecx,%ecx
		dec    %ecx
		mov    $0x0,%al
		repnz scas %es:(%edi),%al
		dec    %edi
	jump_2a904:
		mov    (%esi),%al
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2a91a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		jne    jump_2a904
	jump_2a91a:
		pop    %eax
		pop    %es
		pop    %ds
		jmp    jump_2a8d3
	jump_2a91f:
		lgs    0x18(%esp),%ecx
		movb   $0xb0,%gs:(%ecx)
		xor    %ecx,%ecx
		mov    %gs,%ecx
		push   %ecx
		mov    0x1c(%esp),%edx
		push   %edx
		call   __NETBios__
		movswl %ax,%ecx
		add    $0x8,%esp
		cmp    $0xffffffff,%ecx
		jne    jump_2a94c
		mov    $0xffffff9d,%eax
		jmp    jump_2a9be
	jump_2a94c:
		lgs    0x18(%esp),%ecx
	jump_2a951:
		cmpb   $0xff,%gs:0x31(%ecx)
		je     jump_2a951
		mov    0x20(%esp),%ebx
		mov    0x18(%esp),%ebp
		xor    %ecx,%ecx
		push   %ebx
		mov    %gs:0x31(%ebp),%cl
		push   %ecx
		push   $aAddNameReturnX
		call   ac_printf
		add    $0xc,%esp
		mov    0x1c(%esp),%gs
		mov    %gs:0x31(%ebp),%dl
		test   %dl,%dl
		je     jump_2a9b1
		cmp    $0x16,%dl
		je     jump_2a9b1
		push   %ebx
		push   $aErrorTryingToA
		call   ac_printf
		add    $0x8,%esp
		mov    0x1c(%esp),%gs
		xor    %ecx,%ecx
		mov    %gs:0x31(%ebp),%cl
		push   %ecx
		push   $0x1e6
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2a9b1:
		lgs    0x18(%esp),%ecx
		xor    %eax,%eax
		mov    %gs:0x31(%ecx),%al
		neg    %eax
	jump_2a9be:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETDelete__:	/* 0x2a9d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x18(%esp),%ebp
		mov    0x1c(%esp),%edx
		mov    0x20(%esp),%ebx
		add    $0x1a,%ebp
		mov    %ds,%ecx
		mov    %ebp,%eax
		mov    %edx,(%esp)
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
	jump_2a9fa:
		mov    (%esi),%al
		mov    %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2aa18
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,%es:0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_2a9fa
	jump_2aa18:
		pop    %eax
		pop    %es
		pop    %ds
		mov    (%esp),%edx
		mov    $data_5377c,%ebx
	jump_2aa23:
		mov    (%esp),%ecx
		mov    %ebp,%edi
		push   %es
		mov    %ecx,%es
		xor    %eax,%eax
		mov    %eax,%ecx
		dec    %ecx
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		pop    %es
		cmp    $0xf,%ecx
		jae    jump_2aa6f
		mov    %ebp,%eax
		mov    %ds,%ecx
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
		sub    %ecx,%ecx
		dec    %ecx
		mov    $0x0,%al
		repnz scas %es:(%edi),%al
		dec    %edi
	jump_2aa54:
		mov    (%esi),%al
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2aa6a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		jne    jump_2aa54
	jump_2aa6a:
		pop    %eax
		pop    %es
		pop    %ds
		jmp    jump_2aa23
	jump_2aa6f:
		lgs    0x18(%esp),%ecx
		movb   $0xb1,%gs:(%ecx)
		xor    %ecx,%ecx
		mov    %gs,%ecx
		push   %ecx
		mov    0x1c(%esp),%edx
		push   %edx
		call   __NETBios__
		movswl %ax,%ecx
		add    $0x8,%esp
		cmp    $0xffffffff,%ecx
		jne    jump_2aa99
		mov    $0xffffff9d,%eax
		jmp    jump_2aaca
	jump_2aa99:
		lgs    0x18(%esp),%ecx
	jump_2aa9e:
		mov    %gs:0x31(%ecx),%ah
		cmp    $0xff,%ah
		je     jump_2aa9e
		test   %ah,%ah
		je     jump_2aabd
		mov    0x20(%esp),%ebx
		push   %ebx
		push   $aDeleteNameRetu
		call   ac_printf
		add    $0x8,%esp
	jump_2aabd:
		lgs    0x18(%esp),%ecx
		xor    %eax,%eax
		mov    %gs:0x31(%ecx),%al
		neg    %eax
	jump_2aaca:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETListen__:	/* 0x2aae0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		lgs    0x18(%esp),%ecx
		mov    0x18(%esp),%ebp
		mov    0x20(%esp),%ebx
		add    $0xa,%ebp
		mov    %gs,%edx
		movb   $0x91,%gs:(%ecx)
		mov    %ds,%ecx
		mov    %ebp,%eax
		mov    %gs,(%esp)
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
	jump_2ab11:
		mov    (%esi),%al
		mov    %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2ab2f
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,%es:0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_2ab11
	jump_2ab2f:
		pop    %eax
		pop    %es
		pop    %ds
		mov    (%esp),%edx
		mov    $data_5377c,%ebx
	jump_2ab3a:
		mov    (%esp),%ecx
		mov    %ebp,%edi
		push   %es
		mov    %ecx,%es
		xor    %eax,%eax
		mov    %eax,%ecx
		dec    %ecx
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		pop    %es
		cmp    $0xf,%ecx
		jae    jump_2ab86
		mov    %ebp,%eax
		mov    %ds,%ecx
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
		sub    %ecx,%ecx
		dec    %ecx
		mov    $0x0,%al
		repnz scas %es:(%edi),%al
		dec    %edi
	jump_2ab6b:
		mov    (%esi),%al
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2ab81
		mov    0x1(%esi),%al
		add    $0x2,%esi
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		jne    jump_2ab6b
	jump_2ab81:
		pop    %eax
		pop    %es
		pop    %ds
		jmp    jump_2ab3a
	jump_2ab86:
		lgs    0x18(%esp),%ecx
		mov    0x28(%esp),%al
		mov    %al,%gs:0x2a(%ecx)
		mov    0x2c(%esp),%al
		mov    %al,%gs:0x2b(%ecx)
		xor    %ecx,%ecx
		mov    %gs,%ecx
		push   %ecx
		mov    0x1c(%esp),%edx
		push   %edx
		call   __NETBios__
		movswl %ax,%ecx
		add    $0x8,%esp
		cmp    $0xffffffff,%ecx
		jne    jump_2abbc
		mov    $0xffffff9d,%eax
		jmp    jump_2ac11
	jump_2abbc:
		cmpw   $0x0,0x24(%esp)
		je     jump_2abce
		xor    %eax,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2abce:
		lgs    0x18(%esp),%ecx
	jump_2abd3:
		mov    %gs:0x31(%ecx),%ah
		cmp    $0xff,%ah
		je     jump_2abd3
		test   %ah,%ah
		je     jump_2abfd
		mov    0x18(%esp),%ebp
		xor    %ecx,%ecx
		mov    %gs:0x31(%ebp),%cl
		push   %ecx
		push   $0x217
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2abfd:
		lgs    0x18(%esp),%ecx
		xor    %eax,%eax
		mov    %gs:0x31(%ecx),%al
		movw   $0x0,%gs:0x4(%ecx)
		neg    %eax
	jump_2ac11:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETCall__:	/* 0x2ac20 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		lgs    0x18(%esp),%ecx
		mov    0x18(%esp),%ebp
		mov    0x20(%esp),%ebx
		add    $0xa,%ebp
		mov    %gs,%edx
		movb   $0x90,%gs:(%ecx)
		mov    %ds,%ecx
		mov    %ebp,%eax
		mov    %gs,(%esp)
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
	jump_2ac51:
		mov    (%esi),%al
		mov    %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2ac6f
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,%es:0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_2ac51
	jump_2ac6f:
		pop    %eax
		pop    %es
		pop    %ds
		mov    (%esp),%edx
		mov    $data_5377c,%ebx
	jump_2ac7a:
		mov    (%esp),%ecx
		mov    %ebp,%edi
		push   %es
		mov    %ecx,%es
		xor    %eax,%eax
		mov    %eax,%ecx
		dec    %ecx
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		pop    %es
		cmp    $0xf,%ecx
		jae    jump_2acc6
		mov    %ebp,%eax
		mov    %ds,%ecx
		push   %ds
		push   %es
		push   %eax
		mov    %dx,%es
		mov    %cx,%ds
		mov    %ebx,%esi
		mov    %eax,%edi
		sub    %ecx,%ecx
		dec    %ecx
		mov    $0x0,%al
		repnz scas %es:(%edi),%al
		dec    %edi
	jump_2acab:
		mov    (%esi),%al
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		je     jump_2acc1
		mov    0x1(%esi),%al
		add    $0x2,%esi
		stos   %al,%es:(%edi)
		cmp    $0x0,%al
		jne    jump_2acab
	jump_2acc1:
		pop    %eax
		pop    %es
		pop    %ds
		jmp    jump_2ac7a
	jump_2acc6:
		lgs    0x18(%esp),%ecx
		mov    0x28(%esp),%al
		mov    %al,%gs:0x2a(%ecx)
		mov    0x2c(%esp),%al
		mov    %al,%gs:0x2b(%ecx)
		xor    %ecx,%ecx
		mov    %gs,%ecx
		push   %ecx
		mov    0x1c(%esp),%edx
		push   %edx
		call   __NETBios__
		movswl %ax,%ecx
		add    $0x8,%esp
		cmp    $0xffffffff,%ecx
		jne    jump_2acfc
		mov    $0xffffff9d,%eax
		jmp    jump_2ad4f
	jump_2acfc:
		cmpw   $0x0,0x24(%esp)
		je     jump_2ad0e
		xor    %eax,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2ad0e:
		lgs    0x18(%esp),%ecx
	jump_2ad13:
		mov    %gs:0x31(%ecx),%ah
		cmp    $0xff,%ah
		je     jump_2ad13
		test   %ah,%ah
		je     jump_2ad42
		cmp    $0x14,%ah
		je     jump_2ad42
		mov    0x18(%esp),%ebp
		xor    %ecx,%ecx
		mov    %gs:0x31(%ebp),%cl
		push   %ecx
		push   $0x234
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2ad42:
		lgs    0x18(%esp),%ecx
		xor    %eax,%eax
		mov    %gs:0x31(%ecx),%al
		neg    %eax
	jump_2ad4f:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_send:	/* 0x2ad60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x18(%esp),%esi
		mov    data_5df2e,%dx
		mov    data_5df2a,%edi
		xor    %eax,%eax
		mov    %ds,%ecx
		mov    0x1c(%esp),%ax
		push   %ds
		push   %es
		push   %edi
		xchg   %eax,%ecx
		mov    %eax,%ds
		mov    %edx,%es
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %eax
		pop    %es
		pop    %ds
		mov    0x14(%esp),%gs
		mov    Network_SendBuffer,%ax
		mov    %ax,%gs:0x6(%ebx)
		mov    0x1c(%esp),%eax
		mov    %ax,%gs:0x8(%ebx)
		xor    %eax,%eax
		mov    %gs,%eax
		push   %eax
		push   %ebx
		movb   $0x94,%gs:(%ebx)
		call   __NETBios__
		cwtl
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_2add3
		mov    $0xffffff9d,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2add3:
		mov    0x14(%esp),%gs
	jump_2add7:
		mov    %gs:0x31(%ebx),%ah
		cmp    $0xff,%ah
		je     jump_2add7
		test   %ah,%ah
		je     jump_2adfd
		xor    %eax,%eax
		mov    %gs:0x31(%ebx),%al
		push   %eax
		push   $0x249
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2adfd:
		mov    0x14(%esp),%gs
		xor    %eax,%eax
		mov    %gs:0x31(%ebx),%al
		neg    %eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_receive:	/* 0x2ae10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%gs
		mov    Network_ReceiveBuffer,%ax
		mov    %ax,%gs:0x6(%ebx)
		mov    Network__RecvBufferSize,%ax
		mov    %ax,%gs:0x8(%ebx)
		xor    %eax,%eax
		mov    %gs,%eax
		push   %eax
		push   %ebx
		movb   $0x95,%gs:(%ebx)
		call   __NETBios__
		cwtl
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_2ae52
		mov    $0xffffff9d,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2ae52:
		cmpw   $0x0,0x1c(%esp)
		je     jump_2ae60
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2ae60:
		mov    0x14(%esp),%gs
	jump_2ae64:
		cmpb   $0xff,%gs:0x31(%ebx)
		je     jump_2ae64
		mov    0x18(%esp),%edi
		mov    data_5df22,%cx
		mov    data_5df1e,%esi
		xor    %eax,%eax
		mov    %ds,%edx
		mov    %gs:0x8(%ebx),%ax
		push   %ds
		push   %es
		push   %edi
		xchg   %eax,%ecx
		mov    %eax,%ds
		mov    %edx,%es
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %eax
		pop    %es
		pop    %ds
		mov    %gs:0x31(%ebx),%dl
		test   %dl,%dl
		je     jump_2aecd
		xor    %eax,%eax
		mov    %dl,%al
		push   %eax
		push   $0x260
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
		mov    0x14(%esp),%gs
		xor    %eax,%eax
		mov    %gs:0x31(%ebx),%al
		neg    %eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2aecd:
		mov    %gs:0x8(%ebx),%ax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETCancel__:	/* 0x2aee0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    data_5505a,%bx
		mov    Network__MasterNcb,%eax
		mov    %ebx,%gs
		mov    0x8(%esp),%edx
		movb   $0x35,%gs:(%eax)
		mov    0xc(%esp),%gs
		mov    %gs:0x40(%edx),%dx
		mov    %ebx,%gs
		mov    %dx,%gs:0x6(%eax)
		xor    %edx,%edx
		mov    %bx,%dx
		push   %edx
		push   %eax
		call   __NETBios__
		cwtl
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_2af23
		mov    $0xffffff9d,%eax
		pop    %ebx
		ret
	jump_2af23:
		lgs    Network__MasterNcb,%eax
	jump_2af2a:
		mov    %gs:0x31(%eax),%dl
		cmp    $0xff,%dl
		je     jump_2af2a
		test   %dl,%dl
		je     jump_2af56
		cmp    $0x24,%dl
		je     jump_2af56
		mov    %dl,%al
		and    $0xff,%eax
		push   %eax
		push   $0x273
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2af56:
		lgs    Network__MasterNcb,%eax
		mov    %gs:0x31(%eax),%al
		xor    %ah,%ah
		neg    %eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETHangUp__:	/* 0x2af70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0x10(%esp),%esi
		mov    0xc(%esp),%ebx
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		mov    %esi,%gs
		push   %ebx
		movb   $0x92,%gs:(%ebx)
		call   __NETBios__
		cwtl
		add    $0x8,%esp
		cmp    $0xffffffff,%eax
		jne    jump_2af9d
		mov    $0xffffff9d,%eax
		pop    %esi
		pop    %ebx
		ret
	jump_2af9d:
		mov    %esi,%gs
		mov    %gs:0x31(%ebx),%ah
		cmp    $0xff,%ah
		je     jump_2af9d
		test   %ah,%ah
		je     jump_2afca
		cmp    $0xa,%ah
		je     jump_2afca
		xor    %eax,%eax
		mov    %gs:0x31(%ebx),%al
		push   %eax
		push   $0x284
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2afca:
		mov    %esi,%gs
		xor    %eax,%eax
		mov    %gs:0x31(%ebx),%al
		neg    %eax
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__NETUnkn1__:	/* 0x2afe0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edi
		sub    $0x38,%esp
		mov    0x44(%esp),%ebx
		mov    0x48(%esp),%edi
		push   $0x1c
		push   $0x0
		lea    0x8(%esp),%edx
		push   %edx
		call   ac_memset
		add    $0xc,%esp
		push   $0x1c
		push   $0x0
		lea    0x24(%esp),%edx
		push   %edx
		call   ac_memset
		mov    $0x100,%edx
		add    $0xc,%esp
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    %di,%dx
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x4,%edx
		sbb    %edx,%eax
		sar    $0x4,%eax
		lea    0x1c(%esp),%edx
		push   %edx
		lea    0x4(%esp),%edx
		push   %edx
		push   $0x31
		mov    %eax,0x10(%esp)
		call   ac_dos_int386
		add    $0xc,%esp
		mov    0x34(%esp),%ecx
		test   %ecx,%ecx
		je     jump_2b064
		push   $0xfffffffe
		push   $0x297
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
		xor    %eax,%eax
		jmp    jump_2b095
	jump_2b064:
		mov    0x1c(%esp),%eax
		mov    %ax,(%ebx)
		mov    0x28(%esp),%eax
		mov    %ax,0x6(%ebx)
		mov    %ecx,0x2(%ebx)
		mov    %di,%cx
		mov    0x6(%ebx),%dx
		xor    %al,%al
		mov    0x2(%ebx),%edi
		push   %es
		push   %edi
		mov    %edx,%es
		mov    %al,%ah
		shr    $1,%ecx
		repnz stos %ax,%es:(%edi)
		adc    %ecx,%ecx
		repnz stos %al,%es:(%edi)
		pop    %edi
		pop    %es
		xor    %ah,%ah
	jump_2b095:
		add    $0x38,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
NetMyFree:	/* 0x2b0a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x38,%esp
		mov    0x48(%esp),%esi
		mov    0x44(%esp),%ebx
		test   %ebx,%ebx
		jne    jump_2b0b6
		test   %si,%si
		je     jump_2b11c
	jump_2b0b6:
		push   $0x1c
		push   $0x0
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_memset
		add    $0xc,%esp
		push   $0x1c
		push   $0x0
		lea    0x24(%esp),%eax
		push   %eax
		call   ac_memset
		mov    $0x101,%edx
		add    $0xc,%esp
		mov    %ebx,%eax
		mov    %edx,(%esp)
		mov    %esi,%edx
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %eax,0xc(%esp)
		lea    0x1c(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		push   $0x31
		call   ac_dos_int386
		add    $0xc,%esp
		cmpl   $0x0,0x34(%esp)
		je     jump_2b11c
		push   $0xffffffff
		push   $0x2af
		push   $aNetC
		call   ErrLogNetwork
		add    $0xc,%esp
	jump_2b11c:
		add    $0x38,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
SendNetwork:	/* 0x2b130 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebp
		mov    0x1c(%esp),%esi
		mov    0x20(%esp),%edi
		xor    %ebx,%ebx
		jmp    jump_2b16c
	jump_2b144:
		xor    %eax,%eax
		mov    %cx,%ax
		push   %eax
		xor    %eax,%eax
		push   %esi
		mov    0x20(%esp),%ax
		push   %eax
		push   %ebp
		call   net_send
		add    $0x10,%esp
		test   %ax,%ax
		jne    jump_2b19d
		xor    %eax,%eax
		mov    Network__RecvBufferSize,%ax
		inc    %ebx
		add    %eax,%esi
	jump_2b16c:
		mov    %edi,%eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    Network__RecvBufferSize,%cx
		div    %ecx
		cmp    %eax,%ebx
		jb     jump_2b144
		mov    %edi,%eax
		xor    %edx,%edx
		div    %ecx
		xor    %eax,%eax
		mov    %dx,%ax
		push   %eax
		xor    %eax,%eax
		push   %esi
		mov    0x20(%esp),%ax
		push   %eax
		push   %ebp
		call   net_send
		add    $0x10,%esp
	jump_2b19d:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ReceiveNetwork:	/* 0x2b1b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebp
		mov    0x1c(%esp),%esi
		mov    0x20(%esp),%edi
		xor    %ebx,%ebx
		jmp    jump_2b1ee
	jump_2b1c4:
		push   $0x0
		xor    %eax,%eax
		push   %esi
		mov    0x20(%esp),%ax
		push   %eax
		push   %ebp
		call   net_receive
		xor    %ecx,%ecx
		cwtl
		mov    Network__RecvBufferSize,%cx
		add    $0x10,%esp
		cmp    %ecx,%eax
		jne    jump_2b237
		xor    %ecx,%eax
		mov    %cx,%ax
		inc    %ebx
		add    %eax,%esi
	jump_2b1ee:
		mov    %edi,%eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    Network__RecvBufferSize,%cx
		div    %ecx
		cmp    %eax,%ebx
		jb     jump_2b1c4
		push   $0x0
		xor    %eax,%eax
		push   %esi
		mov    0x20(%esp),%ax
		push   %eax
		push   %ebp
		call   net_receive
		mov    %eax,%esi
		movswl %ax,%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    Network__RecvBufferSize,%cx
		mov    %edi,%eax
		div    %ecx
		add    $0x10,%esp
		cmp    %edx,%ebx
		je     jump_2b235
		movswl %si,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2b235:
		mov    %edi,%eax
	jump_2b237:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ErrLogNetwork:	/* 0x2b260 */
/*----------------------------------------------------------------*/
		movswl 0xc(%esp),%eax
		push   %eax
		push   %eax
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		push   %eax
		mov    0x10(%esp),%edx
		push   %edx
		push   $aNetErrorSDD0xX
		call   ac_printf
		add    $0x14,%esp
		ret

/*----------------------------------------------------------------*/
MouseHandler256:	/* 0x2b290 */
/*----------------------------------------------------------------*/
#if defined(DOS)
		push   %ds
		call   __GETDS
#endif
		push   %ebx
		push   %esi
		mov    %eax,mouse_event
		mov    %cx,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		mov    %dx,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		cmpw   $0x27e,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_2b2bf
		movw   $0x27e,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
	jump_2b2bf:
		cmpw   $0x18e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_2b2d3
		movw   $0x18e,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
	jump_2b2d3:
		testb  $0x2,mouse_event
		je     jump_2b30a
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
		jne    jump_2b303
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jne    jump_2b303
		movb   $0x1,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %cx,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		mov    %dx,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
	jump_2b303:
		movb   $0x1,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
	jump_2b30a:
		testb  $0x4,mouse_event
		je     jump_2b31b
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
	jump_2b31b:
		testb  $0x8,mouse_event
		je     jump_2b352
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
		jne    jump_2b34b
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		jne    jump_2b34b
		movb   $0x1,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    %cx,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		mov    %dx,EXPORT_SYMBOL(lbDisplay__MouseY_400)
	jump_2b34b:
		movb   $0x1,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
	jump_2b352:
		testb  $0x10,mouse_event
		je     jump_2b362
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
	jump_2b362:
		cmpl   $0x0,EXPORT_SYMBOL(MouseSwap)
		jne    jump_2b436
		mov    data_60b34,%ah
		cmp    $0x1,%ah
		jne    jump_2b436
		xor    %dl,%dl
		mov    EXPORT_SYMBOL(DrawFlags),%dh
		mov    %dl,data_60b34
		cmp    %ah,%dh
		jne    jump_2b3c9
		mov    EXPORT_SYMBOL(VScreen),%eax
		mov    %eax,ScrSeg
		call   UndoMouse
		call   BackupMouse
#if defined(USE_BFLIB_MOUSE_CURSOR)
		mov    EXPORT_SYMBOL(lbDisplay)+20,%esi	/* lbDisplay.MouseSprite */
#else
		mov    EXPORT_SYMBOL(mouse_sprite),%esi
#endif
		xor    %eax,%eax
		push   %esi
		mov    MouseOldY,%ax
		push   %eax
		xor    %eax,%eax
		mov    MouseOldX,%ax
		push   %eax
		call   LbSpriteDrawMCGA_0
		add    $0xc,%esp
		pop    %esi
		pop    %ebx
		pop    %ds
		lret
	jump_2b3c9:
		cmp    $0x2,%dh
		jne    jump_2b3f0
		mov    EXPORT_SYMBOL(VScreen),%eax
		mov    %eax,ScrSeg
		call   UndoMouse
		call   BackupMouse
		call   GetScreenBoxHires16
#if defined(USE_BFLIB_MOUSE_CURSOR)
		mov    EXPORT_SYMBOL(lbDisplay)+20,%ecx	/* lbDisplay.MouseSprite */
#else
		mov    EXPORT_SYMBOL(mouse_sprite),%ecx
#endif
		push   %ecx
		jmp    jump_2b415
	jump_2b3f0:
		cmp    $0xd,%dh
		jne    jump_2b436
		mov    EXPORT_SYMBOL(VScreen),%eax
		mov    %eax,ScrSeg
		call   UndoMouse
		call   BackupMouse
		call   GetScreenBoxHires16
#if defined(USE_BFLIB_MOUSE_CURSOR)
		mov    EXPORT_SYMBOL(lbDisplay)+20,%ebx	/* lbDisplay.MouseSprite */
#else
		mov    EXPORT_SYMBOL(mouse_sprite),%ebx
#endif
		push   %ebx
	jump_2b415:
		mov    MouseOldX,%ax
		push   $0x0
		and    $0x7,%al
		xor    %ah,%ah
		push   $0x0
		and    $0xffff,%eax
		push   %eax
		call   LbSpriteDrawHires16
		add    $0x10,%esp
		call   PutScreenBoxHires16
	jump_2b436:
		pop    %esi
		pop    %ebx
		pop    %ds
		lret

/*----------------------------------------------------------------*/
func_2b440:	/* 0x2b440 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edi
		sub    $0x44,%esp
		mov    %esp,%eax
		push   %eax
		lea    0x20(%esp),%eax
		push   %eax
		mov    $0x1c,%edx
		mov    $0x2,%ebx
		push   $0x33
		mov    %dx,0x28(%esp)
		mov    %bx,0x2c(%esp)
		call   ac_dos_int386
		add    $0xc,%esp
		lea    0x38(%esp),%eax
		push   %eax
		call   segread
		add    $0x4,%esp
		mov    %esp,%eax
		push   %eax
		lea    0x20(%esp),%eax
		push   %eax
		xor    %ecx,%ecx
		push   $0x33
		mov    %cx,0x28(%esp)
		call   ac_dos_int386
		add    $0xc,%esp
		cmpw   $0xffff,(%esp)
		jne    jump_2b575
		mov    $0xc,%edi
		mov    $0x1f,%eax
		mov    $MouseHandler256,%edx
		mov    %ax,0x24(%esp)
		mov    %edx,0x28(%esp)
		mov    $MouseHandler256,%eax
		mov    %cs,%edx
		mov    %di,0x1c(%esp)
		lea    0x38(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		lea    0x24(%esp),%eax
		push   %eax
		push   $0x33
		mov    %dx,0x48(%esp)
		call   ac_dos_int386x
		add    $0x10,%esp
		lea    0x38(%esp),%eax
		push   %eax
		lea    0x4(%esp),%eax
		push   %eax
		lea    0x24(%esp),%eax
		push   %eax
		mov    $0x1,%ebx
		mov    $0x1c,%edx
		push   $0x33
		mov    %dx,0x2c(%esp)
		mov    %bx,0x30(%esp)
		call   ac_dos_int386x
		mov    EXPORT_SYMBOL(DrawFlags),%al
		add    $0x10,%esp
		cmp    $0x1,%al
		jb     jump_2b52a
		jbe    jump_2b51c
		cmp    $0x2,%al
		je     jump_2b523
		jmp    jump_2b52a
	jump_2b51c:
		push   $0x1100
		jmp    jump_2b52f
	jump_2b523:
		push   $0x14b0
		jmp    jump_2b52f
	jump_2b52a:
		push   $0x1090
	jump_2b52f:
		call   ac_malloc
		add    $0x4,%esp
		mov    %eax,MouseOldData_0
		cmpl   $0x0,MouseOldData_0
		je     jump_2b568
		mov    %esp,%eax
		push   %eax
		lea    0x20(%esp),%eax
		push   %eax
		mov    $0x2,%ecx
		push   $0x33
		mov    %cx,0x28(%esp)
		call   ac_dos_int386
		mov    $0x1,%eax
		add    $0xc,%esp
		jmp    jump_2b577
	jump_2b568:
		push   $aErrorAllocatin
		call   ac_printf
		add    $0x4,%esp
	jump_2b575:
		xor    %eax,%eax
	jump_2b577:
		add    $0x44,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbMouseReset:	/* 0x2b580 */
/*----------------------------------------------------------------*/
		sub    $0x38,%esp
		mov    %esp,%eax
		push   %eax
		lea    0x20(%esp),%eax
		push   %eax
		xor    %edx,%edx
		push   $0x33
		mov    %dx,0x28(%esp)
		call   ac_dos_int386
		mov    MouseOldData_0,%edx
		add    $0xc,%esp
		test   %edx,%edx
		je     jump_2b5af
		push   %edx
		call   ac_free
		add    $0x4,%esp
	jump_2b5af:
		add    $0x38,%esp
		ret


/*----------------------------------------------------------------*/
traffic_go:	/* 0x2b5c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		cmpw   $0x0,0xc(%esp)
		je     jump_2b609
		push   $0x200
		push   $0x100
		mov    0x8(%ebx),%ax
		push   $0x100
		sub    $0x100,%eax
		push   $0x80
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		add    $0x240,%eax
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		inc    %ah
		cwtl
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
	jump_2b609:
		cmpw   $0x0,0x10(%esp)
		je     jump_2b651
		push   $0x200
		push   $0x100
		mov    0x8(%ebx),%ax
		push   $0x80
		sub    $0x100,%eax
		push   $0x100
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		sub    $0x100,%eax
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		add    $0x240,%eax
		cwtl
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
	jump_2b651:
		cmpw   $0x0,0x14(%esp)
		je     jump_2b69a
		push   $0x200
		push   $0x100
		mov    0x8(%ebx),%ax
		push   $0x100
		sub    $0x100,%eax
		push   $0x80
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		sub    $0x240,%eax
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		sub    $0x100,%eax
		cwtl
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
	jump_2b69a:
		cmpw   $0x0,0x18(%esp)
		je     jump_2b6df
		push   $0x200
		push   $0x100
		mov    0x8(%ebx),%ax
		push   $0x80
		sub    $0x100,%eax
		push   $0x100
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		inc    %ah
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		sub    $0x240,%eax
		cwtl
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
	jump_2b6df:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
affect_object:	/* 0x2b6f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%eax
		cmpw   $0x0,0xc(%eax)
		je     jump_2b77a
		testb  $0x8,0xc(%eax)
		je     jump_2b71c
		mov    0x14(%eax),%bx
		mov    0xc(%eax),%dh
		sub    $0x5,%ebx
		and    $0xf7,%dh
		mov    %bx,0x14(%eax)
		mov    %dh,0xc(%eax)
	jump_2b71c:
		testb  $0x1,0xc(%eax)
		je     jump_2b736
		mov    0x14(%eax),%cx
		mov    0xc(%eax),%bh
		sub    $0x14,%ecx
		and    $0xfe,%bh
		mov    %cx,0x14(%eax)
		mov    %bh,0xc(%eax)
	jump_2b736:
		testb  $0x10,0xc(%eax)
		je     jump_2b750
		mov    0x14(%eax),%si
		mov    0xc(%eax),%ch
		sub    $0x46,%esi
		and    $0xef,%ch
		mov    %si,0x14(%eax)
		mov    %ch,0xc(%eax)
	jump_2b750:
		testb  $0x80,0xc(%eax)
		je     jump_2b76a
		mov    0x14(%eax),%di
		mov    0xc(%eax),%dh
		sub    $0x6e,%edi
		and    $0x7f,%dh
		mov    %di,0x14(%eax)
		mov    %dh,0xc(%eax)
	jump_2b76a:
		mov    0xc(%eax),%bl
		test   $0x40,%bl
		je     jump_2b77a
		mov    %bl,%bh
		and    $0xbf,%bh
		mov    %bh,0xc(%eax)
	jump_2b77a:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
traffic_hover:	/* 0x2b780 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		movswl 0x6(%ebx),%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%ebx),%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		movswl 0x8(%ebx),%esi
		add    %eax,%ecx
		mov    data_55358,%eax
		lea    0x0(,%ecx,4),%ecx
		lea    -0x80(%esi),%edx
		add    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		cmpb   $0x76,(%eax)
		jne    jump_2b7f2
		addw   $0x10,0x8(%ebx)
		jmp    jump_2b818
	jump_2b7f2:
		lea    -0x100(%esi),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		cmpb   $0x76,(%eax)
		jne    jump_2b813
		addw   $0x10,0x8(%ebx)
		jmp    jump_2b818
	jump_2b813:
		subw   $0x8,0x8(%ebx)
	jump_2b818:
		push   $0x80
		movswl 0x4(%ebx),%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    %ax,0x4(%ebx)
		push   $0x80
		movswl 0x6(%ebx),%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    0x8(%ebx),%di
		mov    %ax,0x6(%ebx)
		test   %di,%di
		jge    jump_2b856
		push   %ebx
		call   remove_model
		add    $0x4,%esp
	jump_2b856:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2b85c:
		.long   jump_2c201
		.long   func_2b979
		.long   func_2b9c5
		.long   func_2ba0c
		.long   func_2ba30
		.long   func_2ba47
		.long   func_2ba7f
		.long   func_2babc
		.long   func_2baf9
		.long   func_2bb32
		.long   func_2bb45
		.long   func_2bb75
		.long   func_2bb83
		.long   func_2bbda
		.long   func_2bc18
		.long   func_2bc7b
		.long   func_2bb75
		.long   jump_2c201
		.long   func_2bcbf
		.long   func_2bcf5
		.long   func_2bd2c
		.long   func_2bd74
		.long   func_2bd98
		.long   func_2be02
		.long   func_2be73
		.long   func_2beb6
		.long   func_2bec0
		.long   func_2bf02
		.long   jump_2c201
		.long   jump_2c201
		.long   jump_2c201
		.long   func_2bf2d
		.long   func_2bf3f
		.long   func_2bf7a
		.long   func_2bfcb
		.long   func_2c007
		.long   func_2c03f
		.long   func_2c07e
		.long   func_2c0e0
		.long   func_2c14d
		.long   func_2c183
		.long   func_2c1d4
		.long   jump_2c201

vtable_2b908:
		.long   func_2bdda
		.long   func_2bde4
		.long   func_2bdee
		.long   func_2bdf8

vtable_2b918:
		.long   func_2be4b
		.long   func_2be55
		.long   func_2be5f
		.long   func_2be69

vtable_2b928:
		.long   func_2be8e
		.long   func_2be98
		.long   func_2bea2
		.long   func_2beac


/*----------------------------------------------------------------*/
move_objects:	/* 0x2b940 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    $level__Objects,%ebx
		cmp    last_object,%ebx
		jae    jump_2c234
	jump_2b955:
		cmpb   $0x0,0x18(%ebx)
		je     jump_2c223
		mov    0x19(%ebx),%dl
		xor    %esi,%esi
		cmp    $0x2a,%dl
		ja     jump_2c201
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:vtable_2b85c(,%eax,4)


/*----------------------------------------------------------------*/
func_2b979:
/*----------------------------------------------------------------*/
		push   %ebx
		call   affect_object
		mov    0x14(%ebx),%si
		add    $0x4,%esp
		test   %si,%si
		jge    jump_2b999
		mov    0x19(%ebx),%ah
		movw   $0x64,0x14(%ebx)
		inc    %ah
		mov    %ah,0x19(%ebx)
	jump_2b999:
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x4,%esp
		lea    0x26a(%eax),%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2b9c5:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%dx
		dec    %edx
		mov    %dx,0x14(%ebx)
		test   %dx,%dx
		jge    jump_2b9e0
		incb   0x19(%ebx)
		addl   $0x578,data_60af0
	jump_2b9e0:
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x4,%esp
		lea    0x26c(%eax),%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2ba0c:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x26e,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2ba30:
/*----------------------------------------------------------------*/
		movb   $0x0,0x1a(%ebx)
		mov    0x19(%ebx),%ch
		movw   $0x64,0x14(%ebx)
		inc    %ch
		mov    %ch,0x19(%ebx)
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2ba47:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
		push   %eax
		push   %eax
		push   %eax
		xor    %eax,%eax
		push   %eax
		push   %ebx
		call   traffic_go
		mov    0x1a(%ebx),%al
		mov    %al,%dh
		inc    %dh
		add    $0x14,%esp
		mov    %dh,0x1a(%ebx)
		test   $0x3f,%al
		jne    jump_2ba6c
		incb   0x19(%ebx)
	jump_2ba6c:
		push   %ebx
		mov    $0x410,%esi
		call   traffic_hover
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2ba7f:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
		push   %eax
		push   %eax
		xor    %eax,%eax
		push   %eax
		mov    $0x1,%eax
		push   %eax
		push   %ebx
		call   traffic_go
		mov    0x1a(%ebx),%al
		mov    %al,%ah
		inc    %ah
		add    $0x14,%esp
		mov    %ah,0x1a(%ebx)
		test   $0x3f,%al
		jne    jump_2baa9
		incb   0x19(%ebx)
	jump_2baa9:
		push   %ebx
		mov    $0x411,%esi
		call   traffic_hover
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2babc:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
		push   %eax
		xor    %eax,%eax
		push   %eax
		mov    $0x1,%eax
		push   %eax
		push   %eax
		push   %ebx
		call   traffic_go
		mov    0x1a(%ebx),%al
		mov    %al,%ch
		inc    %ch
		add    $0x14,%esp
		mov    %ch,0x1a(%ebx)
		test   $0x3f,%al
		jne    jump_2bae6
		incb   0x19(%ebx)
	jump_2bae6:
		push   %ebx
		mov    $0x412,%esi
		call   traffic_hover
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2baf9:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		push   %eax
		mov    $0x1,%eax
		push   %eax
		push   %eax
		push   %eax
		push   %ebx
		call   traffic_go
		mov    0x1a(%ebx),%al
		mov    %al,%cl
		inc    %cl
		add    $0x14,%esp
		mov    %cl,0x1a(%ebx)
		test   $0x3f,%al
		jne    jump_2bb1f
		movb   $0x5,0x19(%ebx)
	jump_2bb1f:
		push   %ebx
		mov    $0x413,%esi
		call   traffic_hover
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bb32:
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $0x414,%esi
		call   animate_model
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bb45:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		xor    %edx,%edx
		and    $0x1,%eax
		mov    0xe(%ebx),%dx
		add    %edx,%eax
		add    $0x4,%esp
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bb75:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bb83:
/*----------------------------------------------------------------*/
		mov    $0x100,%eax
		push   %eax
		push   %eax
		push   %eax
		movswl 0x8(%ebx),%eax
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		mov    $0xffff,%eax
		push   %eax
		push   %ebx
		call   check_area_for_person_unique
		add    $0x20,%esp
		test   %eax,%eax
		je     jump_2bbb1
		movb   $0xd,0x19(%ebx)
	jump_2bbb1:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		and    $0x1,%edx
		mov    0xe(%ebx),%ax
		add    %edx,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bbda:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2bbec
		movb   $0xe,0x19(%ebx)
	jump_2bbec:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		and    $0x1,%edx
		add    $0x2,%eax
		add    %edx,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bc18:
/*----------------------------------------------------------------*/
		mov    $0x100,%eax
		push   %eax
		push   %eax
		push   %eax
		movswl 0x8(%ebx),%eax
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		mov    $0xffff,%eax
		mov    0xa(%ebx),%dh
		push   %eax
		and    $0xfd,%dh
		push   %ebx
		mov    %dh,0xa(%ebx)
		call   check_area_for_person_unique
		add    $0x20,%esp
		test   %eax,%eax
		jne    jump_2bc4f
		movb   $0xf,0x19(%ebx)
	jump_2bc4f:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		and    $0x1,%edx
		add    $0x4,%eax
		add    %edx,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bc7b:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2bc93
		movb   $0xc,0x19(%ebx)
		movw   $0x28,0x14(%ebx)
	jump_2bc93:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		and    $0x1,%edx
		add    $0x6,%eax
		add    %edx,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bcbf:
/*----------------------------------------------------------------*/
		testb  $0xd0,0xc(%ebx)
		je     jump_2bcc9
		movb   $0x14,0x19(%ebx)
	jump_2bcc9:
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x4,%esp
		lea    0x228(%eax),%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bcf5:
/*----------------------------------------------------------------*/
		testb  $0xd0,0xc(%ebx)
		je     jump_2bcff
		movb   $0x14,0x19(%ebx)
	jump_2bcff:
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x226,%eax
		add    $0x4,%esp
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bd2c:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2bd51
		mov    data_60af0,%ebp
		mov    0x19(%ebx),%al
		add    $0x28,%ebp
		inc    %al
		mov    %ebp,data_60af0
		mov    %al,0x19(%ebx)
	jump_2bd51:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x22a(%eax),%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bd74:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x22c,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bd98:
/*----------------------------------------------------------------*/
		testb  $0x98,0xc(%ebx)
		je     jump_2bdac
		mov    0x19(%ebx),%cl
		movw   $0x64,0x14(%ebx)
		inc    %cl
		mov    %cl,0x19(%ebx)
	jump_2bdac:
		cmpw   $0x0,0x14(%ebx)
		jge    jump_2bdc1
		mov    0x19(%ebx),%ch
		movw   $0x64,0x14(%ebx)
		inc    %ch
		mov    %ch,0x19(%ebx)
	jump_2bdc1:
		cmpw   $0x3,0xe(%ebx)
		ja     jump_2c201
		xor    %eax,%eax
		mov    0xe(%ebx),%ax
		jmp    *%cs:vtable_2b908(,%eax,4)


/*----------------------------------------------------------------*/
func_2bdda:
/*----------------------------------------------------------------*/
		mov    $0x22e,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bde4:
/*----------------------------------------------------------------*/
		mov    $0xe3,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bdee:
/*----------------------------------------------------------------*/
		mov    $0xe6,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bdf8:
/*----------------------------------------------------------------*/
		mov    $0xe9,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2be02:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%ax
		dec    %eax
		mov    %ax,0x14(%ebx)
		test   %ax,%ax
		jge    jump_2be27
		mov    data_60af0,%edi
		mov    0x19(%ebx),%dl
		add    $0x64,%edi
		inc    %dl
		mov    %edi,data_60af0
		mov    %dl,0x19(%ebx)
	jump_2be27:
		push   %ebx
		call   animate_model
		mov    0xe(%ebx),%cx
		add    $0x4,%esp
		cmp    $0x3,%cx
		ja     jump_2c201
		xor    %eax,%eax
		mov    %cx,%ax
		jmp    *%cs:vtable_2b918(,%eax,4)


/*----------------------------------------------------------------*/
func_2be4b:
/*----------------------------------------------------------------*/
		mov    $0x22f,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2be55:
/*----------------------------------------------------------------*/
		mov    $0xe4,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2be5f:
/*----------------------------------------------------------------*/
		mov    $0xe7,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2be69:
/*----------------------------------------------------------------*/
		mov    $0xea,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2be73:
/*----------------------------------------------------------------*/
		mov    0xe(%ebx),%di
		cmp    $0x3,%di
		ja     jump_2c201
		xor    %eax,%eax
		mov    %di,%ax
		jmp    *%cs:vtable_2b928(,%eax,4)


/*----------------------------------------------------------------*/
func_2be8e:
/*----------------------------------------------------------------*/
		mov    $0x230,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2be98:
/*----------------------------------------------------------------*/
		mov    $0xe5,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bea2:
/*----------------------------------------------------------------*/
		mov    $0xe8,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2beac:
/*----------------------------------------------------------------*/
		mov    $0xeb,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2beb6:
/*----------------------------------------------------------------*/
		mov    $0x231,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bec0:
/*----------------------------------------------------------------*/
		push   %ebx
		call   affect_object
		mov    0x14(%ebx),%si
		add    $0x4,%esp
		test   %si,%si
		jge    jump_2beef
		mov    data_60af0,%esi
		mov    0x19(%ebx),%ah
		movw   $0x64,0x14(%ebx)
		add    $0x14,%esi
		inc    %ah
		mov    %esi,data_60af0
		mov    %ah,0x19(%ebx)
	jump_2beef:
		push   %ebx
		mov    $0x232,%esi
		call   animate_model
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bf02:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%dx
		dec    %edx
		mov    %dx,0x14(%ebx)
		test   %dx,%dx
		jge    jump_2bf1a
		movw   $0x32,0x14(%ebx)
		movb   $0x1a,0x19(%ebx)
	jump_2bf1a:
		push   %ebx
		mov    $0x233,%esi
		call   animate_model
		add    $0x4,%esp
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bf2d:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		mov    0xe(%ebx),%si
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bf3f:
/*----------------------------------------------------------------*/
		mov    $0x2e3,%eax
		push   %eax
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_2bf56
		movb   $0x21,0x19(%ebx)
	jump_2bf56:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x7a7,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bf7a:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2bfa7
		mov    $0x2,%eax
		push   %eax
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_2bfa7
		mov    0xa(%ebx),%al
		movb   $0x25,0x19(%ebx)
		or     $0x1,%al
		mov    %al,0xa(%ebx)
	jump_2bfa7:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x7a9,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2bfcb:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2bfe3
		movb   $0x23,0x19(%ebx)
		movw   $0x1e,0x14(%ebx)
	jump_2bfe3:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x7ab,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c007:
/*----------------------------------------------------------------*/
		mov    0x14(%ebx),%ax
		mov    %eax,%edx
		dec    %edx
		mov    %dx,0x14(%ebx)
		test   %ax,%ax
		jge    jump_2c01b
		movb   $0x24,0x19(%ebx)
	jump_2c01b:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x7ad,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c03f:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2c05a
		mov    0xa(%ebx),%ch
		movb   $0x25,0x19(%ebx)
		or     $0x1,%ch
		mov    %ch,0xa(%ebx)
	jump_2c05a:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x7af,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c07e:
/*----------------------------------------------------------------*/
		push   $0x2e3
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_2c09d
		mov    0xa(%ebx),%dh
		movb   $0x20,0x19(%ebx)
		and    $0xfe,%dh
		mov    %dh,0xa(%ebx)
	jump_2c09d:
		push   $0x2e3
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_2c0bc
		mov    0xa(%ebx),%cl
		movb   $0x22,0x19(%ebx)
		and    $0xfe,%cl
		mov    %cl,0xa(%ebx)
	jump_2c0bc:
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x7a7,%eax
		mov    %eax,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c0e0:
/*----------------------------------------------------------------*/
		mov    0x6(%ebx),%ax
		push   $0x5
		sub    $0x200,%eax
		push   $0x5
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		sub    $0x200,%eax
		cwtl
		push   %eax
		push   $0x2
		push   %ebx
		call   check_square_for_model
		add    $0x18,%esp
		test   %eax,%eax
		je     jump_2c12f
		mov    0x1a(%ebx),%ah
		movb   $0x27,0x19(%ebx)
		test   %ah,%ah
		je     jump_2c11b
		cmp    $0x80,%ah
		jne    jump_2c125
	jump_2c11b:
		mov    $0x18c,%esi
		jmp    jump_2c201
	jump_2c125:
		mov    $0x189,%esi
		jmp    jump_2c201
	jump_2c12f:
		mov    0x1a(%ebx),%ch
		test   %ch,%ch
		je     jump_2c1fc
		cmp    $0x80,%ch
		je     jump_2c1fc
	jump_2c143:
		mov    $0x188,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c14d:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2c16d
		mov    0xa(%ebx),%cl
		movb   $0x28,0x19(%ebx)
		or     $0x1,%cl
		mov    %cl,0xa(%ebx)
		jmp    jump_2c201
	jump_2c16d:
		mov    0x1a(%ebx),%dl
		test   %dl,%dl
		je     jump_2c179
		cmp    $0x80,%dl
		jne    jump_2c125
	jump_2c179:
		mov    $0x18c,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c183:
/*----------------------------------------------------------------*/
		mov    0x6(%ebx),%ax
		push   $0x5
		sub    $0x200,%eax
		push   $0x5
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		sub    $0x200,%eax
		cwtl
		push   %eax
		push   $0x2
		push   %ebx
		call   check_square_for_model
		add    $0x18,%esp
		test   %eax,%eax
		jne    jump_2c201
		mov    0xa(%ebx),%ch
		movb   $0x29,0x19(%ebx)
		and    $0xfe,%ch
		mov    0x1a(%ebx),%al
		mov    %ch,0xa(%ebx)
		test   %al,%al
		je     jump_2c1c6
		cmp    $0x80,%al
		jne    jump_2c1cd
	jump_2c1c6:
		mov    $0x18d,%esi
		jmp    jump_2c201
	jump_2c1cd:
		mov    $0x18a,%esi
		jmp    jump_2c201


/*----------------------------------------------------------------*/
func_2c1d4:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2c201
		movb   $0x26,0x19(%ebx)
		mov    0x1a(%ebx),%dh
		movw   $0x28,0x14(%ebx)
		test   %dh,%dh
		je     jump_2c1fc
		cmp    $0x80,%dh
		jne    jump_2c143
	jump_2c1fc:
		mov    $0x18b,%esi
	jump_2c201:
		cmp    0x12(%ebx),%si
		je     jump_2c223
		test   %si,%si
		je     jump_2c223
		xor    %eax,%eax
		mov    starts_ani,%edx
		mov    %si,%ax
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x10(%ebx)
		mov    %si,0x12(%ebx)
	jump_2c223:
		mov    last_object,%ecx
		add    $0x1e,%ebx
		cmp    %ecx,%ebx
		jb     jump_2b955
	jump_2c234:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
animate_panel:	/* 0x2c240 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0xc(%edx),%ax
		mov    frames,%ebx
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		mov    0x6(%eax),%ax
		mov    %ax,0xc(%edx)
		xor    %eax,%eax
		mov    0xc(%edx),%ax
		lea    0x0(,%eax,8),%eax
		add    %ebx,%eax
		testb  $0x1,0x5(%eax)
		setne  %al
		xor    %ah,%ah
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
center_panel_string:	/* 0x2c280 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%esi
		mov    %esi,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    $0x10,%eax
		movswl %cx,%edx
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    %eax,%edi
		mov    %eax,%edx
		add    %ecx,%edi
		xor    %eax,%eax
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_2c2c0:
		cmp    %dx,%ax
		jl     jump_2c2ca
		cmp    %di,%ax
		jl     jump_2c2cf
	jump_2c2ca:
		movb   $0x20,(%ebx)
		jmp    jump_2c2d4
	jump_2c2cf:
		mov    (%esi),%cl
		inc    %esi
		mov    %cl,(%ebx)
	jump_2c2d4:
		inc    %eax
		inc    %ebx
		cmp    $0x10,%ax
		jl     jump_2c2c0
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_mission_complete:	/* 0x2c2e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p177(,%eax,4),%edx
		push   %edx
		push   $data_60564
		call   center_panel_string
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		add    $0x8,%esp
		mov    gui_strings_p180(,%eax,4),%ebx
		push   %ebx
		push   $data_60574
		call   center_panel_string
		add    $0x8,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_mission_failed:	/* 0x2c320 */
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p183(,%eax,4),%edx
		push   %edx
		push   $data_60564
		call   center_panel_string
		add    $0x8,%esp
		ret
jpt_2C402:	/* 0x2c340 */
		.long   jump_2c4c5
		.long   func_2c451
		.long   func_2c473
		.long   func_2c462
		.long   jump_2c4c5
		.long   func_2c40a
		.long   jump_2c4c5
		.long   jump_2c4c5
		.long   jump_2c4c5
		.long   jump_2c4c5
		.long   func_2c473
		.long   func_2c484
		.long   jump_2c4c5
		.long   jump_2c4c5
		.long   func_2c41e
		.long   func_2c42f
		.long   func_2c440


/*----------------------------------------------------------------*/
set_panel_string:	/* 0x2c390 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%edx
		push   %edx
		push   $data_60554
		call   center_panel_string
		add    $0x8,%esp
		mov    0x18(%esp),%eax
		mov    %ax,data_5537c
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		jne    jump_2c4ff
		mov    data_60afc,%dl
		test   $0x6,%dl
		jne    jump_2c4e7
		xor    %ebx,%ebx
	jump_2c3ce:
		movswl %bx,%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		cmpl   $0x0,level__Objectives(%eax)
		jne    jump_2c4c5
		mov    data_9be3e(%eax),%dx
		cmp    $0x10,%dx
		ja     jump_2c4c5
		mov    %dx,%ax
		and    $0xffff,%eax
		jmp    *%cs:jpt_2C402(,%eax,4)


/*----------------------------------------------------------------*/
func_2c40a:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p153(,%eax,4),%ecx
		push   %ecx
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c41e:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p156(,%eax,4),%ebp
		push   %ebp
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c42f:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p159(,%eax,4),%edi
		push   %edi
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c440:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p162(,%eax,4),%esi
		push   %esi
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c451:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p165(,%eax,4),%ebp
		push   %ebp
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c462:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p168(,%eax,4),%esi
		push   %esi
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c473:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p171(,%eax,4),%edi
		push   %edi
		jmp    jump_2c493


/*----------------------------------------------------------------*/
func_2c484:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p174(,%eax,4),%edx
		push   %edx
	jump_2c493:
		push   $data_60564
		call   center_panel_string
		add    $0x8,%esp
		xor    %edx,%edx
		movswl %bx,%eax
		mov    data_5532e,%dx
		cmp    %eax,%edx
		je     jump_2c4d0
		mov    $0x10,%ecx
		mov    %bx,data_5532e
		mov    %cx,data_5532c
		jmp    jump_2c4d0
	jump_2c4c5:
		inc    %ebx
		cmp    $0x8,%bx
		jl     jump_2c3ce
	jump_2c4d0:
		push   $data_53828
		push   $data_60574
		call   center_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2c4e7:
		test   $0x2,%dl
		je     jump_2c4f1
		call   set_mission_complete
	jump_2c4f1:
		testb  $0x4,data_60afc
		je     jump_2c4ff
		call   set_mission_failed
	jump_2c4ff:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
print_panel_string:	/* 0x2c510 */
/*----------------------------------------------------------------*/
		mov    data_60afc,%ah
		test   $0x4,%ah
		je     jump_2c545
	jump_2c51b:
		mov    $0x2,%edx
		mov    data_5e395,%al
		xor    %ah,%ah
		sub    %eax,%edx
		mov    %dx,%ax
		push   $0x10
		and    $0xffff,%eax
		push   %eax
		push   $0xbe
		push   $0x0
		push   $data_60564
		jmp    jump_2c5f5
	jump_2c545:
		cmpb   $0x0,data_552ff
		jne    jump_2c5d0
		mov    data_60b46,%dh
		test   $0x20,%dh
		je     jump_2c57b
		test   $0x10,%dh
		je     jump_2c51b
		push   $0x10
		push   $0x0
		push   $0xbe
		push   $0x0
		push   $data_60554
		call   rprint
		add    $0x14,%esp
		ret
	jump_2c57b:
		test   $0x10,%dh
		je     jump_2c599
		push   $0x10
		push   $0x0
		push   $0xbe
		push   $0x0
		push   $data_60554
		call   rprint
		add    $0x14,%esp
		ret
	jump_2c599:
		test   $0x2,%ah
		je     jump_2c51b
		mov    $0x2,%edx
		mov    data_5e395,%al
		xor    %ah,%ah
		sub    %eax,%edx
		mov    %dx,%ax
		push   $0x10
		and    $0xffff,%eax
		push   %eax
		push   $0xbe
		push   $0x0
		push   $data_60574
		call   rprint
		add    $0x14,%esp
		ret
	jump_2c5d0:
		mov    $0x1,%edx
		mov    data_5e395,%al
		xor    %ah,%ah
		sub    %eax,%edx
		mov    %dx,%ax
		push   $0x10
		and    $0xffff,%eax
		push   %eax
		push   $0xbe
		push   $0x0
		push   $data_60584
	jump_2c5f5:
		call   rprint
		add    $0x14,%esp
		ret
unused_panel_unkn1:	/* 0x2c600 */
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		mov    0x10(%esp),%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    %ecx,%eax
		jl     jump_2c618
		pop    %esi
		pop    %ebx
		ret
	jump_2c618:
		xor    %edx,%edx
		mov    %si,%dx
		inc    %ebx
		movb   $0x1,data_5df80(%edx,%eax,1)
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    %ecx,%eax
		jl     jump_2c618
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
setup_panel:	/* 0x2c640 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   $0x38
		xor    %ah,%ah
		push   $0x0
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		push   $data_5df48
		mov    $unkarr_5094,%ebx
		mov    $data_55070,%esi
		call   ac_LbMemorySet
		mov    unkarr_5094,%dx
		add    $0xc,%esp
		test   %dx,%dx
		jl     jump_2c68c
	jump_2c672:
		push   $0x12
		push   %ebx
		push   %esi
		add    $0x12,%ebx
		call   LbMemoryCopy
		add    $0xc,%esp
		mov    (%ebx),%cx
		add    $0x12,%esi
		test   %cx,%cx
		jge    jump_2c672
	jump_2c68c:
		mov    $data_55112,%ebx
		mov    data_55112,%di
		mov    $unkarr_50B8,%esi
		test   %di,%di
		jl     jump_2c6bc
	jump_2c6a2:
		push   $0x12
		push   %ebx
		push   %esi
		add    $0x12,%ebx
		call   LbMemoryCopy
		add    $0xc,%esp
		mov    (%ebx),%ax
		add    $0x12,%esi
		test   %ax,%ax
		jge    jump_2c6a2
	jump_2c6bc:
		mov    $data_55190,%ebx
		mov    data_55190,%dx
		mov    $unkarr_516C,%esi
		test   %dx,%dx
		jl     jump_2c6ec
	jump_2c6d2:
		push   $0x12
		push   %ebx
		push   %esi
		add    $0x12,%ebx
		call   LbMemoryCopy
		add    $0xc,%esp
		mov    (%ebx),%cx
		add    $0x12,%esi
		test   %cx,%cx
		jge    jump_2c6d2
	jump_2c6ec:
		call   clear_weapons
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		mov    $0x1,%edi
		xor    %esi,%esi
		mov    $level__People,%ebx
		mov    %si,index
		mov    %di,a2
		mov    %di,data_5e124
		add    %eax,%ebx
		mov    $0x5c,%esi
		jmp    jump_2c7a1
	jump_2c749:
		testb  $0x4,0x1d(%ebx)
		je     jump_2c78f
		movswl 0x6(%ebx),%edx
		movswl 0x8(%ebx),%eax
		sub    $0x200,%edx
		sub    %eax,%edx
		sar    $0x7,%edx
		movswl %dx,%edx
		push   %edx
		movswl 0x4(%ebx),%edx
		sub    $0xa00,%edx
		sub    %eax,%edx
		sar    $0x7,%edx
		movswl %dx,%eax
		push   %eax
		mov    $0x1,%ebx
		call   full_redraw
		add    $0x8,%esp
		mov    %bx,data_5e112
		jmp    jump_2c7df
	jump_2c78f:
		mov    data_5e124,%dx
		inc    %edx
		add    $0x5c,%ebx
		mov    %dx,data_5e124
	jump_2c7a1:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   %esi,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_2c749
	jump_2c7df:
		push   $unkarr_5094
		call   draw_apanel
		add    $0x4,%esp
		push   $0x190
		push   $0x280
		push   $0x0
		push   $0x0
		call   LbScreenSetGraphicsWindow
		add    $0x10,%esp
		push   $0x8
		push   $0x80
		push   $0x80
		push   $0x110
		push   $0x0
		call   prectangle
		add    $0x14,%esp
		xor    %eax,%eax
		mov    $0x1,%dl
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_2c830:
		add    $0xa,%eax
		mov    %dl,data_5df76(%eax)
		mov    %dl,data_5df77(%eax)
		mov    %dl,data_5df78(%eax)
		mov    %dl,data_5df79(%eax)
		mov    %dl,data_5df7a(%eax)
		mov    %dl,data_5df7b(%eax)
		mov    %dl,data_5df7c(%eax)
		mov    %dl,data_5df7d(%eax)
		mov    %dl,data_5df7e(%eax)
		mov    %dl,data_5df7f(%eax)
		cmp    $0x190,%eax
		jb     jump_2c830
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_players_turn:	/* 0x2c880 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    level__Timer,%dx
		mov    data_5e124,%ax
		inc    %edx
		mov    %ax,data_5e122
		mov    %dx,level__Timer
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+104,%al	/* lbDisplay.RightButton */
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+103,%al	/* lbDisplay.LeftButton */
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    data_5e124,%ax
		push   %eax
		push   $data_55112
		call   process_panel_people
		add    $0x10,%esp
		mov    %eax,%ebx
		test   %ax,%ax
		je     jump_2c8fd
		movw   $0x1,data_5e112
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_2c8f6
		xor    %edx,%edx
		cwtl
		mov    data_5e124,%dx
		cmp    %eax,%edx
		jne    jump_2c8f6
		xor    %esi,%esi
		mov    %si,data_5e112
	jump_2c8f6:
		mov    %bx,data_5e124
	jump_2c8fd:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+104,%al	/* lbDisplay.RightButton */
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+103,%al	/* lbDisplay.LeftButton */
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    a2,%ax
		push   %eax
		push   $data_55190
		call   process_panel
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_2ca1d
		mov    a2,%di
		cmp    $0x2,%di
		jne    jump_2c952
		mov    $0x1,%eax
		mov    %di,data_5e11e
		mov    %ax,a2
		jmp    jump_2ca14
	jump_2c952:
		mov    %di,data_5e11e
		mov    %ax,a2
		mov    $data_55112,%eax
		mov    $0xb,%esi
		xor    %cl,%cl
		jmp    jump_2ca08
	jump_2c970:
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		movb   $0x1,0xa(%eax)
		movw   $0x3,(%eax)
		mov    %cl,data_5df51(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df48(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df4a(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df49(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df4b(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df4d(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df4c(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df4e(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		mov    %cl,data_5df50(%edx)
		movsbl 0xb(%eax),%edx
		dec    %edx
		imul   %esi,%edx
		add    $0x12,%eax
		mov    %cl,data_5df4f(%edx)
	jump_2ca08:
		movswl (%eax),%edx
		cmp    $0xffffff9d,%edx
		jne    jump_2c970
	jump_2ca14:
		movw   $0x1,data_5e110
	jump_2ca1d:
		call   check_player_holding
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+104,%al	/* lbDisplay.RightButton */
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+103,%al	/* lbDisplay.LeftButton */
		cwtl
		push   %eax
		xor    %eax,%eax
		mov    index,%ax
		push   %eax
		push   $unkarr_55256
		call   process_panel_weapons
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_2ca6f
		mov    index,%dx
		mov    $0x1,%ebx
		mov    %dx,data_5e11a
		mov    %ax,index
		mov    %bx,data_5e118
	jump_2ca6f:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		add    %eax,%eax
		cmpb   $0x0,data_605e1(%eax)
		jne    jump_2cabd
		add    $packets,%eax
		push   %eax
		call   make_packet
		mov    a2,%cx
		add    $0x4,%esp
		cmp    $0x2,%cx
		jne    jump_2cabd
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		addb   $0x20,data_605e1(,%eax,2)
	jump_2cabd:
		xor    %esi,%esi
		mov    %si,data_5e118
		mov    %si,data_5e110
		mov    %si,data_5e112
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2cad8:
		.long   func_2cca4
		.long   func_2cca4
		.long   jump_2d0ce
		.long   func_2ccc6
		.long   func_2d0b0
		.long   func_2d0b0

vtable_2caf0:
		.long   jump_2d012
		.long   func_2cd0c
		.long   func_2cd3b
		.long   func_2cd6a
		.long   func_2cd99
		.long   func_2cdc8
		.long   func_2cdf7
		.long   func_2ce26
		.long   func_2ce55
		.long   func_2ce84
		.long   func_2ceb3
		.long   func_2cee2
		.long   func_2cf11
		.long   func_2cf82
		.long   func_2cf82
		.long   func_2cf82
		.long   func_2cfae
		.long   func_2cfda
		.long   func_2cfda
		.long   func_2cfda


/*----------------------------------------------------------------*/
change_mouse_pointer:	/* 0x2cb40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		xor    %ah,%ah
		mov    $0x1,%esi
		mov    %ah,data_552ff
		cmpw   $0x80,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jb     jump_2cc88
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		movsbl data_5e552(%eax),%ecx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %ecx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ecx
		add    %eax,%ecx
		xor    %eax,%eax
		mov    $level__things_base,%edi
		mov    data_60b14,%ax
		mov    $0x2,%esi
		add    %eax,%edi
		test   %ax,%ax
		je     jump_2cc1c
		mov    $0x5c,%ebp
		xor    %edx,%edx
		div    %ebp
		mov    %eax,%ebp
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		shr    $0x3,%ebp
		cmp    %eax,%ebp
		je     jump_2cc1c
		testb  $0x1,0xb(%edi)
		jne    jump_2cc1c
		mov    0x44(%ecx),%si
		test   %si,%si
		je     jump_2cc12
		xor    %eax,%eax
		mov    %si,%ax
		add    $level__things_base,%eax
		mov    0x19(%eax),%al
		and    $0xff,%eax
		movswl data_5a6c2(,%eax,2),%eax
		push   %eax
		push   %edi
		push   %ecx
		call   i_can_see_and_shoot_person
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_2cc12
		mov    $0x6,%esi
		jmp    jump_2cc88
	jump_2cc12:
		mov    $0x5,%esi
		jmp    jump_2cc88
	jump_2cc1c:
		mov    data_60b12,%di
		test   %di,%di
		je     jump_2cc6e
		xor    %eax,%eax
		mov    %di,%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		jne    jump_2cc88
		mov    0x44(%ecx),%dx
		test   %dx,%dx
		je     jump_2cc12
		xor    %edi,%edi
		mov    %dx,%di
		add    $level__things_base,%edi
		movzbl 0x19(%edi),%edi
		movswl data_5a6c2(,%edi,2),%edi
		push   %edi
		push   %eax
		push   %ecx
		call   i_can_see_and_shoot_vehicle
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_2cc12
		mov    $0x6,%esi
		jmp    jump_2cc88
	jump_2cc6e:
		cmpw   $0x0,data_60b1a
		je     jump_2cc88
		push   %ecx
		mov    $0x4,%esi
		call   count_weapons
		add    $0x4,%esp
		mov    %eax,%ebx
	jump_2cc88:
		mov    %si,%ax
		dec    %ax
		cmp    $0x5,%ax
		ja     jump_2d0ce
		and    $0xffff,%eax
		jmp    *%cs:vtable_2cad8(,%eax,4)


func_2cca4:
		xor    %ecx,%ecx
		mov    %si,%cx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		lea    (%eax,%eax,1),%ecx
		mov    EXPORT_SYMBOL(pointer_sprites),%eax
		add    %ecx,%eax
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   %eax
		call   ac_LbMouseChangeSprite
		add    $0x4,%esp
#else
		mov    %eax,EXPORT_SYMBOL(mouse_sprite)
#endif
		jmp    jump_2d0ce


func_2ccc6:
		mov    $0x1,%cl
		xor    %edi,%edi
		mov    data_5e398,%ch
		mov    data_60b1a,%di
		mov    %cl,data_552ff
		add    $level__things_base,%edi
		test   %ch,%ch
		jne    jump_2d059
		cmp    $0x8,%bx
		jge    jump_2d059
		cmpb   $0x13,0x19(%edi)
		ja     jump_2d012
		xor    %eax,%eax
		mov    0x19(%edi),%al
		jmp    *%cs:vtable_2caf0(,%eax,4)


func_2cd0c:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x242(%eax),%ax
		jmp    jump_2d004


func_2cd3b:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x24a(%eax),%ax
		jmp    jump_2d004


func_2cd6a:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x252(%eax),%ax
		jmp    jump_2d004


func_2cd99:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x25a(%eax),%ax
		jmp    jump_2d004


func_2cdc8:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x262(%eax),%ax
		jmp    jump_2d004


func_2cdf7:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x26a(%eax),%ax
		jmp    jump_2d004


func_2ce26:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x272(%eax),%ax
		jmp    jump_2d004


func_2ce55:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x27a(%eax),%ax
		jmp    jump_2d004


func_2ce84:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x282(%eax),%ax
		jmp    jump_2d004


func_2ceb3:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x28a(%eax),%ax
		jmp    jump_2d004


func_2cee2:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x292(%eax),%ax
		jmp    jump_2d004


func_2cf11:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x29a(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		call   draw_element
		xor    %eax,%eax
		mov    0x19(%edi),%al
		lea    -0x1(%eax),%ecx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,4),%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		add    $0xc,%esp
		mov    strings_weapon_names(%ecx,%eax,4),%edx
		push   %edx
		push   $data_60584
		call   center_panel_string
		add    $0x8,%esp
		jmp    jump_2d012


func_2cf82:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x2b2(%eax),%ax
		jmp    jump_2d004


func_2cfae:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x2ba(%eax),%ax
		jmp    jump_2d004


func_2cfda:
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl data_5525a(,%eax,2),%ecx
		push   %ecx
		movswl data_55258(,%eax,2),%eax
		push   %eax
		mov    starts_ani,%eax
		mov    0x2c2(%eax),%ax

	jump_2d004:
		and    $0xffff,%eax
		push   %eax
		call   draw_element
		add    $0xc,%esp
	jump_2d012:
		xor    %eax,%eax
		mov    0x19(%edi),%al
		cmpb   $0x0,data_5a69a(%eax)
		je     jump_2d059
		movswl %bx,%ecx
		lea    0x0(,%ecx,8),%eax
		push   $0xc
		add    %ecx,%eax
		push   $0x4
		add    %eax,%eax
		xor    %ecx,%ecx
		push   $0x17
		mov    data_5525a(%eax),%cx
		mov    data_55258(%eax),%ax
		add    $0x18,%ecx
		and    $0xffff,%eax
		push   %ecx
		add    $0x4,%eax
		push   %eax
		call   rectangle
		add    $0x14,%esp
	jump_2d059:
		xor    %eax,%eax
		mov    0x19(%edi),%al
		lea    -0x1(%eax),%ecx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(language),%cl
		lea    0x0(,%ecx,4),%ecx
		mov    strings_weapon_names(%ecx,%eax,4),%ebx
		push   %ebx
		push   $data_60584
		call   center_panel_string
		xor    %ecx,%ecx
		mov    %si,%cx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		lea    (%eax,%eax,1),%ecx
		mov    EXPORT_SYMBOL(pointer_sprites),%eax
		add    %ecx,%eax
		add    $0x8,%esp
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   %eax
		call   ac_LbMouseChangeSprite
		add    $0x4,%esp
#else
		mov    %eax,EXPORT_SYMBOL(mouse_sprite)
#endif
		jmp    jump_2d0ce


func_2d0b0:
		xor    %ecx,%ecx
		mov    %si,%cx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(pointer_sprites),%ecx
		add    %eax,%eax
		add    %eax,%ecx
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   %ecx
		call   ac_LbMouseChangeSprite
		add    $0x4,%esp
#else
		mov    %ecx,EXPORT_SYMBOL(mouse_sprite)
#endif

	jump_2d0ce:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_panel:	/* 0x2d0e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x4,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbw data_5e552(%eax),%dx
		and    $0xffff,%edx
		mov    data_5e551(%eax),%al
		xor    %ah,%ah
		push   %edx
		and    $0xffff,%eax
		push   %eax
		call   number_people
		add    $0x8,%esp
		call   func_4c32f
		push   $data_55112
		call   draw_apanel
		add    $0x4,%esp
		push   $unkarr_55256
		call   draw_apanel
		add    $0x4,%esp
		push   $data_55190
		call   draw_apanel
		add    $0x4,%esp
		call   draw_bars
		push   $0x80
		push   $0x80
		push   $0x110
		push   $0x0
		call   LbScreenSetGraphicsWindow
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		add    $0x10,%esp
		add    %eax,%ebx
		xor    %ah,%ah
		mov    %ah,(%esp)
		jmp    jump_2d1de
	jump_2d1af:
		push   $0xa
		push   %ebx
		call   person_has_weapon
		add    $0x8,%esp
		test   %ax,%ax
		je     jump_2d1db
		movb   $0x1,data_552fe
		cmpw   $0x8,data_552f8
		jne    jump_2d22e
		movw   $0x4,data_552f8
		jmp    jump_2d22e
	jump_2d1db:
		add    $0x5c,%ebx
	jump_2d1de:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_2d1af
		mov    (%esp),%dl
		test   %dl,%dl
		jne    jump_2d22e
		mov    %dl,data_552fe
		movw   $0x8,data_552f8
	jump_2d22e:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e552(%eax),%bh
		test   %bh,%bh
		jl     jump_2d284
		xor    %edx,%edx
		mov    data_5e551(%eax),%al
		mov    data_552f8,%dx
		and    $0xff,%eax
		push   %edx
		movsbl %bh,%edx
		add    %eax,%edx
		imul   $0x5c,%edx,%edx
		add    $level__People,%edx
		push   %edx
		call   draw_tact_map
		add    $0x8,%esp
	jump_2d284:
		push   $0x190
		push   $0x280
		push   $0x0
		push   $0x0
		call   LbScreenSetGraphicsWindow
		add    $0x10,%esp
		push   $0x0
		push   $0x80
		push   $0x18f
		push   $0x0
		call   vertical_line
		add    $0x10,%esp
		call   change_mouse_pointer
		call   print_panel_string
		add    $0x4,%esp
		pop    %ebx
		ret

vtable_2d2c0:
		.long   func_2d39f
		.long   jump_2d5f4
		.long   func_2d3b8
		.long   func_2d3b8
		.long   func_2d3d6
		.long   func_2d3d6
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   func_2d42f
		.long   func_2d451
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   func_2d473
		.long   func_2d491
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   func_2d4af
		.long   func_2d4cd
		.long   jump_2d5f4
		.long   func_2d4eb
		.long   func_2d509
		.long   func_2d527
		.long   jump_2d5f4
		.long   func_2d545
		.long   func_2d563
		.long   jump_2d5f4
		.long   func_2d581
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   func_2d59f
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   jump_2d5f4
		.long   func_2d5bd
		.long   func_2d5db


/*----------------------------------------------------------------*/
get_persons_action:	/* 0x2d380 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%edx
		cmpb   $0x2c,0x19(%edx)
		ja     jump_2d5f4
		xor    %eax,%eax
		mov    0x19(%edx),%al
		jmp    *%cs:vtable_2d2c0(,%eax,4)


/*----------------------------------------------------------------*/
func_2d39f:
/*----------------------------------------------------------------*/
		mov    $0x32,%eax
		push   %eax
		mov    $data_53828,%eax
		push   %eax
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d3b8:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p186(,%eax,4),%edx
		push   %edx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d3d6:
/*----------------------------------------------------------------*/
		mov    0x58(%edx),%al
		cmp    $0x6,%al
		jb     jump_2d411
		jbe    jump_2d3e5
		cmp    $0x9,%al
		je     jump_2d3fb
		jmp    jump_2d411
	jump_2d3e5:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p159(,%eax,4),%edi
		push   %edi
		jmp    jump_2d5ec
	jump_2d3fb:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p189(,%eax,4),%esi
		push   %esi
		jmp    jump_2d5ec
	jump_2d411:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p192(,%eax,4),%ebp
		push   %ebp
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d42f:
/*----------------------------------------------------------------*/
		mov    $0x32,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p189(,%eax,4),%ecx
		push   %ecx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d451:
/*----------------------------------------------------------------*/
		mov    $0x32,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p195(,%eax,4),%ebx
		push   %ebx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d473:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p198(,%eax,4),%edx
		push   %edx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d491:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p201(,%eax,4),%ebp
		push   %ebp
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d4af:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p204(,%eax,4),%edi
		push   %edi
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d4cd:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p207(,%eax,4),%esi
		push   %esi
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d4eb:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p210(,%eax,4),%ecx
		push   %ecx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d509:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p210(,%eax,4),%ebx
		push   %ebx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d527:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p213(,%eax,4),%edx
		push   %edx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d545:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p216(,%eax,4),%ebp
		push   %ebp
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d563:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p219(,%eax,4),%edi
		push   %edi
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d581:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p222(,%eax,4),%esi
		push   %esi
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d59f:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p225(,%eax,4),%ecx
		push   %ecx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d5bd:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p228(,%eax,4),%ebx
		push   %ebx
		call   set_panel_string
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2d5db:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x32
		mov    gui_strings_p231(,%eax,4),%edx
		push   %edx
	jump_2d5ec:
		call   set_panel_string
		add    $0x8,%esp
	jump_2d5f4:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2d5fc:
		.long   func_2dcf5
		.long   func_2dd04
		.long   func_2dd04
		.long   jump_2e1d6
		.long   jump_2e1d6


/*----------------------------------------------------------------*/
make_packet:	/* 0x2d610 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x14(%esp),%ebx
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x01	/* lbKeyOn[KC_ESCAPE] */
		je     jump_2d63a
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_2d63a
		xor    %eax,%eax
		movb   $0x2,0xd(%ebx)
		mov    %eax,(%esp)
		jmp    jump_2e474
	jump_2d63a:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x20	/* lbKeyOn[KC_D] */
		je     jump_2d65f
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		jne    jump_2d65f
		xor    %edi,%edi
		movb   $0x10,0xd(%ebx)
		mov    %edi,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2d65f:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x02	/* lbKeyOn[KC_1] */
		je     jump_2d671
		movw   $0x1,data_5e124
	jump_2d671:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x03
		je     jump_2d683
		movw   $0x2,data_5e124
	jump_2d683:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x04
		je     jump_2d695
		movw   $0x3,data_5e124
	jump_2d695:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x05
		je     jump_2d6a7
		movw   $0x4,data_5e124
	jump_2d6a7:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x13
		je     jump_2d6d5
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x12
		je     jump_2d6d5
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1f
		je     jump_2d6d5
		xor    %esi,%esi
		movb   $0x17,0xd(%ebx)
		mov    %esi,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2d6d5:
		cmpw   $0x0,data_60b14
		je     jump_2d7d4
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_2d7d4
		cmpw   $0x0,data_60b1a
		je     jump_2d707
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jne    jump_2d7d4
	jump_2d707:
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		xor    %eax,%eax
		mov    data_5e551(%ecx),%al
		imul   $0x5c,%eax,%esi
		xor    %edx,%edx
		mov    data_60b14,%dx
		add    $level__things_base,%edx
		add    $level__People,%esi
		cmp    %esi,%edx
		jb     jump_2d7d4
		lea    0x4(%eax),%edi
		imul   $0x5c,%edi,%edi
		add    $level__People,%edi
		cmp    %edi,%edx
		jae    jump_2d7d4
		cmpw   $0x1,a2
		jne    jump_2d7a4
		movsbl data_5e552(%ecx),%ecx
		add    %ecx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%edx
		je     jump_2d7d4
		sub    %esi,%edx
		mov    $0x5c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %eax
		xor    %edx,%edx
		mov    %ax,data_5e124
		mov    %edx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2d7a4:
		mov    data_60b20,%ax
		mov    %ax,(%ebx)
		mov    data_60b1e,%ax
		mov    %ax,0x2(%ebx)
		mov    data_60b1c,%ax
		mov    %ax,0x4(%ebx)
		xor    %eax,%eax
		movb   $0x1a,0xd(%ebx)
		mov    %eax,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2d7d4:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		testb  $0x1,0xb(%eax)
		jne    jump_2d820
		testb  $0x4,0x1d(%eax)
		jne    jump_2d8d3
	jump_2d820:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		xor    %ecx,%ecx
		xor    %esi,%esi
		mov    $level__People,%edx
		mov    %cx,data_5e124
		add    %eax,%edx
		mov    $0x5c,%edi
		jmp    jump_2d899
	jump_2d867:
		testb  $0x1,0xb(%edx)
		jne    jump_2d895
		testb  $0x4,0x1d(%edx)
		je     jump_2d895
		mov    $0x1,%edx
		mov    data_5e124,%ax
		inc    %esi
		mov    %ax,data_5e122
		mov    %si,data_5e124
		mov    %dx,data_5e112
		jmp    jump_2d8d3
	jump_2d895:
		add    $0x5c,%edx
		inc    %esi
	jump_2d899:
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   %edi,%eax
		add    $level__People,%eax
		cmp    %eax,%edx
		jb     jump_2d867
	jump_2d8d3:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_5e551(%eax),%al
		mov    data_5e124,%dx
		and    $0xff,%eax
		dec    %edx
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%esi
		mov    data_5e112,%cx
		add    %eax,%esi
		test   %cx,%cx
		je     jump_2d9d4
		cmpw   $0x0,data_5e124
		je     jump_2d9d4
		testb  $0x4,0x1d(%esi)
		je     jump_2d9d4
		cmpw   $0x0,data_5e116
		je     jump_2d94f
		movw   $0x1,a2
	jump_2d94f:
		call   clear_weapons
		mov    data_5e124,%ax
		movb   $0x6,0xd(%ebx)
		dec    %eax
		mov    data_5e114,%dx
		mov    %ax,(%ebx)
		test   %dx,%dx
		je     jump_2d9a0
		movswl 0x6(%esi),%edx
		movswl 0x8(%esi),%eax
		sub    $0x200,%edx
		sub    %eax,%edx
		sar    $0x7,%edx
		movswl %dx,%edx
		push   %edx
		movswl 0x4(%esi),%edx
		sub    $0xa00,%edx
		sub    %eax,%edx
		sar    $0x7,%edx
		movswl %dx,%eax
		push   %eax
		call   full_redraw
		add    $0x8,%esp
	jump_2d9a0:
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    EXPORT_SYMBOL(lbDisplay)+103,%al	/* lbDisplay.LeftButton */
		mov    %al,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %ah,%ah
		mov    EXPORT_SYMBOL(lbDisplay)+104,%al	/* lbDisplay.RightButton */
		mov    %ax,data_5e116
		xor    %ebx,%ebx
		mov    %ax,data_5e114
		mov    %ebx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2d9d4:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %edx,%eax
		imul   $0x5c,%eax,%esi
		add    $level__People,%esi
		cmpb   $0x0,0x19(%esi)
		jne    jump_2da8f
		push   $0xa
		push   %esi
		call   get_person_perception
		add    $0x8,%esp
		test   %ax,%ax
		jle    jump_2da8f
		push   $0x64
		push   %esi
		call   get_person_intelligence
		add    $0x8,%esp
		test   %ax,%ax
		jle    jump_2da8f
		cmpw   $0x0,0x44(%esi)
		je     jump_2da8f
		cmpb   $0x0,0x46(%esi)
		jne    jump_2da8f
		movb   $0xf,0xd(%ebx)
		xor    %eax,%eax
		mov    0x1a(%esi),%al
		movswl data_5ab60(,%eax,2),%eax
		shl    $0xa,%eax
		movswl 0x4(%esi),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		mov    %ax,(%ebx)
		xor    %eax,%eax
		mov    0x1a(%esi),%al
		movswl data_5ad60(,%eax,2),%eax
		shl    $0xa,%eax
		movswl 0x6(%esi),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		mov    %ax,0x2(%ebx)
		mov    data_60b1c,%ax
		mov    %ax,0x4(%ebx)
	jump_2da8f:
		cmpw   $0x2,a2
		jne    jump_2db47
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_5e551(%eax),%dl
		imul   $0x5c,%edx,%edx
		add    $level__People,%edx
		mov    $0x5c,%esi
		xor    %edi,%edi
		jmp    jump_2db0b
	jump_2dad7:
		testb  $0x4,0x1d(%edx)
		je     jump_2db08
		mov    0x44(%edx),%cx
		cmp    %cx,%di
		je     jump_2db08
		xor    %eax,%eax
		mov    %cx,%ax
		add    $level__things_base,%eax
		cmp    0x14(%eax),%di
		jle    jump_2db08
		cmpb   $0xa,0x19(%edx)
		je     jump_2db08
		movb   $0x16,0xd(%ebx)
		mov    0x19(%eax),%al
		xor    %ah,%ah
		mov    %ax,(%ebx)
	jump_2db08:
		add    $0x5c,%edx
	jump_2db0b:
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   %esi,%eax
		add    $level__People,%eax
		cmp    %eax,%edx
		jae    jump_2dbb0
		jmp    jump_2dad7
	jump_2db47:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		mov    0x44(%eax),%cx
		test   %cx,%cx
		je     jump_2dbb0
		xor    %edx,%edx
		mov    %cx,%dx
		add    $level__things_base,%edx
		cmpw   $0x0,0x14(%edx)
		jge    jump_2dbb0
		cmpb   $0xa,0x19(%eax)
		je     jump_2dbb0
		movb   $0x16,0xd(%ebx)
		xor    %ah,%ah
		mov    0x19(%edx),%al
		mov    %ax,(%ebx)
	jump_2dbb0:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %edx,%eax
		imul   $0x5c,%eax,%esi
		add    $level__People,%esi
		cmpw   $0x80,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jae    jump_2dcc6
		cmpw   $0x110,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jb     jump_2dcc6
		xor    %edi,%edi
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%di
		mov    $0x100,%eax
		xor    %ecx,%ecx
		mov    %eax,%edx
		mov    data_552f8,%cx
		sar    $0x1f,%edx
		idiv   %ecx
		sub    $0x40,%edi
		imul   %edi,%eax
		movswl 0x4(%esi),%edx
		add    %edx,%eax
		mov    %ax,data_60b20
		cmp    $0x7f00,%ax
		jbe    jump_2dc4c
		movw   $0x7f00,data_60b20
		jmp    jump_2dc5b
	jump_2dc4c:
		cmp    $0x100,%ax
		jae    jump_2dc5b
		movw   $0x100,data_60b20
	jump_2dc5b:
		xor    %edi,%edi
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%di
		mov    $0x100,%eax
		xor    %ecx,%ecx
		mov    %eax,%edx
		mov    data_552f8,%cx
		sar    $0x1f,%edx
		idiv   %ecx
		sub    $0x150,%edi
		imul   %edi,%eax
		movswl 0x6(%esi),%edx
		add    %edx,%eax
		mov    %ax,data_60b1e
		cmp    $0x5f00,%ax
		jbe    jump_2dc9f
		movw   $0x5f00,data_60b1e
		jmp    jump_2dcae
	jump_2dc9f:
		cmp    $0x100,%ax
		jae    jump_2dcae
		movw   $0x100,data_60b1e
	jump_2dcae:
		mov    0x8(%esi),%ax
		add    $0x80,%eax
		mov    %ax,data_60b1c
		movb   $0x1,data_60b39
		jmp    jump_2dcce
	jump_2dcc6:
		xor    %ch,%ch
		mov    %ch,data_60b39
	jump_2dcce:
		push   %esi
		call   get_persons_action
		mov    a2,%dx
		add    $0x4,%esp
		cmp    $0x4,%dx
		ja     jump_2e1d6
		xor    %eax,%eax
		mov    %dx,%ax
		jmp    *%cs:vtable_2d5fc(,%eax,4)


/*----------------------------------------------------------------*/
func_2dcf5:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    %edx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2dd04:
/*----------------------------------------------------------------*/
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
		je     jump_2dd62
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
		je     jump_2dd62
		mov    data_60b20,%ax
		movb   $0x11,0xd(%ebx)
		mov    %ax,(%ebx)
		mov    data_60b1e,%ax
		mov    %ax,0x2(%ebx)
		mov    data_60b1c,%ax
		mov    %ax,0x4(%ebx)
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %esi,%esi
		mov    %si,data_5e114
		mov    %si,data_5e116
		mov    %esi,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2dd62:
		cmpb   $0x0,data_60b39
		je     jump_2ddb5
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_2ddb5
		mov    data_60b20,%ax
		movb   $0x3,0xd(%ebx)
		mov    %ax,(%ebx)
		mov    data_60b1e,%ax
		mov    %ax,0x2(%ebx)
		mov    data_60b1c,%ax
		mov    %ax,0x4(%ebx)
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %bh,%bh
		xor    %ecx,%ecx
		mov    %bx,data_5e116
		mov    %ecx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2ddb5:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_2dee7
		cmpw   $0x80,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jb     jump_2dee7
		mov    data_60b12,%dx
		test   %dx,%dx
		je     jump_2de28
		xor    %eax,%eax
		mov    %dx,%ax
		add    $level__things_base,%eax
		push   %eax
		push   %esi
		call   person_in_car
		add    $0x8,%esp
		test   %ax,%ax
		je     jump_2ddfc
		movb   $0x19,0xd(%ebx)
		jmp    jump_2de09
	jump_2ddfc:
		mov    data_60b12,%ax
		movb   $0x9,0xd(%ebx)
		mov    %ax,(%ebx)
	jump_2de09:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %eax,%eax
		xor    %dl,%dl
		mov    %ax,data_5e116
		mov    %edx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2de28:
		mov    data_60b1a,%cx
		test   %cx,%cx
		je     jump_2de59
		movb   $0x5,0xd(%ebx)
		mov    %dx,data_5e116
		mov    %cx,(%ebx)
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %edi,%edi
		mov    %edi,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2de59:
		mov    data_60b14,%di
		test   %di,%di
		je     jump_2deaa
		xor    %eax,%eax
		mov    %di,%ax
		add    $level__things_base,%eax
		cmp    %esi,%eax
		jne    jump_2de7f
		mov    data_60b10,%ax
		movb   $0x18,0xd(%ebx)
		jmp    jump_2de89
	jump_2de7f:
		mov    data_60b10,%ax
		movb   $0x4,0xd(%ebx)
	jump_2de89:
		mov    %ax,(%ebx)
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %ebx,%ebx
		mov    %bx,data_5e116
		mov    %ebx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2deaa:
		mov    data_60b20,%ax
		movb   $0x3,0xd(%ebx)
		mov    %ax,(%ebx)
		mov    data_60b1e,%ax
		mov    %ax,0x2(%ebx)
		mov    data_60b1c,%ax
		mov    %ax,0x4(%ebx)
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %ah,%ah
		mov    %edx,(%esp)
		mov    %ax,data_5e116
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2dee7:
		cmpb   $0x0,data_60b39
		je     jump_2df57
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		je     jump_2df57
		xor    %edx,%edx
		xor    %eax,%eax
		mov    data_60b1e,%dx
		mov    data_60b1c,%ax
		sub    $0x200,%edx
		sub    %eax,%edx
		sar    $0x7,%edx
		movswl %dx,%edx
		push   %edx
		xor    %edx,%edx
		mov    data_60b20,%dx
		sub    $0xa00,%edx
		sub    %eax,%edx
		sar    $0x7,%edx
		movswl %dx,%eax
		push   %eax
		call   full_redraw
		add    $0x8,%esp
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %edi,%edi
		mov    %di,data_5e114
		mov    %edi,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2df57:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
		je     jump_2e084
		cmpw   $0x80,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jb     jump_2e084
		cmpw   $0x0,0x44(%esi)
		je     jump_2e084
		push   %esi
		call   auto_weapon
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2df95
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
		jne    jump_2dfa2
	jump_2df95:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		je     jump_2e084
	jump_2dfa2:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		je     jump_2dfb3
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
	jump_2dfb3:
		mov    data_60b14,%cx
		test   %cx,%cx
		je     jump_2e003
		xor    %eax,%eax
		mov    %cx,%ax
		add    $level__things_base,%eax
		cmp    %eax,%esi
		je     jump_2e003
		movb   $0x8,0xd(%ebx)
		mov    0x4(%eax),%dx
		mov    %dx,(%ebx)
		mov    0x6(%eax),%dx
		mov    %dx,0x2(%ebx)
		xor    %ecx,%ecx
		mov    0x8(%eax),%ax
		mov    %cx,data_5e114
		add    $0x80,%eax
		mov    %ecx,(%esp)
		mov    %ax,0x4(%ebx)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e003:
		mov    data_60b12,%si
		test   %si,%si
		je     jump_2e04f
		xor    %eax,%eax
		mov    %si,%ax
		add    $level__things_base,%eax
		movb   $0x8,0xd(%ebx)
		mov    0x4(%eax),%dx
		mov    %dx,(%ebx)
		mov    0x6(%eax),%dx
		mov    %dx,0x2(%ebx)
		mov    0x8(%eax),%ax
		xor    %edx,%edx
		add    $0x80,%eax
		mov    %dx,data_5e114
		mov    %edx,(%esp)
		mov    %ax,0x4(%ebx)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e04f:
		mov    data_60b20,%ax
		movb   $0x8,0xd(%ebx)
		mov    %ax,(%ebx)
		mov    data_60b1e,%ax
		mov    %si,data_5e114
		mov    %ax,0x2(%ebx)
		mov    data_60b1c,%ax
		mov    %esi,(%esp)
		mov    %ax,0x4(%ebx)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e084:
		cmpw   $0x0,data_5e118
		je     jump_2e1d6
		mov    data_5e114,%cx
		test   %cx,%cx
		je     jump_2e118
		xor    %eax,%eax
		mov    index,%ax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %eax
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movb   $0xa,0xd(%ebx)
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		push   %eax
		call   which_weapon
		add    $0x8,%esp
		xor    %edx,%edx
		sub    $level__things_base,%eax
		mov    %dx,data_5e114
		mov    %ax,(%ebx)
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %ebx,%ebx
		mov    %ebx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e118:
		cmpw   $0x0,data_5e116
		je     jump_2e1d6
		mov    index,%ax
		mov    data_5e11a,%dx
		cmp    %dx,%ax
		jne    jump_2e15f
		mov    %cx,index
		movb   $0xb,0xd(%ebx)
		xor    %dh,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %cx,data_5e116
		mov    %ecx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e15f:
		xor    %eax,%eax
		mov    index,%ax
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		push   %eax
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movb   $0x7,0xd(%ebx)
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		push   %eax
		call   which_weapon
		sub    $level__things_base,%eax
		add    $0x8,%esp
		mov    %ax,(%ebx)
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %ebx,%ebx
		mov    %bx,data_5e116
		mov    %ebx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e1d6:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
		je     jump_2e474
		cmpw   $0x80,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jae    jump_2e474
		xor    %edx,%edx
	jump_2e1f4:
		movswl %dx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		xor    %esi,%esi
		mov    data_55114(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%si	/* lbDisplay.MouseX but scaled */
		lea    0x4(%ecx),%edi
		cmp    %edi,%esi
		jl     jump_2e2c6
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%si	/* lbDisplay.MouseX but scaled */
		add    $0x3b,%ecx
		cmp    %ecx,%esi
		jg     jump_2e2c6
		xor    %ecx,%ecx
		xor    %edi,%edi
		mov    data_55116(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%di	/* lbDisplay.MouseY but scaled */
		lea    0x2e(%ecx),%esi
		cmp    %esi,%edi
		jl     jump_2e2c6
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%si
		add    $0x3c,%ecx
		cmp    %ecx,%esi
		jg     jump_2e2c6
		movb   $0xc,0xd(%ebx)
		mov    %dx,(%ebx)
		mov    data_55114(%eax),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%dx	/* lbDisplay.MMouseX but scaled */
		add    $0x4,%eax
		sub    %eax,%edx
		shl    $0x8,%edx
		mov    $0x37,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		test   %ax,%ax
		jge    jump_2e29d
		movw   $0x0,0x2(%ebx)
		jmp    jump_2e2af
	jump_2e29d:
		cmp    $0xff,%ax
		jle    jump_2e2ab
		movw   $0xff,0x2(%ebx)
		jmp    jump_2e2af
	jump_2e2ab:
		mov    %ax,0x2(%ebx)
	jump_2e2af:
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %esi,%esi
		mov    %esi,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e2c6:
		movswl %dx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		xor    %edi,%edi
		mov    data_55114(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%di	/* lbDisplay.MouseX but scaled */
		lea    0x4(%ecx),%esi
		cmp    %esi,%edi
		jl     jump_2e397
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%si
		add    $0x3b,%ecx
		cmp    %ecx,%esi
		jg     jump_2e397
		xor    %ecx,%ecx
		xor    %edi,%edi
		mov    data_55116(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%di
		lea    0x3c(%ecx),%esi
		cmp    %esi,%edi
		jl     jump_2e397
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%si
		add    $0x4a,%ecx
		cmp    %ecx,%esi
		jg     jump_2e397
		movb   $0xe,0xd(%ebx)
		mov    %dx,(%ebx)
		mov    data_55114(%eax),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%dx
		add    $0x4,%eax
		sub    %eax,%edx
		shl    $0x8,%edx
		mov    $0x37,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		test   %ax,%ax
		jge    jump_2e36f
		movw   $0x0,0x2(%ebx)
		jmp    jump_2e381
	jump_2e36f:
		cmp    $0xff,%ax
		jle    jump_2e37d
		movw   $0xff,0x2(%ebx)
		jmp    jump_2e381
	jump_2e37d:
		mov    %ax,0x2(%ebx)
	jump_2e381:
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %ecx,%ecx
		mov    %ecx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e397:
		movswl %dx,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		xor    %esi,%esi
		mov    data_55114(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%si
		lea    0x4(%ecx),%edi
		cmp    %edi,%esi
		jl     jump_2e469
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%si
		add    $0x3b,%ecx
		cmp    %ecx,%esi
		jg     jump_2e469
		xor    %ecx,%ecx
		xor    %edi,%edi
		mov    data_55116(%eax),%cx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%di	/* lbDisplay.MouseY but scaled */
		lea    0x4a(%ecx),%esi
		cmp    %esi,%edi
		jl     jump_2e469
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%si
		add    $0x58,%ecx
		cmp    %ecx,%esi
		jg     jump_2e469
		movb   $0xd,0xd(%ebx)
		mov    %dx,(%ebx)
		mov    data_55114(%eax),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%dx	/* lbDisplay.MMouseX but scaled */
		add    $0x4,%eax
		sub    %eax,%edx
		shl    $0x8,%edx
		mov    $0x37,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		test   %ax,%ax
		jge    jump_2e440
		movw   $0x0,0x2(%ebx)
		jmp    jump_2e452
	jump_2e440:
		cmp    $0xff,%ax
		jle    jump_2e44e
		movw   $0xff,0x2(%ebx)
		jmp    jump_2e452
	jump_2e44e:
		mov    %ax,0x2(%ebx)
	jump_2e452:
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		xor    %ebx,%ebx
		mov    %ebx,(%esp)
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e469:
		inc    %edx
		cmp    $0x4,%dx
		jl     jump_2e1f4
	jump_2e474:
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2e480:
		.long   jump_2e4e9
		.long   jump_2e4e9
		.long   func_2e4d6
		.long   func_2e4dd
		.long   func_2e4e4


/*----------------------------------------------------------------*/
draw_apanel:	/* 0x2e4a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2e4b1
		pop    %esi
		pop    %ebx
		ret
	jump_2e4b1:
		cmpb   $0x0,0xa(%ebx)
		je     jump_2e52d
		decb   0xa(%ebx)
		mov    (%ebx),%dx
		xor    %eax,%eax
		cmp    $0x4,%dx
		ja     jump_2e4e9
		xor    %edx,%edx
		mov    (%ebx),%dx
		jmp    *%cs:vtable_2e480(,%edx,4)


/*----------------------------------------------------------------*/
func_2e4d6:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
		jmp    jump_2e4e9


/*----------------------------------------------------------------*/
func_2e4dd:
/*----------------------------------------------------------------*/
		mov    $0x2,%eax
		jmp    jump_2e4e9


/*----------------------------------------------------------------*/
func_2e4e4:
/*----------------------------------------------------------------*/
		mov    $0x3,%eax
	jump_2e4e9:
		mov    $0xd4,%edx
		add    0x10(%ebx),%dx
		mov    0xe(%ebx),%si
		add    %edx,%eax
		cmp    %si,%ax
		je     jump_2e514
		xor    %edx,%edx
		mov    starts_ani,%ecx
		mov    %ax,%dx
		mov    (%ecx,%edx,2),%dx
		mov    %dx,0xc(%ebx)
		mov    %ax,0xe(%ebx)
	jump_2e514:
		movswl 0x4(%ebx),%eax
		push   %eax
		movswl 0x2(%ebx),%eax
		push   %eax
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		push   %eax
		call   draw_pelement
		add    $0xc,%esp
	jump_2e52d:
		add    $0x12,%ebx
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2e4b1
		pop    %esi
		pop    %ebx
		ret

vtable_2e540:
		.long   jump_2e771
		.long   func_2e595
		.long   func_2e665
		.long   func_2e67f
		.long   func_2e75a


/*----------------------------------------------------------------*/
process_panel:	/* 0x2e560 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%esi
		xor    %edi,%edi
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2e57b
		mov    %edi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e57b:
		mov    (%ebx),%dx
		cmp    $0x4,%dx
		ja     jump_2e771
		xor    %eax,%eax
		mov    %dx,%ax
		jmp    *%cs:vtable_2e540(,%eax,4)


/*----------------------------------------------------------------*/
func_2e595:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x18(%esp),%dl
		mov    0x1c(%esp),%al
		or     %edx,%eax
		je     jump_2e5ff
		xor    %eax,%eax
		movsbl 0x8(%ebx),%edx
		mov    0x2(%ebx),%ax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    %eax,%edx
		jl     jump_2e5ff
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    %eax,%edx
		jge    jump_2e5ff
		xor    %edx,%edx
		movsbl 0x9(%ebx),%eax
		mov    0x4(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    %eax,%edx
		jl     jump_2e5ff
		xor    %edx,%edx
		mov    0x7(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    %eax,%edx
		jl     jump_2e610
	jump_2e5ff:
		xor    %edx,%edx
		movsbl 0xb(%ebx),%eax
		mov    %si,%dx
		cmp    %eax,%edx
		jne    jump_2e771
	jump_2e610:
		xor    %edx,%edx
		mov    0x18(%esp),%al
		mov    %dx,data_5e116
		test   %al,%al
		je     jump_2e632
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		movw   $0x1,data_5e116
	jump_2e632:
		xor    %eax,%eax
		mov    0x1c(%esp),%dl
		mov    %ax,data_5e114
		test   %dl,%dl
		je     jump_2e653
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		movw   $0x1,data_5e114
	jump_2e653:
		mov    (%ebx),%cx
		movb   $0x2,0xa(%ebx)
		add    $0x2,%ecx
		mov    %cx,(%ebx)
		jmp    jump_2e771


/*----------------------------------------------------------------*/
func_2e665:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_panel
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2e76d
		incw   (%ebx)
		jmp    jump_2e76d


/*----------------------------------------------------------------*/
func_2e67f:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0xa(%ebx)
		je     jump_2e68f
		movsbw 0xb(%ebx),%di
		jmp    jump_2e771
	jump_2e68f:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x18(%esp),%al
		mov    0x1c(%esp),%dl
		or     %edx,%eax
		je     jump_2e74b
		xor    %edx,%edx
		movsbl 0x8(%ebx),%eax
		mov    0x2(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    %eax,%edx
		jl     jump_2e74b
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    %eax,%edx
		jge    jump_2e74b
		xor    %eax,%eax
		movsbl 0x9(%ebx),%edx
		mov    0x4(%ebx),%ax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    %eax,%edx
		jl     jump_2e74b
		xor    %edx,%edx
		mov    0x7(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    %eax,%edx
		jge    jump_2e74b
		xor    %ecx,%ecx
		mov    0x18(%esp),%dl
		mov    %cx,data_5e116
		test   %dl,%dl
		je     jump_2e727
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		movw   $0x1,data_5e116
	jump_2e727:
		xor    %edx,%edx
		mov    0x1c(%esp),%cl
		mov    %dx,data_5e114
		test   %cl,%cl
		je     jump_2e76d
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		movw   $0x1,data_5e114
		jmp    jump_2e76d
	jump_2e74b:
		xor    %edx,%edx
		movsbl 0xb(%ebx),%eax
		mov    %si,%dx
		cmp    %eax,%edx
		je     jump_2e771
		jmp    jump_2e768


/*----------------------------------------------------------------*/
func_2e75a:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_panel
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2e76d
	jump_2e768:
		movw   $0x1,(%ebx)
	jump_2e76d:
		movb   $0x2,0xa(%ebx)
	jump_2e771:
		add    $0x12,%ebx
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2e57b
		mov    %edi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2e788:
		.long   jump_2ea0b
		.long   func_2e7d5
		.long   func_2e8e8
		.long   func_2e902
		.long   func_2e9f2


/*----------------------------------------------------------------*/
process_panel_people:	/* 0x2e7a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%esi
		xor    %edi,%edi
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2e7bb
		mov    %edi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2e7bb:
		mov    (%ebx),%dx
		cmp    $0x4,%dx
		ja     jump_2ea0b
		xor    %eax,%eax
		mov    %dx,%ax
		jmp    *%cs:vtable_2e788(,%eax,4)


/*----------------------------------------------------------------*/
func_2e7d5:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x18(%esp),%dl
		mov    0x1c(%esp),%al
		or     %edx,%eax
		je     jump_2e83f
		xor    %eax,%eax
		movsbl 0x8(%ebx),%edx
		mov    0x2(%ebx),%ax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    %eax,%edx
		jl     jump_2e83f
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    %eax,%edx
		jge    jump_2e83f
		xor    %edx,%edx
		movsbl 0x9(%ebx),%eax
		mov    0x4(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    %eax,%edx
		jl     jump_2e83f
		xor    %edx,%edx
		mov    0x7(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    %eax,%edx
		jl     jump_2e850
	jump_2e83f:
		xor    %edx,%edx
		movsbl 0xb(%ebx),%eax
		mov    %si,%dx
		cmp    %eax,%edx
		jne    jump_2ea0b
	jump_2e850:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_5e551(%eax),%dl
		movsbl 0xb(%ebx),%eax
		dec    %eax
		add    %edx,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		testb  $0x4,0x1d(%eax)
		je     jump_2ea0b
		xor    %ecx,%ecx
		mov    0x18(%esp),%dh
		mov    %cx,data_5e116
		test   %dh,%dh
		je     jump_2e8b3
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		movw   $0x1,data_5e116
	jump_2e8b3:
		xor    %edx,%edx
		mov    0x1c(%esp),%ch
		mov    %dx,data_5e114
		test   %ch,%ch
		je     jump_2e8d4
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		movw   $0x1,data_5e114
	jump_2e8d4:
		mov    (%ebx),%ax
		movb   $0x2,0xa(%ebx)
		add    $0x2,%eax
		mov    %ax,(%ebx)
		jmp    jump_2ea15


/*----------------------------------------------------------------*/
func_2e8e8:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_panel
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2e8f9
		incw   (%ebx)
	jump_2e8f9:
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ea15


/*----------------------------------------------------------------*/
func_2e902:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0xa(%ebx)
		je     jump_2e912
		movsbw 0xb(%ebx),%di
		jmp    jump_2ea0b
	jump_2e912:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x18(%esp),%dl
		mov    0x1c(%esp),%al
		or     %edx,%eax
		je     jump_2e9d0
		xor    %edx,%edx
		movsbl 0x8(%ebx),%eax
		mov    0x2(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    %eax,%edx
		jl     jump_2e9d0
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    %eax,%edx
		jge    jump_2e9d0
		xor    %edx,%edx
		movsbl 0x9(%ebx),%eax
		mov    0x4(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    %eax,%edx
		jl     jump_2e9d0
		xor    %edx,%edx
		mov    0x7(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    %eax,%edx
		jge    jump_2e9d0
		xor    %eax,%eax
		mov    0x18(%esp),%dl
		mov    %ax,data_5e116
		test   %dl,%dl
		je     jump_2e9a9
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		movw   $0x1,data_5e116
	jump_2e9a9:
		xor    %ecx,%ecx
		mov    %cx,data_5e114
		cmpb   $0x0,0x1c(%esp)
		je     jump_2e9ca
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		movw   $0x1,data_5e114
	jump_2e9ca:
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ea15
	jump_2e9d0:
		xor    %edx,%edx
		movsbl 0xb(%ebx),%eax
		mov    %si,%dx
		cmp    %eax,%edx
		je     jump_2ea0b
		cmpw   $0x2,a2
		je     jump_2ea0b
		movw   $0x1,(%ebx)
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ea15


/*----------------------------------------------------------------*/
func_2e9f2:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_panel
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2ea05
		movw   $0x1,(%ebx)
	jump_2ea05:
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ea15
	jump_2ea0b:
		cmpb   $0x0,0xa(%ebx)
		je     jump_2eaa3
	jump_2ea15:
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		xor    %dl,%dl
		mov    %dl,data_5df51(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df48(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df4a(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df49(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df4b(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df4d(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df4c(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df4e(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df50(%eax)
		movsbl 0xb(%ebx),%eax
		dec    %eax
		imul   $0xb,%eax,%eax
		mov    %dl,data_5df4f(%eax)
	jump_2eaa3:
		add    $0x12,%ebx
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2e7bb
		mov    %edi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2eab8:
		.long   jump_2ecf9
		.long   func_2eb05
		.long   func_2ebd5
		.long   func_2ebef
		.long   func_2ece0


/*----------------------------------------------------------------*/
process_panel_weapons:	/* 0x2ead0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%edi
		xor    %esi,%esi
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2eaeb
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2eaeb:
		mov    (%ebx),%dx
		cmp    $0x4,%dx
		ja     jump_2ecf9
		xor    %eax,%eax
		mov    %dx,%ax
		jmp    *%cs:vtable_2eab8(,%eax,4)


/*----------------------------------------------------------------*/
func_2eb05:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x18(%esp),%dl
		mov    0x1c(%esp),%al
		or     %edx,%eax
		je     jump_2eb6f
		xor    %eax,%eax
		movsbl 0x8(%ebx),%edx
		mov    0x2(%ebx),%ax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    %eax,%edx
		jl     jump_2eb6f
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    %eax,%edx
		jge    jump_2eb6f
		xor    %eax,%eax
		movsbl 0x9(%ebx),%edx
		mov    0x4(%ebx),%ax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    %eax,%edx
		jl     jump_2eb6f
		xor    %edx,%edx
		mov    0x7(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    %eax,%edx
		jl     jump_2eb80
	jump_2eb6f:
		xor    %edx,%edx
		movsbl 0xb(%ebx),%eax
		mov    %di,%dx
		cmp    %eax,%edx
		jne    jump_2ecf9
	jump_2eb80:
		xor    %edx,%edx
		mov    0x18(%esp),%al
		mov    %dx,data_5e116
		test   %al,%al
		je     jump_2eba2
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		movw   $0x1,data_5e116
	jump_2eba2:
		xor    %eax,%eax
		mov    0x1c(%esp),%dl
		mov    %ax,data_5e114
		test   %dl,%dl
		je     jump_2ebc3
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		movw   $0x1,data_5e114
	jump_2ebc3:
		mov    (%ebx),%cx
		movb   $0x2,0xa(%ebx)
		add    $0x2,%ecx
		mov    %cx,(%ebx)
		jmp    jump_2ecff


/*----------------------------------------------------------------*/
func_2ebd5:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_panel
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2ebe6
		incw   (%ebx)
	jump_2ebe6:
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ecff


/*----------------------------------------------------------------*/
func_2ebef:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0xa(%ebx)
		je     jump_2ec08
		test   %si,%si
		jne    jump_2ecf9
		movsbw 0xb(%ebx),%si
		jmp    jump_2ecf9
	jump_2ec08:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x18(%esp),%al
		mov    0x1c(%esp),%dl
		or     %edx,%eax
		je     jump_2ecc8
		xor    %edx,%edx
		movsbl 0x8(%ebx),%eax
		mov    0x2(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx	/* lbDisplay.MouseX but scaled */
		cmp    %eax,%edx
		jl     jump_2ecc8
		xor    %edx,%edx
		mov    0x6(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%dx
		cmp    %eax,%edx
		jge    jump_2ecc8
		xor    %edx,%edx
		movsbl 0x9(%ebx),%eax
		mov    0x4(%ebx),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx	/* lbDisplay.MouseY but scaled */
		cmp    %eax,%edx
		jl     jump_2ecc8
		xor    %edx,%edx
		mov    0x7(%ebx),%dl
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		cmp    %eax,%edx
		jge    jump_2ecc8
		xor    %ecx,%ecx
		mov    0x18(%esp),%dl
		mov    %cx,data_5e116
		test   %dl,%dl
		je     jump_2eca0
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		movw   $0x1,data_5e116
	jump_2eca0:
		xor    %edx,%edx
		mov    0x1c(%esp),%cl
		mov    %dx,data_5e114
		test   %cl,%cl
		je     jump_2ecc2
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		movw   $0x1,data_5e114
	jump_2ecc2:
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ecff
	jump_2ecc8:
		xor    %edx,%edx
		movsbl 0xb(%ebx),%eax
		mov    %di,%dx
		cmp    %eax,%edx
		je     jump_2ecf9
		movw   $0x1,(%ebx)
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ecff


/*----------------------------------------------------------------*/
func_2ece0:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_panel
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_2ecf3
		movw   $0x1,(%ebx)
	jump_2ecf3:
		movb   $0x2,0xa(%ebx)
		jmp    jump_2ecff
	jump_2ecf9:
		cmpb   $0x0,0xa(%ebx)
		je     jump_2ed0b
	jump_2ecff:
		movsbl 0xb(%ebx),%eax
		xor    %ch,%ch
		mov    %ch,data_5df75(%eax)
	jump_2ed0b:
		add    $0x12,%ebx
		movswl (%ebx),%eax
		cmp    $0xffffff9d,%eax
		jne    jump_2eaeb
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
clear_weapons:	/* 0x2ed20 */
/*----------------------------------------------------------------*/
		push   %ebx
		xor    %ecx,%ecx
	jump_2ed23:
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    unkarr_551B4(,%eax,2),%bx
		mov    %bx,unkarr_55256(,%eax,2)
		mov    data_551be(,%eax,2),%bl
		mov    %bl,data_55260(,%eax,2)
		mov    data_551c0(,%eax,2),%bx
		mov    %bx,data_55262(,%eax,2)
		mov    data_551c2(,%eax,2),%bx
		mov    %bx,data_55264(,%eax,2)
		mov    data_551c4(,%eax,2),%bx
		mov    %bx,data_55266(,%eax,2)
		xor    %ah,%ah
		inc    %ecx
		mov    %ah,data_5df76(%edx)
		cmp    $0x8,%cx
		jb     jump_2ed23
		xor    %edx,%edx
		mov    %dx,index
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
clear_weapons_condition:	/* 0x2eda0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edi
		xor    %ecx,%ecx
	jump_2eda4:
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		add    %eax,%eax
		mov    unkarr_55256(%eax),%dx
		cmp    $0x2,%dx
		je     jump_2ee13
		cmp    $0x3,%dx
		je     jump_2ee13
		mov    unkarr_551B4(%eax),%dx
		mov    %dx,unkarr_55256(%eax)
		mov    data_551be(%eax),%dl
		mov    %dl,data_55260(%eax)
		mov    data_551c0(%eax),%dx
		mov    %dx,data_55262(%eax)
		mov    data_551c2(%eax),%dx
		mov    %dx,data_55264(%eax)
		mov    data_551c4(%eax),%dx
		mov    %dx,data_55266(%eax)
		xor    %ah,%ah
		mov    %ah,data_5df76(%ebx)
	jump_2ee13:
		inc    %ecx
		cmp    $0x8,%cx
		jb     jump_2eda4
		xor    %edi,%edi
		mov    %di,index
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_bars:	/* 0x2ee30 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		push   $0x190
		push   $0x80
		push   $0x0
		push   $0x0
		call   LbScreenSetGraphicsWindow
		mov    data_60b46,%ah
		add    $0x10,%esp
		inc    %ah
		xor    %ecx,%ecx
		mov    %ah,data_60b46
	jump_2ee5d:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %cx,%bx
		mov    data_60b46,%dl
		lea    0x1(%ebx),%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		and    $0x1,%eax
		inc    %ecx
		mov    %al,data_5e394(%ebx)
		cmp    $0x8,%cx
		jb     jump_2ee5d
		xor    %edi,%edi
	jump_2ee86:
		movswl EXPORT_SYMBOL(Network__Slot),%eax
		mov    %eax,%ebx
		shl    $0x5,%ebx
		add    %eax,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %eax,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %eax,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    data_5e551(%ebx),%dl
		mov    %di,%ax
		add    %eax,%edx
		imul   $0x5c,%edx,%edx
		mov    $level__People,%esi
		add    %edx,%esi
		testb  $0x4,0x1d(%esi)
		je     jump_2f61e
		imul   $0xb,%eax,%ecx
		testb  $0x1,0xb(%esi)
		je     jump_2ef10
		mov    data_5df52(%ecx),%bl
		test   %bl,%bl
		jne    jump_2eefb
		mov    %eax,%edx
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		mov    $0x1,%dl
		mov    %dl,data_5511c(,%eax,2)
		mov    %dl,data_5df52(%ecx)
		jmp    jump_2f5e1
	jump_2eefb:
		cmp    $0x1,%bl
		jne    jump_2f5e1
		movb   $0x2,data_5df52(%ecx)
		jmp    jump_2f5e1
	jump_2ef10:
		xor    %edx,%edx
		mov    0x48(%esi),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0xff,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    0x47(%esi),%dl
		mov    %eax,%ebx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0xff,%ebp
		sar    $0x1f,%edx
		idiv   %ebp
		xor    %edx,%edx
		mov    0x49(%esi),%dl
		mov    %eax,0x4(%esp)
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %eax,(%esp)
		xor    %eax,%eax
		mov    0x4(%esp),%edx
		mov    data_5df48(%ecx),%al
		cmp    %edx,%eax
		jne    jump_2efaa
		xor    %edx,%eax
		mov    data_5df49(%ecx),%al
		cmp    %ebx,%eax
		jne    jump_2efaa
		xor    %eax,%eax
		mov    data_5df4a(%ecx),%al
		cmp    (%esp),%eax
		je     jump_2f10d
	jump_2efaa:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		push   $0x0
		add    %edx,%eax
		push   $0xa
		add    %eax,%eax
		xor    %edx,%edx
		push   $0x37
		mov    data_55116(%eax),%dx
		mov    data_55114(%eax),%ax
		add    $0x30,%edx
		and    $0xffff,%eax
		push   %edx
		add    $0x4,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		mov    (%esp),%ebp
		cmp    %ebp,%ebx
		jge    jump_2eff2
		cmp    0x4(%esp),%ebp
		jg     jump_2efff
	jump_2eff2:
		mov    (%esp),%ecx
		cmp    %ecx,%ebx
		jle    jump_2f046
		cmp    0x4(%esp),%ecx
		jge    jump_2f046
	jump_2efff:
		xor    %edx,%edx
		push   $0xe
		mov    %di,%dx
		mov    0x4(%esp),%eax
		lea    0x0(,%edx,8),%ebp
		push   $0xa
		add    %edx,%ebp
		sub    %ebx,%eax
		add    %ebp,%ebp
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x30,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		push   $0x6
		mov    0x8(%esp),%eax
		jmp    jump_2f08b
	jump_2f046:
		xor    %edx,%edx
		push   $0x6
		mov    %di,%dx
		mov    0x8(%esp),%eax
		lea    0x0(,%edx,8),%ebp
		push   $0xa
		add    %edx,%ebp
		sub    %ebx,%eax
		add    %ebp,%ebp
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x30,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		push   $0xe
		mov    0x4(%esp),%eax
	jump_2f08b:
		push   $0xa
		sub    %ebx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x30,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		movzwl %di,%ebp
		lea    0x0(,%ebp,8),%eax
		add    %ebp,%eax
		mov    %ebp,%edx
		add    %eax,%eax
		xor    %ebp,%edx
		mov    data_55114(%eax),%dx
		push   $0xc
		add    $0x4,%edx
		mov    data_55116(%eax),%ax
		add    %ebx,%edx
		and    $0xffff,%eax
		push   %edx
		lea    0x39(%eax),%edx
		push   %edx
		add    $0x30,%eax
		push   %eax
		call   pvertical_line
		imul   $0xb,%ebp,%eax
		add    $0x10,%esp
		mov    0x4(%esp),%dl
		mov    %dl,data_5df48(%eax)
		mov    %bl,data_5df49(%eax)
		mov    (%esp),%dl
		mov    %dl,data_5df4a(%eax)
	jump_2f10d:
		xor    %edx,%edx
		mov    0x50(%esi),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0xff,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    0x4f(%esi),%dl
		mov    %eax,%ebx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0xff,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %edx,%edx
		mov    0x51(%esi),%dl
		mov    %eax,0x4(%esp)
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,(%esp)
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0xb,%eax,%eax
		xor    %edx,%edx
		mov    0x4(%esp),%ecx
		mov    data_5df4e(%eax),%dl
		cmp    %ecx,%edx
		jne    jump_2f1b4
		xor    %ecx,%edx
		mov    data_5df4f(%eax),%dl
		cmp    %ebx,%edx
		jne    jump_2f1b4
		mov    data_5df50(%eax),%al
		mov    (%esp),%ebp
		and    $0xff,%eax
		cmp    %ebp,%eax
		je     jump_2f317
	jump_2f1b4:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		push   $0x0
		add    %edx,%eax
		push   $0xa
		add    %eax,%eax
		xor    %edx,%edx
		push   $0x37
		mov    data_55116(%eax),%dx
		mov    data_55114(%eax),%ax
		add    $0x3e,%edx
		and    $0xffff,%eax
		push   %edx
		add    $0x4,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		mov    (%esp),%eax
		cmp    %eax,%ebx
		jge    jump_2f1fc
		cmp    0x4(%esp),%eax
		jg     jump_2f209
	jump_2f1fc:
		mov    (%esp),%ecx
		cmp    %ecx,%ebx
		jle    jump_2f250
		cmp    0x4(%esp),%ecx
		jge    jump_2f250
	jump_2f209:
		xor    %edx,%edx
		push   $0xf
		mov    %di,%dx
		mov    0x4(%esp),%eax
		lea    0x0(,%edx,8),%ebp
		push   $0xa
		add    %edx,%ebp
		sub    %ebx,%eax
		add    %ebp,%ebp
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x3e,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		push   $0x7
		mov    0x8(%esp),%eax
		jmp    jump_2f295
	jump_2f250:
		xor    %edx,%edx
		push   $0x7
		mov    %di,%dx
		mov    0x8(%esp),%eax
		lea    0x0(,%edx,8),%ebp
		push   $0xa
		add    %edx,%ebp
		sub    %ebx,%eax
		add    %ebp,%ebp
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x3e,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		push   $0xf
		mov    0x4(%esp),%eax
	jump_2f295:
		push   $0xa
		sub    %ebx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x3e,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		movzwl %di,%ebp
		lea    0x0(,%ebp,8),%eax
		add    %ebp,%eax
		mov    %ebp,%edx
		add    %eax,%eax
		xor    %ebp,%edx
		mov    data_55114(%eax),%dx
		push   $0xc
		add    $0x4,%edx
		mov    data_55116(%eax),%ax
		add    %ebx,%edx
		and    $0xffff,%eax
		push   %edx
		lea    0x47(%eax),%edx
		push   %edx
		add    $0x3e,%eax
		push   %eax
		call   pvertical_line
		imul   $0xb,%ebp,%eax
		add    $0x10,%esp
		mov    0x4(%esp),%dl
		mov    %dl,data_5df4e(%eax)
		mov    %bl,data_5df4f(%eax)
		mov    (%esp),%dl
		mov    %dl,data_5df50(%eax)
	jump_2f317:
		xor    %edx,%edx
		mov    0x4c(%esi),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0xff,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    0x4b(%esi),%dl
		mov    %eax,%ebx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0xff,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %edx,%edx
		mov    0x4d(%esi),%dl
		mov    %eax,0x4(%esp)
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,(%esp)
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0xb,%eax,%eax
		xor    %edx,%edx
		mov    0x4(%esp),%ecx
		mov    data_5df4b(%eax),%dl
		cmp    %ecx,%edx
		jne    jump_2f3be
		xor    %ecx,%edx
		mov    data_5df4c(%eax),%dl
		cmp    %ebx,%edx
		jne    jump_2f3be
		mov    data_5df4d(%eax),%al
		mov    (%esp),%ebp
		and    $0xff,%eax
		cmp    %ebp,%eax
		je     jump_2f521
	jump_2f3be:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		push   $0x0
		add    %edx,%eax
		push   $0xa
		add    %eax,%eax
		xor    %edx,%edx
		push   $0x37
		mov    data_55116(%eax),%dx
		mov    data_55114(%eax),%ax
		add    $0x4c,%edx
		and    $0xffff,%eax
		push   %edx
		add    $0x4,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		mov    (%esp),%eax
		cmp    %eax,%ebx
		jge    jump_2f406
		cmp    0x4(%esp),%eax
		jg     jump_2f413
	jump_2f406:
		mov    (%esp),%ecx
		cmp    %ecx,%ebx
		jle    jump_2f45a
		cmp    0x4(%esp),%ecx
		jge    jump_2f45a
	jump_2f413:
		xor    %edx,%edx
		push   $0xd
		mov    %di,%dx
		mov    0x4(%esp),%eax
		lea    0x0(,%edx,8),%ebp
		push   $0xa
		add    %edx,%ebp
		sub    %ebx,%eax
		add    %ebp,%ebp
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x4c,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		push   $0x5
		mov    0x8(%esp),%eax
		jmp    jump_2f49f
	jump_2f45a:
		xor    %edx,%edx
		push   $0x5
		mov    %di,%dx
		mov    0x8(%esp),%eax
		lea    0x0(,%edx,8),%ebp
		push   $0xa
		add    %edx,%ebp
		sub    %ebx,%eax
		add    %ebp,%ebp
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x4c,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		push   $0xd
		mov    0x4(%esp),%eax
	jump_2f49f:
		push   $0xa
		sub    %ebx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55116(%ebp),%ax
		add    $0x4c,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebp),%ax
		add    $0x4,%eax
		add    %ebx,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		movzwl %di,%ebp
		lea    0x0(,%ebp,8),%eax
		add    %ebp,%eax
		mov    %ebp,%edx
		add    %eax,%eax
		xor    %ebp,%edx
		mov    data_55114(%eax),%dx
		push   $0xc
		add    $0x4,%edx
		mov    data_55116(%eax),%ax
		add    %ebx,%edx
		and    $0xffff,%eax
		push   %edx
		lea    0x55(%eax),%edx
		push   %edx
		add    $0x4c,%eax
		push   %eax
		call   pvertical_line
		imul   $0xb,%ebp,%eax
		add    $0x10,%esp
		mov    0x4(%esp),%dl
		mov    %dl,data_5df4b(%eax)
		mov    %bl,data_5df4c(%eax)
		mov    (%esp),%dl
		mov    %dl,data_5df4d(%eax)
	jump_2f521:
		movswl 0x14(%esi),%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		lea    0x0(,%edx,4),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x4,%edx
		sbb    %edx,%eax
		sar    $0x4,%eax
		xor    %edx,%edx
		mov    %di,%dx
		imul   $0xb,%edx,%ebp
		xor    %ecx,%ecx
		mov    data_5df51(%ebp),%cl
		mov    %eax,0x4(%esp)
		cmp    %eax,%ecx
		je     jump_2f5e1
		push   $0x0
		xor    %eax,%eax
		lea    0x0(,%edx,8),%ebx
		mov    %cl,%al
		add    %edx,%ebx
		push   %eax
		add    %ebx,%ebx
		xor    %eax,%eax
		mov    $0x24,%edx
		mov    data_55116(%ebx),%ax
		sub    %ecx,%edx
		add    $0x6,%eax
		push   $0x6
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebx),%ax
		add    $0x34,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		mov    0x4(%esp),%edx
		test   %edx,%edx
		jle    jump_2f5e1
		push   $0xc
		mov    %edx,%ecx
		xor    %eax,%eax
		push   %edx
		mov    data_55116(%ebx),%ax
		mov    $0x24,%edx
		add    $0x6,%eax
		sub    %ecx,%edx
		push   $0x6
		add    %edx,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55114(%ebx),%ax
		add    $0x34,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
		mov    0x4(%esp),%al
		mov    %al,data_5df51(%ebp)
	jump_2f5e1:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_55116(%eax),%dx
		mov    data_55114(%eax),%ax
		add    $0x26,%edx
		and    $0xffff,%eax
		push   %edx
		add    $0x20,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x10(%esi),%ax
		push   %eax
		push   %esi
		call   draw_agent_element
		add    $0x10,%esp
	jump_2f61e:
		inc    %edi
		cmp    $0x4,%di
		jb     jump_2ee86
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		movsbl data_5e552(%eax),%edx
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    %eax,%edx
		imul   $0x5c,%edx,%eax
		add    $level__People,%eax
		mov    0x3a(%eax),%ax
		xor    %edi,%edi
		test   %ax,%ax
		je     jump_2f77b
	jump_2f674:
		cmp    $0x8,%di
		jae    jump_2f77b
		xor    %esi,%esi
		mov    %ax,%si
		add    $level__things_base,%esi
		xor    %eax,%eax
		mov    0x19(%esi),%al
		lea    0x0(,%eax,2),%ecx
		mov    weapon_max_ammo(%ecx),%cx
		mov    data_5a69a(%eax),%bl
		and    $0xffff,%ecx
		test   %bl,%bl
		je     jump_2f76d
		movswl 0x14(%esi),%ebx
		inc    %ebx
		imul   $0x17,%ebx,%edx
		inc    %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%ebx
		cmp    $0x17,%eax
		jle    jump_2f6cc
		mov    $0x17,%ebx
	jump_2f6cc:
		xor    %eax,%eax
		mov    %di,%ax
		xor    %edx,%edx
		mov    data_5df76(%eax),%dl
		cmp    %ebx,%edx
		je     jump_2f76d
		test   %dl,%dl
		jbe    jump_2f724
		push   $0x8
		xor    %edx,%edx
		push   $0x4
		mov    data_5df76(%eax),%dl
		push   %edx
		mov    %eax,%edx
		lea    0x0(,%eax,8),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5525a(%eax),%dx
		mov    data_55258(%eax),%ax
		add    $0x18,%edx
		and    $0xffff,%eax
		push   %edx
		add    $0x4,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
	jump_2f724:
		test   %ebx,%ebx
		jle    jump_2f762
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		push   $0xe
		add    %edx,%eax
		push   $0x4
		add    %eax,%eax
		xor    %edx,%edx
		push   %ebx
		mov    data_5525a(%eax),%dx
		mov    data_55258(%eax),%ax
		add    $0x18,%edx
		and    $0xffff,%eax
		push   %edx
		add    $0x4,%eax
		push   %eax
		call   prectangle
		add    $0x14,%esp
	jump_2f762:
		xor    %eax,%eax
		mov    %di,%ax
		mov    %bl,data_5df76(%eax)
	jump_2f76d:
		inc    %edi
		mov    0x1c(%esi),%ax
		test   %ax,%ax
		jne    jump_2f674
	jump_2f77b:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_2f784:
		.long   jump_2f8d6
		.long   func_2f888
		.long   func_2f88c
		.long   func_2f890
		.long   func_2f894
		.long   func_2f898
		.long   func_2f89c
		.long   func_2f8a0
		.long   func_2f8a4
		.long   func_2f8a8
		.long   func_2f8ac
		.long   func_2f8b0
		.long   func_2f8b4
		.long   func_2f8b8
		.long   func_2f8b8
		.long   func_2f8b8
		.long   func_2f8bf
		.long   func_2f8c6
		.long   func_2f8c6
		.long   func_2f8c6


/*----------------------------------------------------------------*/
check_player_holding:	/* 0x2f7e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    data_5e551(%ebx),%bl
		movsbl data_5e552(%eax),%eax
		and    $0xff,%ebx
		add    %eax,%ebx
		imul   $0x5c,%ebx,%ebx
		mov    $level__People,%edi
		add    %ebx,%edi
		mov    0x19(%edi),%dl
		cmp    $0x18,%dl
		je     jump_2f843
		cmp    $0x19,%dl
		je     jump_2f843
		testb  $0x1,0xb(%edi)
		je     jump_2f848
		imul   $0xb,%eax,%eax
		cmpb   $0x2,data_5df52(%eax)
		jae    jump_2f848
	jump_2f843:
		call   clear_weapons
	jump_2f848:
		cmpb   $0xa,0x19(%edi)
		jne    jump_2f853
		call   clear_weapons_condition
	jump_2f853:
		mov    0x3a(%edi),%ax
		mov    $unkarr_55256,%esi
		test   %ax,%ax
		je     jump_2f8e2
	jump_2f865:
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		mov    0x19(%ebx),%ch
		cmp    $0x13,%ch
		ja     jump_2f8d6
		xor    %eax,%eax
		mov    %ch,%al
		jmp    *%cs:vtable_2f784(,%eax,4)


/*----------------------------------------------------------------*/
func_2f888:
/*----------------------------------------------------------------*/
		push   $0x4b
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f88c:
/*----------------------------------------------------------------*/
		push   $0x4f
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f890:
/*----------------------------------------------------------------*/
		push   $0x53
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f894:
/*----------------------------------------------------------------*/
		push   $0x57
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f898:
/*----------------------------------------------------------------*/
		push   $0x5b
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f89c:
/*----------------------------------------------------------------*/
		push   $0x5f
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8a0:
/*----------------------------------------------------------------*/
		push   $0x63
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8a4:
/*----------------------------------------------------------------*/
		push   $0x67
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8a8:
/*----------------------------------------------------------------*/
		push   $0x6b
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8ac:
/*----------------------------------------------------------------*/
		push   $0x6f
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8b0:
/*----------------------------------------------------------------*/
		push   $0x73
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8b4:
/*----------------------------------------------------------------*/
		push   $0x77
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8b8:
/*----------------------------------------------------------------*/
		push   $0x83
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8bf:
/*----------------------------------------------------------------*/
		push   $0x87
		jmp    jump_2f8cb


/*----------------------------------------------------------------*/
func_2f8c6:
/*----------------------------------------------------------------*/
		push   $0x8b
	jump_2f8cb:
		push   %ebx
		push   %esi
		push   %edi
		call   set_weapon
		add    $0x10,%esp
	jump_2f8d6:
		add    $0x12,%esi
		mov    0x1c(%ebx),%ax
		test   %ax,%ax
		jne    jump_2f865
	jump_2f8e2:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_weapon:	/* 0x2f8f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		mov    0x10(%esp),%eax
		mov    0x18(%esp),%ecx
		mov    0x14(%esp),%edx
		mov    (%eax),%si
		sub    $level__things_base,%edx
		test   %si,%si
		jne    jump_2f92d
		cmp    0x44(%ebx),%dx
		jne    jump_2f91d
		movw   $0x3,(%eax)
		jmp    jump_2f922
	jump_2f91d:
		movw   $0x1,(%eax)
	jump_2f922:
		movb   $0x2,0xa(%eax)
		mov    %cx,0x10(%eax)
		pop    %esi
		pop    %ebx
		ret
	jump_2f92d:
		cmp    $0x1,%si
		jne    jump_2f949
		cmp    0x44(%ebx),%dx
		jne    jump_2f949
		movw   $0x3,(%eax)
		movb   $0x2,0xa(%eax)
		mov    %cx,0x10(%eax)
		pop    %esi
		pop    %ebx
		ret
	jump_2f949:
		cmpw   $0x3,(%eax)
		jne    jump_2f97d
		cmpw   $0x0,0x44(%ebx)
		jne    jump_2f97d
		mov    0x14(%esp),%edx
		cmpw   $0x0,0x14(%edx)
		jge    jump_2f97d
		cmpb   $0x0,0xa(%eax)
		jne    jump_2f97d
		movw   $0x1,(%eax)
		mov    %cx,0x10(%eax)
		xor    %ecx,%ecx
		movb   $0x2,0xa(%eax)
		mov    %cx,index
	jump_2f97d:
		pop    %esi
		pop    %ebx
		ret
jpt_2F9C8:	/* 0x2f980 */
		.long   func_2f9d0
		.long   func_2f9dc
		.long   func_2f9e9
		.long   func_2f9f9


/*----------------------------------------------------------------*/
adjust_bar:	/* 0x2f990 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x14(%esp),%ecx
		mov    0x18(%esp),%esi
		mov    0x1c(%esp),%ebx
		mov    0x20(%esp),%dl
		mov    0x28(%esp),%dh
		test   %dl,%dl
		je     jump_2f9bb
		mov    %dl,%al
		add    $0x80,%al
		mov    %al,(%ecx)
		mov    %dl,(%ebx)
		jmp    jump_2fad6
	jump_2f9bb:
		cmp    $0x3,%dh
		ja     jump_2fa07
		mov    %dh,%dl
		and    $0xff,%edx
		jmp    *%cs:jpt_2F9C8(,%edx,4)


/*----------------------------------------------------------------*/
func_2f9d0:
/*----------------------------------------------------------------*/
		mov    $0x4,%edx
		mov    $0x14,%eax
		jmp    jump_2fa03


/*----------------------------------------------------------------*/
func_2f9dc:
/*----------------------------------------------------------------*/
		movw   $0x8,(%esp)
		mov    $0x1c,%eax
		jmp    jump_2fa07


/*----------------------------------------------------------------*/
func_2f9e9:
/*----------------------------------------------------------------*/
		mov    $0x10,%edi
		mov    $0x28,%eax
		mov    %di,(%esp)
		jmp    jump_2fa07


/*----------------------------------------------------------------*/
func_2f9f9:
/*----------------------------------------------------------------*/
		mov    $0x28,%edx
		mov    $0x80,%eax
	jump_2fa03:
		mov    %dx,(%esp)
	jump_2fa07:
		xor    %edx,%edx
		mov    0x24(%esp),%dl
		movswl %ax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		test   %edx,%edx
		jne    jump_2fa70
		mov    (%ebx),%al
		cmp    (%ecx),%al
		jne    jump_2fa49
		mov    (%ebx),%al
		cmp    (%esi),%al
		jne    jump_2fa49
		xor    %eax,%eax
		mov    $0x80,%edx
		mov    (%ebx),%al
		sub    %eax,%edx
		mov    %edx,%eax
		test   %edx,%edx
		jge    jump_2fa3f
		mov    $0xffffffff,%eax
		jmp    jump_2fa68
	jump_2fa3f:
		setg   %al
		and    $0xff,%eax
		jmp    jump_2fa68
	jump_2fa49:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    (%ecx),%dl
		mov    (%ebx),%al
		sub    %eax,%edx
		mov    %edx,%eax
		test   %edx,%edx
		jge    jump_2fa60
		mov    $0xffffffff,%eax
		jmp    jump_2fa68
	jump_2fa60:
		setg   %al
		and    $0xff,%eax
	jump_2fa68:
		xor    %edx,%edx
		mov    (%ebx),%dl
		add    %eax,%edx
		mov    %dl,(%ebx)
	jump_2fa70:
		xor    %edx,%edx
		mov    0x24(%esp),%dl
		movswl (%esp),%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		test   %edx,%edx
		jne    jump_2fad6
		xor    %eax,%eax
		mov    (%esi),%dl
		mov    (%ecx),%al
		sub    %edx,%eax
		test   %eax,%eax
		jge    jump_2fa98
		mov    $0xffffffff,%eax
		jmp    jump_2faa0
	jump_2fa98:
		setg   %al
		and    $0xff,%eax
	jump_2faa0:
		mov    %ax,(%esp)
		test   %ax,%ax
		jne    jump_2fad1
		xor    %eax,%eax
		xor    %edx,%edx
		mov    (%ebx),%al
		mov    (%ecx),%dl
		sub    %edx,%eax
		test   %eax,%eax
		jge    jump_2fabe
		mov    $0xffffffff,%eax
		jmp    jump_2fac6
	jump_2fabe:
		setg   %al
		and    $0xff,%eax
	jump_2fac6:
		add    %al,(%esi)
		add    %al,(%ecx)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2fad1:
		mov    (%esp),%al
		add    %al,(%esi)
	jump_2fad6:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
adjust_bar_levels:	/* 0x2fae0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x53(%ebx),%ah
		inc    %ah
		mov    0x49(%ebx),%dl
		mov    %ah,0x53(%ebx)
		cmp    $0xa,%dl
		jae    jump_2faff
		mov    %ah,%dh
		and    $0x7,%dh
		mov    %dh,0x53(%ebx)
	jump_2faff:
		mov    0x14(%ebx),%dx
		cmp    $0x10,%dx
		jge    jump_2fb66
		test   %dx,%dx
		jl     jump_2fb66
		testb  $0x2,0x1c(%ebx)
		je     jump_2fb66
		mov    0x3c(%ebx),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x5,%eax
		cmp    $0x2,%eax
		jb     jump_2fb36
		jbe    jump_2fb4a
		cmp    $0x3,%eax
		je     jump_2fb59
		jmp    jump_2fb66
	jump_2fb36:
		cmp    $0x1,%eax
		jne    jump_2fb66
		testb  $0x7f,0x53(%ebx)
		jne    jump_2fb66
		mov    %edx,%eax
		inc    %eax
		mov    %ax,0x14(%ebx)
		jmp    jump_2fb66
	jump_2fb4a:
		testb  $0x3f,0x53(%ebx)
		jne    jump_2fb66
		mov    %edx,%edi
		inc    %edi
		mov    %di,0x14(%ebx)
		jmp    jump_2fb66
	jump_2fb59:
		testb  $0x1f,0x53(%ebx)
		jne    jump_2fb66
		mov    %edx,%esi
		inc    %esi
		mov    %si,0x14(%ebx)
	jump_2fb66:
		mov    0x3c(%ebx),%ax
		and    $0x180,%ax
		and    $0xffff,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x53(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x4a(%ebx),%al
		push   %eax
		lea    0x48(%ebx),%eax
		push   %eax
		lea    0x47(%ebx),%eax
		push   %eax
		lea    0x49(%ebx),%eax
		push   %eax
		call   adjust_bar
		mov    0x3c(%ebx),%ax
		and    $0x6,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0x9,%eax
		add    $0x18,%esp
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x53(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x4e(%ebx),%al
		push   %eax
		lea    0x4c(%ebx),%eax
		push   %eax
		lea    0x4b(%ebx),%eax
		push   %eax
		lea    0x4d(%ebx),%eax
		push   %eax
		call   adjust_bar
		mov    0x3c(%ebx),%ax
		and    $0x18,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0xb,%eax
		add    $0x18,%esp
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x53(%ebx),%al
		push   %eax
		xor    %eax,%eax
		mov    0x52(%ebx),%al
		push   %eax
		lea    0x50(%ebx),%eax
		push   %eax
		lea    0x4f(%ebx),%eax
		push   %eax
		add    $0x51,%ebx
		push   %ebx
		call   adjust_bar
		add    $0x18,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_goto:	/* 0x2fc10 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		mov    data_60b2a,%dx
		mov    0x30(%ebx),%ax
		sub    %edx,%eax
		add    $0x8,%esp
		cwtl
		mov    data_60b28,%cx
		push   %eax
		mov    0x2e(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_point
		add    $0xc,%esp
		mov    %eax,%edx
		test   %ax,%ax
		jl     jump_2fc65
		mov    %al,0x1a(%ebx)
		pop    %ebx
		ret
	jump_2fc65:
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_colide:	/* 0x2fc70 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%edx
		push   %edx
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		call   i_can_walk_here
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_2fcd6
		mov    data_5e128,%ax
		mov    data_60b2c,%dx
		add    %eax,%edx
		movswl %dx,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		mov    0x14(%esp),%ebx
		push   %ebx
		mov    %dx,data_60b2c
		call   move_mapwho
		add    $0x10,%esp
		xor    %eax,%eax
		pop    %ebx
		ret
	jump_2fcd6:
		mov    $0x1,%eax
		pop    %ebx
		ret
jpt_2FDBB:	/* 0x2fce0 */
		.long   jump_2fdc8
		.long   jump_2fdc3
		.long   jump_2fdc3
		.long   jump_2fdc3
		.long   jump_2fdc3
		.long   jump_2fdc3
		.long   jump_2fdc8
		.long   jump_2fdc8
		.long   jump_2fdc8
		.long   jump_2fdc8
		.long   jump_2fdc3
		.long   jump_2fdc8
		.long   jump_2fdc3
		.long   jump_2fdc3
		.long   jump_2fdc3
		.long   jump_2fdc8


/*----------------------------------------------------------------*/
i_can_walk_here:	/* 0x2fd20 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x18(%esp),%esi
		mov    0x1c(%esp),%ebx
		mov    0x1c(%ebx),%ah
		xor    %edi,%edi
		test   $0x2,%ah
		jne    jump_2fdc8
		testb  $0x8,0x1d(%ebx)
		jne    jump_2fdc8
		movswl 0x6(%ebx),%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%ebx),%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %ecx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%ecx
		movswl 0x8(%ebx),%edx
		dec    %edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		xor    %edx,%edx
		mov    (%eax),%dl
		mov    h_col,%eax
		add    %edx,%eax
		mov    (%eax),%dh
		cmp    $0xf,%dh
		ja     jump_2fdc3
		mov    %dh,%al
		and    $0xff,%eax
		jmp    *%cs:jpt_2FDBB(,%eax,4)
	jump_2fdc3:
		test   %di,%di
		je     jump_2fddf
	jump_2fdc8:
		movswl %si,%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		call   get_altitude_point1
		jmp    jump_2fdf4
	jump_2fddf:
		movswl %si,%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		call   get_altitude_point2
	jump_2fdf4:
		sub    %esi,%eax
		add    $0xc,%esp
		mov    %ax,data_5e128
		mov    data_5e128,%dx
		cmp    $0x20,%dx
		jg     jump_2fe23
		movswl %dx,%eax
		cmp    $0xffffffe0,%eax
		jge    jump_2fe1a
		testb  $0x2,0xb(%ebx)
		je     jump_2fe23
	jump_2fe1a:
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2fe23:
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_2FF0B:	/* 0x2fe2c */
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff18
		.long   jump_2ff18
		.long   jump_2ff18
		.long   jump_2ff18
		.long   jump_2ff13
		.long   jump_2ff18
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff13
		.long   jump_2ff18


/*----------------------------------------------------------------*/
i_can_walk_here_quick:	/* 0x2fe70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x18(%esp),%esi
		mov    0x1c(%esp),%ebx
		mov    0x1c(%ebx),%ah
		xor    %edi,%edi
		test   $0x2,%ah
		jne    jump_2ff18
		testb  $0x8,0x1d(%ebx)
		jne    jump_2ff18
		movswl 0x6(%ebx),%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%ebx),%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %ecx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%ecx
		movswl 0x8(%ebx),%edx
		dec    %edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		xor    %edx,%edx
		mov    (%eax),%dl
		mov    h_col,%eax
		add    %edx,%eax
		mov    (%eax),%dh
		cmp    $0xf,%dh
		ja     jump_2ff13
		mov    %dh,%al
		and    $0xff,%eax
		jmp    *%cs:jpt_2FF0B(,%eax,4)
	jump_2ff13:
		test   %di,%di
		je     jump_2ff2f
	jump_2ff18:
		movswl %si,%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		call   get_altitude_point1
		jmp    jump_2ff44
	jump_2ff2f:
		movswl %si,%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		movswl 0x18(%esp),%eax
		push   %eax
		call   get_altitude_point2
	jump_2ff44:
		sub    %esi,%eax
		add    $0xc,%esp
		mov    %ax,data_5e128
		mov    data_5e128,%dx
		cmp    $0x40,%dx
		jg     jump_2ff6d
		movswl %dx,%eax
		cmp    $0xffffffc0,%eax
		jl     jump_2ff6d
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_2ff6d:
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
i_cant_walk_in_this_direction:	/* 0x2ff80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		add    $0x8,%esp
		mov    %al,0x54(%ebx)
		push   %ebx
		movswl data_60b2c,%eax
		push   %eax
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x18(%esp),%al
		mov    0x54(%ebx),%dl
		movswl data_5ad60(,%eax,2),%ecx
		imul   %edx,%ecx
		movswl data_5ab60(,%eax,2),%eax
		imul   %edx,%eax
		movswl 0x6(%ebx),%esi
		sar    $0x8,%ecx
		sar    $0x8,%eax
		add    %esi,%ecx
		movswl 0x4(%ebx),%edx
		movswl %cx,%ecx
		add    %edx,%eax
		push   %ecx
		cwtl
		push   %eax
		call   i_can_walk_here
		add    $0x10,%esp
		test   %ax,%ax
		sete   %al
		xor    %ah,%ah
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
i_cant_walk_in_this_direction_quick:	/* 0x2fff0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%eax
		push   %eax
		movswl data_60b2c,%edx
		movb   $0x80,0x54(%eax)
		push   %edx
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x18(%esp),%dl
		mov    0x54(%eax),%bl
		movswl data_5ad60(,%edx,2),%esi
		imul   %ebx,%esi
		movswl data_5ab60(,%edx,2),%edx
		imul   %ebx,%edx
		movswl 0x6(%eax),%ecx
		sar    $0x8,%esi
		movswl 0x4(%eax),%eax
		add    %esi,%ecx
		sar    $0x8,%edx
		movswl %cx,%ecx
		add    %edx,%eax
		push   %ecx
		cwtl
		push   %eax
		call   i_can_walk_here_quick
		add    $0x10,%esp
		test   %ax,%ax
		sete   %al
		and    $0xff,%eax
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_person_perception:	/* 0x30060 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x51(%eax),%dl
		mov    0x50(%eax),%bl
		sub    %bx,%dx
		jne    jump_3007c
		xor    %eax,%eax
		pop    %ebx
		ret
	jump_3007c:
		test   %dx,%dx
		jge    jump_30093
		movswl %dx,%ebx
		xor    %edx,%edx
		mov    %cx,%dx
		imul   %ebx,%edx
		xor    %ebx,%ebx
		mov    0x50(%eax),%bl
		jmp    jump_300ac
	jump_30093:
		mov    %bl,%al
		mov    $0xff,%ebx
		and    $0xff,%eax
		sub    %eax,%ebx
		movswl %dx,%eax
		xor    %edx,%edx
		mov    %cx,%dx
		imul   %eax,%edx
	jump_300ac:
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_person_intelligence:	/* 0x300c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4d(%eax),%dl
		mov    0x4c(%eax),%bl
		sub    %bx,%dx
		jne    jump_300dc
		xor    %eax,%eax
		pop    %ebx
		ret
	jump_300dc:
		test   %dx,%dx
		jge    jump_300f3
		movswl %dx,%ebx
		xor    %edx,%edx
		mov    %cx,%dx
		imul   %ebx,%edx
		xor    %ebx,%ebx
		mov    0x4c(%eax),%bl
		jmp    jump_3010c
	jump_300f3:
		mov    %bl,%al
		mov    $0xff,%ebx
		and    $0xff,%eax
		sub    %eax,%ebx
		movswl %dx,%eax
		xor    %edx,%edx
		mov    %cx,%dx
		imul   %eax,%edx
	jump_3010c:
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_person_adrenlin:	/* 0x30120 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x49(%eax),%dl
		mov    0x48(%eax),%bl
		sub    %bx,%dx
		jne    jump_3013c
		xor    %eax,%eax
		pop    %ebx
		ret
	jump_3013c:
		test   %dx,%dx
		jge    jump_30153
		movswl %dx,%ebx
		xor    %edx,%edx
		mov    %cx,%dx
		imul   %ebx,%edx
		xor    %ebx,%ebx
		mov    0x48(%eax),%bl
		jmp    jump_3016c
	jump_30153:
		mov    %bl,%al
		mov    $0xff,%ebx
		and    $0xff,%eax
		sub    %eax,%ebx
		movswl %dx,%eax
		xor    %edx,%edx
		mov    %cx,%dx
		imul   %eax,%edx
	jump_3016c:
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_person_speed:	/* 0x30180 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%esi
		testw  $0x1002,0x1c(%ebx)
		je     jump_30227
		mov    0x3c(%ebx),%ax
		xor    %edx,%edx
		and    $0x18,%al
		xor    %ah,%ah
		mov    %ax,%dx
		sar    $0x3,%edx
		lea    0x0(,%edx,4),%edi
		add    %edx,%edi
		lea    0x0(,%edi,8),%edi
		sub    %edx,%edi
		shl    $0x4,%edi
		add    %edx,%edi
		shl    $0x4,%edi
		push   %ebx
		add    $0x3e8,%edi
		call   weapons_in_weight
		sub    %eax,%edi
		add    $0x4,%esp
		mov    %edi,%eax
		test   %edi,%edi
		jge    jump_30209
		push   %edi
		call   ac_abs
		mov    $0x3e8,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %si,%edx
		imul   %eax,%edx
		mov    $0x3e8,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    $0x4,%esp
		mov    %eax,%esi
		cmp    $0x10,%ax
		jge    jump_30209
		mov    $0x10,%esi
	jump_30209:
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		push   %ebx
		call   get_person_adrenlin
		add    $0x8,%esp
		cmp    $0x10,%ax
		jge    jump_30241
		mov    $0x10,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30227:
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		push   %ebx
		call   get_person_adrenlin
		add    $0x8,%esp
		cmp    $0xc,%ax
		jge    jump_30241
		mov    $0xc,%eax
	jump_30241:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
new_state_person:	/* 0x30250 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x19(%eax),%dl
		mov    0x58(%eax),%dh
		cmp    %dh,%dl
		je     jump_30262
		test   %dh,%dh
		jne    jump_3028c
	jump_30262:
		cmpw   $0x0,0x20(%eax)
		je     jump_3026f
		movb   $0x1e,0x58(%eax)
		jmp    jump_3028c
	jump_3026f:
		testb  $0x10,0xb(%eax)
		je     jump_3027b
		movb   $0x1d,0x58(%eax)
		jmp    jump_3028c
	jump_3027b:
		cmpw   $0x0,0x28(%eax)
		je     jump_30288
		movb   $0x1,0x58(%eax)
		jmp    jump_3028c
	jump_30288:
		movb   $0x0,0x58(%eax)
	jump_3028c:
		mov    0x58(%eax),%dl
		mov    %dl,0x19(%eax)
		ret


/*----------------------------------------------------------------*/
can_i_persuad_you:	/* 0x302a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    last_person,%ebp
		mov    0x20(%esp),%eax
		sub    $level__things_base,%eax
		mov    %eax,0x4(%esp)
		mov    0x24(%esp),%eax
		xor    %ecx,%ecx
		mov    0x20(%eax),%dx
		xor    %esi,%esi
		test   %dx,%dx
		je     jump_30329
		mov    0x24(%esp),%edx
		xor    %eax,%eax
		mov    0x20(%edx),%ax
		mov    %eax,%edx
		add    $level__things_base,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    0x20(%esp),%edx
		mov    $0x5c,%edi
		sub    $level__People,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    %eax,%ebx
		je     jump_305e5
	jump_30329:
		mov    0x24(%esp),%edx
		sub    $level__People,%edx
		mov    $0x5c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    0x20(%esp),%edx
		mov    $0x5c,%edi
		sub    $level__People,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    %eax,%ebx
		je     jump_305e5
		mov    0x24(%esp),%eax
		testb  $0x2,0x1c(%eax)
		je     jump_304d0
		sub    $level__things_base,%eax
		mov    $level__People,%ebx
		mov    %eax,0x8(%esp)
		cmp    %ebx,%ebp
		jbe    jump_3046a
	jump_3039d:
		testb  $0x1,0xb(%ebx)
		jne    jump_3045f
		xor    %eax,%eax
		mov    $0x2e0,%edi
		mov    0x20(%ebx),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		div    %edi
		mov    %eax,%edi
		xor    %eax,%eax
		movl   $0x2e0,(%esp)
		mov    0x8(%esp),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   (%esp)
		cmp    %eax,%edi
		jne    jump_30414
		mov    0x1c(%ebx),%dh
		test   $0x2,%dh
		je     jump_303e5
		add    $0x5,%esi
		jmp    jump_3045f
	jump_303e5:
		test   $0x4,%dh
		je     jump_303f2
		add    $0x4,%esi
		jmp    jump_3045f
	jump_303f2:
		test   $0x8,%dh
		je     jump_303ff
		add    $0x3,%esi
		jmp    jump_3045f
	jump_303ff:
		test   $0x10,%dh
		je     jump_3040c
		add    $0x2,%esi
		jmp    jump_3045f
	jump_3040c:
		test   $0x1,%dh
		je     jump_3045f
		inc    %esi
		jmp    jump_3045f
	jump_30414:
		xor    %eax,%eax
		movl   $0x2e0,(%esp)
		mov    0x4(%esp),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		divl   (%esp)
		cmp    %eax,%edi
		jne    jump_3045f
		mov    0x1c(%ebx),%dl
		test   $0x2,%dl
		je     jump_3043b
		add    $0x5,%ecx
		jmp    jump_3045f
	jump_3043b:
		test   $0x4,%dl
		je     jump_30445
		add    $0x4,%ecx
		jmp    jump_3045f
	jump_30445:
		test   $0x8,%dl
		je     jump_3044f
		add    $0x3,%ecx
		jmp    jump_3045f
	jump_3044f:
		test   $0x10,%dl
		je     jump_30459
		add    $0x2,%ecx
		jmp    jump_3045f
	jump_30459:
		test   $0x1,%dl
		je     jump_3045f
		inc    %ecx
	jump_3045f:
		add    $0x5c,%ebx
		cmp    %ebp,%ebx
		jb     jump_3039d
	jump_3046a:
		mov    0x20(%esp),%eax
		mov    0x3c(%eax),%ax
		and    $0x6,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0x9,%eax
		and    $0xffff,%ecx
		inc    %eax
		imul   %eax,%ecx
		mov    0x24(%esp),%eax
		mov    0x3c(%eax),%ax
		and    $0x6,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0x9,%eax
		and    $0xffff,%esi
		inc    %eax
		imul   %eax,%esi
		inc    %ecx
		inc    %esi
		cmp    $0x20,%cx
		jb     jump_305e5
		cmp    %si,%cx
		jbe    jump_305e5
		mov    $0x1,%eax
		mov    %ebp,last_person
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_304d0:
		mov    $level__People,%ebx
		cmp    %ebx,%ebp
		jbe    jump_30537
		mov    $0x2e0,%esi
	jump_304e2:
		xor    %eax,%eax
		mov    0x20(%ebx),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		div    %esi
		mov    %eax,%edi
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		xor    %edx,%edx
		sub    $0x2,%eax
		div    %esi
		cmp    %eax,%edi
		jne    jump_30530
		testb  $0x1,0xb(%ebx)
		jne    jump_30530
		mov    0x1c(%ebx),%al
		test   $0x2,%al
		je     jump_30515
		add    $0x5,%ecx
		jmp    jump_30530
	jump_30515:
		test   $0x4,%al
		je     jump_3051e
		add    $0x2,%ecx
		jmp    jump_30530
	jump_3051e:
		test   $0x8,%al
		je     jump_30527
		add    $0x2,%ecx
		jmp    jump_30530
	jump_30527:
		test   $0x10,%al
		jne    jump_3052f
		test   $0x1,%al
		je     jump_30530
	jump_3052f:
		inc    %ecx
	jump_30530:
		add    $0x5c,%ebx
		cmp    %ebp,%ebx
		jb     jump_304e2
	jump_30537:
		mov    0x20(%esp),%eax
		mov    0x3c(%eax),%ax
		and    $0x6,%ah
		xor    %al,%al
		and    $0xffff,%eax
		sar    $0x9,%eax
		and    $0xffff,%ecx
		inc    %eax
		imul   %eax,%ecx
		mov    0x24(%esp),%eax
		mov    0x1c(%eax),%dh
		inc    %ecx
		test   $0x1,%dh
		je     jump_3057c
		cmp    $0x1,%cx
		jb     jump_3057c
		mov    $0x1,%eax
		mov    %ebp,last_person
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3057c:
		mov    0x24(%esp),%eax
		testb  $0x10,0x1c(%eax)
		je     jump_3059f
		cmp    $0x2,%cx
		jb     jump_3059f
		mov    $0x1,%eax
		mov    %ebp,last_person
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3059f:
		mov    0x24(%esp),%eax
		testb  $0x8,0x1c(%eax)
		je     jump_305c2
		cmp    $0x4,%cx
		jb     jump_305c2
		mov    $0x1,%eax
		mov    %ebp,last_person
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_305c2:
		mov    0x24(%esp),%eax
		testb  $0x4,0x1c(%eax)
		je     jump_305e5
		cmp    $0x8,%cx
		jb     jump_305e5
		mov    $0x1,%eax
		mov    %ebp,last_person
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_305e5:
		xor    %eax,%eax
		mov    %ebp,last_person
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
affect_person:	/* 0x30600 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    0xc(%ebx),%dx
		test   %dx,%dx
		je     jump_306c4
		mov    %edx,%eax
		movw   $0x0,0xc(%ebx)
		test   $0x80,%dl
		je     jump_3062a
		orb    $0x8,0xa(%ebx)
		mov    $0x15,%eax
		pop    %ebx
		ret
	jump_3062a:
		test   $0x8,%dl
		je     jump_3063f
		mov    0xa(%ebx),%ch
		or     $0x8,%ch
		mov    $0x14,%eax
		mov    %ch,0xa(%ebx)
		pop    %ebx
		ret
	jump_3063f:
		test   $0x40,%dl
		je     jump_30654
		mov    0xa(%ebx),%cl
		or     $0x8,%cl
		mov    $0x12,%eax
		mov    %cl,0xa(%ebx)
		pop    %ebx
		ret
	jump_30654:
		test   $0x1,%dl
		je     jump_30669
		mov    0xa(%ebx),%dh
		or     $0x8,%dh
		mov    $0x13,%eax
		mov    %dh,0xa(%ebx)
		pop    %ebx
		ret
	jump_30669:
		test   $0x10,%dl
		je     jump_3067e
		mov    0xa(%ebx),%dl
		or     $0x8,%dl
		mov    $0x11,%eax
		mov    %dl,0xa(%ebx)
		pop    %ebx
		ret
	jump_3067e:
		test   $0x4,%dh
		je     jump_306c4
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		push   %ebx
		add    $level__things_base,%eax
		push   %eax
		call   can_i_persuad_you
		add    $0x8,%esp
		test   %ax,%ax
		je     jump_306c4
		mov    0xa(%ebx),%ah
		movb   $0x1e,0x58(%ebx)
		or     $0x8,%ah
		mov    %ah,0xa(%ebx)
		push   %ebx
		mov    0x16(%ebx),%ax
		push   $0xe
		mov    %ax,0x20(%ebx)
		call   play_distance_sample
		mov    $0x2c,%eax
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_306c4:
		mov    0x19(%ebx),%al
		xor    %ah,%ah
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
quick_decide_on_hug_direction:	/* 0x306d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x4,%esp
		mov    0x10(%esp),%ebx
		xor    %eax,%eax
		mov    0x1a(%ebx),%al
		add    $0x20,%eax
		sar    $0x6,%eax
		shl    $0x6,%eax
		sub    $0x40,%eax
		xor    %esi,%esi
		mov    %al,(%esp)
	jump_306ef:
		xor    %eax,%eax
		mov    (%esp),%al
		push   %eax
		push   %ebx
		call   i_cant_walk_in_this_direction
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_30713
		mov    (%esp),%ah
		add    $0x40,%ah
		inc    %esi
		mov    %ah,(%esp)
		cmp    $0x4,%si
		jb     jump_306ef
	jump_30713:
		mov    0x30(%ebx),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x2e(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		movb   $0x4,0x59(%ebx)
		call   getrdist
		add    $0x8,%esp
		mov    %ax,0x1e(%ebx)
		mov    (%esp),%al
		mov    %al,0x5a(%ebx)
		mov    0x14(%esp),%eax
		mov    (%esp),%dl
		mov    %ax,0x42(%ebx)
		cmp    $0x40,%dl
		jb     jump_3075f
		jbe    jump_3077b
		cmp    $0x80,%dl
		jb     jump_307a2
		jbe    jump_3077b
		cmp    $0xc0,%dl
		je     jump_3077b
		jmp    jump_307a2
	jump_3075f:
		test   %dl,%dl
		jne    jump_307a2
		movsbl %dl,%edx
		movsbl 0x1a(%ebx),%eax
		sub    %eax,%edx
		test   %edx,%edx
		jge    jump_30796
		mov    (%esp),%al
		movb   $0xe,0x19(%ebx)
		add    $0x40,%al
		jmp    jump_3079f
	jump_3077b:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    (%esp),%dl
		mov    0x1a(%ebx),%al
		sub    %eax,%edx
		test   %edx,%edx
		jge    jump_30796
		mov    (%esp),%al
		movb   $0xe,0x19(%ebx)
		add    $0x40,%al
		jmp    jump_3079f
	jump_30796:
		mov    (%esp),%al
		movb   $0xf,0x19(%ebx)
		sub    $0x40,%al
	jump_3079f:
		mov    %al,0x1a(%ebx)
	jump_307a2:
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
decide_on_hug_direction:	/* 0x307b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xcc,%esp
		mov    0xe0(%esp),%ebx
		mov    0x30(%ebx),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x2e(%ebx),%ax
		xor    %ebp,%ebp
		sub    %ecx,%eax
		xor    %edi,%edi
		cwtl
		mov    %ebp,0xc0(%esp)
		push   %eax
		mov    %ebp,0xc8(%esp)
		mov    %ebp,0xc0(%esp)
		call   getrdist
		mov    data_55300,%si
		add    $0x8,%esp
		mov    %ax,%di
		test   %si,%si
		jne    jump_30ca9
		movw   $0x1,data_55300
		xor    %eax,%eax
		mov    0x1a(%ebx),%al
		add    $0x20,%eax
		sar    $0x6,%eax
		shl    $0x6,%eax
		sub    $0x40,%eax
		xor    %esi,%esi
		mov    %al,0xc8(%esp)
		mov    %al,0xc4(%esp)
	jump_30835:
		xor    %eax,%eax
		mov    0xc8(%esp),%al
		push   %eax
		push   %ebx
		call   i_cant_walk_in_this_direction_quick
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_30863
		mov    0xc8(%esp),%ah
		add    $0x40,%ah
		inc    %esi
		mov    %ah,0xc8(%esp)
		cmp    $0x4,%esi
		jl     jump_30835
	jump_30863:
		xor    %esi,%esi
	jump_30865:
		xor    %eax,%eax
		mov    0xc4(%esp),%al
		push   %eax
		push   %ebx
		call   i_cant_walk_in_this_direction
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_30894
		mov    0xc4(%esp),%dl
		add    $0x40,%dl
		inc    %esi
		mov    %dl,0xc4(%esp)
		cmp    $0x4,%esi
		jl     jump_30865
	jump_30894:
		cmp    $0x4,%esi
		jge    jump_30bfb
		mov    0xc4(%esp),%al
		mov    %al,0x5a(%ebx)
		mov    0xe4(%esp),%eax
		push   $0x5c
		mov    %ax,0x42(%ebx)
		lea    0x4(%esp),%eax
		push   %eax
		movb   $0x4,0x59(%ebx)
		push   %ebx
		mov    %di,0x1e(%ebx)
		call   LbMemoryCopy
		add    $0xc,%esp
		mov    0xc8(%esp),%al
		sub    $0x40,%al
		mov    0x6(%esp),%edx
		mov    %al,0x1a(%esp)
		mov    %al,0x5a(%esp)
		mov    0x30(%esp),%eax
		mov    $0x80,%cl
		sub    %edx,%eax
		mov    %cl,0x54(%esp)
		cwtl
		mov    0x4(%esp),%ecx
		push   %eax
		mov    0x32(%esp),%eax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getdist
		add    $0x8,%esp
		push   $0x5c
		mov    %ax,0x22(%esp)
		lea    0x60(%esp),%eax
		push   %eax
		push   %ebx
		call   LbMemoryCopy
		add    $0xc,%esp
		mov    0xc8(%esp),%al
		add    $0x40,%al
		mov    0x62(%esp),%esi
		mov    %al,0x76(%esp)
		mov    %al,0xb6(%esp)
		mov    0x8c(%esp),%eax
		sub    %esi,%eax
		cwtl
		mov    0x60(%esp),%edi
		push   %eax
		mov    0x8e(%esp),%eax
		sub    %edi,%eax
		cwtl
		mov    $0x80,%ch
		push   %eax
		mov    %ch,0xb8(%esp)
		call   getdist
		add    $0x8,%esp
		mov    %ax,0x7a(%esp)
		xor    %edi,%edi
		movb   $0x0,0x19(%ebx)
	jump_30964:
		push   $0xffffffc0
		lea    0x60(%esp),%eax
		push   %eax
		call   check_a_hug
		add    $0x8,%esp
		movswl 0x2e(%ebx),%esi
		movswl 0x60(%esp),%eax
		sar    $0x8,%esi
		sar    $0x8,%eax
		cmp    %eax,%esi
		jne    jump_309aa
		movswl 0x30(%ebx),%edx
		movswl 0x62(%esp),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		jne    jump_309aa
		mov    0x5a(%ebx),%al
		movb   $0xe,0x19(%ebx)
		add    $0x40,%al
		mov    %al,0x1a(%ebx)
		jmp    jump_30ca9
	jump_309aa:
		xor    %eax,%eax
		mov    0x76(%esp),%al
		movswl data_5ab60(,%eax,2),%edx
		movswl 0x60(%esp),%esi
		shl    $0x7,%edx
		movswl data_5ad60(,%eax,2),%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %edx,%esi
		sar    $0x8,%eax
		mov    %si,0x60(%esp)
		movswl 0x62(%esp),%esi
		mov    0x64(%esp),%edx
		add    %eax,%esi
		add    data_5e128,%dx
		mov    0x8c(%esp),%eax
		sub    %esi,%eax
		mov    %si,0x62(%esp)
		cwtl
		mov    0x60(%esp),%esi
		push   %eax
		mov    0x8e(%esp),%eax
		sub    %esi,%eax
		cwtl
		push   %eax
		mov    %dx,0x6c(%esp)
		xor    %esi,%esi
		call   getdist
		add    $0x8,%esp
		mov    %ax,%si
		xor    %eax,%eax
		mov    0x7a(%esp),%ax
		cmp    %eax,%esi
		jge    jump_30a34
		mov    %si,0x7a(%esp)
		mov    %esi,%ebp
		mov    %edi,0xbc(%esp)
	jump_30a34:
		push   $0x40
		lea    0x4(%esp),%eax
		push   %eax
		call   check_a_hug
		add    $0x8,%esp
		movswl 0x2e(%ebx),%edx
		movswl 0x4(%esp),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		jne    jump_30a80
		movswl 0x30(%ebx),%esi
		movswl 0x6(%esp),%eax
		sar    $0x8,%esi
		sar    $0x8,%eax
		cmp    %eax,%esi
		jne    jump_30a80
		mov    0x5a(%ebx),%al
		movb   $0xf,0x19(%ebx)
		sub    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30a80:
		xor    %eax,%eax
		mov    0x1a(%esp),%al
		movswl data_5ab60(,%eax,2),%edx
		movswl 0x4(%esp),%esi
		shl    $0x7,%edx
		movswl data_5ad60(,%eax,2),%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %edx,%esi
		sar    $0x8,%eax
		mov    %si,0x4(%esp)
		movswl 0x6(%esp),%esi
		mov    0x8(%esp),%edx
		add    %eax,%esi
		add    data_5e128,%dx
		mov    0x30(%esp),%eax
		sub    %esi,%eax
		mov    %si,0x6(%esp)
		cwtl
		mov    0x4(%esp),%esi
		push   %eax
		mov    0x32(%esp),%eax
		sub    %esi,%eax
		cwtl
		push   %eax
		mov    %dx,0x10(%esp)
		xor    %esi,%esi
		call   getdist
		add    $0x8,%esp
		mov    %ax,%si
		xor    %eax,%eax
		mov    0x1e(%esp),%ax
		cmp    %eax,%esi
		jge    jump_30b09
		mov    %si,0x1e(%esp)
		mov    %esi,0xc0(%esp)
		mov    %edi,0xb8(%esp)
	jump_30b09:
		inc    %edi
		cmp    $0x20,%edi
		jl     jump_30964
		cmpb   $0x0,0x19(%ebx)
		jne    jump_30ca9
		mov    0xb8(%esp),%edi
		test   %edi,%edi
		jne    jump_30b3f
		mov    0x5a(%ebx),%al
		movb   $0xe,0x19(%ebx)
		add    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30b3f:
		mov    0xbc(%esp),%eax
		test   %eax,%eax
		jne    jump_30b61
		mov    0x5a(%ebx),%al
		movb   $0xf,0x19(%ebx)
		sub    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30b61:
		cmp    %eax,%edi
		jle    jump_30bb5
		mov    0xc0(%esp),%edi
		cmp    %edi,%ebp
		jg     jump_30b87
	jump_30b70:
		mov    0x5a(%ebx),%al
		movb   $0xe,0x19(%ebx)
		add    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30b87:
		mov    0xb8(%esp),%eax
		sub    0xbc(%esp),%eax
		sub    %edi,%ebp
		shl    $0x7,%eax
		cmp    %ebp,%eax
		jge    jump_30b70
		mov    0x5a(%ebx),%al
		movb   $0xf,0x19(%ebx)
		sub    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30bb5:
		mov    0xc0(%esp),%ecx
		cmp    %ecx,%ebp
		jl     jump_30bd7
	jump_30bc0:
		mov    0x5a(%ebx),%al
		movb   $0xf,0x19(%ebx)
		sub    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30bd7:
		sub    %edi,%eax
		mov    %ecx,%edx
		shl    $0x7,%eax
		sub    %ebp,%edx
		cmp    %edx,%eax
		jge    jump_30bc0
		mov    0x5a(%ebx),%al
		movb   $0xe,0x19(%ebx)
		add    $0x40,%al
		mov    %al,0x1a(%ebx)
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_30bfb:
		mov    0xc8(%esp),%dh
		add    $0x20,%dh
		xor    %edi,%edi
		mov    %dh,0xc8(%esp)
	jump_30c0e:
		xor    %eax,%eax
		mov    0xc8(%esp),%al
		push   %eax
		push   %ebx
		call   i_cant_walk_in_this_direction
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_30c3c
		mov    0xc8(%esp),%al
		add    $0x40,%al
		inc    %edi
		mov    %al,0xc8(%esp)
		cmp    $0x4,%edi
		jl     jump_30c0e
	jump_30c3c:
		push   $0x2
		call   random
		add    %al,%al
		add    $0x4,%esp
		dec    %al
		mov    0xc8(%esp),%ah
		shl    $0x5,%al
		add    %al,%ah
		mov    %ah,0xc8(%esp)
		mov    0x4(%ebx),%ax
		mov    %ax,data_60b28
		mov    0x6(%ebx),%ax
		mov    %ax,data_60b2a
		mov    0x8(%ebx),%ax
		mov    %ax,data_60b2c
		mov    0xc8(%esp),%al
		xor    %ah,%ah
		mov    %al,0x1a(%ebx)
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
	jump_30ca9:
		add    $0xcc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
do_a_hug:	/* 0x30cc0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%ah
		mov    0x1a(%ebx),%al
		add    %ah,%al
		xor    %edi,%edi
		mov    %al,(%esp)
	jump_30cd8:
		push   %ebx
		movswl 0x8(%ebx),%eax
		push   %eax
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x8(%esp),%al
		mov    0x54(%ebx),%dl
		movswl data_5ad60(,%eax,2),%ecx
		imul   %edx,%ecx
		movswl data_5ab60(,%eax,2),%eax
		imul   %edx,%eax
		movswl 0x6(%ebx),%esi
		sar    $0x8,%ecx
		sar    $0x8,%eax
		add    %esi,%ecx
		movswl 0x4(%ebx),%edx
		movswl %cx,%ecx
		add    %edx,%eax
		push   %ecx
		cwtl
		push   %eax
		call   i_can_walk_here
		add    $0x10,%esp
		test   %ax,%ax
		jne    jump_30d37
		mov    0x18(%esp),%al
		mov    (%esp),%dl
		sub    %al,%dl
		inc    %edi
		mov    %dl,(%esp)
		cmp    $0x4,%di
		jl     jump_30cd8
	jump_30d37:
		mov    0x30(%ebx),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x2e(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getrdist
		mov    0x1e(%ebx),%si
		add    $0x8,%esp
		cmp    %si,%ax
		jae    jump_30d77
		mov    0x18(%esp),%dh
		mov    0x5a(%ebx),%al
		mov    (%esp),%cl
		sub    %dh,%al
		cmp    %cl,%al
		je     jump_30d77
		mov    0x5a(%ebx),%al
		add    $0x80,%al
		cmp    %cl,%al
		jne    jump_30d89
	jump_30d77:
		mov    0x42(%ebx),%di
		dec    %di
		mov    %di,0x42(%ebx)
		je     jump_30d89
		cmpb   $0x0,0x59(%ebx)
		jne    jump_30d8d
	jump_30d89:
		xor    %eax,%eax
		jmp    jump_30da9
	jump_30d8d:
		mov    (%esp),%ah
		cmp    0x1a(%ebx),%ah
		je     jump_30d9a
		decb   0x59(%ebx)
		jmp    jump_30d9e
	jump_30d9a:
		movb   $0x4,0x59(%ebx)
	jump_30d9e:
		mov    (%esp),%al
		mov    %al,0x1a(%ebx)
		mov    $0x1,%eax
	jump_30da9:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_a_hug:	/* 0x30db0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%ah
		mov    0x1a(%ebx),%al
		add    %ah,%al
		xor    %edi,%edi
		mov    %al,(%esp)
	jump_30dc8:
		push   %ebx
		xor    %edx,%edx
		movswl 0x8(%ebx),%eax
		mov    0x4(%esp),%dl
		push   %eax
		xor    %eax,%eax
		movswl data_5ad60(,%edx,2),%ecx
		mov    0x54(%ebx),%al
		imul   %eax,%ecx
		movswl data_5ab60(,%edx,2),%edx
		imul   %eax,%edx
		movswl 0x6(%ebx),%esi
		sar    $0x8,%ecx
		sar    $0x8,%edx
		add    %esi,%ecx
		movswl 0x4(%ebx),%eax
		movswl %cx,%ecx
		add    %edx,%eax
		push   %ecx
		cwtl
		push   %eax
		call   i_can_walk_here_quick
		add    $0x10,%esp
		test   %ax,%ax
		jne    jump_30e27
		mov    0x18(%esp),%al
		mov    (%esp),%dl
		sub    %al,%dl
		inc    %edi
		mov    %dl,(%esp)
		cmp    $0x4,%di
		jl     jump_30dc8
	jump_30e27:
		mov    (%esp),%al
		mov    %al,0x1a(%ebx)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
cp_i_can_see_and_shoot_person:	/* 0x30e40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%edx
		mov    0x10(%esp),%esi
		mov    0x14(%esp),%ecx
		cmpb   $0x17,0x19(%esi)
		jne    jump_30e59
	jump_30e54:
		xor    %eax,%eax
		pop    %esi
		pop    %ebx
		ret
	jump_30e59:
		mov    0x24(%esi),%ax
		test   %ax,%ax
		je     jump_30e95
	jump_30e62:
		test   %ax,%ax
		je     jump_30e7e
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		cmpb   $0x2,0x18(%ebx)
		je     jump_30e7e
		mov    0x24(%ebx),%ax
		jmp    jump_30e62
	jump_30e7e:
		movswl %cx,%eax
		push   %eax
		push   %ebx
		push   %edx
		call   i_can_see_and_shoot_vehicle
		add    $0xc,%esp
		cmp    %ebx,%eax
		jne    jump_30e54
		mov    %esi,%eax
		pop    %esi
		pop    %ebx
		ret
	jump_30e95:
		movswl %cx,%eax
		push   %eax
		push   %esi
		push   %edx
		call   i_can_see_and_shoot_person
		add    $0xc,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
i_can_see_and_shoot_person:	/* 0x30eb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    0x2c(%esp),%edi
		mov    0x30(%esp),%ebp
		testb  $0x2,0x1c(%edi)
		je     jump_30f11
		mov    %edi,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %ebp,%edx
		mov    $0x5c,%esi
		sub    $level__People,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    %eax,%ebx
		je     jump_310ad
	jump_30f11:
		cmpb   $0x17,0x19(%ebp)
		je     jump_310ad
		mov    0x6(%ebp),%ax
		sub    0x6(%edi),%ax
		cwtl
		mov    0x4(%edi),%bx
		push   %eax
		mov    0x4(%ebp),%ax
		sub    %ebx,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		mov    0x34(%esp),%ecx
		cmp    %cx,%ax
		jge    jump_310ad
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,0x34(%esp)
		cmp    $0x1,%ax
		jl     jump_310ad
		mov    0x4(%edi),%ax
		mov    %eax,0x8(%esp)
		mov    0x6(%edi),%ax
		mov    %eax,0xc(%esp)
		mov    0x8(%edi),%ax
		mov    0xc(%esp),%edx
		mov    %eax,(%esp)
		mov    0x6(%ebp),%ax
		sub    %edx,%eax
		cwtl
		mov    0x8(%esp),%ebx
		push   %eax
		mov    0x4(%ebp),%ax
		sub    %ebx,%eax
		cwtl
		push   %eax
		call   arctan
		add    $0x8,%esp
		mov    0xc(%esp),%ecx
		mov    %al,0x14(%esp)
		mov    0x6(%ebp),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		mov    0x4(%ebp),%ax
		sub    %ebx,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cwtl
		mov    (%esp),%edx
		push   %eax
		mov    0x8(%ebp),%ax
		sub    %edx,%eax
		cwtl
		push   %eax
		call   arctan
		add    $0x8,%esp
		xor    %ebx,%ebx
		mov    0x34(%esp),%ecx
		mov    %al,0x10(%esp)
		mov    %ebx,0x4(%esp)
		test   %cx,%cx
		jle    jump_310ad
	jump_30fe7:
		mov    (%esp),%eax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x10(%esp),%esi
		push   %esi
		movswl 0x10(%esp),%ebx
		push   %ebx
		call   sight_colide
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_310ad
		push   $0x100
		push   $0x80
		push   $0x80
		movswl 0xc(%esp),%eax
		push   %eax
		push   %esi
		push   %ebx
		push   %edi
		call   bullet_try_colide
		add    $0x1c,%esp
		test   %eax,%eax
		je     jump_31040
		cmpb   $0x1,0x18(%eax)
		jne    jump_310ad
		cmp    %eax,%ebp
		je     jump_310af
		cmp    %eax,%edi
		jne    jump_310af
	jump_31040:
		xor    %edx,%edx
		mov    0x14(%esp),%dl
		movswl data_5ab60(,%edx,2),%ebx
		shl    $0x7,%ebx
		movswl 0x8(%esp),%eax
		sar    $0x8,%ebx
		add    %ebx,%eax
		mov    %eax,0x8(%esp)
		movswl data_5ad60(,%edx,2),%eax
		mov    %eax,%edx
		shl    $0x7,%edx
		movswl 0xc(%esp),%eax
		sar    $0x8,%edx
		add    %edx,%eax
		mov    %eax,0xc(%esp)
		xor    %eax,%eax
		mov    0x10(%esp),%al
		mov    0x4(%esp),%esi
		movswl data_5ab60(,%eax,2),%edx
		inc    %esi
		shl    $0x7,%edx
		movswl (%esp),%eax
		sar    $0x8,%edx
		mov    %esi,0x4(%esp)
		add    %edx,%eax
		mov    0x34(%esp),%edx
		mov    %eax,(%esp)
		cmp    %dx,%si
		jl     jump_30fe7
	jump_310ad:
		xor    %eax,%eax
	jump_310af:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
i_can_see_and_shoot_vehicle:	/* 0x310c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    0x20(%esp),%ebp
		mov    0x24(%esp),%eax
		mov    0x6(%ebp),%dx
		mov    0x6(%eax),%ax
		sub    %edx,%eax
		cwtl
		push   %eax
		mov    0x28(%esp),%eax
		mov    0x4(%ebp),%bx
		mov    0x4(%eax),%ax
		sub    %ebx,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		mov    0x28(%esp),%ecx
		cmp    %cx,%ax
		jge    jump_3123a
		movswl %cx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,0x28(%esp)
		cmp    $0x1,%ax
		jl     jump_3123a
		mov    0x24(%esp),%eax
		mov    0x6(%ebp),%bx
		mov    0x6(%eax),%ax
		sub    %ebx,%eax
		cwtl
		push   %eax
		mov    0x28(%esp),%eax
		mov    0x4(%ebp),%si
		mov    0x4(%eax),%ax
		sub    %esi,%eax
		cwtl
		push   %eax
		mov    0x8(%ebp),%di
		call   arctan
		add    $0x8,%esp
		mov    %al,0x8(%esp)
		mov    0x24(%esp),%eax
		mov    0x6(%eax),%ax
		sub    %ebx,%eax
		cwtl
		push   %eax
		mov    0x28(%esp),%eax
		mov    0x4(%eax),%ax
		sub    %esi,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		cwtl
		push   %eax
		mov    0x28(%esp),%eax
		mov    0x8(%eax),%ax
		sub    %edi,%eax
		cwtl
		push   %eax
		call   arctan
		add    $0x8,%esp
		mov    %al,0x4(%esp)
		xor    %eax,%eax
		mov    0x28(%esp),%edx
		mov    %eax,(%esp)
		test   %dx,%dx
		jle    jump_3123a
	jump_3119a:
		mov    %edi,%eax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl %bx,%ebx
		push   %ebx
		movswl %si,%esi
		push   %esi
		call   sight_colide
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_3123a
		push   $0x100
		push   $0x80
		push   $0x80
		movswl %di,%edi
		push   %edi
		push   %ebx
		push   %esi
		push   %ebp
		call   bullet_try_colide
		add    $0x1c,%esp
		test   %eax,%eax
		je     jump_311e6
		cmp    0x24(%esp),%eax
		jne    jump_3123a
		jmp    jump_3123c
	jump_311e6:
		xor    %eax,%eax
		mov    0x8(%esp),%al
		movswl data_5ab60(,%eax,2),%edx
		movswl data_5ad60(,%eax,2),%eax
		shl    $0x7,%eax
		mov    (%esp),%ecx
		sar    $0x8,%eax
		inc    %ecx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %ecx,(%esp)
		mov    0x4(%esp),%al
		shl    $0x7,%edx
		movswl data_5ab60(,%eax,2),%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %esi,%edx
		sar    $0x8,%eax
		mov    %edx,%esi
		add    %edi,%eax
		mov    0x28(%esp),%edx
		mov    %eax,%edi
		cmp    %dx,%cx
		jl     jump_3119a
	jump_3123a:
		xor    %eax,%eax
	jump_3123c:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_31244:
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   func_3135f
		.long   jump_315d8
		.long   func_3135f
		.long   jump_315d8
		.long   func_3135f
		.long   func_3135f
		.long   jump_315d8
		.long   jump_315d8
		.long   func_3135f
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
jpt_313DF:	/* 0x312f8 */
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   func_3140e
		.long   func_3140e
		.long   func_3140e
		.long   func_3140e
		.long   func_313e7
		.long   func_3140e
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8
		.long   jump_315d8


/*----------------------------------------------------------------*/
person_on_block:	/* 0x31340 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x4,%esp
		mov    0xc(%esp),%ebx
		cmpb   $0x2c,0x19(%ebx)
		ja     jump_315d8
		xor    %eax,%eax
		mov    0x19(%ebx),%al
		jmp    *%cs:vtable_31244(,%eax,4)


/*----------------------------------------------------------------*/
func_3135f:
/*----------------------------------------------------------------*/
		movswl 0x6(%ebx),%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%ebx),%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %ecx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%ecx
		movswl 0x8(%ebx),%edx
		dec    %edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		mov    (%eax),%al
		mov    h_col,%edx
		and    $0xff,%eax
		add    %edx,%eax
		mov    (%eax),%dl
		cmp    $0x10,%dl
		ja     jump_315d8
		mov    %dl,%al
		and    $0xff,%eax
		jmp    *%cs:jpt_313DF(,%eax,4)


/*----------------------------------------------------------------*/
func_313e7:
/*----------------------------------------------------------------*/
		testb  $0x1,0xa(%ebx)
		jne    jump_315d8
		movb   $0x21,0x19(%ebx)
		mov    0xa(%ebx),%dx
		movw   $0xffff,0x14(%ebx)
		or     $0x108,%edx
		mov    %dx,0xa(%ebx)
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_3140e:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x24(%ebx)
		jne    jump_315d8
		testw  $0x108,0xa(%ebx)
		jne    jump_315d8
		cmpb   $0x27,0x19(%ebx)
		je     jump_315d8
		movswl 0x8(%ebx),%eax
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		call   check_for_on_coming_cars
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_315d8
		mov    0x4(%ebx),%ax
		xor    %ch,%ch
		xor    %ah,%ah
		mov    %ch,(%esp)
		cmp    $0x80,%ax
		jge    jump_314b8
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		mov    0x4(%ebx),%ax
		sub    $0x100,%eax
		cwtl
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_3148e
		movb   $0xc0,(%esp)
		jmp    jump_315c8
	jump_3148e:
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		mov    0x4(%ebx),%ax
		inc    %ah
		cwtl
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_31510
		movb   $0x40,(%esp)
		jmp    jump_315c8
	jump_314b8:
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		mov    0x4(%ebx),%ax
		inc    %ah
		cwtl
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_314e2
		movb   $0x40,(%esp)
		jmp    jump_315c8
	jump_314e2:
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		mov    0x4(%ebx),%ax
		sub    $0x100,%eax
		cwtl
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_31510
		movb   $0xc0,(%esp)
		jmp    jump_315c8
	jump_31510:
		cmpb   $0x0,(%esp)
		jne    jump_315c8
		mov    0x6(%ebx),%ax
		xor    %ah,%ah
		cmp    $0x80,%ax
		jge    jump_31577
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		sub    $0x100,%eax
		cwtl
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_315c4
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		inc    %ah
		cwtl
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_315c8
		xor    %ch,%ch
		mov    %ch,(%esp)
		jmp    jump_315c8
	jump_31577:
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		inc    %ah
		cwtl
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_3159f
		xor    %cl,%cl
		mov    %cl,(%esp)
		jmp    jump_315c8
	jump_3159f:
		mov    0x8(%ebx),%ax
		dec    %eax
		cwtl
		push   %eax
		mov    0x6(%ebx),%ax
		sub    $0x100,%eax
		cwtl
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_315c8
	jump_315c4:
		movb   $0x80,(%esp)
	jump_315c8:
		movb   $0x27,0x19(%ebx)
		mov    0x1a(%ebx),%al
		mov    %al,0x5b(%ebx)
		mov    (%esp),%al
		mov    %al,0x1a(%ebx)
	jump_315d8:
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
who_shot_me:	/* 0x315e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		cmpw   $0x0,0x16(%ebx)
		je     jump_316c4
		movswl EXPORT_SYMBOL(Network__Slot),%ecx
		mov    %ecx,%eax
		shl    $0x5,%eax
		add    %ecx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ecx,%eax
		xor    %ecx,%ecx
		mov    data_5e551(%eax),%cl
		imul   $0x5c,%ecx,%eax
		xor    %edx,%edx
		mov    0x16(%ebx),%dx
		add    $level__things_base,%edx
		add    $level__People,%eax
		cmp    %eax,%edx
		jb     jump_3169c
		add    $0x4,%ecx
		imul   $0x5c,%ecx,%ecx
		add    $level__People,%ecx
		cmp    %ecx,%edx
		jae    jump_3169c
		testb  $0x1,0x1c(%ebx)
		je     jump_31656
		incb   data_60af4
		jmp    jump_3169c
	jump_31656:
		testb  $0x2,0x1c(%ebx)
		je     jump_31674
		cmp    %eax,%ebx
		jb     jump_3166c
		cmp    %ecx,%ebx
		jae    jump_3166c
		incb   data_60afa
		jmp    jump_3169c
	jump_3166c:
		incb   data_60af8
		jmp    jump_3169c
	jump_31674:
		mov    0x1c(%ebx),%ah
		test   $0x10,%ah
		je     jump_31684
		incb   data_60af7
		jmp    jump_3169c
	jump_31684:
		test   $0x4,%ah
		je     jump_31691
		incb   data_60af5
		jmp    jump_3169c
	jump_31691:
		test   $0x8,%ah
		je     jump_3169c
		incb   data_60af6
	jump_3169c:
		mov    0x1c(%edx),%cl
		test   $0x1,%cl
		jne    jump_316ae
		test   $0x2,%cl
		jne    jump_316ae
		test   $0x10,%cl
		je     jump_316c4
	jump_316ae:
		testb  $0x4,0x1c(%ebx)
		je     jump_316c0
		testb  $0x4,0x1c(%edx)
		jne    jump_316c0
		orb    $0x2,0x1d(%edx)
		pop    %ebx
		ret
	jump_316c0:
		orb    $0x40,0x1c(%edx)
	jump_316c4:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
agent_check_arc_for_enemy:	/* 0x316d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebp
		cmpw   $0x0,0x1c(%esp)
		jle    jump_3176c
		mov    %ebp,%eax
		mov    $0x5c,%ebx
		sub    $level__things_base,%eax
		xor    %edx,%edx
		and    $0xffff,%eax
		div    %ebx
		xor    %esi,%esi
		mov    $level__People,%ebx
		and    $0xf8,%al
		mov    last_person,%edx
		mov    %eax,%edi
		cmp    %ebx,%edx
		jbe    jump_3176c
	jump_31712:
		cmp    %di,%si
		jb     jump_31728
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %di,%ax
		mov    %si,%dx
		add    $0x8,%eax
		cmp    %eax,%edx
		jl     jump_3175e
	jump_31728:
		cmpb   $0x1,0x18(%ebx)
		jne    jump_3175e
		cmpw   $0x0,0x44(%ebx)
		jne    jump_3173b
		testb  $0x2,0x1c(%ebx)
		je     jump_3175e
	jump_3173b:
		testw  $0x109,0xa(%ebx)
		jne    jump_3175e
		cmpw   $0x0,0x20(%ebx)
		jne    jump_3175e
		movswl 0x18(%esp),%eax
		push   %eax
		push   %ebx
		push   %ebp
		call   i_can_see_and_shoot_person
		add    $0xc,%esp
		cmp    %ebx,%eax
		je     jump_3176e
	jump_3175e:
		mov    last_person,%ecx
		add    $0x5c,%ebx
		inc    %esi
		cmp    %ecx,%ebx
		jb     jump_31712
	jump_3176c:
		xor    %eax,%eax
	jump_3176e:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_31774:
		.long   func_318fe
		.long   jump_31db3
		.long   func_318fe
		.long   func_318fe
		.long   func_318fe
		.long   func_318fe
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   func_318fe
		.long   jump_31db3
		.long   func_318f4
		.long   func_318f4
		.long   func_318fe
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   func_318fe
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3
		.long   func_318fe
		.long   func_318fe
		.long   jump_31db3
		.long   jump_31db3
		.long   jump_31db3


/*----------------------------------------------------------------*/
person_intel:	/* 0x31830 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		xor    %edx,%edx
		mov    data_55302,%ah
		mov    %edx,0x8(%esp)
		mov    %edx,0x4(%esp)
		test   %ah,%ah
		jbe    jump_31855
		mov    %ah,%dl
		dec    %dl
		mov    %dl,data_55302
	jump_31855:
		mov    data_60ae8,%eax
		xor    %ecx,%ecx
		mov    0x8(%esp),%esi
		mov    %cx,data_60674(,%eax,4)
		cmp    $0x8,%si
		jae    jump_31dd2
	jump_31872:
		mov    0x4(%esp),%eax
		cmp    $0x100,%ax
		jae    jump_31dd2
		cmpl   $0x0,data_60ae8
		je     jump_31dd2
		xor    %ebx,%ebx
		mov    level__PersonCount_UNSURE,%bx
		imul   $0x5c,%ebx,%ebx
		mov    %eax,%edx
		inc    %edx
		add    $level__People,%ebx
		mov    %edx,0x4(%esp)
		cmpb   $0x1,0x18(%ebx)
		jne    jump_31db7
		testb  $0x30,0x1c(%ebx)
		jne    jump_31db7
		cmpw   $0x0,0x24(%ebx)
		jne    jump_31db7
		testw  $0x109,0xa(%ebx)
		jne    jump_31db7
		cmpw   $0x0,0x20(%ebx)
		jne    jump_31db7
		mov    0x19(%ebx),%ch
		cmp    $0x2c,%ch
		ja     jump_31db3
		xor    %eax,%eax
		mov    %ch,%al
		jmp    *%cs:vtable_31774(,%eax,4)


/*----------------------------------------------------------------*/
func_318f4:
/*----------------------------------------------------------------*/
		testb  $0x2,0x1c(%ebx)
		je     jump_31db3


/*----------------------------------------------------------------*/
func_318fe:
/*----------------------------------------------------------------*/
		testb  $0x2,0x1c(%ebx)
		je     jump_31ae6
		testb  $0x10,0x1d(%ebx)
		jne    jump_31ae6
		push   $0x64
		push   %ebx
		call   get_person_intelligence
		add    $0x8,%esp
		test   %ax,%ax
		jle    jump_31db3
		mov    data_60674,%si
		mov    $data_60674,%ebp
		test   %si,%si
		je     jump_31db3
		mov    %ebx,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,(%esp)
	jump_3195f:
		xor    %edi,%edi
		mov    0x0(%ebp),%di
		mov    0x2(%ebp),%ah
		add    $level__things_base,%edi
		test   $0x80,%ah
		je     jump_31984
		mov    0x0(%ebp),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
		jmp    jump_31db3
	jump_31984:
		cmpw   $0x0,0x20(%edi)
		jne    jump_31ad1
		mov    0x6(%edi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%edi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		xor    %esi,%esi
		call   getrdist
		mov    %ax,%si
		add    $0x8,%esp
		cmp    $0xe00,%esi
		jae    jump_31ad1
		cmp    %ebx,%edi
		je     jump_31ad1
		testb  $0x11,0x2(%ebp)
		je     jump_31ad1
		mov    %edi,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmp    (%esp),%eax
		je     jump_31ad1
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_31a13
		cmpw   $0x0,0x14(%eax)
		jge    jump_31a26
	jump_31a13:
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		push   %ebx
		call   choose_best_weapon
		add    $0x8,%esp
		mov    %ax,0x44(%ebx)
	jump_31a26:
		cmpw   $0x0,0x44(%ebx)
		jne    jump_31a40
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		push   %ebx
		call   choose_best_weapon
		add    $0x8,%esp
		mov    %ax,0x44(%ebx)
	jump_31a40:
		cmpw   $0x0,0x44(%ebx)
		je     jump_31ad1
		xor    %eax,%eax
		mov    0x44(%ebx),%ax
		add    $level__things_base,%eax
		mov    0x19(%eax),%al
		and    $0xff,%eax
		add    %eax,%eax
		mov    data_5a6c2(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebx
		call   get_person_perception
		cwtl
		add    $0x8,%esp
		cmp    %esi,%eax
		jbe    jump_31ad1
		cwtl
		push   %eax
		push   %edi
		push   %ebx
		call   i_can_see_and_shoot_person
		add    $0xc,%esp
		cmp    %edi,%eax
		jne    jump_31abe
		movb   $0x0,0x46(%ebx)
		movw   $0x3,0x42(%ebx)
		mov    0x6(%ebx),%cx
		mov    0x6(%edi),%ax
		sub    %ecx,%eax
		cwtl
		mov    0x4(%ebx),%si
		push   %eax
		mov    0x4(%edi),%ax
		sub    %esi,%eax
		cwtl
		push   %eax
		call   get_angle
		movb   $0x1c,0x19(%ebx)
		add    $0x8,%esp
		mov    %al,0x1a(%ebx)
		jmp    jump_31ad1
	jump_31abe:
		cmpw   $0x0,0x3a(%ebx)
		jne    jump_31ad1
		mov    0x0(%ebp),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
	jump_31ad1:
		mov    0x4(%ebp),%si
		add    $0x4,%ebp
		test   %si,%si
		jne    jump_3195f
		jmp    jump_31db3
	jump_31ae6:
		mov    0x1c(%ebx),%dh
		test   $0x4,%dh
		je     jump_31c13
		push   %ebx
		mov    $data_60674,%edi
		call   adjust_bar_levels
		mov    data_60674,%cx
		add    $0x4,%esp
		test   %cx,%cx
		je     jump_31db3
	jump_31b10:
		movzwl (%edi),%ebp
		mov    0x2(%edi),%cl
		add    $level__things_base,%ebp
		test   $0x80,%cl
		je     jump_31b31
		mov    (%edi),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
		jmp    jump_31db3
	jump_31b31:
		mov    0x6(%ebp),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%ebp),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		xor    %esi,%esi
		call   getrdist
		mov    %ax,%si
		add    $0x8,%esp
		cmp    $0xa00,%esi
		jae    jump_31bfe
		cmp    %ebx,%ebp
		je     jump_31bfe
		mov    0x2(%edi),%ax
		and    $0x11,%al
		xor    %ah,%ah
		cmp    $0x11,%ax
		jne    jump_31bfe
		push   $0xa00
		push   %ebx
		call   get_person_perception
		cwtl
		add    $0x8,%esp
		cmp    %esi,%eax
		jb     jump_31bfe
		push   $0x0
		push   %ebx
		movb   $0x0,0x46(%ebx)
		call   choose_best_weapon
		add    $0x8,%esp
		mov    %ax,0x44(%ebx)
		test   %ax,%ax
		je     jump_31bf3
		push   $0x1e
		mov    (%edi),%ax
		push   %ebx
		mov    %ax,0x2a(%ebx)
		call   get_person_adrenlin
		add    $0x8,%esp
		mov    $0x1e,%edx
		push   $0x32
		sub    %eax,%edx
		push   %ebx
		mov    %dx,0x2c(%ebx)
		call   get_person_adrenlin
		mov    data_55302,%ch
		movb   $0x22,0x19(%ebx)
		add    $0x8,%esp
		mov    %ax,0x42(%ebx)
		test   %ch,%ch
		jne    jump_31bfe
		push   %ebx
		push   $0x1c
		call   play_distance_sample
		mov    $0xc8,%al
		add    $0x8,%esp
		mov    %al,data_55302
		jmp    jump_31bfe
	jump_31bf3:
		mov    (%edi),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
	jump_31bfe:
		mov    0x4(%edi),%si
		add    $0x4,%edi
		test   %si,%si
		jne    jump_31b10
		jmp    jump_31db3
	jump_31c13:
		test   $0x1,%dh
		je     jump_31cbc
		push   %ebx
		mov    $data_60674,%esi
		call   adjust_bar_levels
		mov    data_60674,%dx
		add    $0x4,%esp
		test   %dx,%dx
		je     jump_31db3
	jump_31c3a:
		xor    %edi,%edi
		mov    (%esi),%di
		mov    0x2(%esi),%dl
		add    $level__things_base,%edi
		test   $0x80,%dl
		je     jump_31c5d
		mov    (%esi),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
		jmp    jump_31db3
	jump_31c5d:
		mov    0x6(%edi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%edi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getrdist
		add    $0x8,%esp
		push   $0xa00
		push   %ebx
		movzwl %ax,%ebp
		call   get_person_perception
		cwtl
		add    $0x8,%esp
		cmp    %eax,%ebp
		jge    jump_31cab
		cmp    %ebx,%edi
		je     jump_31cab
		testb  $0x1,0x2(%esi)
		je     jump_31cab
		mov    (%esi),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
		jmp    jump_31db3
	jump_31cab:
		mov    0x4(%esi),%di
		add    $0x4,%esi
		test   %di,%di
		jne    jump_31c3a
		jmp    jump_31db3
	jump_31cbc:
		test   $0x8,%dh
		je     jump_31db3
		push   %ebx
		mov    $data_60674,%edi
		call   adjust_bar_levels
		mov    data_60674,%ax
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_31db3
	jump_31ce2:
		movzwl (%edi),%ebp
		mov    0x2(%edi),%al
		add    $level__things_base,%ebp
		test   $0x80,%al
		je     jump_31d02
		mov    (%edi),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
		jmp    jump_31db3
	jump_31d02:
		mov    0x6(%ebp),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%ebp),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		xor    %esi,%esi
		call   getrdist
		mov    %ax,%si
		add    $0x8,%esp
		cmp    $0xa00,%esi
		jae    jump_31da3
		cmp    %ebx,%ebp
		je     jump_31da3
		testb  $0x10,0x2(%edi)
		je     jump_31da3
		push   $0x800
		push   %ebx
		call   get_person_perception
		cwtl
		add    $0x8,%esp
		cmp    %esi,%eax
		jb     jump_31da3
		push   $0x0
		push   %ebx
		movb   $0x0,0x46(%ebx)
		call   choose_best_weapon
		add    $0x8,%esp
		mov    %ax,0x44(%ebx)
		test   %ax,%ax
		je     jump_31d98
		push   $0x1e
		mov    (%edi),%ax
		push   %ebx
		mov    %ax,0x2a(%ebx)
		call   get_person_adrenlin
		add    $0x8,%esp
		mov    $0x1e,%edx
		push   $0x32
		sub    %eax,%edx
		push   %ebx
		mov    %dx,0x2c(%ebx)
		call   get_person_adrenlin
		movb   $0x22,0x19(%ebx)
		add    $0x8,%esp
		mov    %ax,0x42(%ebx)
		jmp    jump_31da3
	jump_31d98:
		mov    (%edi),%ax
		movb   $0x1f,0x19(%ebx)
		mov    %ax,0x2a(%ebx)
	jump_31da3:
		mov    0x4(%edi),%ax
		add    $0x4,%edi
		test   %ax,%ax
		jne    jump_31ce2
	jump_31db3:
		incl   0x8(%esp)
	jump_31db7:
		mov    level__PersonCount_UNSURE,%ax
		inc    %eax
		xor    %ah,%ah
		mov    %ax,level__PersonCount_UNSURE
		cmpw   $0x8,0x8(%esp)
		jb     jump_31872
	jump_31dd2:
		xor    %esi,%esi
		mov    %esi,data_60ae8
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_danger:	/* 0x31df0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    data_60ae8,%esi
		mov    0xc(%esp),%ebx
		testb  $0x1,0xb(%ebx)
		jne    jump_31eb0
		cmp    $0x100,%esi
		jae    jump_31eb0
		testb  $0xe,0x1c(%ebx)
		je     jump_31eb0
		mov    0x20(%ebx),%dx
		test   %dx,%dx
		jne    jump_31eb0
		push   %ebx
		mov    %dx,data_60676(,%esi,4)
		call   fatal_weapon
		mov    data_60ae8,%esi
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_31e6c
		lea    0x0(,%esi,4),%eax
		mov    data_60676(%eax),%dh
		or     $0x1,%dh
		mov    %dh,data_60676(%eax)
		cmpb   $0x0,0x46(%ebx)
		je     jump_31e6c
		mov    %dh,%ch
		or     $0x8,%ch
		mov    %ch,data_60676(%eax)
	jump_31e6c:
		mov    0x1d(%ebx),%dl
		lea    0x0(,%esi,4),%eax
		test   $0x10,%dl
		je     jump_31e84
		orb    $0x20,data_60676(%eax)
		jmp    jump_31e91
	jump_31e84:
		testb  $0x2,0x1c(%ebx)
		je     jump_31e91
		orb    $0x10,data_60676(%eax)
	jump_31e91:
		lea    0x0(,%esi,4),%eax
		cmpw   $0x0,data_60676(%eax)
		je     jump_31eb0
		sub    $level__things_base,%ebx
		inc    %esi
		mov    %bx,data_60674(%eax)
	jump_31eb0:
		mov    %esi,data_60ae8
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_use_weapon:	/* 0x31ec0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x44(%ebx),%dx
		test   %dx,%dx
		je     jump_31f58
		xor    %esi,%esi
		mov    %dx,%si
		add    $level__things_base,%esi
		cmpw   $0x0,0x14(%esi)
		jl     jump_31f58
		mov    0x14(%esp),%edi
		mov    0x18(%esp),%eax
		mov    0x6(%ebx),%dx
		mov    0x4(%ebx),%si
		sub    %edx,%eax
		sub    %esi,%edi
		movswl %ax,%esi
		push   %esi
		movswl %di,%edi
		push   %edi
		call   arctan
		add    $0x8,%esp
		push   %esi
		push   %edi
		mov    %al,0x1a(%ebx)
		call   getrdist
		add    $0x8,%esp
		movswl %ax,%esi
		push   %esi
		mov    0x8(%ebx),%ax
		mov    0x20(%esp),%esi
		add    $0x80,%eax
		sub    %eax,%esi
		movswl %si,%esi
		push   %esi
		call   arctan
		movb   $0x2b,0x19(%ebx)
		add    $0x8,%esp
		mov    0xa(%ebx),%ah
		mov    %al,0x1b(%ebx)
		or     $0x8,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		call   weapon_time_in_use
		add    $0x4,%esp
		push   %ebx
		call   which_frame_person
		add    $0x4,%esp
	jump_31f58:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_STAND:	/* 0x31f60 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    0xa(%ebx),%ah
		movb   $0x0,0x54(%ebx)
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %ebx
		ret

vtable_31f8c:
		.long   func_3200b
		.long   func_32046
		.long   func_32066
		.long   func_32073
		.long   func_32088
		.long   func_3209d
		.long   func_320af
		.long   func_320cd
		.long   func_320f9
		.long   func_32105
		.long   func_320be


/*----------------------------------------------------------------*/
fn_S_PERSON_NEXT_COMMAND:	/* 0x31fc0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x26(%ebx),%dx
		movb   $0x0,0x54(%ebx)
		test   %dx,%dx
		je     jump_32127
		mov    data_60b4e,%ah
		test   %ah,%ah
		jne    jump_32127
		xor    %esi,%esi
		mov    %dx,%si
		add    $level__Commands,%esi
		mov    0x7(%esi),%al
		dec    %al
		cmp    $0xa,%al
		ja     jump_3210f
		and    $0xff,%eax
		jmp    *%cs:vtable_31f8c(,%eax,4)


/*----------------------------------------------------------------*/
func_3200b:
/*----------------------------------------------------------------*/
		movb   $0x3,0x19(%ebx)
		movb   $0x3,0x58(%ebx)
		xor    %eax,%eax
		mov    0x4(%esi),%al
		shl    $0x7,%eax
		add    $0x40,%eax
		mov    %ax,0x2e(%ebx)
		xor    %eax,%eax
		mov    0x5(%esi),%al
		shl    $0x7,%eax
		add    $0x40,%eax
		mov    %ax,0x30(%ebx)
		xor    %eax,%eax
		mov    0x6(%esi),%al
		shl    $0x7,%eax
		mov    %ax,0x32(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_32046:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x24(%ebx)
		jne    jump_3210f
		movb   $0x5,0x19(%ebx)
		movb   $0x6,0x58(%ebx)
		mov    0x2(%esi),%ax
		mov    %ax,0x2c(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_32066:
/*----------------------------------------------------------------*/
		movb   $0x7,0x19(%ebx)
		movb   $0x7,0x58(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_32073:
/*----------------------------------------------------------------*/
		movb   $0xc,0x19(%ebx)
		movb   $0xc,0x58(%ebx)
		mov    0x2(%esi),%ax
		mov    %ax,0x2c(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_32088:
/*----------------------------------------------------------------*/
		movb   $0xd,0x19(%ebx)
		movb   $0xd,0x58(%ebx)
		mov    0x2(%esi),%ax
		mov    %ax,0x2c(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_3209d:
/*----------------------------------------------------------------*/
		movb   $0x5,0x19(%ebx)
		movb   $0x5,0x58(%ebx)
		mov    0x2(%esi),%ax
		mov    %ax,0x2c(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_320af:
/*----------------------------------------------------------------*/
		movb   $0x0,0x19(%ebx)
		movb   $0x0,0x58(%ebx)
		call   level_failed
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_320be:
/*----------------------------------------------------------------*/
		movb   $0x0,0x19(%ebx)
		movb   $0x0,0x58(%ebx)
		call   level_complete
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_320cd:
/*----------------------------------------------------------------*/
		movb   $0x28,0x19(%ebx)
		movb   $0x28,0x58(%ebx)
		xor    %eax,%eax
		mov    0x4(%esi),%al
		sar    $1,%eax
		mov    %ax,0x2e(%ebx)
		xor    %eax,%eax
		mov    0x5(%esi),%al
		sar    $1,%eax
		mov    %ax,0x30(%ebx)
		xor    %eax,%eax
		mov    0x6(%esi),%al
		shl    $0x7,%eax
		mov    %ax,0x32(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_320f9:
/*----------------------------------------------------------------*/
		movw   $0x0,0x26(%ebx)
		movb   $0x1d,0x19(%ebx)
		jmp    jump_3210f


/*----------------------------------------------------------------*/
func_32105:
/*----------------------------------------------------------------*/
		movw   $0x32,0x2c(%ebx)
		movb   $0x2a,0x19(%ebx)
	jump_3210f:
		mov    (%esi),%di
		test   %di,%di
		jne    jump_32123
		mov    0x28(%ebx),%ax
		mov    %ax,0x26(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_32123:
		mov    %di,0x26(%ebx)
	jump_32127:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_GOTO_POINT:	/* 0x32130 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    0x24(%ebx),%dx
		test   %dx,%dx
		je     jump_3217b
		xor    %eax,%eax
		mov    %dx,%ax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_3217b
		push   %eax
		push   %ebx
		call   person_goto_in_vehicle
		add    $0x8,%esp
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		pop    %ebx
		ret
	jump_3217b:
		push   %ebx
		call   person_goto
		add    $0x4,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_321a0
		push   $0x1f4
		push   %ebx
		call   decide_on_hug_direction
		add    $0x8,%esp
	jump_321a0:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		push   %ebx
		mov    %al,0x19(%ebx)
		call   animate_model
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_GOTO_STRUCTURE:	/* 0x321c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		xor    %eax,%eax
		mov    0x2c(%ebx),%ax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		je     jump_321e9
		mov    0x19(%ebx),%al
		push   %ebx
		mov    %al,0x58(%ebx)
		call   new_state_person
		jmp    jump_322f1
	jump_321e9:
		cmpw   $0x0,0x20(%ebx)
		je     jump_3221c
		cmpb   $0x6,0x58(%ebx)
		jne    jump_3221c
		xor    %edx,%edx
		mov    0x20(%ebx),%dx
		add    $level__things_base,%edx
		cmpw   $0x0,0x24(%edx)
		jne    jump_3221c
		mov    0x19(%ebx),%al
		push   %ebx
		mov    %al,0x58(%ebx)
		call   new_state_person
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3221c:
		mov    0x4(%eax),%dx
		mov    %dx,0x2e(%ebx)
		mov    0x6(%eax),%dx
		mov    %dx,0x30(%ebx)
		mov    0x8(%eax),%dx
		mov    %dx,0x32(%ebx)
		cmpb   $0x2,0x18(%eax)
		jne    jump_32273
		mov    data_60b2a,%si
		mov    0x30(%ebx),%ax
		sub    %esi,%eax
		cwtl
		mov    data_60b28,%di
		push   %eax
		mov    0x2e(%ebx),%ax
		sub    %edi,%eax
		cwtl
		push   %eax
		call   getdist
		add    $0x8,%esp
		cmp    $0x80,%ax
		jae    jump_32273
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_32273:
		cmpw   $0x0,0x24(%ebx)
		je     jump_322ba
		xor    %eax,%eax
		mov    0x24(%ebx),%ax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_322ba
		push   %eax
		push   %ebx
		call   person_goto_in_vehicle
		add    $0x8,%esp
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_322ba:
		push   %ebx
		call   person_goto
		add    $0x4,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_322df
		push   $0x1f4
		push   %ebx
		call   decide_on_hug_direction
		add    $0x8,%esp
	jump_322df:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		push   %ebx
		mov    %al,0x19(%ebx)
		call   animate_model
	jump_322f1:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_MOVE_INTO_VEHICLE:	/* 0x32300 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		mov    0x20(%esi),%dx
		movb   $0x0,0x54(%esi)
		test   %dx,%dx
		je     jump_3232a
		xor    %ebx,%ebx
		mov    %dx,%bx
		add    $level__things_base,%ebx
		cmpw   $0x0,0x24(%ebx)
		je     jump_3246d
	jump_3232a:
		cmpw   $0x0,0x24(%esi)
		jne    jump_3246d
		xor    %edi,%edi
		mov    0x2c(%esi),%di
		add    $level__things_base,%edi
		mov    0x6(%esi),%dx
		mov    0x6(%edi),%ax
		sub    %edx,%eax
		cwtl
		mov    0x4(%esi),%cx
		push   %eax
		mov    0x4(%edi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getdist
		add    $0x8,%esp
		cmp    $0x80,%ax
		jae    jump_32381
		movswl 0x8(%esi),%eax
		movswl 0x8(%edi),%edx
		sub    %edx,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x80,%eax
		jle    jump_3238d
	jump_32381:
		movb   $0x5,0x19(%esi)
		movb   $0x6,0x58(%esi)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3238d:
		testb  $0x1,0xb(%edi)
		jne    jump_3246d
		movw   $0x0,0xc(%esi)
		mov    0x1c(%edi),%ax
		test   %ax,%ax
		je     jump_323e7
	jump_323a6:
		test   %ax,%ax
		je     jump_323bc
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		mov    0x22(%ebx),%ax
		jmp    jump_323a6
	jump_323bc:
		mov    %ebx,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x24(%esi)
		mov    %esi,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x22(%ebx)
		movw   $0x0,0x22(%esi)
		mov    0xa(%esi),%bh
		movb   $0x8,0x19(%esi)
		or     $0x8,%bh
		mov    %bh,0xa(%esi)
		jmp    jump_32434
	jump_323e7:
		mov    %edi,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x24(%esi)
		mov    %esi,%eax
		movw   $0x0,0x22(%esi)
		sub    $level__things_base,%eax
		mov    %ax,0x1c(%edi)
		movw   $0x0,0x22(%esi)
		mov    0x19(%edi),%dl
		cmp    $0x9,%dl
		je     jump_32416
		cmp    $0xa,%dl
		jne    jump_32425
	jump_32416:
		mov    0xa(%esi),%bl
		movb   $0x8,0x19(%esi)
		or     $0x8,%bl
		mov    %bl,0xa(%esi)
		jmp    jump_32434
	jump_32425:
		mov    0x28(%edi),%al
		push   %esi
		mov    %al,0x55(%esi)
		call   new_state_person
		add    $0x4,%esp
	jump_32434:
		mov    0xa(%esi),%cl
		movb   $0x0,0x54(%esi)
		or     $0x1,%cl
		mov    %cl,0xa(%esi)
		mov    0x4(%edi),%ax
		mov    %ax,0x34(%esi)
		mov    0x6(%edi),%ax
		mov    %ax,0x36(%esi)
		movswl 0x8(%esi),%eax
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		push   %esi
		call   move_mapwho
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3246d:
		mov    0x19(%esi),%al
		push   %esi
		mov    %al,0x58(%esi)
		call   new_state_person
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_MOVE_OUT_OF_VEHICLE:	/* 0x32480 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		mov    0x24(%ebx),%dx
		movb   $0x0,0x54(%ebx)
		test   %dx,%dx
		je     jump_32541
		xor    %eax,%eax
		mov    0x24(%ebx),%ax
		add    $level__things_base,%eax
		movw   $0x0,0xc(%ebx)
		cmpb   $0x2,0x18(%eax)
		jne    jump_324d5
		mov    0x22(%ebx),%si
		mov    %eax,%edx
		test   %si,%si
		je     jump_324cb
		xor    %eax,%eax
		mov    %si,%ax
		add    $level__things_base,%eax
		mov    0x24(%ebx),%cx
		mov    %cx,0x24(%eax)
	jump_324cb:
		mov    0x22(%ebx),%ax
		mov    %ax,0x1c(%edx)
		jmp    jump_324fa
	jump_324d5:
		mov    0x22(%ebx),%cx
		mov    %eax,%edx
		test   %cx,%cx
		je     jump_324f2
		xor    %eax,%eax
		mov    %cx,%ax
		add    $level__things_base,%eax
		mov    0x24(%ebx),%cx
		mov    %cx,0x24(%eax)
	jump_324f2:
		mov    0x22(%ebx),%ax
		mov    %ax,0x22(%edx)
	jump_324fa:
		mov    0x56(%ebx),%al
		mov    %al,0x55(%ebx)
		movswl 0x8(%ebx),%eax
		push   %eax
		mov    0x6(%ebx),%ax
		inc    %eax
		cwtl
		push   %eax
		mov    0x4(%ebx),%ax
		movw   $0x0,0x24(%ebx)
		inc    %eax
		movw   $0x0,0x22(%ebx)
		cwtl
		mov    0xa(%ebx),%dh
		push   %eax
		movb   $0x0,0x54(%ebx)
		and    $0xfe,%dh
		push   %ebx
		mov    %dh,0xa(%ebx)
		call   move_mapwho
		add    $0x10,%esp
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret
	jump_32541:
		mov    0x19(%ebx),%al
		push   %ebx
		mov    %al,0x58(%ebx)
		call   new_state_person
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_PASSENGER:	/* 0x32560 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%esi
		movb   $0x0,0x54(%esi)
		xor    %ebx,%ebx
		mov    0x24(%esi),%bx
		movw   $0x0,0xc(%esi)
		add    $level__things_base,%ebx
		mov    0x20(%esi),%dx
		mov    %ebx,%edi
		test   %dx,%dx
		je     jump_32616
		xor    %eax,%eax
		mov    %dx,%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x24(%eax)
		jne    jump_32616
		movswl 0x6(%esi),%edx
		mov    $0x6000,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%esi),%edx
		and    $0xff00,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ebp
		add    %eax,%ebp
		mov    data_55358,%eax
		lea    0x0(,%ebp,4),%ebp
		movswl 0x8(%esi),%edx
		add    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    0x0(%ebp),%eax
		cmpb   $0x2,(%eax)
		je     jump_32616
		movb   $0x7,0x19(%esi)
		mov    0xa(%esi),%dl
		movb   $0x1e,0x58(%esi)
		and    $0xf7,%dl
		mov    %dl,0xa(%esi)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_32616:
		cmpb   $0x2,0x18(%edi)
		jne    jump_326a0
		mov    0x19(%edi),%al
		cmp    $0x9,%al
		je     jump_3262f
		cmp    $0xa,%al
		jne    jump_326a0
	jump_3262f:
		mov    0x34(%esi),%ax
		cmp    0x4(%ebx),%ax
		jne    jump_32643
		mov    0x36(%esi),%ax
		cmp    0x6(%ebx),%ax
		je     jump_326a0
	jump_32643:
		mov    0x20(%ebx),%ax
		test   %ax,%ax
		je     jump_32660
	jump_3264c:
		xor    %ecx,%ecx
		mov    %ax,%cx
		add    $level__things_base,%ecx
		mov    0x20(%ecx),%ax
		test   %ax,%ax
		jne    jump_3264c
	jump_32660:
		cmpw   $0x0,0x1c(%ecx)
		je     jump_326a0
		xor    %eax,%eax
		mov    0x1c(%ecx),%ax
		add    $level__things_base,%eax
		mov    0x54(%eax),%dh
		test   %dh,%dh
		jne    jump_326a0
		mov    0x1a(%ecx),%bl
		test   %bl,%bl
		je     jump_32685
		cmp    $0x80,%bl
		jne    jump_3268b
	jump_32685:
		movb   $0x40,0x1a(%esi)
		jmp    jump_3268e
	jump_3268b:
		mov    %dh,0x1a(%esi)
	jump_3268e:
		push   %esi
		movb   $0x7,0x58(%esi)
		call   new_state_person
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_326a0:
		cmpb   $0x2,0x18(%edi)
		jne    jump_326d6
		mov    0x19(%edi),%ch
		cmp    $0x9,%ch
		je     jump_326d6
		cmp    $0xa,%ch
		je     jump_326d6
		mov    0x28(%ebx),%al
		mov    0xa(%esi),%ah
		mov    %al,0x55(%esi)
		and    $0xf7,%ah
		mov    0x19(%esi),%al
		mov    %ah,0xa(%esi)
		push   %esi
		mov    %al,0x58(%esi)
		call   new_state_person
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_326d6:
		mov    0x24(%esi),%ax
		test   %ax,%ax
		je     jump_326f9
	jump_326df:
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		cmpb   $0x2,0x18(%ebx)
		je     jump_326f9
		mov    0x24(%ebx),%ax
		test   %ax,%ax
		jne    jump_326df
	jump_326f9:
		movswl 0x8(%ebx),%eax
		push   %eax
		movswl 0x6(%ebx),%eax
		push   %eax
		movswl 0x4(%ebx),%eax
		push   %eax
		push   %esi
		call   move_mapwho
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_PICKUP_WEAPON:	/* 0x32720 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		xor    %ebx,%ebx
		mov    0x2c(%esi),%bx
		movb   $0x0,0x54(%esi)
		add    $level__things_base,%ebx
		mov    0x4(%esi),%ax
		cmp    0x4(%ebx),%ax
		jne    jump_32765
		mov    0x6(%esi),%ax
		cmp    0x6(%ebx),%ax
		jne    jump_32765
		movswl 0x8(%esi),%eax
		movswl 0x8(%ebx),%edx
		sub    %edx,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x80,%eax
		jle    jump_32771
	jump_32765:
		movb   $0x5,0x19(%esi)
		movb   $0x9,0x58(%esi)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_32771:
		testb  $0x1,0xa(%ebx)
		je     jump_3277d
		push   %esi
		jmp    jump_32832
	jump_3277d:
		push   %esi
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_3283a
		mov    0x14(%ebx),%di
		movw   $0x0,0x1c(%ebx)
		test   %di,%di
		jl     jump_327bb
		xor    %eax,%eax
		mov    0x19(%ebx),%al
		xor    %edx,%edx
		mov    weapon_max_ammo(,%eax,2),%cx
		mov    %cx,%dx
		movswl %di,%eax
		cmp    %edx,%eax
		jle    jump_327bb
		mov    %cx,0x14(%ebx)
	jump_327bb:
		cmpw   $0x0,0x3a(%esi)
		je     jump_32803
		xor    %eax,%eax
		mov    0x3a(%esi),%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x1c(%eax)
		je     jump_327e9
	jump_327d4:
		mov    0x1c(%eax),%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpw   $0x0,0x1c(%eax)
		jne    jump_327d4
	jump_327e9:
		mov    %eax,%edx
		sub    $level__things_base,%edx
		mov    %dx,0x1e(%ebx)
		mov    %ebx,%edx
		sub    $level__things_base,%edx
		mov    %dx,0x1c(%eax)
		jmp    jump_32819
	jump_32803:
		mov    %esi,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x1e(%ebx)
		mov    %ebx,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x3a(%esi)
	jump_32819:
		mov    0xa(%ebx),%dl
		mov    %esi,%eax
		or     $0x1,%dl
		sub    $level__things_base,%eax
		mov    %dl,0xa(%ebx)
		mov    %ax,0x20(%ebx)
		push   %esi
		movb   $0x20,0x1a(%esi)
	jump_32832:
		call   new_state_person
		add    $0x4,%esp
	jump_3283a:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_DROP_WEAPON:	/* 0x32840 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		push   %ebx
		movb   $0x0,0x54(%ebx)
		call   drop_weapon
		add    $0x4,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_3286d
		push   %ebx
		movb   $0x20,0x1a(%ebx)
		call   new_state_person
		add    $0x4,%esp
	jump_3286d:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_SELECT_WEAPON:	/* 0x32870 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x2c(%eax),%dx
		push   %eax
		mov    %dx,0x44(%eax)
		call   new_state_person
		add    $0x4,%esp
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WAIT_FOR_MODEL:	/* 0x32890 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		xor    %eax,%eax
		mov    0x2c(%ebx),%ax
		movb   $0x0,0x54(%ebx)
		add    $level__things_base,%eax
		movswl 0x4(%ebx),%ecx
		movswl 0x4(%eax),%edx
		sar    $0x8,%ecx
		sar    $0x8,%edx
		cmp    %edx,%ecx
		jne    jump_328d2
		movswl 0x6(%ebx),%edx
		movswl 0x6(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		jne    jump_328d2
		movb   $0xd,0x19(%ebx)
		movw   $0x14,0x2c(%ebx)
	jump_328d2:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WAIT_FOR_TIME:	/* 0x328e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		mov    0x2c(%ebx),%dx
		movb   $0x0,0x54(%ebx)
		test   %dx,%dx
		je     jump_328fa
		cmp    $0x1f4,%dx
		jbe    jump_3290f
	jump_328fa:
		movw   $0x0,0x44(%ebx)
		push   %ebx
		movb   $0x0,0x46(%ebx)
		call   new_state_person
		add    $0x4,%esp
		jmp    jump_32916
	jump_3290f:
		mov    %edx,%esi
		dec    %esi
		mov    %si,0x2c(%ebx)
	jump_32916:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_HUG_RIGHT:	/* 0x32930 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		movswl 0x2e(%ebx),%edx
		movswl data_60b28,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		jne    jump_32964
		movswl 0x30(%ebx),%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		je     jump_32a8b
	jump_32964:
		mov    0x20(%ebx),%dx
		test   %dx,%dx
		je     jump_32a0a
		xor    %esi,%esi
		mov    %dx,%si
		add    $level__things_base,%esi
		movswl 0x2e(%ebx),%eax
		movswl 0x2e(%esi),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %eax,%edx
		jne    jump_329a0
		movswl 0x30(%esi),%edx
		movswl 0x30(%ebx),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		je     jump_329a9
	jump_329a0:
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_329a9:
		mov    0x49(%esi),%al
		mov    %al,0x49(%ebx)
		mov    0x4d(%esi),%al
		mov    %al,0x4d(%ebx)
		mov    0x51(%esi),%al
		push   %esi
		mov    %al,0x51(%ebx)
		call   fatal_weapon
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_329d4
		push   $0x0
		push   %ebx
		call   choose_best_weapon
		add    $0x8,%esp
	jump_329d4:
		mov    %ax,0x44(%ebx)
		testb  $0x1,0xb(%esi)
		je     jump_329f7
		movw   $0x0,0x20(%ebx)
		mov    0xa(%ebx),%dl
		movb   $0x1e,0x58(%ebx)
		and    $0xf7,%dl
		push   %ebx
		mov    %dl,0xa(%ebx)
		jmp    jump_32a8c
	jump_329f7:
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		add    $0x8,%esp
		mov    %al,0x54(%ebx)
	jump_32a0a:
		push   $0xffffffc0
		push   %ebx
		call   do_a_hug
		add    $0x8,%esp
		test   %ax,%ax
		je     jump_32a8b
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		mov    data_60b2c,%ax
		add    data_5e128,%ax
		add    $0x8,%esp
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret
	jump_32a8b:
		push   %ebx
	jump_32a8c:
		call   new_state_person
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_HUG_LEFT:	/* 0x32aa0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		movswl 0x2e(%ebx),%edx
		movswl data_60b28,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		jne    jump_32ad4
		movswl 0x30(%ebx),%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		je     jump_32bfb
	jump_32ad4:
		mov    0x20(%ebx),%dx
		test   %dx,%dx
		je     jump_32b7a
		xor    %esi,%esi
		mov    %dx,%si
		add    $level__things_base,%esi
		movswl 0x2e(%ebx),%eax
		movswl 0x2e(%esi),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %eax,%edx
		jne    jump_32b10
		movswl 0x30(%esi),%edx
		movswl 0x30(%ebx),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		je     jump_32b19
	jump_32b10:
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_32b19:
		mov    0x49(%esi),%al
		mov    %al,0x49(%ebx)
		mov    0x4d(%esi),%al
		mov    %al,0x4d(%ebx)
		mov    0x51(%esi),%al
		push   %esi
		mov    %al,0x51(%ebx)
		call   fatal_weapon
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_32b44
		push   $0x0
		push   %ebx
		call   choose_best_weapon
		add    $0x8,%esp
	jump_32b44:
		mov    %ax,0x44(%ebx)
		testb  $0x1,0xb(%esi)
		je     jump_32b67
		movw   $0x0,0x20(%ebx)
		mov    0xa(%ebx),%dl
		movb   $0x1e,0x58(%ebx)
		and    $0xf7,%dl
		push   %ebx
		mov    %dl,0xa(%ebx)
		jmp    jump_32bfc
	jump_32b67:
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		add    $0x8,%esp
		mov    %al,0x54(%ebx)
	jump_32b7a:
		push   $0x40
		push   %ebx
		call   do_a_hug
		add    $0x8,%esp
		test   %ax,%ax
		je     jump_32bfb
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		mov    data_60b2c,%ax
		add    data_5e128,%ax
		add    $0x8,%esp
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret
	jump_32bfb:
		push   %ebx
	jump_32bfc:
		call   new_state_person
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_ON_FIRE:	/* 0x32c10 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		orb    $0x2,0xb(%ebx)
		mov    0x42(%ebx),%ax
		mov    %eax,%edx
		dec    %edx
		mov    %dx,0x42(%ebx)
		test   %ax,%ax
		jge    jump_32c4f
		cmpw   $0x0,0x14(%ebx)
		jge    jump_32c36
		movb   $0x19,0x19(%ebx)
		pop    %ebx
		ret
	jump_32c36:
		mov    0xa(%ebx),%cx
		and    $0xfffffdf7,%ecx
		push   %ebx
		mov    %cx,0xa(%ebx)
		call   new_state_person
		add    $0x4,%esp
		pop    %ebx
		ret
	jump_32c4f:
		push   $0xf
		call   random
		sub    $0x7,%al
		mov    0x1a(%ebx),%dl
		add    %al,%dl
		xor    %eax,%eax
		mov    0x49(%ebx),%al
		add    $0x4,%esp
		add    $0x6,%eax
		mov    %dl,0x1a(%ebx)
		cmp    $0xff,%eax
		jle    jump_32c77
		mov    $0xff,%eax
	jump_32c77:
		mov    %al,0x49(%ebx)
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		pop    %ebx
		mov    %eax,%eax
		ret

vtable_32cc4:
		.long   func_32d1b
		.long   func_32d37
		.long   func_32d5d
		.long   func_32d83


/*----------------------------------------------------------------*/
fn_S_PERSON_HIT_BY_FIRE:	/* 0x32ce0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edi
		mov    0xc(%esp),%eax
		mov    0x1d(%eax),%bl
		xor    %dx,%dx
		test   $0x10,%bl
		jne    jump_32d03
		mov    0x3c(%eax),%dx
		and    $0x60,%dl
		xor    %dh,%dh
		and    $0xffff,%edx
		sar    $0x5,%edx
	jump_32d03:
		cmp    $0x3,%dx
		ja     jump_32daf
		and    $0xffff,%edx
		jmp    *%cs:vtable_32cc4(,%edx,4)


/*----------------------------------------------------------------*/
func_32d1b:
/*----------------------------------------------------------------*/
		movw   $0xffff,0x14(%eax)
		movw   $0x28,0x42(%eax)
		push   %eax
		movb   $0x17,0x19(%eax)
		call   fn_S_PERSON_ON_FIRE
		add    $0x4,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_32d37:
/*----------------------------------------------------------------*/
		mov    0x14(%eax),%di
		sub    $0x8,%edi
		mov    %di,0x14(%eax)
		test   %di,%di
		jge    jump_32da9
		movw   $0x28,0x42(%eax)
		push   %eax
		movb   $0x17,0x19(%eax)
		call   fn_S_PERSON_ON_FIRE
		add    $0x4,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_32d5d:
/*----------------------------------------------------------------*/
		mov    0x14(%eax),%cx
		sub    $0x4,%ecx
		mov    %cx,0x14(%eax)
		test   %cx,%cx
		jge    jump_32da9
		movw   $0x28,0x42(%eax)
		push   %eax
		movb   $0x17,0x19(%eax)
		call   fn_S_PERSON_ON_FIRE
		add    $0x4,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_32d83:
/*----------------------------------------------------------------*/
		mov    0x14(%eax),%dx
		sub    $0x2,%edx
		mov    %dx,0x14(%eax)
		test   %dx,%dx
		jge    jump_32da9
		movw   $0x28,0x42(%eax)
		push   %eax
		movb   $0x17,0x19(%eax)
		call   fn_S_PERSON_ON_FIRE
		add    $0x4,%esp
		pop    %edi
		pop    %ebx
		ret
	jump_32da9:
		movw   $0x2,0x42(%eax)
	jump_32daf:
		push   %eax
		movb   $0x17,0x19(%eax)
		call   fn_S_PERSON_ON_FIRE
		add    $0x4,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_FLY_BACK:	/* 0x32dc0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		mov    0xb(%ebx),%ah
		or     $0x2,%ah
		mov    0x1a(%ebx),%al
		mov    %ah,0xb(%ebx)
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   random
		xor    %edx,%edx
		mov    %ax,%dx
		add    $0x2,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		xor    %edx,%edx
		mov    0x54(%ebx),%dl
		add    %edx,%eax
		add    $0x4,%esp
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		xor    %edx,%edx
		mov    0x54(%ebx),%dl
		add    $0x2,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x8,%esp
		push   %ebx
		mov    %al,0x54(%ebx)
		call   person_colide
		movswl data_5e128,%eax
		add    $0x4,%esp
		cmp    $0xffffffc0,%eax
		jge    jump_32e40
		decw   0x14(%ebx)
	jump_32e40:
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_32e85
		cmpw   $0x0,0x14(%ebx)
		jge    jump_32e5b
		movb   $0x18,0x19(%ebx)
		jmp    jump_32e85
	jump_32e5b:
		mov    0x1a(%ebx),%dl
		mov    0xa(%ebx),%si
		movb   $0x16,0x19(%ebx)
		add    $0x80,%dl
		and    $0xfffffdf7,%esi
		mov    %dl,0x1a(%ebx)
		mov    %si,0xa(%ebx)
		mov    0x1a(%ebx),%al
		push   %ebx
		mov    %al,0x5b(%ebx)
		call   new_state_person
		add    $0x4,%esp
	jump_32e85:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_HIT_BY_EXPLOSION:	/* 0x32ea0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		movb   $0x16,0x19(%eax)
		mov    0x5b(%eax),%bl
		movb   $0x8c,0x54(%eax)
		mov    %bl,0x1a(%eax)
		mov    0x1d(%eax),%bl
		xor    %dx,%dx
		test   $0x10,%bl
		jne    jump_32ed0
		mov    0x3c(%eax),%dx
		and    $0x60,%dl
		xor    %dh,%dh
		and    $0xffff,%edx
		sar    $0x5,%edx
	jump_32ed0:
		cmp    $0x2,%dx
		jb     jump_32ee0
		jbe    jump_32ee8
		cmp    $0x3,%dx
		je     jump_32eef
		jmp    jump_32ef4
	jump_32ee0:
		movw   $0xffff,0x14(%eax)
		jmp    jump_32ef4
	jump_32ee8:
		subw   $0x8,0x14(%eax)
		jmp    jump_32ef4
	jump_32eef:
		subw   $0x4,0x14(%eax)
	jump_32ef4:
		push   %eax
		call   fn_S_PERSON_FLY_BACK
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_HIT_BY_BULLET:	/* 0x32f00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edi
		mov    0xc(%esp),%ebx
		cmpw   $0x0,0x14(%ebx)
		jge    jump_32f13
		orw    $0x108,0xa(%ebx)
	jump_32f13:
		movb   $0x0,0x46(%ebx)
		movb   $0x54,0x54(%ebx)
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		movb   $0x16,0x19(%ebx)
		add    $level__things_base,%eax
		mov    0x6(%ebx),%dx
		sub    0x6(%eax),%dx
		movswl %dx,%edx
		mov    0x4(%eax),%di
		push   %edx
		mov    0x4(%ebx),%dx
		sub    %edi,%edx
		movswl %dx,%eax
		push   %eax
		call   get_angle
		add    $0x8,%esp
		push   %ebx
		mov    %al,0x1a(%ebx)
		call   fn_S_PERSON_FLY_BACK
		add    $0x4,%esp
		pop    %edi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_HIT_BY_VEHICLE:	/* 0x32f60 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		movb   $0x16,0x19(%eax)
		mov    0x5b(%eax),%bl
		movb   $0xa0,0x54(%eax)
		mov    %bl,0x1a(%eax)
		mov    0x1d(%eax),%bl
		xor    %dx,%dx
		test   $0x10,%bl
		jne    jump_32f90
		mov    0x3c(%eax),%dx
		and    $0x60,%dl
		xor    %dh,%dh
		and    $0xffff,%edx
		sar    $0x5,%edx
	jump_32f90:
		cmp    $0x2,%dx
		jb     jump_32fa0
		jbe    jump_32fa8
		cmp    $0x3,%dx
		je     jump_32faf
		jmp    jump_32fb4
	jump_32fa0:
		movw   $0xffff,0x14(%eax)
		jmp    jump_32fb4
	jump_32fa8:
		subw   $0x8,0x14(%eax)
		jmp    jump_32fb4
	jump_32faf:
		subw   $0x4,0x14(%eax)
	jump_32fb4:
		push   %eax
		call   fn_S_PERSON_FLY_BACK
		add    $0x4,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_HIT_BY_LASER:	/* 0x32fc0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		push   %ebx
		call   animate_model
		xor    %esi,%esi
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_3304a
		testb  $0x10,0x1d(%ebx)
		jne    jump_32ff3
		mov    0x3c(%ebx),%ax
		and    $0x60,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		sar    $0x5,%eax
		mov    %eax,%esi
	jump_32ff3:
		cmp    $0x2,%si
		jb     jump_33003
		jbe    jump_3300b
		cmp    $0x3,%si
		je     jump_33012
		jmp    jump_33017
	jump_33003:
		movw   $0xffff,0x14(%ebx)
		jmp    jump_3301e
	jump_3300b:
		subw   $0x8,0x14(%ebx)
		jmp    jump_33017
	jump_33012:
		subw   $0x4,0x14(%ebx)
	jump_33017:
		cmpw   $0x0,0x14(%ebx)
		jge    jump_33033
	jump_3301e:
		mov    0xa(%ebx),%ax
		movb   $0x19,0x19(%ebx)
		or     $0x109,%eax
		mov    %ax,0xa(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_33033:
		mov    0xa(%ebx),%di
		and    $0xfffffdf7,%edi
		push   %ebx
		mov    %di,0xa(%ebx)
		call   new_state_person
		add    $0x4,%esp
	jump_3304a:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_DYING:	/* 0x33050 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    0xa(%ebx),%ah
		movb   $0x0,0x54(%ebx)
		or     $0x8,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		call   drop_all_weapons
		add    $0x4,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33086
		push   %ebx
		movb   $0x1a,0x19(%ebx)
		call   who_shot_me
		add    $0x4,%esp
	jump_33086:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_DYING_ON_FIRE:	/* 0x33090 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    0xa(%ebx),%ah
		or     $0x8,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		call   kill_all_weapons
		add    $0x4,%esp
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_330c8
		movb   $0x1b,0x19(%ebx)
		push   %ebx
		movw   $0x64,0x42(%ebx)
		call   who_shot_me
		add    $0x4,%esp
	jump_330c8:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_DEAD:	/* 0x330d0 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0xa(%eax),%dx
		movb   $0x0,0x54(%eax)
		or     $0x108,%edx
		push   %eax
		mov    %dx,0xa(%eax)
		call   animate_model
		add    $0x4,%esp
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_DEAD_ON_FIRE:	/* 0x330f0 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x42(%eax),%dx
		movb   $0x0,0x54(%eax)
		dec    %dx
		mov    %dx,0x42(%eax)
		jne    jump_33108
		movb   $0x23,0x19(%eax)
	jump_33108:
		mov    0xa(%eax),%cx
		or     $0x108,%ecx
		push   %eax
		mov    %cx,0xa(%eax)
		call   animate_model
		add    $0x4,%esp
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_GUARD_AREA:	/* 0x33120 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		push   $0x64
		push   %ebx
		movb   $0x0,0x54(%ebx)
		call   get_person_intelligence
		add    $0x8,%esp
		mov    %eax,%edi
		mov    0x44(%ebx),%dx
		movb   $0x0,0x46(%ebx)
		test   %dx,%dx
		je     jump_331f1
		xor    %esi,%esi
		mov    %dx,%si
		add    $level__things_base,%esi
		cmpw   $0x0,0x14(%esi)
		jge    jump_3317e
		push   $0x0
		push   %ebx
		call   choose_best_weapon
		mov    0x44(%ebx),%dx
		add    $0x8,%esp
		cmp    %dx,%ax
		jne    jump_3317a
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
		jmp    jump_3317e
	jump_3317a:
		mov    %ax,0x44(%ebx)
	jump_3317e:
		xor    %edx,%edx
		mov    0x19(%esi),%dl
		add    %edx,%edx
		mov    data_5a6c2(%edx),%dx
		and    $0xffff,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		and    $0xffff,%eax
		push   %eax
		push   %ebx
		call   get_person_perception
		shl    $0x8,%eax
		add    $0x8,%esp
		mov    %ax,data_5e12e
		movswl %di,%eax
		push   %eax
		movswl data_5e12e,%eax
		push   %eax
		push   %ebx
		call   agent_check_arc_for_enemy
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_331f1
		mov    0x8(%eax),%dx
		add    $0x80,%edx
		movswl %dx,%edx
		push   %edx
		movswl 0x6(%eax),%edx
		push   %edx
		movswl 0x4(%eax),%eax
		push   %eax
		push   %ebx
		call   person_use_weapon
		add    $0x10,%esp
	jump_331f1:
		push   %ebx
		call   animate_model
		mov    0x42(%ebx),%cx
		add    $0x4,%esp
		test   %cx,%cx
		jne    jump_3320c
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_3320c:
		mov    0x42(%ebx),%si
		dec    %esi
		push   %ebx
		mov    %si,0x42(%ebx)
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WANDER:	/* 0x33230 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		movb   $0x10,0x54(%ebx)
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    0x1a(%ebx),%cl
		mov    0x54(%ebx),%al
		movswl data_5ab60(,%ecx,2),%esi
		imul   %eax,%esi
		movswl data_60b28,%edx
		sar    $0x8,%esi
		add    %esi,%edx
		mov    %dx,data_60b28
		movswl data_5ad60(,%ecx,2),%edx
		imul   %edx,%eax
		movswl data_60b2a,%edx
		sar    $0x8,%eax
		add    %eax,%edx
		push   %ebx
		mov    %dx,data_60b2a
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33299
		push   $0xa
		push   %ebx
		call   quick_decide_on_hug_direction
		add    $0x8,%esp
	jump_33299:
		movswl 0x6(%ebx),%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x4(%ebx),%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %ecx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%ecx
		movswl 0x8(%ebx),%edx
		dec    %edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		mov    (%eax),%al
		cmp    $0x80,%al
		jne    jump_33316
		mov    0x1a(%ebx),%dh
		cmp    %al,%dh
		jb     jump_33335
		xor    %eax,%eax
		mov    %dh,%al
		cmp    $0x100,%eax
		jg     jump_33335
		movb   $0xc0,0x1a(%ebx)
		jmp    jump_3332b
	jump_33316:
		cmp    $0x81,%al
		jne    jump_33335
		mov    0x1a(%ebx),%ah
		cmp    $0x40,%ah
		jb     jump_33335
		cmp    $0xc0,%ah
		ja     jump_33335
		movb   $0x80,0x1a(%ebx)
	jump_3332b:
		movb   $0x29,0x19(%ebx)
		movw   $0x64,0x42(%ebx)
	jump_33335:
		push   $0x3
		call   random
		add    $0x4,%esp
		dec    %al
		mov    0x1a(%ebx),%cl
		mov    0xb(%ebx),%ch
		add    %al,%cl
		or     $0x10,%ch
		mov    %cl,0x1a(%ebx)
		push   %ebx
		mov    %ch,0xb(%ebx)
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_PERSUADED:	/* 0x33370 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x20(%ebx),%dx
		test   %dx,%dx
		je     jump_3365a
		xor    %esi,%esi
		mov    %dx,%si
		add    $level__things_base,%esi
		testb  $0x1,0xb(%esi)
		je     jump_333b3
		movw   $0x0,0x20(%ebx)
		mov    0xa(%ebx),%dl
		movb   $0x1e,0x58(%ebx)
		and    $0xf7,%dl
		push   %ebx
		mov    %dl,0xa(%ebx)
		call   new_state_person
		jmp    jump_33657
	jump_333b3:
		mov    0x24(%esi),%dx
		test   %dx,%dx
		je     jump_333e9
	jump_333bc:
		test   %dx,%dx
		je     jump_333e9
		xor    %eax,%eax
		mov    %dx,%ax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_333e1
		movb   $0x5,0x19(%ebx)
		movb   $0x6,0x58(%ebx)
		mov    %dx,0x2c(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_333e1:
		mov    %eax,%esi
		mov    0x24(%eax),%dx
		jmp    jump_333bc
	jump_333e9:
		mov    0x3a(%ebx),%cx
		test   %cx,%cx
		jne    jump_33466
		mov    0x6(%ebx),%ax
		and    $0x7f,%ah
		xor    %al,%al
		movswl %ax,%edx
		movswl 0x4(%ebx),%eax
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_33484
	jump_33421:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x4,0x18(%eax)
		jne    jump_3345c
		cmpw   $0x0,0x14(%eax)
		jle    jump_3345c
		cmpw   $0x0,0x1e(%eax)
		jne    jump_3345c
		mov    0x8(%eax),%dx
		cmp    0x8(%ebx),%dx
		jne    jump_3345c
		movb   $0x5,0x19(%ebx)
		sub    $level__things_base,%eax
		movb   $0x9,0x58(%ebx)
		mov    %ax,0x2c(%ebx)
		jmp    jump_33484
	jump_3345c:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_33421
		jmp    jump_33484
	jump_33466:
		xor    %eax,%eax
		mov    %cx,%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x14(%eax)
		jge    jump_33484
		push   %ebx
		mov    %cx,0x44(%ebx)
		call   drop_weapon
		add    $0x4,%esp
	jump_33484:
		mov    0x20(%esi),%ax
		test   %ax,%ax
		je     jump_33495
		mov    %ax,0x20(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_33495:
		push   $0xc0
		push   %esi
		call   get_person_perception
		movswl %ax,%edi
		add    $0x40,%edi
		add    $0x8,%esp
		cmp    $0x10,%edi
		jge    jump_334b3
		mov    $0x10,%edi
	jump_334b3:
		mov    0x49(%esi),%al
		mov    %al,0x49(%ebx)
		mov    0x4d(%esi),%al
		mov    %al,0x4d(%ebx)
		mov    0x51(%esi),%al
		push   %esi
		mov    %al,0x51(%ebx)
		call   fatal_weapon
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_334de
		push   $0x0
		push   %ebx
		call   choose_best_weapon
		add    $0x8,%esp
	jump_334de:
		mov    %ax,0x44(%ebx)
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		mov    0x2e(%esi),%ax
		mov    %ax,0x2e(%ebx)
		add    $0x8,%esp
		mov    0x30(%esi),%ax
		push   $0x80
		mov    %ax,0x30(%ebx)
		movswl %di,%eax
		push   %eax
		push   %eax
		movswl data_60b2c,%eax
		movzbl 0x1a(%ebx),%esi
		push   %eax
		xor    %eax,%eax
		movswl data_5ad60(,%esi,2),%edx
		mov    0x54(%ebx),%al
		imul   %eax,%edx
		movswl data_60b2a,%edi
		sar    $0x8,%edx
		add    %edi,%edx
		movswl %dx,%edx
		push   %edx
		movswl data_5ab60(,%esi,2),%edx
		mov    %eax,%esi
		imul   %edx,%esi
		movswl data_60b28,%eax
		sar    $0x8,%esi
		add    %esi,%eax
		cwtl
		push   %eax
		push   %ebx
		call   bump_person
		add    $0x1c,%esp
		test   %eax,%eax
		je     jump_3358c
		mov    0x6(%eax),%dx
		mov    0x6(%ebx),%si
		mov    0x4(%ebx),%di
		sub    %esi,%edx
		mov    0x4(%eax),%ax
		movswl %dx,%esi
		sub    %edi,%eax
		push   %esi
		cwtl
		push   %eax
		call   get_angle
		mov    0x1a(%ebx),%ah
		add    $0x8,%esp
		sub    %ah,%al
		jmp    jump_335b1
	jump_3358c:
		mov    0x30(%ebx),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x2e(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   get_angle
		mov    0x1a(%ebx),%ah
		sub    %al,%ah
		add    $0x8,%esp
		mov    %ah,%al
	jump_335b1:
		test   %al,%al
		jge    jump_335c8
		movsbl %al,%edx
		cmp    $0xfffffff0,%edx
		jl     jump_335c2
		sub    %al,0x1a(%ebx)
		jmp    jump_335d7
	jump_335c2:
		addb   $0x10,0x1a(%ebx)
		jmp    jump_335d7
	jump_335c8:
		je     jump_335d7
		cmp    $0x10,%al
		jg     jump_335d3
		add    %al,0x1a(%ebx)
		jmp    jump_335d7
	jump_335d3:
		subb   $0x10,0x1a(%ebx)
	jump_335d7:
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33645
		mov    0x30(%ebx),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x2e(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   get_angle
		mov    %al,%dl
		sub    0x1a(%ebx),%dl
		movsbl %dl,%eax
		add    $0x8,%esp
		cmp    $0xfffffff0,%eax
		jle    jump_3363a
		cmp    $0x10,%dl
		jge    jump_3363a
		push   $0x1f4
		jmp    jump_3363c
	jump_3363a:
		push   $0x14
	jump_3363c:
		push   %ebx
		call   decide_on_hug_direction
		add    $0x8,%esp
	jump_33645:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		push   %ebx
		mov    %al,0x19(%ebx)
		call   animate_model
	jump_33657:
		add    $0x4,%esp
	jump_3365a:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_RUNAWAY:	/* 0x33660 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		xor    %esi,%esi
		mov    0x2a(%ebx),%si
		add    $level__things_base,%esi
		cmpb   $0x0,0x18(%esi)
		je     jump_33731
		mov    0x6(%esi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%esi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   arctan
		add    $0x80,%al
		mov    %al,0x1a(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x8,%esp
		and    $0xffff,%eax
		movb   $0x28,0x54(%ebx)
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_336da
		push   $0x32
		push   %ebx
		call   quick_decide_on_hug_direction
		add    $0x8,%esp
	jump_336da:
		mov    0x6(%esi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%esi),%si
		push   %eax
		sub    0x4(%ebx),%si
		movswl %si,%eax
		push   %eax
		call   getrdist
		add    $0x8,%esp
		push   $0xa00
		xor    %esi,%esi
		push   %ebx
		mov    %ax,%si
		call   get_person_perception
		cwtl
		add    $0x8,%esp
		cmp    %eax,%esi
		jle    jump_33719
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_33719:
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret
	jump_33731:
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_GIVE_WARNING:	/* 0x33740 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		movb   $0x0,0x54(%ebx)
		xor    %eax,%eax
		mov    0x2a(%ebx),%ax
		mov    0x2c(%ebx),%dx
		add    $level__things_base,%eax
		test   %dx,%dx
		je     jump_33766
		cmpw   $0x0,0x44(%eax)
		je     jump_3376e
	jump_33766:
		movb   $0x20,0x19(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3376e:
		mov    0x6(%eax),%dx
		mov    0x6(%ebx),%si
		mov    0x4(%ebx),%di
		sub    %esi,%edx
		mov    0x4(%eax),%ax
		movswl %dx,%edx
		sub    %edi,%eax
		push   %edx
		cwtl
		push   %eax
		call   get_angle
		mov    %al,0x1a(%ebx)
		mov    0x2c(%ebx),%ax
		add    $0x8,%esp
		dec    %eax
		push   %ebx
		mov    %ax,0x2c(%ebx)
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_FOLLOW_AND_ATTACK:	/* 0x337b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebx
		xor    %esi,%esi
		mov    0x2a(%ebx),%si
		add    $level__things_base,%esi
		mov    0x6(%ebx),%dx
		mov    0x6(%esi),%ax
		sub    %edx,%eax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%esi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   get_angle
		mov    %al,0x1a(%ebx)
		add    $0x8,%esp
		mov    0x3a(%ebx),%ax
		movb   $0x0,0x46(%ebx)
		test   %ax,%ax
		je     jump_33814
		testb  $0x1,0xb(%esi)
		jne    jump_33814
		movswl 0x8(%esi),%eax
		movswl 0x8(%ebx),%ebp
		sub    %ebp,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x100,%eax
		jl     jump_3381a
	jump_33814:
		movw   $0xffff,0x42(%ebx)
	jump_3381a:
		push   $0x0
		push   %ebx
		call   choose_best_weapon
		movzwl %ax,%ebp
		add    $level__things_base,%ebp
		mov    %ax,0x44(%ebx)
		mov    0x14(%ebp),%dx
		add    $0x8,%esp
		test   %dx,%dx
		jge    jump_33849
		movw   $0x0,0x44(%ebx)
		movb   $0x0,0x46(%ebx)
		movb   $0x1f,0x19(%ebx)
	jump_33849:
		mov    0x24(%esi),%dx
		test   %dx,%dx
		je     jump_339ad
	jump_33856:
		test   %dx,%dx
		je     jump_3387a
		xor    %eax,%eax
		mov    %dx,%ax
		add    $level__things_base,%eax
		mov    0x18(%eax),%cl
		cmp    $0x1,%cl
		jne    jump_33873
		mov    0x24(%eax),%dx
		jmp    jump_33856
	jump_33873:
		cmp    $0x2,%cl
		jne    jump_33856
		mov    %eax,%edi
	jump_3387a:
		mov    0x6(%edi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%cx
		push   %eax
		mov    0x4(%edi),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getrdist
		mov    %eax,%esi
		add    $0x8,%esp
		cmp    $0x80,%ax
		jae    jump_338e5
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x80,%ax
		xor    %ah,%ah
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		jmp    jump_33aef
	jump_338e5:
		xor    %eax,%eax
		mov    0x19(%ebp),%al
		add    %eax,%eax
		mov    data_5a6c2(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebx
		call   get_person_perception
		add    $0x8,%esp
		cwtl
		push   %eax
		push   %edi
		push   %ebx
		call   i_can_see_and_shoot_vehicle
		add    $0xc,%esp
		cmp    %edi,%eax
		jne    jump_3394f
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		push   %ebx
		call   person_use_weapon
		add    $0x10,%esp
		push   $0x32
		push   %ebx
		call   get_person_adrenlin
		mov    $0x32,%edx
		movb   $0xd,0x58(%ebx)
		sub    %eax,%edx
		add    $0x8,%esp
		mov    %dx,0x2c(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3394f:
		cmp    $0x300,%si
		jb     jump_33af8
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33aef
		push   $0xa
		push   %ebx
		call   quick_decide_on_hug_direction
		add    $0x8,%esp
		jmp    jump_33aef
	jump_339ad:
		mov    0x6(%esi),%ax
		sub    0x6(%ebx),%ax
		cwtl
		mov    0x4(%ebx),%di
		push   %eax
		mov    0x4(%esi),%ax
		sub    %edi,%eax
		cwtl
		push   %eax
		call   getrdist
		mov    %eax,%edi
		add    $0x8,%esp
		cmp    $0x80,%ax
		jae    jump_33a18
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x80,%ax
		xor    %ah,%ah
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		jmp    jump_33aef
	jump_33a18:
		xor    %eax,%eax
		mov    0x19(%ebp),%al
		add    %eax,%eax
		mov    data_5a6c2(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %ebx
		call   get_person_perception
		add    $0x8,%esp
		cwtl
		push   %eax
		push   %esi
		push   %ebx
		call   i_can_see_and_shoot_person
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_33a9e
		cmpw   $0x0,0x44(%esi)
		je     jump_33a61
		xor    %eax,%eax
		mov    0x44(%esi),%ax
		add    $level__things_base,%eax
		cmpb   $0x11,0x19(%eax)
		je     jump_33b32
	jump_33a61:
		mov    0x8(%esi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%esi),%eax
		push   %eax
		movswl 0x4(%esi),%eax
		push   %eax
		push   %ebx
		call   person_use_weapon
		add    $0x10,%esp
		push   $0x32
		push   %ebx
		call   get_person_adrenlin
		mov    $0x32,%edx
		movb   $0xd,0x58(%ebx)
		sub    %eax,%edx
		add    $0x8,%esp
		mov    %dx,0x2c(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_33a9e:
		cmp    $0x300,%di
		jb     jump_33af8
		xor    %eax,%eax
		mov    0x55(%ebx),%al
		cwtl
		push   %eax
		push   %ebx
		call   get_person_speed
		mov    %al,0x54(%ebx)
		xor    %ah,%ah
		mov    0x1a(%ebx),%al
		add    $0x8,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33aef
		push   $0xa
		push   %ebx
		call   quick_decide_on_hug_direction
		add    $0x8,%esp
	jump_33aef:
		push   %ebx
		call   animate_model
		add    $0x4,%esp
	jump_33af8:
		mov    0x42(%ebx),%si
		test   %si,%si
		jge    jump_33b1d
		push   $0x32
		push   %ebx
		call   get_person_adrenlin
		mov    $0x32,%edx
		movb   $0xd,0x19(%ebx)
		sub    %eax,%edx
		add    $0x8,%esp
		mov    %dx,0x2c(%ebx)
		jmp    jump_33b26
	jump_33b1d:
		jle    jump_33b26
		mov    %esi,%eax
		dec    %eax
		mov    %ax,0x42(%ebx)
	jump_33b26:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
	jump_33b32:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_DROWN:	/* 0x33b40 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		push   %ebx
		movb   $0x0,0x54(%ebx)
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33b64
		mov    0xa(%ebx),%ah
		movb   $0x1a,0x19(%ebx)
		or     $0x1,%ah
		mov    %ah,0xa(%ebx)
	jump_33b64:
		pop    %ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %ebx,%ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WAIT_TO_CROSS_ROAD:	/* 0x33b80 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		movswl data_60b2c,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1a(%ebx),%al
		movswl data_5ad60(,%eax,2),%edx
		shl    $0x8,%edx
		movswl data_60b2a,%ecx
		sar    $0x8,%edx
		add    %ecx,%edx
		movswl %dx,%edx
		push   %edx
		movswl data_5ab60(,%eax,2),%edx
		shl    $0x8,%edx
		movswl data_60b28,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		cwtl
		push   %eax
		call   check_for_on_coming_cars
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_33be5
		mov    0xa(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		call   new_state_person
		add    $0x4,%esp
	jump_33be5:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WALK_OFF_ROAD:	/* 0x33c00 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    data_60b2c,%ax
		dec    %eax
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		movb   $0x20,0x54(%ebx)
		call   there_is_a_road_here
		add    $0xc,%esp
		test   %ax,%ax
		jne    jump_33d67
		mov    data_60b2a,%dx
		mov    0x1a(%ebx),%al
		xor    %dh,%dh
		cmp    $0x40,%al
		jb     jump_33c6b
		mov    data_60b28,%cx
		xor    %ch,%ch
		cmp    $0x40,%al
		jbe    jump_33d28
		cmp    $0x80,%al
		jb     jump_33d67
		jbe    jump_33cb7
		cmp    $0xc0,%al
		je     jump_33cf9
		jmp    jump_33d67
	jump_33c6b:
		test   %al,%al
		jne    jump_33d67
		cmp    $0x40,%dx
		jl     jump_33d67
		cbtw
		movsbw 0x5b(%ebx),%dx
		sub    %eax,%edx
		movswl %dx,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x40,%al
		jbe    jump_33ca8
		mov    0x1a(%ebx),%dl
		movb   $0x26,0x19(%ebx)
		add    $0x80,%dl
		mov    %dl,0x1a(%ebx)
		jmp    jump_33d67
	jump_33ca8:
		mov    0xa(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		jmp    jump_33d5f
	jump_33cb7:
		cmp    $0xc0,%dx
		jg     jump_33d67
		cbtw
		movsbw 0x5b(%ebx),%dx
		sub    %eax,%edx
		movswl %dx,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x40,%al
		jbe    jump_33ced
		mov    0x1a(%ebx),%cl
		movb   $0x26,0x19(%ebx)
		add    $0x80,%cl
		mov    %cl,0x1a(%ebx)
		jmp    jump_33d67
	jump_33ced:
		mov    0xa(%ebx),%dh
		and    $0xf7,%dh
		push   %ebx
		mov    %dh,0xa(%ebx)
		jmp    jump_33d5f
	jump_33cf9:
		cmp    $0xc0,%cx
		jg     jump_33d67
		cbtw
		movsbw 0x5b(%ebx),%dx
		sub    %eax,%edx
		movswl %dx,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x40,%al
		jbe    jump_33ca8
		mov    0x1a(%ebx),%dl
		movb   $0x26,0x19(%ebx)
		add    $0x80,%dl
		mov    %dl,0x1a(%ebx)
		jmp    jump_33d67
	jump_33d28:
		cmp    $0x40,%cx
		jl     jump_33d67
		cbtw
		movsbw 0x5b(%ebx),%dx
		sub    %eax,%edx
		movswl %dx,%eax
		push   %eax
		call   ac_abs
		add    $0x4,%esp
		cmp    $0x40,%al
		jbe    jump_33d55
		mov    0x1a(%ebx),%al
		movb   $0x26,0x19(%ebx)
		add    $0x80,%al
		mov    %al,0x1a(%ebx)
		jmp    jump_33d67
	jump_33d55:
		mov    0xa(%ebx),%ch
		and    $0xf7,%ch
		push   %ebx
		mov    %ch,0xa(%ebx)
	jump_33d5f:
		call   new_state_person
		add    $0x4,%esp
	jump_33d67:
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		push   %ebx
		call   person_colide
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_33d9e
		push   $0xa
		push   %ebx
		call   quick_decide_on_hug_direction
		add    $0x8,%esp
	jump_33d9e:
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WAIT_FOR_TRIGGER:	/* 0x33dc0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x42(%ebx),%dx
		movb   $0x0,0x54(%ebx)
		cmp    $0x5,%dx
		jg     jump_33dda
		test   %dx,%dx
		jge    jump_33de2
	jump_33dda:
		movw   $0x0,0x42(%ebx)
		jmp    jump_33de9
	jump_33de2:
		mov    %edx,%esi
		inc    %esi
		mov    %si,0x42(%ebx)
	jump_33de9:
		mov    $level__things_base,%edi
		xor    %ecx,%ecx
	jump_33df0:
		movswl 0x30(%ebx),%edx
		xor    %eax,%eax
		movswl 0x42(%ebx),%esi
		mov    %cx,%ax
		add    %edx,%esi
		movswl 0x2e(%ebx),%edx
		shl    $0x7,%esi
		add    %edx,%eax
		add    %esi,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_33e49
	jump_33e17:
		and    $0xffff,%eax
		add    %edi,%eax
		cmpb   $0x1,0x18(%eax)
		jne    jump_33e41
		testb  $0x2,0x1c(%eax)
		je     jump_33e41
		mov    0x8(%eax),%dx
		cmp    0x32(%ebx),%dx
		jne    jump_33e41
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_33e41:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_33e17
	jump_33e49:
		inc    %ecx
		cmp    $0x5,%cx
		jb     jump_33df0
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_WAIT_FOR_TRAIN:	/* 0x33e60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		movb   $0x0,0x54(%esi)
		xor    %eax,%eax
		mov    0x1a(%esi),%al
		movswl 0x6(%esi),%edx
		movswl data_5ad60(,%eax,2),%ebx
		movswl data_5ab60(,%eax,2),%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		add    %ebx,%edx
		movswl 0x4(%esi),%ebx
		add    %ebx,%eax
		and    $0x7f00,%edx
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_33f31
	jump_33eb8:
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		cmpb   $0x2,0x18(%ebx)
		jne    jump_33f29
		mov    0x19(%ebx),%dh
		cmp    $0x9,%dh
		je     jump_33ed6
		cmp    $0xa,%dh
		jne    jump_33f29
	jump_33ed6:
		mov    0x20(%ebx),%dx
		mov    %ebx,%eax
		test   %dx,%dx
		je     jump_33ef4
	jump_33ee1:
		xor    %eax,%eax
		mov    %dx,%ax
		add    $level__things_base,%eax
		mov    0x20(%eax),%dx
		test   %dx,%dx
		jne    jump_33ee1
	jump_33ef4:
		mov    %ebx,%edx
		mov    0x1c(%eax),%cx
		sub    $level__things_base,%edx
		test   %cx,%cx
		je     jump_33f18
		mov    %cx,%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2a,0x19(%eax)
		jne    jump_33f29
	jump_33f18:
		movb   $0x6,0x58(%esi)
		push   %esi
		mov    %dx,0x2c(%esi)
		call   new_state_person
		add    $0x4,%esp
	jump_33f29:
		mov    (%ebx),%ax
		test   %ax,%ax
		jne    jump_33eb8
	jump_33f31:
		mov    0x42(%esi),%ax
		mov    %eax,%edx
		dec    %edx
		mov    %dx,0x42(%esi)
		test   %ax,%ax
		jne    jump_33f53
		mov    0x1a(%esi),%ah
		add    $0x80,%ah
		push   %esi
		mov    %ah,0x1a(%esi)
		call   new_state_person
		add    $0x4,%esp
	jump_33f53:
		push   %esi
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%esi)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_ALLOW_PASSENGERS:	/* 0x33f70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		mov    0x2c(%ebx),%dx
		movb   $0x0,0x54(%ebx)
		test   %dx,%dx
		je     jump_33f8a
		cmp    $0x1f4,%dx
		jbe    jump_33f96
	jump_33f8a:
		movw   $0x32,0x2c(%ebx)
		movb   $0xd,0x19(%ebx)
		jmp    jump_33f9d
	jump_33f96:
		mov    %edx,%esi
		dec    %esi
		mov    %si,0x2c(%ebx)
	jump_33f9d:
		push   %ebx
		call   affect_person
		add    $0x4,%esp
		mov    %al,0x19(%ebx)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_USE_WEAPON:	/* 0x33fb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		mov    0xa(%ebx),%ah
		movb   $0x0,0x54(%ebx)
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0xa(%ebx)
		call   affect_person
		mov    %eax,%ecx
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x19(%ebx),%dl
		add    $0x4,%esp
		cmp    %eax,%edx
		je     jump_33fe0
		mov    %cl,0x19(%ebx)
		pop    %ebx
		ret
	jump_33fe0:
		push   %ebx
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_33ffc
		push   %ebx
		call   auto_weapon
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_3401c
	jump_33ffc:
		push   %ebx
		call   which_frame_person
		add    $0x4,%esp
		push   %ebx
		call   new_state_person
		mov    $0x1,%edx
		add    $0x4,%esp
		mov    %dx,data_5e12c
		pop    %ebx
		ret
	jump_3401c:
		orb    $0x8,0xa(%ebx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fn_S_PERSON_BEING_PERSUADED:	/* 0x34030 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		push   %ebx
		movb   $0x0,0x54(%ebx)
		call   animate_model
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_34050
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_34050:
		pop    %ebx
		ret

vtable_34054:
		.long   func_34194
		.long   func_341a8
		.long   func_341bb
		.long   func_341bb
		.long   func_341cf
		.long   func_341cf
		.long   func_341eb
		.long   func_341ff
		.long   func_34213
		.long   func_34226
		.long   func_3423a
		.long   func_3424e
		.long   func_34262
		.long   func_34276
		.long   func_3428a
		.long   func_34295
		.long   func_342a0
		.long   func_342fe
		.long   func_342d6
		.long   func_342ea
		.long   func_342ae
		.long   func_342c2
		.long   func_34312
		.long   func_34325
		.long   func_34339
		.long   func_3434d
		.long   func_34361
		.long   func_34375
		.long   func_34389
		.long   func_3439c
		.long   func_343b0
		.long   func_343c4
		.long   func_343eb
		.long   func_343ff
		.long   func_343d8
		.long   func_34413
		.long   func_34422
		.long   func_34431
		.long   func_3443d
		.long   func_3444e
		.long   func_3445f
		.long   func_3446f
		.long   func_34480
		.long   func_34491
		.long   func_34499


/*----------------------------------------------------------------*/
move_people:	/* 0x34110 */
/*----------------------------------------------------------------*/
		push   %ebx
		call   person_intel
		xor    %edx,%edx
		mov    $level__People,%ebx
		mov    %dx,data_55300
		cmp    last_person,%ebx
		jae    jump_344f5
	jump_34130:
		xor    %ecx,%ecx
		mov    0x18(%ebx),%ah
		mov    %cx,data_5e12c
		test   %ah,%ah
		je     jump_344e4
		mov    0x4(%ebx),%ax
		mov    %ax,data_60b28
		mov    0x6(%ebx),%ax
		mov    %ax,data_60b2a
		mov    0x8(%ebx),%ax
		push   %ebx
		mov    %ax,data_60b2c
		call   person_on_block
		mov    0x1c(%ebx),%dl
		add    $0x4,%esp
		test   $0x2,%dl
		je     jump_3417c
		push   %ebx
		call   adjust_bar_levels
		add    $0x4,%esp
	jump_3417c:
		mov    0x19(%ebx),%dh
		cmp    $0x2c,%dh
		ja     jump_344a2
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:vtable_34054(,%eax,4)


/*----------------------------------------------------------------*/
func_34194:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_STAND
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_341a8:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		and    $0xf7,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		call   fn_S_PERSON_NEXT_COMMAND
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_341bb:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		and    $0xf7,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		call   fn_S_PERSON_GOTO_POINT
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_341cf:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x20(%ebx)
		je     jump_341dc
		orb    $0x8,0x1d(%ebx)
		jmp    jump_341e0
	jump_341dc:
		andb   $0xf7,0x1d(%ebx)
	jump_341e0:
		push   %ebx
		call   fn_S_PERSON_GOTO_STRUCTURE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_341eb:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dl
		or     $0x8,%dl
		push   %ebx
		mov    %dl,0x1d(%ebx)
		call   fn_S_PERSON_MOVE_INTO_VEHICLE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_341ff:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_MOVE_OUT_OF_VEHICLE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34213:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		and    $0xf7,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		call   fn_S_PERSON_PASSENGER
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34226:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		and    $0xf7,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		call   fn_S_PERSON_PICKUP_WEAPON
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3423a:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%cl
		and    $0xf7,%cl
		push   %ebx
		mov    %cl,0x1d(%ebx)
		call   fn_S_PERSON_DROP_WEAPON
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3424e:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dh
		and    $0xf7,%dh
		push   %ebx
		mov    %dh,0x1d(%ebx)
		call   fn_S_PERSON_SELECT_WEAPON
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34262:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dl
		and    $0xf7,%dl
		push   %ebx
		mov    %dl,0x1d(%ebx)
		call   fn_S_PERSON_WAIT_FOR_MODEL
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34276:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_WAIT_FOR_TIME
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3428a:
/*----------------------------------------------------------------*/
		push   %ebx
		call   fn_S_PERSON_HUG_RIGHT
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34295:
/*----------------------------------------------------------------*/
		push   %ebx
		call   fn_S_PERSON_HUG_LEFT
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_342a0:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		and    $0xf7,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_342ae:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dl
		or     $0x8,%dl
		push   %ebx
		mov    %dl,0x1d(%ebx)
		call   fn_S_PERSON_HIT_BY_FIRE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_342c2:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		or     $0x8,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_HIT_BY_EXPLOSION
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_342d6:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%cl
		or     $0x8,%cl
		push   %ebx
		mov    %cl,0x1d(%ebx)
		call   fn_S_PERSON_HIT_BY_BULLET
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_342ea:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dh
		or     $0x8,%dh
		push   %ebx
		mov    %dh,0x1d(%ebx)
		call   fn_S_PERSON_HIT_BY_VEHICLE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_342fe:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		or     $0x8,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		call   fn_S_PERSON_HIT_BY_LASER
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34312:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		or     $0x8,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		call   fn_S_PERSON_FLY_BACK
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34325:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		or     $0x8,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		call   fn_S_PERSON_ON_FIRE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34339:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%cl
		and    $0xf7,%cl
		push   %ebx
		mov    %cl,0x1d(%ebx)
		call   fn_S_PERSON_DYING
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3434d:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dh
		and    $0xf7,%dh
		push   %ebx
		mov    %dh,0x1d(%ebx)
		call   fn_S_PERSON_DYING_ON_FIRE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34361:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dl
		and    $0xf7,%dl
		push   %ebx
		mov    %dl,0x1d(%ebx)
		call   fn_S_PERSON_DEAD
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34375:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_DEAD_ON_FIRE
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34389:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		and    $0xf7,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		call   fn_S_PERSON_GUARD_AREA
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3439c:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		and    $0xf7,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		call   fn_S_PERSON_WANDER
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_343b0:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%cl
		or     $0x8,%cl
		push   %ebx
		mov    %cl,0x1d(%ebx)
		call   fn_S_PERSON_PERSUADED
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_343c4:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dh
		or     $0x8,%dh
		push   %ebx
		mov    %dh,0x1d(%ebx)
		call   fn_S_PERSON_RUNAWAY
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_343d8:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		or     $0x8,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		call   fn_S_PERSON_GIVE_WARNING
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_343eb:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dl
		or     $0x8,%dl
		push   %ebx
		mov    %dl,0x1d(%ebx)
		call   fn_S_PERSON_FOLLOW_AND_ATTACK
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_343ff:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_DROWN
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34413:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		and    $0xf7,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34422:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%cl
		and    $0xf7,%cl
		push   %ebx
		mov    %cl,0x1d(%ebx)
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34431:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dh
		and    $0xf7,%dh
		push   %ebx
		mov    %dh,0x1d(%ebx)
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3443d:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%dl
		and    $0xf7,%dl
		push   %ebx
		mov    %dl,0x1d(%ebx)
		call   fn_S_PERSON_WAIT_TO_CROSS_ROAD
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3444e:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ah
		and    $0xf7,%ah
		push   %ebx
		mov    %ah,0x1d(%ebx)
		call   fn_S_PERSON_WALK_OFF_ROAD
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3445f:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%al
		and    $0xf7,%al
		push   %ebx
		mov    %al,0x1d(%ebx)
		call   fn_S_PERSON_WAIT_FOR_TRIGGER
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_3446f:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%ch
		and    $0xf7,%ch
		push   %ebx
		mov    %ch,0x1d(%ebx)
		call   fn_S_PERSON_WAIT_FOR_TRAIN
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34480:
/*----------------------------------------------------------------*/
		mov    0x1d(%ebx),%cl
		and    $0xf7,%cl
		push   %ebx
		mov    %cl,0x1d(%ebx)
		call   fn_S_PERSON_ALLOW_PASSENGERS
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34491:
/*----------------------------------------------------------------*/
		push   %ebx
		call   fn_S_PERSON_USE_WEAPON
		jmp    jump_3449f


/*----------------------------------------------------------------*/
func_34499:
/*----------------------------------------------------------------*/
		push   %ebx
		call   fn_S_PERSON_BEING_PERSUADED
	jump_3449f:
		add    $0x4,%esp
	jump_344a2:
		push   %ebx
		call   person_danger
		mov    0x46(%ebx),%dl
		add    $0x4,%esp
		test   %dl,%dl
		jbe    jump_344b9
		mov    %dl,%dh
		dec    %dh
		mov    %dh,0x46(%ebx)
	jump_344b9:
		testb  $0x2,0x1c(%ebx)
		je     jump_344d1
		push   %ebx
		call   weapon_is_empty
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_344d1
		movb   $0x0,0x46(%ebx)
	jump_344d1:
		cmpw   $0x0,data_5e12c
		jne    jump_344e4
		push   %ebx
		call   which_frame_person
		add    $0x4,%esp
	jump_344e4:
		mov    last_person,%ecx
		add    $0x5c,%ebx
		cmp    %ecx,%ebx
		jb     jump_34130
	jump_344f5:
		pop    %ebx
		ret
unused_func_34500:	/* 0x34500 */
		push   %ebx
		mov    0x8(%esp),%edx
		mov    0x6(%edx),%ax
		and    $0x7f,%ah
		xor    %al,%al
		cwtl
		mov    %eax,%ebx
		movswl 0x4(%edx),%eax
		sar    $0x8,%eax
		sar    $1,%ebx
		and    $0x7f,%eax
		or     %ebx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_34562
	jump_3452c:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x4,0x18(%eax)
		jne    jump_3455a
		cmpw   $0x0,0x14(%eax)
		jle    jump_3455a
		cmpw   $0x0,0x1e(%eax)
		jne    jump_3455a
		mov    0x8(%eax),%bx
		cmp    0x8(%edx),%bx
		jne    jump_3455a
		mov    %eax,%ecx
		mov    %ecx,%eax
		pop    %ebx
		ret
	jump_3455a:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_3452c
	jump_34562:
		mov    %ecx,%eax
		pop    %ebx
		ret

vtable_34568:
		.long   func_34626
		.long   func_34647
		.long   func_34629
		.long   func_3462e
		.long   func_34633
		.long   func_34638
		.long   func_3463d
		.long   func_34642


/*----------------------------------------------------------------*/
weakest_player:	/* 0x34590 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %ecx,%ecx
		mov    data_5e551(%eax),%cl
		imul   $0x5c,%ecx,%ecx
		mov    $0x989680,%esi
		xor    %edi,%edi
		add    $level__People,%ecx
		jmp    jump_3467c
	jump_345d0:
		testb  $0x4,0x1d(%ecx)
		je     jump_34679
		testb  $0x1,0xb(%ecx)
		jne    jump_34679
		mov    0x3a(%ecx),%dx
		xor    %eax,%eax
		test   %dx,%dx
		je     jump_34652
	jump_345f3:
		test   %dx,%dx
		je     jump_34652
		and    $0xffff,%edx
		add    $level__things_base,%edx
		mov    0x14(%edx),%bx
		test   %bx,%bx
		jle    jump_3464c
		mov    0x19(%edx),%bl
		sub    $0x2,%bl
		cmp    $0x7,%bl
		ja     jump_3464c
		and    $0xff,%ebx
		jmp    *%cs:vtable_34568(,%ebx,4)


/*----------------------------------------------------------------*/
func_34626:
/*----------------------------------------------------------------*/
		inc    %eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_34629:
/*----------------------------------------------------------------*/
		add    $0x7,%eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_3462e:
/*----------------------------------------------------------------*/
		add    $0x3,%eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_34633:
/*----------------------------------------------------------------*/
		add    $0xe,%eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_34638:
/*----------------------------------------------------------------*/
		add    $0x70,%eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_3463d:
/*----------------------------------------------------------------*/
		add    $0x2,%eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_34642:
/*----------------------------------------------------------------*/
		add    $0x5,%eax
		jmp    jump_3464c


/*----------------------------------------------------------------*/
func_34647:
/*----------------------------------------------------------------*/
		add    $0x3e8,%eax
	jump_3464c:
		mov    0x1c(%edx),%dx
		jmp    jump_345f3
	jump_34652:
		mov    0x3c(%ecx),%dx
		and    $0x60,%dl
		xor    %dh,%dh
		and    $0xffff,%edx
		sar    $0x5,%edx
		inc    %edx
		imul   %edx,%eax
		cmpw   $0x4,0x14(%ecx)
		jle    jump_34671
		add    %eax,%eax
	jump_34671:
		cmp    %esi,%eax
		jae    jump_34679
		mov    %eax,%esi
		mov    %ecx,%edi
	jump_34679:
		add    $0x5c,%ecx
	jump_3467c:
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x8,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ecx
		jb     jump_345d0
		mov    %edi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_34775:	/* 0x346c0 */
		.long   func_3477d
		.long   func_3479e
		.long   func_34780
		.long   func_34785
		.long   func_3478a
		.long   func_3478f
		.long   func_34794
		.long   func_34799
unused_func_346E0:	/* 0x346e0 */
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		xor    %edx,%edx
		mov    0x14(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ecx
		xor    %edi,%edi
		xor    %esi,%esi
		add    %eax,%ecx
		mov    $0x2,%ebp
		jmp    jump_347d3
	jump_34727:
		testb  $0x4,0x1d(%ecx)
		je     jump_347d0
		testb  $0x1,0xb(%ecx)
		jne    jump_347d0
		mov    0x3a(%ecx),%dx
		xor    %eax,%eax
		test   %dx,%dx
		je     jump_347a9
	jump_3474a:
		test   %dx,%dx
		je     jump_347a9
		and    $0xffff,%edx
		add    $level__things_base,%edx
		mov    0x14(%edx),%bx
		test   %bx,%bx
		jle    def_34775
		mov    0x19(%edx),%bl
		sub    $0x2,%bl
		cmp    $0x7,%bl
		ja     def_34775
		and    $0xff,%ebx
		jmp    *%cs:jpt_34775(,%ebx,4)


/*----------------------------------------------------------------*/
func_3477d:
/*----------------------------------------------------------------*/
		inc    %eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_34780:
/*----------------------------------------------------------------*/
		add    $0x7,%eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_34785:
/*----------------------------------------------------------------*/
		add    $0x3,%eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_3478a:
/*----------------------------------------------------------------*/
		add    $0xe,%eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_3478f:
/*----------------------------------------------------------------*/
		add    $0x70,%eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_34794:
/*----------------------------------------------------------------*/
		add    $0x2,%eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_34799:
/*----------------------------------------------------------------*/
		add    $0x5,%eax
		jmp    def_34775


/*----------------------------------------------------------------*/
func_3479e:
/*----------------------------------------------------------------*/
		add    $0x3e8,%eax
	def_34775:	/* 0x347a3 */
		mov    0x1c(%edx),%dx
		jmp    jump_3474a
	jump_347a9:
		mov    0x3c(%ecx),%dx
		and    $0x60,%dl
		xor    %dh,%dh
		and    $0xffff,%edx
		sar    $0x5,%edx
		inc    %edx
		imul   %edx,%eax
		cmpw   $0x4,0x14(%ecx)
		jle    jump_347c8
		add    %eax,%eax
	jump_347c8:
		cmp    %esi,%eax
		jbe    jump_347d0
		mov    %eax,%esi
		mov    %ecx,%edi
	jump_347d0:
		add    $0x5c,%ecx
	jump_347d3:
		xor    %edx,%edx
		mov    0x14(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ecx
		jb     jump_34727
		mov    %edi,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
closest_player:	/* 0x34820 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%edi
		xor    %edx,%edx
		mov    0x18(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		mov    $level__People,%ebx
		xor    %ebp,%ebp
		xor    %esi,%esi
		add    %eax,%ebx
		jmp    jump_3489d
	jump_34863:
		testb  $0x4,0x1d(%ebx)
		je     jump_3489a
		testb  $0x1,0xb(%ebx)
		jne    jump_3489a
		mov    0x6(%ebx),%ax
		sub    0x6(%edi),%ax
		cwtl
		mov    0x4(%edi),%cx
		push   %eax
		mov    0x4(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getrdist
		and    $0xffff,%eax
		add    $0x8,%esp
		cmp    %esi,%eax
		jbe    jump_3489a
		mov    %ebx,%ebp
		mov    %eax,%esi
	jump_3489a:
		add    $0x5c,%ebx
	jump_3489d:
		xor    %edx,%edx
		mov    0x18(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_34863
		mov    %ebp,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
unused_func_348E0:	/* 0x348e0 */
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		xor    %edx,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%eax
		xor    %esi,%esi
		mov    $level__People,%ebx
		mov    data_9be40,%si
		xor    %edi,%edi
		add    $level__things_base,%esi
		add    %eax,%ebx
		jmp    jump_34987
	jump_34931:
		testb  $0x4,0x1d(%ebx)
		je     jump_34984
		testb  $0x1,0xb(%ebx)
		jne    jump_34984
		mov    0x6(%ebx),%ax
		sub    0x6(%esi),%ax
		cwtl
		mov    0x4(%esi),%cx
		push   %eax
		mov    0x4(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		call   getrdist
		xor    %ecx,%ecx
		movswl 0x8(%esi),%edx
		mov    %ax,%cx
		movswl 0x8(%ebx),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		inc    %eax
		imul   %eax,%ecx
		add    $0x8,%esp
		cmp    %edi,%ecx
		jbe    jump_34984
		mov    %ebx,(%esp)
		mov    %ecx,%edi
	jump_34984:
		add    $0x5c,%ebx
	jump_34987:
		xor    %edx,%edx
		mov    0x14(%esp),%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_34931
		mov    (%esp),%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
unused_func_349D0:	/* 0x349d0 */
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%esi
		mov    0x14(%esp),%edi
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		xor    %ebx,%ebx
		mov    data_5e551(%eax),%bl
		imul   $0x5c,%ebx,%ebx
		add    $level__People,%ebx
		jmp    jump_34a2f
	jump_34a0c:
		testb  $0x4,0x1d(%ebx)
		je     jump_34a2c
		testb  $0x1,0xb(%ebx)
		jne    jump_34a2c
		movswl 0x18(%esp),%eax
		push   %eax
		push   %ebx
		push   %esi
		call   i_can_see_and_shoot_person
		add    $0xc,%esp
		cmp    %ebx,%eax
		je     jump_34a69
	jump_34a2c:
		add    $0x5c,%ebx
	jump_34a2f:
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ebx
		jb     jump_34a0c
		xor    %eax,%eax
	jump_34a69:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
jpt_34AA2:	/* 0x34a70 */
		.long   def_34AA2
		.long   def_34AA2
		.long   def_34AA2
		.long   def_34AA2
		.long   def_34AA2
		.long   def_34AA2
		.long   def_34AA2
		.long   def_34AA2
unused_func_34A90:	/* 0x34a90 */
		mov    0x4(%esp),%ax
		dec    %ax
		cmp    $0x7,%ax
		ja     def_34AA2
		and    $0xffff,%eax
		jmp    *%cs:jpt_34AA2(,%eax,4)
	def_34AA2:	/* 0x34aaa */
		ret
jpt_35899:	/* 0x34ab0 */
		.long   func_358a1
		.long   func_358f1
		.long   func_35937
		.long   func_35947
		.long   func_3595b
		.long   func_3596b
		.long   func_3597a
		.long   func_359e6


/*----------------------------------------------------------------*/
ResearchAndDevelop:	/* 0x34ad0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x98,%esp
		sub    $0x82,%ebp
		mov    $0x8,%dl
		xor    %ah,%ah
		mov    $0x1,%dh
		mov    %ah,0x66(%ebp)
		mov    %dl,0x76(%ebp)
		mov    %dh,0x6e(%ebp)
		mov    %ah,0x7a(%ebp)
		mov    %ah,0x7e(%ebp)
		mov    $0xffff,%edx
		mov    %ah,0x6a(%ebp)
		mov    %dx,0x46(%ebp)
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p249(,%eax,4),%edx
		push   %edx
		call   DisplayScreenTitle
		add    $0x4,%esp
		jmp    jump_35d22
	jump_34b2b:
		mov    $0x1ef,%eax
	jump_34b30:
		and    $0xffff,%eax
		mov    data_5b6a0,%bx
		push   %eax
		mov    data_5b6a4,%ax
		sub    %bx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b6a2,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    data_54630(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b6ac,%cx
		push   $0xfffffffe
		cmp    %cx,%ax
		jbe    jump_34bbc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b6b0,%ax
		jae    jump_34bbc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b6aa,%ax
		jbe    jump_34bbc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b6ae,%ax
		jae    jump_34bbc
		mov    $0x166,%eax
		jmp    jump_34bc1
	jump_34bbc:
		mov    $0x1ef,%eax
	jump_34bc1:
		and    $0xffff,%eax
		mov    data_5b6aa,%bx
		push   %eax
		mov    data_5b6ae,%ax
		sub    %bx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b6ac,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_research_funddec(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_34c03:
		mov    $0x1ef,%esi
		mov    0x6e(%ebp),%cl
		mov    %esi,%ebx
		cmp    $0x1,%cl
		jne    jump_34c19
		mov    $0x166,%ebx
		jmp    jump_34c22
	jump_34c19:
		test   %cl,%cl
		jne    jump_34c22
		mov    $0x166,%esi
	jump_34c22:
		push   $0xc
		xor    %eax,%eax
		push   $0xfffffffe
		mov    %bx,%ax
		mov    data_5b6be,%cx
		push   %eax
		mov    data_5b6c2,%ax
		sub    %cx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b6c0,%ax
		push   %eax
		xor    %eax,%eax
		mov    %cx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_equip(,%eax,4),%edi
		push   %edi
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		xor    %eax,%eax
		push   $0xfffffffe
		mov    %si,%ax
		mov    data_5b6b4,%si
		push   %eax
		mov    data_5b6b8,%ax
		sub    %si,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b6b6,%ax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_mods(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b6b6,%di
		cmp    %di,%ax
		jbe    jump_34d3b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b6ba,%ax
		jae    jump_34d3b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		mov    data_5b6b4,%bx
		cmp    %bx,%ax
		jbe    jump_34d3b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		mov    data_5b6b8,%cx
		cmp    %cx,%ax
		jae    jump_34d3b
		cmpb   $0x0,0x6e(%ebp)
		je     jump_34d3b
		testb  $0x1,0x46(%ebp)
		je     jump_34d3b
		push   $0xc
		mov    %cx,%ax
		push   $0xfffffffe
		sub    %bx,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_mods(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_34d3b:
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b6c0,%di
		cmp    %di,%ax
		jbe    jump_34dc8
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b6c4,%ax
		jae    jump_34dc8
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		mov    data_5b6be,%bx
		cmp    %bx,%ax
		jbe    jump_34dc8
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		mov    data_5b6c2,%cx
		cmp    %cx,%ax
		jae    jump_34dc8
		cmpb   $0x1,0x6e(%ebp)
		je     jump_34dc8
		testb  $0x1,0x46(%ebp)
		je     jump_34dc8
		push   $0xc
		mov    %cx,%ax
		push   $0xfffffffe
		sub    %bx,%ax
		push   $0x166
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    text_equip(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
	jump_34dc8:
		call   ShowGameTime
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		mov    m_logos,%esi
		add    %edx,%eax
		push   %esi
		lea    0x0(,%eax,4),%eax
		push   $0x20
		sub    %edx,%eax
		push   $0x20
		lea    0x0(,%eax,8),%eax
		push   $0x7
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0x9
		mov    data_5e4ab(%eax),%dl
		mov    data_5e4ac(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   %eax
		call   draw_logo
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		add    $0x1c,%esp
		mov    EXPORT_SYMBOL(players)(%eax),%edi
		push   %edi
		push   $aD_4
		lea    -0x16(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0xfffffffe
		push   $0x166
		mov    m_sprites,%eax
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   get_word_width
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x7c,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x166
		add    $0x1f4,%eax
		push   $0x10
		mov    %eax,%ebx
		xor    %eax,%eax
		push   $0x58
		mov    %bx,%ax
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   new_show_text
		mov    data_55595,%bl
		add    $0x28,%esp
		test   %bl,%bl
		je     jump_3513a
		mov    data_55597,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5b95c(%eax),%ax
		mov    data_5559b,%dx
		and    $0xffff,%eax
		imul   %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		push   %eax
		push   $aD_4
		lea    -0x16(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		push   $0xfffffffe
		push   $0x166
		mov    m_sprites,%ebx
		push   %ebx
		lea    -0x16(%ebp),%eax
		push   %eax
		call   get_word_width
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x82,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x166
		add    $0x10,%eax
		push   $0x10
		mov    %eax,%ebx
		xor    %eax,%eax
		push   $0xf4
		mov    %bx,%ax
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   new_show_text
		mov    data_55595,%bh
		add    $0x28,%esp
		cmp    $0x1,%bh
		jne    jump_34fa9
		xor    %eax,%eax
		mov    data_55596,%al
		imul   $0x1eb,%eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_cybmod_names(%edx,%eax,4),%edi
		push   %edi
		mov    strings_researching(,%eax,4),%edx
		push   %edx
		jmp    jump_34fd0
	jump_34fa9:
		lea    0x12(%ebp),%eax
		push   %eax
		xor    %eax,%eax
		mov    data_55596,%al
		push   %eax
		call   GetWeaponName
		add    $0x8,%esp
		lea    0x12(%ebp),%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_researching(,%eax,4),%esi
		push   %esi
	jump_34fd0:
		push   $aSS_0
		lea    -0x16(%ebp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x166
		push   $0x10
		push   $0x58
		push   $0x9e
		lea    -0x16(%ebp),%eax
		mov    $0xcc,%edi
		push   %eax
		mov    %edi,0x5a(%ebp)
		call   new_show_text
		mov    $0x15e,%eax
		add    $0x28,%esp
		xor    %edx,%edx
		mov    %eax,0x62(%ebp)
		mov    %edx,0x56(%ebp)
		mov    %edx,0x4e(%ebp)
		mov    %edx,0x4a(%ebp)
	jump_35025:
		mov    $0xcc,%esi
		mov    0x4a(%ebp),%eax
		xor    %edi,%edi
		add    %eax,%esi
	jump_35031:
		xor    %ecx,%ecx
		mov    0x4e(%ebp),%cx
		xor    %ebx,%ebx
		lea    0x0(,%ecx,4),%eax
		mov    %di,%bx
		sub    %ecx,%eax
		lea    (%ebx,%ebx,1),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		mov    data_5559d(%eax),%dx
		test   %dx,%dx
		je     jump_350ed
		mov    %edx,0x56(%ebp)
		movswl %dx,%edx
		movl   $0xa,0x3a(%ebp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x3a(%ebp)
		mov    $0x15e,%edx
		sub    %eax,%edx
		mov    %esi,0x52(%ebp)
		mov    %edx,0x5e(%ebp)
		add    %ecx,%ebx
		je     jump_3509c
		push   $0xfc
		movswl %dx,%eax
		push   %eax
		movswl %si,%eax
		push   %eax
		movswl 0x62(%ebp),%eax
		push   %eax
		mov    0x5a(%ebp),%eax
		inc    %eax
		cwtl
		jmp    jump_350b2
	jump_3509c:
		push   $0xfc
		movswl %dx,%eax
		push   %eax
		movswl %si,%eax
		push   %eax
		movswl 0x62(%ebp),%eax
		push   %eax
		movswl 0x5a(%ebp),%eax
	jump_350b2:
		push   %eax
		call   func_1b3a0
		add    $0x14,%esp
		mov    0x52(%ebp),%eax
		inc    %esi
		mov    %eax,0x5a(%ebp)
		mov    0x5e(%ebp),%eax
		inc    %edi
		mov    %eax,0x62(%ebp)
		cmp    $0x18,%di
		jb     jump_35031
		mov    0x4a(%ebp),%ebx
		mov    0x4e(%ebp),%ecx
		add    $0x18,%ebx
		inc    %ecx
		mov    %ebx,0x4a(%ebp)
		mov    %ecx,0x4e(%ebp)
		cmp    $0xa,%cx
		jb     jump_35025
	jump_350ed:
		mov    data_55597,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_3513a
		lea    0x1(%ebx),%edx
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    $0x960,%eax
		mov    0x56(%ebp),%dx
		sub    %edx,%eax
		mov    %eax,%edx
		add    %ebx,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    0x5a(%ebp),%dx
		push   $0x58
		add    %edx,%eax
		push   $0x6e
		cwtl
		push   %eax
		movswl 0x62(%ebp),%eax
		push   %eax
		mov    %edx,%eax
		inc    %eax
		cwtl
		push   %eax
		call   func_1b3a0
		add    $0x14,%esp
	jump_3513a:
		cmpb   $0x1,0x6e(%ebp)
		jne    jump_351f3
		cmpb   $0x0,0x7a(%ebp)
		je     jump_351e9
		xor    %eax,%eax
		mov    0x6a(%ebp),%al
		push   %eax
		push   $0x2
		call   ShowInfoOnEquipItem
		add    $0x8,%esp
		push   $0x58
		push   $0x13e
		push   $0x272
		push   $0x13e
		push   $0x1f4
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%cx
		push   $0xfffffffe
		cmp    $0x13e,%cx
		jbe    jump_351b6
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_351b6
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_351b6
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_351b6
		mov    $0x166,%eax
		jmp    jump_351bb
	jump_351b6:
		mov    $0x1ef,%eax
	jump_351bb:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x13e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    gui_strings_p264(,%eax,4),%esi
		push   %esi
		call   DrawScreenGadget
		add    $0x1c,%esp
		jmp    jump_3529a
	jump_351e9:
		call   ShowAvailableEquipment
		jmp    jump_3529a
	jump_351f3:
		cmpb   $0x0,0x7a(%ebp)
		je     jump_35295
		xor    %eax,%eax
		mov    0x6a(%ebp),%al
		push   %eax
		push   $0x1
		call   ShowInfoOnEquipItem
		add    $0x8,%esp
		push   $0x58
		push   $0x13e
		push   $0x272
		push   $0x13e
		push   $0x1f4
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%di
		push   $0xfffffffe
		cmp    $0x13e,%di
		jbe    jump_35265
		cmpw   $0x156,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_35265
		cmpw   $0x1f4,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_35265
		cmpw   $0x272,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_35265
		mov    $0x166,%eax
		jmp    jump_3526a
	jump_35265:
		mov    $0x1ef,%eax
	jump_3526a:
		and    $0xffff,%eax
		push   %eax
		push   $0x7e
		xor    %eax,%eax
		push   $0x13e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x1f4
		mov    gui_strings_p264(,%eax,4),%ecx
		push   %ecx
		call   DrawScreenGadget
		add    $0x1c,%esp
		jmp    jump_3529a
	jump_35295:
		call   ShowAvailableParts
	jump_3529a:
		cmpb   $0x0,0x7e(%ebp)
		je     jump_35632
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		push   $0xdd
		push   $0x10
		xor    %eax,%eax
		push   $0x6a
		mov    EXPORT_SYMBOL(language),%al
		push   $0x14
		mov    strings_research_min_funding(,%eax,4),%edx
		push   %edx
		call   new_show_text
		add    $0x28,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0xdd
		push   $0x10
		xor    %eax,%eax
		push   $0x82
		mov    EXPORT_SYMBOL(language),%al
		push   $0x14
		mov    strings_research_max_funding(,%eax,4),%ecx
		push   %ecx
		call   new_show_text
		mov    0x6e(%ebp),%dh
		add    $0x28,%esp
		cmp    $0x1,%dh
		jne    jump_353d9
		lea    0x12(%ebp),%eax
		xor    %ebx,%ebx
		push   %eax
		mov    0x72(%ebp),%bl
		push   %ebx
		imul   $0x1f5,%ebx,%ebx
		call   GetWeaponName
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x54
		push   $0x10
		push   $0x56
		push   $0x14
		lea    0x12(%ebp),%eax
		push   %eax
		call   new_show_text
		mov    data_57c01(%ebx),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    $0x28,%esp
		lea    0x0(,%eax,8),%eax
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		push   $0x54
		push   $0x10
		push   $0x76
		push   $0x14
		lea    -0x16(%ebp),%eax
		push   %eax
		call   new_show_text
		mov    data_57c01(%ebx),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,8),%eax
		mov    data_5b96e,%dx
		imul   %edx,%eax
		add    $0x28,%esp
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edi
		push   %edi
		jmp    jump_354b2
	jump_353d9:
		xor    %ebx,%ebx
		mov    0x72(%ebp),%bl
		imul   $0x1eb,%ebx,%ebx
		push   $0x0
		push   $0x0
		push   $0xe
		xor    %edx,%edx
		push   $0xfffffffe
		mov    m_sprites,%esi
		mov    EXPORT_SYMBOL(cybmods)(%ebx),%dl
		push   %esi
		lea    0x0(,%edx,4),%eax
		push   $0x54
		sub    %edx,%eax
		push   $0x10
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		push   $0x56
		mov    EXPORT_SYMBOL(language),%al
		push   $0x14
		mov    strings_cybmod_names(%edx,%eax,4),%edi
		push   %edi
		call   new_show_text
		xor    %edx,%edx
		mov    data_55786(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    $0x28,%esp
		lea    0x0(,%eax,8),%eax
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0x54
		push   $0x10
		push   $0x76
		push   $0x14
		lea    -0x16(%ebp),%eax
		push   %eax
		call   new_show_text
		xor    %edx,%edx
		mov    data_55786(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%edx
		xor    %eax,%eax
		mov    data_5b96e,%ax
		imul   %edx,%eax
		add    $0x28,%esp
		push   %eax
		lea    -0x16(%ebp),%eax
		push   %eax
		call   int2decstr
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
	jump_354b2:
		push   $0x54
		push   $0x10
		push   $0x8e
		push   $0x14
		lea    -0x16(%ebp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		push   $0x58
		push   $0x64
		push   $0x8e
		push   $0x64
		push   $0x12
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0x9e
		push   $0x8e
		push   $0x9e
		push   $0x12
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0xb6
		push   $0x8e
		push   $0xb6
		push   $0x12
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0x64
		push   $0x8e
		push   $0x64
		push   $0x12
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0x9e
		push   $0x8e
		push   $0x9e
		push   $0x12
		call   func_1b3a0
		add    $0x14,%esp
		push   $0x58
		push   $0xb6
		push   $0x8e
		push   $0xb6
		push   $0x12
		call   func_1b3a0
		add    $0x14,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		push   $0xfffffffe
		cmp    $0x9e,%dx
		jbe    jump_35598
		cmpw   $0xb8,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_35598
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    jump_35598
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_35598
		mov    $0x166,%eax
		jmp    jump_3559d
	jump_35598:
		mov    $0x1ef,%eax
	jump_3559d:
		and    $0xffff,%eax
		push   %eax
		push   $0x80
		xor    %eax,%eax
		push   $0x9e
		mov    EXPORT_SYMBOL(language),%al
		push   $0x10
		mov    gui_strings_p270(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%di
		push   $0xfffffffe
		cmp    $0xb6,%di
		jbe    jump_355ff
		cmpw   $0xd0,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_355ff
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jbe    jump_355ff
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    jump_355ff
		mov    $0x166,%eax
		jmp    jump_35604
	jump_355ff:
		mov    $0x1ef,%eax
	jump_35604:
		and    $0xffff,%eax
		push   %eax
		push   $0x80
		xor    %eax,%eax
		push   $0xb6
		mov    EXPORT_SYMBOL(language),%al
		push   $0x10
		mov    gui_strings_p264(,%eax,4),%ebx
		push   %ebx
		call   DrawScreenGadget
		add    $0x1c,%esp
		jmp    jump_3584a
	jump_35632:
		mov    $0x56,%esi
		mov    0x6e(%ebp),%dl
		xor    %ebx,%ebx
		cmp    $0x1,%dl
		jne    jump_35738
		xor    %edi,%edi
	jump_35647:
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0x1f5,%eax,%eax
		cmpb   $0xff,EXPORT_SYMBOL(weapons)(%eax)
		je     jump_356ab
		mov    data_57c05(%eax),%dx
		cmp    %dx,%di
		jg     jump_356a8
		cmp    $0x64,%dx
		jge    jump_356a8
		lea    0x12(%ebp),%eax
		push   %eax
		xor    %eax,%eax
		mov    %bl,%al
		push   %eax
		call   GetWeaponName
		add    $0x8,%esp
		push   %edi
		push   %edi
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%eax
		push   %eax
		push   $0xdd
		xor    %eax,%eax
		push   $0xe
		mov    %si,%ax
		push   %eax
		push   $0x14
		lea    0x12(%ebp),%eax
		push   %eax
		add    $0xc,%esi
		call   new_show_text
		add    $0x28,%esp
	jump_356a8:
		inc    %ebx
		jmp    jump_35647
	jump_356ab:
		push   $0x2b
		push   $0x67
		push   $0x48
		push   $0x28
		push   $0x8
		push   $0x1
		lea    0x42(%ebp),%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		push   $0x14
		call   which_item_selected
		add    $0x28,%esp
		mov    %eax,%ebx
		test   %ax,%ax
		je     jump_3584a
		xor    %edx,%edx
		mov    0x72(%ebp),%dl
		and    $0xffff,%eax
		inc    %edx
		cmp    %edx,%eax
		je     jump_3584a
		lea    0x12(%ebp),%eax
		push   %eax
		mov    %bl,%al
		dec    %al
		and    $0xff,%eax
		push   %eax
		call   GetWeaponName
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%esi
		push   %esi
		imul   $0xc,0x42(%ebp),%ax
		push   $0x54
		add    $0x56,%ax
		push   $0xe
		and    $0xffff,%eax
		push   %eax
		push   $0x14
		lea    0x12(%ebp),%eax
		push   %eax
		jmp    jump_35842
	jump_35738:
		xor    %edi,%edi
	jump_3573a:
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0x1eb,%eax,%eax
		mov    EXPORT_SYMBOL(cybmods)(%eax),%cl
		cmp    $0xff,%cl
		je     jump_357af
		mov    data_55788(%eax),%dx
		cmp    %dx,%di
		jg     jump_357ac
		cmp    $0x64,%dx
		jge    jump_357ac
		push   %edi
		push   %edi
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0xdd
		xor    %edx,%edx
		push   $0xe
		mov    %si,%dx
		push   %edx
		xor    %edx,%edx
		mov    %cl,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x14
		mov    strings_cybmod_names(%edx,%eax,4),%ecx
		push   %ecx
		add    $0xc,%esi
		call   new_show_text
		add    $0x28,%esp
	jump_357ac:
		inc    %ebx
		jmp    jump_3573a
	jump_357af:
		push   $0x2b
		push   $0x67
		push   $0x48
		push   $0x28
		push   $0x8
		push   $0x1
		lea    0x42(%ebp),%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		push   $0x12
		call   which_item_selected
		add    $0x28,%esp
		test   %ax,%ax
		je     jump_3584a
		xor    %edx,%edx
		mov    0x72(%ebp),%dl
		and    $0xffff,%eax
		inc    %edx
		cmp    %edx,%eax
		je     jump_3584a
		dec    %eax
		imul   $0x1eb,%eax,%eax
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		imul   $0xc,0x42(%ebp),%dx
		push   $0x54
		add    $0x56,%dx
		push   $0xe
		and    $0xffff,%edx
		push   %edx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmods)(%eax),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		push   $0x14
		mov    strings_cybmod_names(%edx,%eax,4),%esi
		push   %esi
	jump_35842:
		call   new_show_text
		add    $0x28,%esp
	jump_3584a:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_3586f
		push   $0x8
		push   $0x1
		xor    %ah,%ah
		push   $data_5b6a0
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,0x76(%ebp)
	jump_3586f:
		cmpb   $0x8,0x76(%ebp)
		jne    jump_35889
		push   $0x8
		push   $0x0
		push   $data_5b6a0
		call   WhichIconSelected
		add    $0xc,%esp
		mov    %al,0x76(%ebp)
	jump_35889:
		mov    0x76(%ebp),%dh
		cmp    $0x7,%dh
		ja     def_35899
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:jpt_35899(,%eax,4)


/*----------------------------------------------------------------*/
func_358a1:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x7e(%ebp)
		jne    def_35899
		cmpb   $0x0,data_55595
		je     def_35899
		mov    data_55597,%edx
		cmp    $0xffffffff,%edx
		je     jump_358e4
		lea    0x1(%edx),%ecx
		mov    %ecx,data_55597
		cmp    $0xa,%ecx
		jne    def_35899
		movl   $0x9,data_55597
		jmp    def_35899
	jump_358e4:
		xor    %ebx,%ebx
		mov    %ebx,data_55597
		jmp    def_35899


/*----------------------------------------------------------------*/
func_358f1:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x7e(%ebp)
		jne    def_35899
		cmpb   $0x0,data_55595
		je     def_35899
		mov    data_55597,%ecx
		cmp    $0xffffffff,%ecx
		je     def_35899
		lea    -0x1(%ecx),%esi
		mov    %esi,data_55597
		test   %esi,%esi
		jge    def_35899
		movl   $0xffffffff,data_55597
		jmp    def_35899


/*----------------------------------------------------------------*/
func_35937:
/*----------------------------------------------------------------*/
		xor    %ah,%ah
		mov    %ah,0x6e(%ebp)
		mov    %ah,0x7a(%ebp)
		mov    %ah,0x7e(%ebp)
		jmp    def_35899


/*----------------------------------------------------------------*/
func_35947:
/*----------------------------------------------------------------*/
		mov    $0x1,%cl
		xor    %ch,%ch
		xor    %dh,%al
		mov    %cl,0x6e(%ebp)
		mov    %ch,0x7a(%ebp)
		mov    %al,0x7e(%ebp)
		jmp    def_35899


/*----------------------------------------------------------------*/
func_3595b:
/*----------------------------------------------------------------*/
		movl   $0x7,0x3e(%ebp)
		movb   $0x1,0x66(%ebp)
		jmp    def_35899


/*----------------------------------------------------------------*/
func_3596b:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    $0x1,%bl
		mov    %edx,0x3e(%ebp)
		mov    %bl,0x66(%ebp)
		jmp    def_35899


/*----------------------------------------------------------------*/
func_3597a:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x7a(%ebp)
		jne    jump_359dc
		mov    0x6e(%ebp),%dl
		mov    $0x14,%ebx
		test   %dl,%dl
		jne    jump_35991
		mov    $0x12,%ebx
	jump_35991:
		push   $0x38
		push   $0xab
		push   $0x139
		push   $0x35
		push   $0xfa
		push   $0x0
		xor    %eax,%eax
		push   $0x0
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%ax	/* lbDisplay.MouseY but scaled */
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MouseX_640),%ax	/* lbDisplay.MouseX but scaled */
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		call   which_item_selected
		add    $0x28,%esp
		mov    %al,0x6a(%ebp)
		test   %al,%al
		je     def_35899
		movb   $0x1,0x7a(%ebp)
		jmp    def_35899
	jump_359dc:
		xor    %ah,%ah
		mov    %ah,0x7a(%ebp)
		jmp    def_35899


/*----------------------------------------------------------------*/
func_359e6:
/*----------------------------------------------------------------*/
		cmpb   $0x0,0x7e(%ebp)
		jne    jump_35a71
		cmpb   $0x1,0x6e(%ebp)
		jne    jump_35a1a
		push   $0x2b
		push   $0x67
		push   $0x48
		push   $0x28
		push   $0x8
		push   $0x1
		xor    %eax,%eax
		push   $0x0
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		push   %eax
		push   $0x14
		jmp    jump_35a3c
	jump_35a1a:
		push   $0x2b
		push   $0x67
		push   $0x48
		push   $0x28
		push   $0x8
		push   $0x1
		xor    %eax,%eax
		push   $0x0
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		push   %eax
		push   $0x12
	jump_35a3c:
		call   which_item_selected
		add    $0x28,%esp
		mov    %eax,%ebx
		test   %bx,%bx
		je     def_35899
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x72(%ebp),%al
		mov    %bx,%dx
		inc    %eax
		cmp    %eax,%edx
		je     def_35899
		mov    $0x1,%ch
		sub    %ch,%bl
		mov    %ch,0x7e(%ebp)
		mov    %bl,0x72(%ebp)
		jmp    def_35899
	jump_35a71:
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MouseX_640)	/* lbDisplay.MouseX but scaled */
		jbe    jump_35cd2
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MouseX_640)
		jae    jump_35cd2
		cmpw   $0x9e,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_35cd2
		cmpw   $0xb8,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_35cd2
		mov    data_55595,%bh
		test   %bh,%bh
		je     jump_35baa
		mov    %bh,%al
		cmp    $0x1,%bh
		jb     jump_35baa
		jbe    jump_35ad5
		cmp    $0x2,%bh
		je     jump_35b42
		jmp    jump_35baa
	jump_35ad5:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_35ae0:
		xor    %ecx,%ecx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_35af0:
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %cx,%ax
		shl    $0x4,%edx
		add    %eax,%eax
		lea    (%edx,%eax,1),%esi
		mov    %esi,0x3a(%ebp)
		movzbl data_55596,%esi
		imul   $0x1eb,%esi,%esi
		add    %esi,%edx
		add    %edx,%eax
		mov    0x3a(%ebp),%edx
		mov    data_5559d(%edx),%dx
		inc    %ecx
		mov    %dx,data_5578a(%eax)
		cmp    $0x18,%cx
		jb     jump_35af0
		inc    %ebx
		cmp    $0xa,%bx
		jae    jump_35baa
		jmp    jump_35ae0
	jump_35b42:
		xor    %ebx,%ebx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_35b50:
		xor    %ecx,%ecx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_35b60:
		movzbl data_55596,%edi
		imul   $0x1f5,%edi,%edi
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %cx,%ax
		shl    $0x4,%edx
		add    %eax,%eax
		lea    (%edx,%eax,1),%esi
		add    %edi,%edx
		inc    %ecx
		add    %edx,%eax
		mov    data_5559d(%esi),%dx
		mov    %dx,data_57c07(%eax)
		cmp    $0x18,%cx
		jb     jump_35b60
		inc    %ebx
		cmp    $0xa,%bx
		jb     jump_35b50
	jump_35baa:
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(research)
		mov    0x72(%ebp),%al
		mov    0x6e(%ebp),%ah
		mov    %al,data_55596
		cmp    $0x1,%ah
		jne    jump_35c46
		xor    %eax,%eax
		mov    0x72(%ebp),%al
		imul   $0x1f5,%eax,%eax
		mov    $0x2,%dh
		mov    $0x1f5,%edi
		xor    %ebx,%ebx
		mov    data_57c01(%eax),%ax
		mov    %dh,data_55595
		mov    %ax,data_5559b
		lea    0x0(%eax),%eax
	jump_35bf0:
		xor    %ecx,%ecx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_35c00:
		movzbl 0x72(%ebp),%esi
		imul   %edi,%esi
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    %cx,%dx
		shl    $0x4,%eax
		add    %edx,%edx
		add    %eax,%esi
		add    %edx,%eax
		mov    data_57c07(%edx,%esi,1),%dx
		inc    %ecx
		mov    %dx,data_5559d(%eax)
		cmp    $0x18,%cx
		jb     jump_35c00
		inc    %ebx
		cmp    $0xa,%bx
		jae    jump_35cc6
		jmp    jump_35bf0
	jump_35c46:
		xor    %eax,%eax
		mov    0x72(%ebp),%al
		imul   $0x1eb,%eax,%eax
		mov    $0x1,%dl
		mov    $0x1eb,%edi
		xor    %ebx,%ebx
		mov    data_55786(%eax),%ax
		mov    %dl,data_55595
		mov    %ax,data_5559b
		lea    0x0(%eax),%eax
	jump_35c70:
		xor    %ecx,%ecx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_35c80:
		xor    %eax,%eax
		mov    0x72(%ebp),%al
		mov    %eax,%esi
		imul   %edi,%esi
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %cx,%ax
		shl    $0x4,%edx
		add    %eax,%eax
		add    %edx,%esi
		add    %eax,%esi
		add    %edx,%eax
		mov    data_5578a(%esi),%dx
		inc    %ecx
		mov    %dx,data_5559d(%eax)
		cmp    $0x18,%cx
		jb     jump_35c80
		inc    %ebx
		cmp    $0xa,%bx
		jb     jump_35c70
	jump_35cc6:
		xor    %eax,%eax
		xor    %bl,%bl
		mov    %eax,data_55597
		mov    %bl,0x7e(%ebp)
	jump_35cd2:
		cmpw   $0x10,EXPORT_SYMBOL(lbDisplay__MMouseX_640)	/* lbDisplay.MMouseX but scaled */
		jbe    def_35899
		cmpw   $0x92,EXPORT_SYMBOL(lbDisplay__MMouseX_640)
		jae    def_35899
		cmpw   $0xb6,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    def_35899
		cmpw   $0xd0,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    def_35899
		xor    %bh,%bh
		mov    %bh,0x7e(%ebp)
		mov    %bh,0x72(%ebp)

	def_35899:	/* 0x35d05 */
		movb   $0x8,0x76(%ebp)
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpb   $0x0,0x66(%ebp)
		jne    jump_35dca
	jump_35d22:
		push   $0xfc0
		mov    0x46(%ebp),%ebx
		call   process_day
		mov    EXPORT_SYMBOL(research),%ah
		inc    %ebx
		add    $0x4,%esp
		mov    %bx,0x46(%ebp)
		cmp    $0x1,%ah
		jne    jump_35d47
		call   CompleteResearch
	jump_35d47:
		call   LbCopyScreenFromBackMCGA
		call   DrawAcceptGadget
		call   DrawMenuGadget
		cmpb   $0x0,data_55595
		je     jump_34c03
		cmpb   $0x0,0x7e(%ebp)
		jne    jump_34c03
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b6a2,%cx
		push   $0xfffffffe
		cmp    %cx,%ax
		jbe    jump_34b2b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b6a6,%ax
		jae    jump_34b2b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b6a0,%ax
		jbe    jump_34b2b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b6a4,%ax
		jae    jump_34b2b
		mov    $0x166,%eax
		jmp    jump_34b30
	jump_35dca:
		mov    $0x1,%edx
		mov    $AniName,%edi
		mov    $aDataMresoutDat,%esi
		xor    %ebx,%ebx
		xor    %ah,%ah
		mov    %edx,EXPORT_SYMBOL(MouseSwap)
		mov    %ebx,MouseOldW
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		push   $0x2
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   %ebx
		push   %ebx
		call   AniPlay
		add    $0xc,%esp
		call   LbCopyScreenToBackMCGA
		mov    0x3e(%ebp),%eax
		lea    0x82(%ebp),%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
DoResearch:	/* 0x35e20 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x14,%esp
		mov    $0x2,%ah
		mov    data_55595,%dl
		mov    %ah,0x10(%esp)
		test   %dl,%dl
		je     jump_36177
		mov    data_55597,%edx
		cmp    $0xffffffff,%edx
		je     jump_36171
		lea    (%edx,%edx,1),%eax
		xor    %ebx,%ebx
		mov    data_5b95c(%eax),%ax
		mov    data_5559b,%bx
		and    $0xffff,%eax
		imul   %eax,%ebx
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%ecx
		cmp    %ecx,%ebx
		ja     jump_36161
		mov    %ecx,%esi
		sub    %ebx,%esi
		xor    %cl,%cl
		xor    %bh,%bh
		mov    %esi,EXPORT_SYMBOL(players)(%eax)
	jump_35ea0:
		xor    %bl,%bl
	jump_35ea2:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		shl    $0x4,%edx
		mov    %bl,%al
		cmpw   $0x0,data_5559d(%edx,%eax,2)
		jne    jump_35ec7
		inc    %cl
		jmp    jump_35ece
	jump_35ec7:
		inc    %bl
		cmp    $0x18,%bl
		jb     jump_35ea2
	jump_35ece:
		test   %cl,%cl
		jne    jump_35ed9
		inc    %bh
		cmp    $0xa,%bh
		jb     jump_35ea0
	jump_35ed9:
		test   %bh,%bh
		jne    jump_35f0b
		test   %bl,%bl
		jne    jump_35f0b
		mov    data_55597,%ax
		inc    %eax
		imul   $0xa,%eax,%ecx
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		shl    $0x4,%edx
		mov    %bh,%al
		mov    %cx,data_5559d(%edx,%eax,2)
		jmp    jump_35f72
	jump_35f0b:
		mov    data_55597,%si
		inc    %esi
		imul   $0xa,%esi,%esi
		test   %bl,%bl
		je     jump_35f3c
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		shl    $0x4,%edx
		mov    %bl,%al
		mov    data_5559b(%edx,%eax,2),%cx
		add    %ecx,%esi
		jmp    jump_35f6a
	jump_35f3c:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    -0x1(%edx),%ecx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		shl    $0x4,%eax
		mov    data_555cb(%eax),%di
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		shl    $0x4,%edx
		add    %edi,%esi
	jump_35f6a:
		mov    %si,data_5559d(%edx,%eax,2)
	jump_35f72:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		shl    $0x4,%edx
		xor    %cl,%cl
		mov    data_5559d(%edx,%eax,2),%si
		mov    %cl,0x10(%esp)
		cmp    $0x960,%si
		jl     jump_36177
		mov    $0x1,%ch
		mov    data_55595,%al
		mov    %ch,0x10(%esp)
		cmp    %ch,%al
		jb     jump_36177
		jbe    jump_35fc3
		cmp    $0x2,%al
		je     jump_36096
		jmp    jump_36177
	jump_35fc3:
		xor    %eax,%eax
		mov    data_55596,%al
		imul   $0x1eb,%eax,%eax
		mov    $0x960,%edx
		mov    $0x1eb,%esi
		mov    %cl,(%esp)
		mov    %dx,data_55788(%eax)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_35ff0:
		xor    %dl,%dl
		mov    %dl,0x8(%esp)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_36000:
		xor    %ebx,%ebx
		mov    data_55596,%bl
		imul   %esi,%ebx
		xor    %edx,%edx
		mov    (%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x8(%esp),%al
		shl    $0x4,%edx
		add    %eax,%eax
		lea    (%edx,%eax,1),%ecx
		add    %ebx,%edx
		add    %edx,%eax
		mov    data_5559d(%ecx),%dx
		mov    %dx,data_5578a(%eax)
		mov    0x8(%esp),%dh
		inc    %dh
		mov    %dh,0x8(%esp)
		cmp    $0x18,%dh
		jb     jump_36000
		mov    (%esp),%ch
		inc    %ch
		mov    %ch,(%esp)
		cmp    $0xa,%ch
		jb     jump_35ff0
		cmpb   $0x0,data_5596a(%ebx)
		je     jump_36177
		xor    %eax,%eax
		mov    data_5596a(%ebx),%al
		imul   $0x1eb,%eax,%eax
		movswl data_55788(%eax),%edx
		cmp    $0xffffffff,%edx
		jne    jump_36177
		xor    %ecx,%ecx
		mov    %cx,data_55788(%eax)
		mov    0x10(%esp),%al
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36096:
		xor    %eax,%eax
		mov    data_55596,%al
		imul   $0x1f5,%eax,%eax
		mov    $0x960,%edi
		mov    $0x1f5,%esi
		mov    %cl,0x4(%esp)
		mov    %di,data_57c05(%eax)
		lea    0x0(%eax),%eax
		mov    %edx,%edx
	jump_360c0:
		xor    %dl,%dl
		mov    %dl,0xc(%esp)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_360d0:
		xor    %ebx,%ebx
		mov    data_55596,%bl
		imul   %esi,%ebx
		xor    %edx,%edx
		mov    0x4(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xc(%esp),%al
		shl    $0x4,%edx
		add    %eax,%eax
		lea    (%edx,%eax,1),%ecx
		add    %ebx,%edx
		add    %edx,%eax
		mov    data_5559d(%ecx),%dx
		mov    %dx,data_57c07(%eax)
		mov    0xc(%esp),%dh
		inc    %dh
		mov    %dh,0xc(%esp)
		cmp    $0x18,%dh
		jb     jump_360d0
		mov    0x4(%esp),%ch
		inc    %ch
		mov    %ch,0x4(%esp)
		cmp    $0xa,%ch
		jb     jump_360c0
		cmpb   $0x0,data_57de7(%ebx)
		je     jump_36177
		xor    %eax,%eax
		mov    data_57de7(%ebx),%al
		imul   $0x1f5,%eax,%eax
		movswl data_57c05(%eax),%edx
		cmp    $0xffffffff,%edx
		jne    jump_36177
		xor    %ebx,%ebx
		mov    %bx,data_57c05(%eax)
		mov    0x10(%esp),%al
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36161:
		movb   $0x3,0x10(%esp)
		mov    0x10(%esp),%al
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36171:
		xor    %dh,%dh
		mov    %dh,0x10(%esp)
	jump_36177:
		mov    0x10(%esp),%al
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CompleteResearch:	/* 0x36190 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x10,%esp
		mov    $0x2,%ah
		mov    data_55595,%al
		mov    %ah,EXPORT_SYMBOL(research)
		cmp    $0x1,%al
		jb     jump_362c9
		jbe    jump_361b9
		cmp    %ah,%al
		je     jump_3623d
		jmp    jump_362c9
	jump_361b9:
		xor    %dh,%dh
		mov    %dh,(%esp)
		mov    $0x1eb,%esi
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		nop
	jump_361d0:
		xor    %ah,%ah
		mov    %ah,0x4(%esp)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_361e0:
		xor    %ebx,%ebx
		mov    data_55596,%bl
		imul   %esi,%ebx
		xor    %edx,%edx
		mov    (%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x4(%esp),%al
		shl    $0x4,%edx
		add    %eax,%eax
		lea    (%edx,%eax,1),%ecx
		add    %ebx,%edx
		add    %edx,%eax
		mov    data_5559d(%ecx),%dx
		mov    %dx,data_5578a(%eax)
		mov    0x4(%esp),%dl
		inc    %dl
		mov    %dl,0x4(%esp)
		cmp    $0x18,%dl
		jb     jump_361e0
		mov    (%esp),%bl
		inc    %bl
		mov    %bl,(%esp)
		cmp    $0xa,%bl
		jae    jump_362c9
		jmp    jump_361d0
	jump_3623d:
		xor    %dl,%dl
		mov    $0x1f5,%esi
		mov    %dl,0xc(%esp)
		lea    0x0(%eax),%eax
		mov    %edx,%edx
	jump_36250:
		xor    %bl,%bl
		mov    %bl,0x8(%esp)
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_36260:
		xor    %eax,%eax
		mov    data_55596,%al
		imul   %esi,%eax
		xor    %edx,%edx
		mov    0xc(%esp),%dl
		lea    0x0(,%edx,4),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x8(%esp),%dl
		shl    $0x4,%ebx
		add    %edx,%edx
		lea    (%ebx,%edx,1),%ecx
		add    %eax,%ebx
		add    %ebx,%edx
		mov    data_5559d(%ecx),%bx
		mov    %bx,data_57c07(%edx)
		mov    data_57bf5(%eax),%edx
		test   %edx,%edx
		jge    jump_362ab
		neg    %edx
		mov    %edx,data_57bf5(%eax)
	jump_362ab:
		mov    0x8(%esp),%bh
		inc    %bh
		mov    %bh,0x8(%esp)
		cmp    $0x18,%bh
		jb     jump_36260
		mov    0xc(%esp),%ch
		inc    %ch
		mov    %ch,0xc(%esp)
		cmp    $0xa,%ch
		jb     jump_36250
	jump_362c9:
		mov    $0xffffffff,%ebx
		xor    %cl,%cl
		xor    %ch,%ch
		xor    %edx,%edx
		mov    %cl,data_55595
		mov    %cl,data_55596
		mov    %ebx,data_55597
		mov    %dx,data_5559b
		xor    %bh,%bh
		nop
	jump_362f0:
		mov    %cl,%bl
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_36300:
		xor    %edx,%edx
		mov    %bh,%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		shl    $0x4,%edx
		inc    %bl
		mov    %cx,data_5559d(%edx,%eax,2)
		cmp    $0x18,%bl
		jb     jump_36300
		inc    %bh
		cmp    $0xa,%bh
		jb     jump_362f0
		add    $0x10,%esp
		pop    %esi
		pop    %ebx
		ret

vtable_36334:
		.long   func_363cb
		.long   func_363e8
		.long   func_36405
		.long   func_36422


/*----------------------------------------------------------------*/
GetWeaponName:	/* 0x36350 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%bl
		mov    0x18(%esp),%edx
		xor    %eax,%eax
		mov    %bl,%al
		imul   $0x1f5,%eax,%eax
		mov    data_57de8(%eax),%bh
		test   %bh,%bh
		jne    jump_363b6
		cmpb   $0xe,EXPORT_SYMBOL(weapons)(%eax)
		jne    jump_36380
		movb   $0x10,EXPORT_SYMBOL(weapons)(%eax)
	jump_36380:
		xor    %eax,%eax
		mov    %bl,%al
		imul   $0x1f5,%eax,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(weapons)(%eax),%bl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_weapon_names(%ebx,%eax,4),%ebp
		push   %ebp
		jmp    jump_36431
	jump_363b6:
		mov    %bh,%al
		dec    %al
		cmp    $0x3,%al
		ja     jump_3643a
		and    $0xff,%eax
		jmp    *%cs:vtable_36334(,%eax,4)


/*----------------------------------------------------------------*/
func_363cb:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_weapon_category_automatic(,%eax,4),%edi
		push   %edi
		push   %edx
		call   ac_strcpy
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_363e8:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_weapon_category_heavy(,%eax,4),%esi
		push   %esi
		push   %edx
		call   ac_strcpy
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_36405:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_weapon_category_assault(,%eax,4),%ecx
		push   %ecx
		push   %edx
		call   ac_strcpy
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_36422:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_weapon_category_misc(,%eax,4),%ebx
		push   %ebx
	jump_36431:
		push   %edx
		call   ac_strcpy
		add    $0x8,%esp
	jump_3643a:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_west:	/* 0x36440 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x14(%esp),%esi
		mov    0x1c(%esp),%ecx
		mov    0x18(%esp),%eax
		sub    $0x100,%esi
		and    $0x7f,%ah
		xor    %al,%al
		xor    %edi,%edi
		mov    %eax,(%esp)
	jump_36462:
		movswl %si,%eax
		movswl (%esp),%edx
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_364d5
	jump_36480:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_364cd
		movswl 0x8(%eax),%ebx
		movswl %cx,%edx
		and    $0xff00,%ebx
		and    $0xff00,%edx
		cmp    %edx,%ebx
		jne    jump_364cd
		cmpw   $0x0,0x1c(%eax)
		je     jump_364cd
		cmpb   $0xc0,0x1a(%eax)
		jne    jump_364cd
		xor    %edx,%edx
		mov    0x1c(%eax),%dx
		add    $level__things_base,%edx
		cmpb   $0x0,0x54(%edx)
		jbe    jump_364cd
		mov    $0x1,%eax
		jmp    jump_364e4
	jump_364cd:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_36480
	jump_364d5:
		inc    %edi
		add    $0x100,%esi
		cmp    $0x6,%di
		jb     jump_36462
		xor    %eax,%eax
	jump_364e4:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_east:	/* 0x364f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x18(%esp),%ecx
		mov    0x11(%esp),%ah
		mov    0x14(%esp),%edi
		xor    %esi,%esi
		inc    %ah
		and    $0x7f00,%edi
		mov    %ah,0x11(%esp)
	jump_3650d:
		movswl 0x10(%esp),%eax
		movswl %di,%edx
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_36584
	jump_3652c:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_3657c
		movswl 0x8(%eax),%ebx
		movswl %cx,%edx
		and    $0xff00,%ebx
		and    $0xff00,%edx
		cmp    %edx,%ebx
		jne    jump_3657c
		mov    0x1c(%eax),%bx
		test   %bx,%bx
		je     jump_3657c
		cmpb   $0x40,0x1a(%eax)
		jne    jump_3657c
		xor    %edx,%edx
		mov    %bx,%dx
		add    $level__things_base,%edx
		cmpb   $0x0,0x54(%edx)
		jbe    jump_3657c
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3657c:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_3652c
	jump_36584:
		mov    0x10(%esp),%edx
		sub    $0x100,%edx
		inc    %esi
		mov    %dx,0x10(%esp)
		cmp    $0x6,%si
		jb     jump_3650d
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_north:	/* 0x365b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%edi
		mov    0x18(%esp),%ecx
		mov    0x15(%esp),%ah
		inc    %ah
		xor    %esi,%esi
		mov    %ah,0x15(%esp)
	jump_365c7:
		mov    0x14(%esp),%eax
		and    $0x7f,%ah
		xor    %al,%al
		cwtl
		mov    %eax,%edx
		movswl %di,%eax
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %eax,%edx
		mov    level__MapWho(,%edx,2),%ax
		test   %ax,%ax
		je     jump_36645
	jump_365ed:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_3663d
		movswl 0x8(%eax),%ebx
		movswl %cx,%edx
		and    $0xff00,%ebx
		and    $0xff00,%edx
		cmp    %edx,%ebx
		jne    jump_3663d
		mov    0x1c(%eax),%bx
		test   %bx,%bx
		je     jump_3663d
		cmpb   $0x0,0x1a(%eax)
		jne    jump_3663d
		xor    %edx,%edx
		mov    %bx,%dx
		add    $level__things_base,%edx
		cmpb   $0x0,0x54(%edx)
		jbe    jump_3663d
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3663d:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_365ed
	jump_36645:
		mov    0x14(%esp),%edx
		sub    $0x100,%edx
		inc    %esi
		mov    %dx,0x14(%esp)
		cmp    $0x6,%si
		jb     jump_365c7
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_south:	/* 0x36670 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x14(%esp),%esi
		mov    0x18(%esp),%ecx
		sub    $0x100,%esi
		xor    %edi,%edi
	jump_36683:
		mov    %esi,%eax
		and    $0x7f,%ah
		xor    %al,%al
		cwtl
		mov    %eax,%edx
		movswl 0x10(%esp),%eax
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %eax,%edx
		mov    level__MapWho(,%edx,2),%ax
		test   %ax,%ax
		je     jump_36700
	jump_366a9:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmpb   $0x2,0x18(%eax)
		jne    jump_366f8
		movswl 0x8(%eax),%ebx
		movswl %cx,%edx
		and    $0xff00,%ebx
		and    $0xff00,%edx
		cmp    %edx,%ebx
		jne    jump_366f8
		cmpw   $0x0,0x1c(%eax)
		je     jump_366f8
		cmpb   $0x80,0x1a(%eax)
		jne    jump_366f8
		xor    %edx,%edx
		mov    0x1c(%eax),%dx
		add    $level__things_base,%edx
		cmpb   $0x0,0x54(%edx)
		jbe    jump_366f8
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_366f8:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_366a9
	jump_36700:
		inc    %edi
		add    $0x100,%esi
		cmp    $0x6,%di
		jb     jump_36683
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_36718:
		.long   func_367c0
		.long   func_367cf
		.long   func_367de
		.long   func_367ed
		.long   jump_36860
		.long   func_367fc


/*----------------------------------------------------------------*/
check_for_on_coming_cars:	/* 0x36730 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		movswl 0x14(%esp),%ebx
		mov    $0x6000,%esi
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x10(%esp),%esi
		mov    %esi,%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %ecx,%eax
		movswl 0x18(%esp),%edi
		lea    0x0(,%eax,4),%ecx
		mov    data_55358,%eax
		lea    -0x1(%edi),%edx
		add    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ecx),%eax
		mov    (%eax),%al
		mov    h_col,%edx
		and    $0xff,%eax
		mov    (%edx,%eax,1),%al
		sub    $0x6,%al
		cmp    $0x5,%al
		ja     jump_36860
		and    $0xff,%eax
		jmp    *%cs:vtable_36718(,%eax,4)


/*----------------------------------------------------------------*/
func_367c0:
/*----------------------------------------------------------------*/
		push   %edi
		push   %ebx
		push   %esi
		call   check_west
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_367cf:
/*----------------------------------------------------------------*/
		push   %edi
		push   %ebx
		push   %esi
		call   check_east
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_367de:
/*----------------------------------------------------------------*/
		push   %edi
		push   %ebx
		push   %esi
		call   check_north
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_367ed:
/*----------------------------------------------------------------*/
		push   %edi
		push   %ebx
		push   %esi
		call   check_south
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_367fc:
/*----------------------------------------------------------------*/
		push   %edi
		push   %ebx
		push   %esi
		call   check_west
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_36815
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36815:
		push   %edi
		push   %ebx
		push   %esi
		call   check_east
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_3682e
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3682e:
		push   %edi
		push   %ebx
		push   %esi
		call   check_north
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_36847
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36847:
		push   %edi
		push   %ebx
		push   %esi
		call   check_south
		add    $0xc,%esp
		test   %ax,%ax
		je     jump_36862
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36860:
		xor    %eax,%eax
	jump_36862:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
there_is_a_road_here:	/* 0x36870 */
/*----------------------------------------------------------------*/
		push   %ebx
		movswl 0xc(%esp),%edx
		mov    $0x6000,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x8(%esp),%edx
		and    $0xff00,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ebx
		add    %ebx,%eax
		mov    data_55358,%edx
		lea    0x0(,%eax,4),%eax
		lea    (%edx,%eax,1),%ebx
		movswl 0x10(%esp),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ebx),%eax
		mov    (%eax),%al
		mov    h_col,%edx
		and    $0xff,%eax
		mov    (%edx,%eax,1),%al
		cmp    $0x6,%al
		jb     jump_368f5
		cmp    $0x9,%al
		jbe    jump_368ee
		cmp    $0xb,%al
		jne    jump_368f5
	jump_368ee:
		mov    $0x1,%eax
		pop    %ebx
		ret
	jump_368f5:
		xor    %eax,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
center_block:	/* 0x36900 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    %eax,%edx
		mov    0xc(%esp),%ebx
		xor    %ah,%dh
		sub    %ebx,%edx
		mov    %eax,%ebx
		sub    %edx,%ebx
		test   %dx,%dx
		jge    jump_36927
		movswl %dx,%edx
		cmp    $0xffffffe0,%edx
		jge    jump_36934
		add    $0x20,%eax
		pop    %ebx
		ret
	jump_36927:
		jle    jump_36936
		cmp    $0x20,%dx
		jle    jump_36934
		sub    $0x20,%eax
		pop    %ebx
		ret
	jump_36934:
		mov    %ebx,%eax
	jump_36936:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
there_is_a_car_or_person:	/* 0x36940 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    data_60b5a,%cx
		mov    data_60b5c,%ax
		and    $0x7f,%ah
		xor    %al,%al
		cwtl
		mov    %eax,%edx
		movswl data_60b5e,%eax
		sar    $0x8,%eax
		sar    $1,%edx
		and    $0x7f,%eax
		or     %edx,%eax
		mov    level__MapWho(,%eax,2),%ax
		test   %ax,%ax
		je     jump_369b6
	jump_36974:
		and    $0xffff,%eax
		add    $level__things_base,%eax
		testb  $0x1,0xb(%eax)
		jne    jump_369ae
		testb  $0x1,0xa(%eax)
		jne    jump_369ae
		movswl 0x8(%eax),%ebx
		movswl %cx,%edx
		and    $0xff00,%ebx
		and    $0xff00,%edx
		cmp    %ebx,%edx
		jne    jump_369ae
		mov    0x18(%eax),%bl
		cmp    $0x2,%bl
		je     jump_369b8
		cmp    $0x1,%bl
		je     jump_369b8
	jump_369ae:
		mov    (%eax),%ax
		test   %ax,%ax
		jne    jump_36974
	jump_369b6:
		xor    %eax,%eax
	jump_369b8:
		mov    %cx,data_60b5a
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
car_break:	/* 0x369d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ecx
		mov    0xc(%esp),%eax
		mov    0x1c(%eax),%dx
		test   %dx,%dx
		je     jump_36a0c
		mov    %dx,%ax
		and    $0xffff,%eax
		xor    %edx,%edx
		add    $level__things_base,%eax
		xor    %ebx,%ebx
		mov    0x10(%esp),%dx
		mov    0x54(%eax),%bl
		cmp    %edx,%ebx
		jle    jump_36a0c
		mov    0x10(%esp),%ah
		mov    %bl,%al
		sub    %ah,%al
		mov    %al,0x54(%ecx)
		pop    %ebx
		ret
	jump_36a0c:
		movb   $0x0,0x54(%ecx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
copy_speed:	/* 0x36a20 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    %cx,%dx
		mov    0x54(%eax),%bl
		cmp    %edx,%ebx
		jle    jump_36a40
		mov    %bl,%dl
		sub    %cl,%dl
		mov    %dl,0x54(%eax)
		pop    %ebx
		ret
	jump_36a40:
		movb   $0x0,0x54(%eax)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
drive_down_road:	/* 0x36a50 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    0x1c(%esp),%edi
		mov    0x18(%esp),%eax
		mov    $0xffffffff,%esi
		mov    0x1a(%eax),%al
		xor    %ebx,%ebx
		mov    %al,(%esp)
		mov    %al,0x4(%esp)
		jmp    jump_36b38
	jump_36a74:
		xor    %eax,%eax
		mov    (%esp),%al
		cwtl
		push   %eax
		call   vehicle_which_way
		add    $0x4,%esp
		mov    0x4(%esp),%ah
		mov    %al,(%esp)
		cmp    %ah,%al
		je     jump_36a98
		movswl %si,%eax
		cmp    $0xffffffff,%eax
		jne    jump_36a98
		mov    %ebx,%esi
	jump_36a98:
		xor    %edx,%edx
		mov    (%esp),%dl
		movswl data_5ab60(,%edx,2),%ecx
		shl    $0x8,%ecx
		movswl data_60b5e,%eax
		sar    $0x8,%ecx
		add    %ecx,%eax
		mov    %ax,data_60b5e
		movswl data_5ad60(,%edx,2),%eax
		mov    %eax,%edx
		shl    $0x8,%edx
		movswl data_60b5c,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		mov    %ax,data_60b5c
		cmp    $0x3,%bx
		jge    jump_36b37
		call   there_is_a_car_or_person
		test   %eax,%eax
		je     jump_36b37
		cmpb   $0x2,0x18(%eax)
		jne    jump_36b10
		cmp    $0x1,%bx
		jge    jump_36afa
		movb   $0x0,0x54(%edi)
		jmp    jump_36b06
	jump_36afa:
		push   $0x8
		push   %eax
		push   %edi
		call   car_break
		add    $0xc,%esp
	jump_36b06:
		mov    $0x3e7,%esi
		jmp    jump_36bb2
	jump_36b10:
		testb  $0x2,0x1c(%edi)
		jne    jump_36b37
		cmp    $0x1,%bx
		jge    jump_36b22
		movb   $0x0,0x54(%edi)
		jmp    jump_36b2d
	jump_36b22:
		push   $0x10
		push   %edi
		call   copy_speed
		add    $0x8,%esp
	jump_36b2d:
		mov    $0x3e7,%esi
		jmp    jump_36bb2
	jump_36b37:
		inc    %ebx
	jump_36b38:
		xor    %eax,%eax
		movswl %bx,%edx
		mov    0x20(%esp),%ax
		cmp    %eax,%edx
		jl     jump_36a74
		jmp    jump_36bb2
	jump_36b4c:
		xor    %eax,%eax
		mov    (%esp),%al
		cwtl
		push   %eax
		call   vehicle_which_way
		add    $0x4,%esp
		mov    0x4(%esp),%cl
		mov    %al,(%esp)
		cmp    %cl,%al
		je     jump_36b70
		movswl %si,%eax
		cmp    $0xffffffff,%eax
		jne    jump_36b70
		mov    %ebx,%esi
	jump_36b70:
		xor    %edx,%edx
		mov    (%esp),%dl
		movswl data_5ab60(,%edx,2),%ecx
		shl    $0x8,%ecx
		movswl data_60b5e,%eax
		sar    $0x8,%ecx
		add    %ecx,%eax
		mov    %ax,data_60b5e
		movswl data_5ad60(,%edx,2),%eax
		mov    %eax,%edx
		shl    $0x8,%edx
		movswl data_60b5c,%eax
		sar    $0x8,%edx
		add    %edx,%eax
		inc    %ebx
		mov    %ax,data_60b5c
	jump_36bb2:
		xor    %eax,%eax
		movswl %bx,%edx
		mov    0x20(%esp),%ax
		cmp    %eax,%edx
		jl     jump_36b4c
		movswl %si,%edx
		cmp    %eax,%edx
		jge    jump_36bf3
		test   %si,%si
		jl     jump_36bf3
		push   $0x8
		push   %edi
		call   copy_speed
		xor    %edx,%edx
		mov    0x55(%edi),%dl
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		xor    %edx,%edx
		mov    0x54(%edi),%dl
		add    $0x8,%esp
		cmp    %eax,%edx
		jge    jump_36c0e
		mov    %al,0x54(%edi)
		jmp    jump_36c0e
	jump_36bf3:
		movswl %si,%eax
		cmp    $0xffffffff,%eax
		jne    jump_36c0e
		mov    0x54(%edi),%bl
		add    $0x4,%bl
		mov    0x55(%edi),%bh
		mov    %bl,0x54(%edi)
		cmp    %bh,%bl
		jbe    jump_36c0e
		mov    %bh,0x54(%edi)
	jump_36c0e:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
i_can_drive_in_this_direction:	/* 0x36c20 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    data_55358,%esi
		mov    h_col,%edi
		mov    0x14(%esp),%ecx
		mov    0x1c(%esp),%al
		cmp    $0x40,%al
		jb     jump_36c5c
		jbe    jump_36d85
		cmp    $0x80,%al
		jb     jump_36ea6
		jbe    jump_36cf3
		cmp    $0xc0,%al
		je     jump_36e17
		jmp    jump_36ea6
	jump_36c5c:
		test   %al,%al
		jne    jump_36ea6
		movswl data_5ad60,%edx
		shl    $0x8,%edx
		movswl %cx,%eax
		sar    $0x8,%edx
		add    %eax,%edx
		mov    $0x6000,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x10(%esp),%edx
		and    $0xff00,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x18(%esp),%edx
		shl    $0x7,%ebx
		dec    %edx
		add    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		lea    0x0(,%ebx,4),%ebx
		add    %esi,%ebx
		add    (%ebx),%eax
		xor    %edx,%edx
		mov    (%eax),%dl
		mov    %edi,%eax
		cmpb   $0x8,(%edx,%eax,1)
		jne    jump_36ea6
		mov    $0x1,%edx
		mov    %edx,%eax
		mov    %edi,h_col
		mov    %esi,data_55358
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36cf3:
		movswl data_5ae60,%edx
		shl    $0x8,%edx
		movswl %cx,%eax
		sar    $0x8,%edx
		add    %eax,%edx
		mov    $0x6000,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x10(%esp),%edx
		and    $0xff00,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ebx
		movswl 0x18(%esp),%edx
		add    %ebx,%eax
		dec    %edx
		lea    0x0(,%eax,4),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    %esi,%ebx
		add    (%ebx),%eax
		mov    (%eax),%al
		mov    %edi,%edx
		and    $0xff,%eax
		cmpb   $0x9,(%edx,%eax,1)
		jne    jump_36ea6
		mov    $0x1,%edx
		mov    %edx,%eax
		mov    %edi,h_col
		mov    %esi,data_55358
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36d85:
		movswl data_5abe0,%eax
		shl    $0x8,%eax
		movswl 0x10(%esp),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		and    $0xff00,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ebx
		movswl %cx,%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		movswl 0x18(%esp),%edx
		shl    $0x7,%eax
		dec    %edx
		add    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		lea    0x0(,%ebx,4),%ebx
		add    %esi,%ebx
		add    (%ebx),%eax
		mov    (%eax),%al
		mov    %edi,%edx
		and    $0xff,%eax
		cmpb   $0x7,(%edx,%eax,1)
		jne    jump_36ea6
		mov    $0x1,%edx
		mov    %edx,%eax
		mov    %edi,h_col
		mov    %esi,data_55358
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36e17:
		movswl data_5ace0,%eax
		shl    $0x8,%eax
		movswl 0x10(%esp),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		and    $0xff00,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ebx
		movswl %cx,%edx
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%eax
		add    %ebx,%eax
		movswl 0x18(%esp),%edx
		lea    0x0(,%eax,4),%eax
		dec    %edx
		lea    (%esi,%eax,1),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%ebx),%eax
		mov    (%eax),%al
		mov    %edi,%edx
		and    $0xff,%eax
		cmpb   $0x6,(%edx,%eax,1)
		jne    jump_36ea6
		mov    $0x1,%edx
		mov    %edx,%eax
		mov    %edi,h_col
		mov    %esi,data_55358
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_36ea6:
		xor    %edx,%edx
		mov    %edx,%eax
		mov    %edi,h_col
		mov    %esi,data_55358
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
vehicle_which_way:	/* 0x36ec0 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x8,%esp
		mov    0x10(%esp),%bl
		test   %bl,%bl
		je     jump_36ed5
		cmp    $0x80,%bl
		jne    jump_36fe6
	jump_36ed5:
		movswl data_60b5e,%edx
		movswl data_60b54,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		je     jump_36f35
		sub    %edx,%eax
		push   $0x0
		cwtl
		push   %eax
		call   arctan
		mov    %ax,0x8(%esp)
		add    $0x8,%esp
		xor    %eax,%eax
		mov    (%esp),%al
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_36f35
		xor    %eax,%eax
		mov    (%esp),%al
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_36f35:
		xor    %eax,%eax
		mov    %bl,%al
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_36f66
		xor    %eax,%eax
		jmp    jump_37107
	jump_36f66:
		mov    %bl,%al
		sub    $0x40,%al
		and    $0xff,%eax
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_36fa3
		xor    %eax,%eax
		mov    %bl,%al
		sub    $0x40,%eax
		xor    %ah,%ah
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_36fa3:
		mov    %bl,%al
		add    $0x40,%al
		and    $0xff,%eax
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_37107
		xor    %eax,%eax
		mov    %bl,%al
		add    $0x40,%eax
		xor    %ah,%ah
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_36fe6:
		cmp    $0xc0,%bl
		je     jump_36ff4
		cmp    $0x40,%bl
		jne    jump_37105
	jump_36ff4:
		movswl data_60b5c,%edx
		movswl data_60b56,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %eax,%edx
		je     jump_37056
		sub    %edx,%eax
		cwtl
		push   %eax
		push   $0x0
		call   arctan
		mov    %ax,0xc(%esp)
		add    $0x8,%esp
		xor    %eax,%eax
		mov    0x4(%esp),%al
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_37056
		xor    %eax,%eax
		mov    0x4(%esp),%al
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_37056:
		xor    %eax,%eax
		mov    %bl,%al
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_37089
		xor    %eax,%eax
		mov    %bl,%al
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_37089:
		mov    %bl,%al
		sub    $0x40,%al
		and    $0xff,%eax
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_370c6
		xor    %eax,%eax
		mov    %bl,%al
		sub    $0x40,%eax
		xor    %ah,%ah
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_370c6:
		mov    %bl,%al
		add    $0x40,%al
		and    $0xff,%eax
		push   %eax
		movswl data_60b5a,%eax
		push   %eax
		movswl data_60b5c,%eax
		push   %eax
		movswl data_60b5e,%eax
		push   %eax
		call   i_can_drive_in_this_direction
		add    $0x10,%esp
		test   %ax,%ax
		je     jump_37107
		xor    %eax,%eax
		mov    %bl,%al
		add    $0x40,%eax
		xor    %ah,%ah
		add    $0x8,%esp
		pop    %ebx
		ret
	jump_37105:
		xor    %eax,%eax
	jump_37107:
		mov    %bl,%al
		add    $0x8,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_goto_in_vehicle:	/* 0x37110 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%esi
		mov    0x19(%esi),%ah
		cmp    $0x5,%ah
		je     jump_3712f
		cmp    $0x6,%ah
		jne    jump_37299
	jump_3712f:
		movswl 0x2e(%ebx),%edx
		movswl data_60b28,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		push   %edx
		call   ac_abs
		mov    %eax,%edi
		movswl 0x30(%ebx),%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		add    $0x4,%esp
		sub    %eax,%edx
		push   %edx
		call   ac_abs
		mov    %eax,0x4(%esp)
		add    $0x4,%esp
		cmp    (%esp),%di
		jle    jump_371ae
		mov    data_60b28,%dx
		mov    0x2e(%ebx),%ax
		sub    %edx,%eax
		push   $0x0
		cwtl
		push   %eax
		call   arctan
		add    $0x8,%esp
		mov    %al,0x29(%esi)
		push   $0x80
		movswl data_60b2a,%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    %ax,data_60b2a
		mov    %edi,%eax
		jmp    jump_371e8
	jump_371ae:
		mov    data_60b2a,%cx
		mov    0x30(%ebx),%ax
		sub    %ecx,%eax
		cwtl
		push   %eax
		push   $0x0
		call   arctan
		add    $0x8,%esp
		mov    %al,0x29(%esi)
		push   $0x80
		movswl data_60b28,%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    %ax,data_60b28
		mov    (%esp),%eax
	jump_371e8:
		cmp    $0x1,%ax
		jb     jump_371fc
		cmp    $0x2,%ax
		jbe    jump_37207
		cmp    $0x3,%ax
		je     jump_37219
		jmp    jump_3722c
	jump_371fc:
		test   %ax,%ax
		jne    jump_3722c
		movb   $0x0,0x54(%ebx)
		jmp    jump_3723f
	jump_37207:
		mov    0x54(%ebx),%al
		sub    $0xc,%al
		mov    %al,0x54(%ebx)
		cmp    $0xc,%al
		jae    jump_3723f
		movb   $0xc,0x54(%ebx)
		jmp    jump_3723f
	jump_37219:
		xor    %edx,%edx
		mov    0x55(%ebx),%dl
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    %al,0x54(%ebx)
		jmp    jump_3723f
	jump_3722c:
		mov    0x54(%ebx),%dl
		add    $0x4,%dl
		mov    0x55(%ebx),%dh
		mov    %dl,0x54(%ebx)
		cmp    %dh,%dl
		jbe    jump_3723f
		mov    %dh,0x54(%ebx)
	jump_3723f:
		movswl 0x2e(%ebx),%eax
		movswl data_60b28,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %eax,%edx
		jne    jump_37272
		movswl 0x30(%ebx),%eax
		movswl data_60b2a,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %eax,%edx
		jne    jump_37272
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_37272:
		mov    0x29(%esi),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    0x54(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		movswl 0x8(%esi),%eax
		jmp    jump_374b3
	jump_37299:
		mov    data_60b28,%ax
		mov    %ax,data_60b5e
		mov    data_60b2a,%ax
		mov    %ax,data_60b5c
		mov    data_60b2c,%ax
		mov    %ax,data_60b5a
		mov    0x2e(%ebx),%ax
		push   $0x6
		mov    %ax,data_60b54
		mov    0x30(%ebx),%ax
		push   %ebx
		mov    %ax,data_60b56
		mov    0x32(%ebx),%ax
		push   %esi
		mov    %ax,data_60b58
		call   drive_down_road
		mov    0x1a(%esi),%al
		add    $0xc,%esp
		cmp    $0x40,%al
		jb     jump_37300
		jbe    jump_37323
		cmp    $0x80,%al
		jb     jump_3735c
		jbe    jump_37344
		cmp    $0xc0,%al
		je     jump_37306
		jmp    jump_3735c
	jump_37300:
		test   %al,%al
		je     jump_3733d
		jmp    jump_3735c
	jump_37306:
		push   $0xc0
		movswl data_60b2a,%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    %ax,data_60b2a
		jmp    jump_3735c
	jump_37323:
		push   $0x40
		movswl data_60b2a,%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    %ax,data_60b2a
		jmp    jump_3735c
	jump_3733d:
		push   $0xc0
		jmp    jump_37346
	jump_37344:
		push   $0x40
	jump_37346:
		movswl data_60b28,%eax
		push   %eax
		call   center_block
		add    $0x8,%esp
		mov    %ax,data_60b28
	jump_3735c:
		movswl 0x34(%ebx),%eax
		movswl data_60b28,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %eax,%edx
		jne    jump_37386
		movswl 0x36(%ebx),%edx
		movswl data_60b2a,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %edx,%eax
		je     jump_373cf
	jump_37386:
		mov    data_60b28,%ax
		mov    %ax,data_60b5e
		mov    data_60b2a,%ax
		mov    %ax,data_60b5c
		mov    data_60b2c,%ax
		mov    %ax,data_60b5a
		xor    %eax,%eax
		mov    0x1a(%esi),%al
		push   %eax
		call   vehicle_which_way
		mov    %al,0x1a(%esi)
		mov    data_60b28,%ax
		mov    %ax,0x34(%ebx)
		mov    data_60b2a,%ax
		add    $0x4,%esp
		mov    %ax,0x36(%ebx)
	jump_373cf:
		testb  $0x2,0x1c(%ebx)
		jne    jump_373e3
		testb  $0x2,0xd(%esi)
		je     jump_373e3
		movb   $0x0,0x54(%ebx)
		andb   $0xfd,0xd(%esi)
	jump_373e3:
		movswl data_60b28,%edi
		movswl 0x2e(%ebx),%eax
		mov    %edi,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %eax,%edx
		jne    jump_37488
		movswl data_60b2a,%edx
		movswl 0x30(%ebx),%eax
		mov    %edx,%ecx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		cmp    %eax,%ecx
		jne    jump_37488
		mov    $0x6000,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %edi,%edx
		and    $0xff00,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		shl    $0x7,%ecx
		mov    data_55358,%edi
		add    %ecx,%eax
		movswl data_60b2c,%edx
		lea    0x0(,%eax,4),%eax
		dec    %edx
		add    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		add    (%edi),%eax
		xor    %edx,%edx
		mov    (%eax),%dl
		mov    h_col,%eax
		cmpb   $0x0,(%edx,%eax,1)
		je     jump_37488
		push   %ebx
		call   new_state_person
		add    $0x4,%esp
	jump_37488:
		mov    0x54(%ebx),%ch
		test   %ch,%ch
		jbe    jump_374cd
		mov    0x1a(%esi),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		mov    %ch,%al
		xor    %ah,%ah
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		movswl data_60b2c,%eax
	jump_374b3:
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %esi
		call   move_mapwho
		add    $0x10,%esp
	jump_374cd:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
nullsub_3:	/* 0x374e0 */
/*----------------------------------------------------------------*/
		ret
LbDrawText:	/* 0x374f0 */
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    m_font,%ebp
		mov    0x14(%esp),%esi
		mov    %esi,%edx
		mov    (%esi),%ah
		xor    %edi,%edi
		test   %ah,%ah
		je     jump_37536
	jump_37508:
		mov    (%edx),%al
		cmp    $0x20,%al
		jbe    jump_3752b
		and    $0xff,%eax
		lea    -0x20(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %ebp,%ebx
		mov    0x4(%ebx,%eax,2),%al
		xor    %ah,%ah
		add    %eax,%edi
		jmp    jump_37530
	jump_3752b:
		jne    jump_37530
		add    $0xc,%edi
	jump_37530:
		inc    %edx
		cmpb   $0x0,(%edx)
		jne    jump_37508
	jump_37536:
		mov    $0x280,%eax
		movswl %di,%edx
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		mov    %esi,%ebx
		mov    (%esi),%cl
		mov    %eax,%edi
		test   %cl,%cl
		je     jump_375b5
	jump_37553:
		mov    (%ebx),%al
		cmp    $0x20,%al
		jbe    jump_375aa
		sub    $0x20,%al
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,4),%esi
		sub    %edx,%esi
		add    %esi,%esi
		lea    (%esi,%ebp,1),%eax
		mov    0x1c(%esp),%edx
		push   %eax
		mov    0x5(%eax),%al
		xor    %ah,%ah
		sub    %eax,%edx
		mov    %dx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		mov    %ebp,m_font
		call   LbSpriteDrawMCGA
		mov    m_font,%ebp
		add    %ebp,%esi
		xor    %eax,%eax
		mov    0x4(%esi),%al
		sub    $0x2,%eax
		add    $0xc,%esp
		add    %eax,%edi
		jmp    jump_375af
	jump_375aa:
		jne    jump_375af
		add    $0xc,%edi
	jump_375af:
		inc    %ebx
		cmpb   $0x0,(%ebx)
		jne    jump_37553
	jump_375b5:
		mov    %ebp,m_font
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

jpt_3775C:	/* 0x375c0 */
		.long   func_377f8
		.long   func_37800
		.long   func_377c5
		.long   func_37764
jpt_378BB:	/* 0x375d0 */
		.long   func_378c3
		.long   func_37b19
		.long   func_37b29
		.long   func_37b93
		.long   def_378BB
		.long   func_37b9e
		.long   def_378BB
		.long   func_37bb1
		.long   func_37bb8
		.long   func_37bbf
		.long   def_378BB
		.long   func_37bdd


/*----------------------------------------------------------------*/
select:	/* 0x37600 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		push   $unk984_load_files
		xor    %ah,%ah
		xor    %edx,%edx
		mov    %ah,0x10(%esp)
		mov    %edx,m_spr_data
		mov    %edx,m_sprites
		mov    %edx,m_sprites_end
		call   ac_LbDataLoadAll
		mov    EXPORT_SYMBOL(SoundAble),%dl
		add    $0x4,%esp
		test   %dl,%dl
		je     jump_37654
		mov    data_5bb2c,%eax
		cmpl   $0x0,(%eax)
		jne    jump_37654
		push   $sound_bank_files
		call   ac_LbDataLoadAll
		add    $0x4,%esp
		call   sound_bank_setup
	jump_37654:
		xor    %edx,%edx
		jmp    jump_37699
	jump_3767a:
		mov    m_spr_data,%ebx
		mov    (%eax),%ecx
		add    %ebx,%ecx
		mov    0x4(%eax),%bl
		mov    0x5(%eax),%bh
		mov    %ecx,(%eax)
		add    %bl,%bl
		add    %bh,%bh
		mov    %bl,0x4(%eax)
		add    $0x6,%edx
		mov    %bh,0x5(%eax)
	jump_37699:
		mov    m_sprites,%eax
		mov    m_sprites_end,%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jne    jump_3767a
		mov    $0x1,%edi
		mov    %edi,EXPORT_SYMBOL(MouseSwap)
		xor    %ebp,%ebp
		mov    %ebp,MouseOldW
		mov    m_sprites,%eax
		add    $0x17a,%eax
#if defined(USE_BFLIB_MOUSE_CURSOR) /* moved as sprites need to be set up before use for mouse */
		push   %eax
		call   ac_LbMouseChangeSprite
		add    $0x4,%esp
#else
		mov    %eax,EXPORT_SYMBOL(mouse_sprite)
#endif
		xor    %esi,%esi
		jmp    jump_376cd
	jump_376ae:
		mov    m_font_data,%edx
		mov    (%eax),%edi
		add    %edx,%edi
		mov    0x4(%eax),%ch
		mov    %edi,(%eax)
		add    %ch,%ch
		mov    0x5(%eax),%dl
		mov    %ch,0x4(%eax)
		add    %dl,%dl
		add    $0x6,%esi
		mov    %dl,0x5(%eax)
	jump_376cd:
		mov    m_font,%eax
		mov    m_font_end,%edi
		add    %esi,%eax
		cmp    %edi,%eax
		jne    jump_376ae
		mov    data_55590,%cl
		cmp    $0x2,%cl
		je     jump_376ee
		cmp    $0x3,%cl
		jne    jump_37709
	jump_376ee:
		mov    EXPORT_SYMBOL(DrawFlags),%al
		mov    %al,EXPORT_SYMBOL(OldDrawFlags)
		mov    $0x1,%al
		push   $0x13
		mov    %al,EXPORT_SYMBOL(DrawFlags)
		call   ac_AppScreenSetup
		add    $0x4,%esp
	jump_37709:
		mov    EXPORT_SYMBOL(WScreen),%eax
		add    $0xfa00,%eax
		mov    %eax,BScreen
		add    $0xfa00,%eax
		mov    EXPORT_SYMBOL(VGABuffer),%ebp
		mov    %eax,data_60ab0
		add    $0x1000,%eax
		mov    %ebp,EXPORT_SYMBOL(VScreen)
		mov    %eax,EXPORT_SYMBOL(PalMem)
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    $0x5,%eax
		mov    data_55590,%dl
		mov    %eax,AniSpeed
		cmp    $0x3,%dl
		ja     def_3775C
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:jpt_3775C(,%eax,4)


func_37764:
		movb   $0x1,EXPORT_SYMBOL(lbMouseOffline)
		push   $sound_array
		mov    $0xf,%edx
		mov    $AniName,%edi
		push   $0x1
		mov    $aDataMtitleDat,%esi
		mov    %edx,AniSpeed
		push   $0x1
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		call   AniPlay
		add    $0xc,%esp
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jne    jump_377b2
	jump_37797:
#if !defined(DOS) /* add input refresh, as otherwise this is just an infinite loop */
		call   ac_swap_wscreen
		call   ac_game_update
#endif
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
		jne    jump_377b2
		cmpb   $0x7f,EXPORT_SYMBOL(lbInkey)
		jbe    jump_377b2
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_37797
	jump_377b2:
		mov    $0x1,%cl
		mov    $0x5,%ebp
		mov    %cl,data_55591
		mov    %ebp,AniSpeed
		movb   $0x0,EXPORT_SYMBOL(lbMouseOffline)


func_377c5:
		mov    $AniName,%edi
		mov    $aDataMscrenupDa,%esi
		push   $0x1
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x1
		push   $0x0
		call   AniPlay
		mov    $0x1,%ch
		add    $0xc,%esp
		mov    %ch,data_55591


func_377f8:
		xor    %eax,%eax
		mov    %eax,0x4(%esp)
		jmp    def_3775C


func_37800:
		mov    $AniName,%edi
		mov    $aDataMscrenupDa,%esi
		push   $0x1
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x1
		push   $0x0
		mov    $0x1,%bl
		call   AniPlay
		add    $0xc,%esp
		mov    %bl,data_55591
		movl   $0x8,0x4(%esp)
		testb  $0x10,data_60afc
		je     def_3775C
		xor    %cl,%cl
		mov    %cl,data_55590
		xor    %ecx,%ecx
		mov    %ecx,0x4(%esp)
	def_3775C:	/* 0x37852 */
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    0x4(%esp),%edx
		push   %edx
		call   show_opt
		add    $0x4,%esp
		xor    %ebx,%ebx
		mov    0x4(%esp),%ecx
		mov    %ebx,EXPORT_SYMBOL(MouseSwap)
		cmp    $0xa,%ecx
		je     jump_37c36
		mov    $data_60b60,%eax
		mov    %eax,(%esp)
	jump_37883:
		cmpl   $0x6,0x4(%esp)
		je     jump_37c36
#if !defined(DOS) /* add input refresh, as otherwise this is just an infinite loop */
		call   ac_swap_wscreen
		call   ac_game_update
#endif
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x44	/* lbKeyOn[KC_F10] */
		je     jump_3789f
		movl   $0x6,0x4(%esp)
	jump_3789f:
		mov    0x4(%esp),%eax
		mov    %eax,0x8(%esp)
		call   LbCopyScreenFromBackMCGA
		mov    0x4(%esp),%edx
		cmp    $0xb,%edx
		ja     def_378BB
		mov    %edx,%eax
		jmp    *%cs:jpt_378BB(,%eax,4)


/*----------------------------------------------------------------*/
func_378c3:
/*----------------------------------------------------------------*/
		xor    %edx,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p234(,%eax,4),%edx
		push   %edx
		call   DisplayScreenTitle
		add    $0x4,%esp
		xor    %eax,%eax
		cmpw   $0x7c,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jbe    jump_3790f
		cmpw   $0x148,EXPORT_SYMBOL(lbDisplay__MMouseY_400)
		jae    jump_3790f
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%dx
		sub    $0x5a,%edx
		mov    $0x22,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		cmp    $0x3,%eax
		jle    jump_3790f
		inc    %eax
	jump_3790f:
		mov    $0x8c,%edi
		lea    -0x1(%eax),%ebp
		xor    %esi,%esi
		jmp    jump_37920
	jump_3791b:
		cmp    $0x3,%esi
		je     jump_37986
	jump_37920:
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		lea    0x0(,%eax,4),%eax
		cmp    %ebp,%esi
		jne    jump_3794a
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x278
		jmp    jump_3795e
	jump_3794a:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x301
	jump_3795e:
		xor    %ebx,%ebx
		push   $0x10
		mov    %di,%bx
		push   %ebx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(language),%bl
		push   $0xd0
		mov    data_54c00(%eax,%ebx,4),%ecx
		push   %ecx
		call   new_show_text
		add    $0x28,%esp
		add    $0x22,%edi
	jump_37986:
		inc    %esi
		cmp    $0x6,%esi
		jl     jump_3791b
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_37a42
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		cmpw   $0x7c,EXPORT_SYMBOL(lbDisplay__MouseY_400)	/* lbDisplay.MouseY but scaled */
		jbe    jump_37a42
		cmpw   $0x126,EXPORT_SYMBOL(lbDisplay__MouseY_400)
		jae    jump_37a42
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay__MouseY_400),%dx
		sub    $0x5a,%edx
		mov    $0x22,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x4(%esp)
		cmp    $0x4,%eax
		jne    jump_379e8
		movl   $0x5,0x4(%esp)
		jmp    jump_379f5
	jump_379e8:
		cmp    $0x5,%eax
		jne    jump_379f5
		movl   $0x6,0x4(%esp)
	jump_379f5:
		mov    $0x1,%edx
		mov    0x4(%esp),%ecx
		xor    %ebx,%ebx
		mov    %edx,EXPORT_SYMBOL(MouseSwap)
		mov    %ebx,MouseOldW
		test   %ecx,%ecx
		je     jump_37a38
		mov    $AniName,%edi
		mov    $aDataMoptoutDat,%esi
		push   $0x2
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   %ebx
		push   %ebx
		call   AniPlay
		add    $0xc,%esp
	jump_37a38:
		call   LbCopyScreenToBackMCGA
		call   LbCopyScreenFromBackMCGA
	jump_37a42:
		cmpb   $0x3b,EXPORT_SYMBOL(lbInkey)
		jb     jump_37ae2
		cmpb   $0x40,EXPORT_SYMBOL(lbInkey)
		jae    jump_37ae2
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbInkey),%al
		sub    $0x3a,%eax
		mov    %eax,0x4(%esp)
		cmp    $0x4,%eax
		jne    jump_37a79
		movl   $0x5,0x4(%esp)
		jmp    jump_37a93
	jump_37a79:
		cmp    $0x5,%eax
		jne    jump_37a88
		movl   $0x6,0x4(%esp)
		jmp    jump_37a93
	jump_37a88:
		cmp    $0x4,%eax
		jne    jump_37a93
		xor    %eax,%eax
		mov    %eax,0x4(%esp)
	jump_37a93:
		mov    $0x1,%ecx
		mov    0x4(%esp),%edi
		xor    %esi,%esi
		mov    %ecx,EXPORT_SYMBOL(MouseSwap)
		mov    %esi,MouseOldW
		test   %edi,%edi
		je     jump_37ad8
		mov    $AniName,%edi
		mov    $aDataMoptoutDat,%esi
		push   $0x2
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
	jump_37ad8:
		call   LbCopyScreenToBackMCGA
		call   LbCopyScreenFromBackMCGA
	jump_37ae2:
		cmpl   $0x3,0x4(%esp)
		jne    def_378BB
		mov    (%esp),%ebx
		xor    %esi,%esi
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %eax,%eax
	jump_37b00:
		push   %esi
		push   %ebx
		call   ac_load_save_text
		inc    %esi
		add    $0x8,%esp
		add    $0x14,%ebx
		cmp    $0xa,%esi
		jge    def_378BB
		jmp    jump_37b00


func_37b19:
		xor    %ebp,%ebp
		call   configure_company
		mov    %ebp,0x4(%esp)
		jmp    jump_37bed


func_37b29:
		xor    %esi,%esi
		mov    $0x1,%edi
		mov    %esi,EXPORT_SYMBOL(MouseSwap)
		call   map_selection
		push   $0x2
		mov    $aDataMmapoutDat,%esi
		mov    %edi,EXPORT_SYMBOL(MouseSwap)
		mov    $AniName,%edi
		mov    %eax,%ebx
		mov    %eax,0x8(%esp)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		call   BFPlaySample
		add    $0x4,%esp
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		cmp    $0x9,%ebx
		je     jump_37b7b
		cmp    $0xa,%ebx
		jne    def_378BB
	jump_37b7b:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(current_levno),%ax
		push   %eax
		push   $brief_text
		call   load_text
		add    $0x8,%esp
		jmp    def_378BB


func_37b93:
		call   LoadSaveGame
		mov    %eax,0x4(%esp)
		jmp    def_378BB


func_37b9e:
		call   set_default_player
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    %ecx,0x4(%esp)
		mov    %edx,0x8(%esp)
		jmp    jump_37bed


func_37bb1:
		call   equip_team
		jmp    jump_37be2


func_37bb8:
		call   debrief
		jmp    jump_37be2


func_37bbf:
		mov    m_sprites,%ebx
		push   %ebx
		xor    %cl,%cl
		push   $brief_text
		mov    %cl,EXPORT_SYMBOL(is_multiplayer_game)
		call   mission_briefing
		add    $0x8,%esp
		jmp    jump_37be2


func_37bdd:
		call   ResearchAndDevelop
	jump_37be2:
		mov    %eax,0x4(%esp)


	def_378BB:	/* 0x37be6 */
		cmpl   $0xa,0x4(%esp)
		je     jump_37c08
	jump_37bed:
		movswl 0x8(%esp),%eax
		mov    0x4(%esp),%edx
		cmp    %edx,%eax
		je     jump_37c08
		cmp    $0x6,%edx
		je     jump_37c08
		push   %edx
		call   show_opt
		add    $0x4,%esp
	jump_37c08:
		mov    $0x5,%esi
		mov    0x4(%esp),%edi
		mov    %esi,AniSpeed
		cmp    $0xa,%edi
		je     jump_37c21
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMousePlace
#else
		call   PlaceMouse_A
#endif
	jump_37c21:
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
#if defined(USE_BFLIB_MOUSE_CURSOR)
		call   ac_LbMouseRemove
#else
		call   RemoveMouse_A
#endif
#if !defined(DOS) /* add input refresh, as DOS interrupts are not available */
		call   ac_game_update
#endif
		cmpl   $0xa,0x4(%esp)
		jne    jump_37883
	jump_37c36:
		cmpl   $0x6,0x4(%esp)
		jne    jump_37c42
		movb   $0x1,0xc(%esp)
	jump_37c42:
		xor    %edx,%edx
		mov    $0x1,%eax
		mov    %edx,MouseOldW
		mov    0xc(%esp),%dl
		mov    %eax,EXPORT_SYMBOL(MouseSwap)
		test   %dl,%dl
		je     jump_37cc7
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ecx
		push   %ecx
		push   $0x38a
		push   $0x10
		push   $0xbe
		push   $0xc
		push   $0xfffffffe
		xor    %eax,%eax
		push   $0x38a
		mov    EXPORT_SYMBOL(language),%al
		push   %ecx
		mov    strings_logging_out(,%eax,4),%edi
		push   %edi
		call   GetLineWidth
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x280,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x14,%esp
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_logging_out(,%eax,4),%ebp
		push   %ebp
		jmp    jump_37da0
	jump_37cc7:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_37d3a
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ebp
		push   %ebp
		push   $0x38a
		push   $0x10
		push   $0xbe
		push   $0xc
		mov    %ebp,%eax
		push   $0xfffffffe
		xor    %ebp,%eax
		push   $0x38a
		mov    EXPORT_SYMBOL(language),%al
		push   %ebp
		mov    strings_multiplayer(,%eax,4),%edx
		push   %edx
		call   GetLineWidth
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x280,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x14,%esp
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_multiplayer(,%eax,4),%ebx
		push   %ebx
		jmp    jump_37da0
	jump_37d3a:
		push   $0x0
		push   $0x0
		push   $0xe
		push   $0xfffffffe
		mov    m_sprites,%ebx
		push   %ebx
		push   $0x38a
		push   $0x10
		push   $0xbe
		push   $0xc
		push   $0xfffffffe
		xor    %eax,%eax
		push   $0x38a
		mov    EXPORT_SYMBOL(language),%al
		push   %ebx
		mov    strings_loading(,%eax,4),%esi
		push   %esi
		call   GetLineWidth
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x280,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x14,%esp
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    strings_loading(,%eax,4),%edi
		push   %edi
	jump_37da0:
		call   new_show_text
		add    $0x28,%esp
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#else
		call   LbScreenSwapMCGA
#endif
		push   $unk984_load_files
		call   LbDataFreeAll
		mov    EXPORT_SYMBOL(SoundAble),%bl
		add    $0x4,%esp
		test   %bl,%bl
		je     jump_37dd1
		push   $sound_bank_files
		call   LbDataFreeAll
		add    $0x4,%esp
	jump_37dd1:
		mov    EXPORT_SYMBOL(OldDrawFlags),%al
		mov    %al,EXPORT_SYMBOL(DrawFlags)
		mov    0xc(%esp),%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbCopyScreenFromBackMCGA:	/* 0x37df0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $0x3e7f,%ebx
		mov    EXPORT_SYMBOL(WScreen),%edx
		mov    BScreen,%eax
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_37e10:
		add    $0x4,%edx
		mov    (%eax),%ecx
		add    $0x4,%eax
		mov    %ecx,-0x4(%edx)
		add    $0x4,%edx
		mov    (%eax),%ecx
		add    $0x4,%eax
		mov    %ecx,-0x4(%edx)
		add    $0x4,%edx
		mov    (%eax),%ecx
		add    $0x4,%eax
		mov    %ecx,-0x4(%edx)
		sub    $0x3,%ebx
		jne    jump_37e10
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbCopyScreenToBackMCGA:	/* 0x37e40 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    $0x3e7f,%ebx
		mov    BScreen,%edx
		mov    EXPORT_SYMBOL(WScreen),%eax
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_37e60:
		add    $0x4,%edx
		mov    (%eax),%ecx
		add    $0x4,%eax
		mov    %ecx,-0x4(%edx)
		add    $0x4,%edx
		mov    (%eax),%ecx
		add    $0x4,%eax
		mov    %ecx,-0x4(%edx)
		add    $0x4,%edx
		mov    (%eax),%ecx
		add    $0x4,%eax
		mov    %ecx,-0x4(%edx)
		sub    $0x3,%ebx
		jne    jump_37e60
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
LbScreenSwapMCGA:	/* 0x37e90 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    EXPORT_SYMBOL(VGABuffer),%eax
		mov    $0x3e80,%ebx
		mov    EXPORT_SYMBOL(WScreen),%edx
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		lea    0x0(%eax),%eax
	jump_37eb0:
		add    $0x4,%eax
		mov    (%edx),%ecx
		add    $0x4,%edx
		mov    %ecx,-0x4(%eax)
		add    $0x4,%eax
		mov    (%edx),%ecx
		add    $0x4,%edx
		mov    %ecx,-0x4(%eax)
		add    $0x4,%eax
		mov    (%edx),%ecx
		add    $0x4,%edx
		mov    %ecx,-0x4(%eax)
		add    $0x4,%eax
		mov    (%edx),%ecx
		add    $0x4,%edx
		mov    %ecx,-0x4(%eax)
		add    $0x4,%eax
		mov    (%edx),%ecx
		add    $0x4,%edx
		mov    %ecx,-0x4(%eax)
		sub    $0x5,%ebx
		jne    jump_37eb0
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
show_opt:	/* 0x37ef0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%eax
		mov    screen_bk_fnames(,%eax,4),%ecx
		push   %ecx
		mov    $0x1,%edx
		xor    %ebx,%ebx
		push   $AniName
		mov    %edx,EXPORT_SYMBOL(MouseSwap)
		mov    %ebx,MouseOldW
		call   ac_strcpy
		add    $0x8,%esp
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		cmpb   $0x0,data_55591
		je     jump_37f47
		mov    m_select_pal,%esi
		push   %esi
		call   ac_LbPaletteSet
		xor    %dh,%dh
		add    $0x4,%esp
		mov    %dh,data_55591
	jump_37f47:
		push   $sound_array
		push   $0x0
		push   $0x0
		call   AniPlay
		add    $0xc,%esp
		mov    $0x1,%edi
		call   LbCopyScreenToBackMCGA
		call   LbCopyScreenFromBackMCGA
		mov    %edi,EXPORT_SYMBOL(MouseSwap)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
level_finished:	/* 0x37f80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		xor    %ah,%ah
		mov    %ah,0x4(%esp)
		mov    %ah,(%esp)
		mov    EXPORT_SYMBOL(WScreen),%eax
		mov    $0x1,%dh
		add    $0x1f400,%eax
		push   $0x13
		mov    %eax,BScreen
		add    $0xfa00,%eax
		xor    %ebx,%ebx
		mov    %eax,data_60ab0
		add    $0x1000,%eax
		mov    %dh,SoundActive
		mov    %eax,EXPORT_SYMBOL(PalMem)
		mov    EXPORT_SYMBOL(DrawFlags),%al
		mov    %dh,MusicActive
		mov    %al,EXPORT_SYMBOL(OldDrawFlags)
		mov    %dh,EXPORT_SYMBOL(DrawFlags)
		call   ac_AppScreenSetup
		mov    data_60afc,%al
		add    $0x4,%esp
		test   $0x8,%al
		je     jump_38011
		mov    $0x1,%ebx
		mov    $0x5,%esi
		xor    %ecx,%ecx
		mov    %ebx,EXPORT_SYMBOL(MouseSwap)
		mov    %ecx,MouseOldW
		mov    $0x1,%bh
		mov    %esi,AniSpeed
		mov    %bh,data_55590
		jmp    jump_382cf
	jump_38011:
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_3802c
		push   $sound_bank_files
		call   ac_LbDataLoadAll
		add    $0x4,%esp
		call   sound_bank_setup
	jump_3802c:
		testb  $0x2,data_60afc
		je     jump_38176
		xor    %edx,%edx
		mov    data_60b36,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		jne    jump_38076
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(Network__Slot),%bx
		mov    data_5539e(%eax),%dl
		cmp    %bx,%dx
		jne    jump_38076
		movw   $0xaa,EXPORT_SYMBOL(country_states)(%eax)
		jmp    jump_3809e
	jump_38076:
		xor    %edx,%edx
		mov    data_60b36,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(Network__Slot),%dl
		mov    %cx,EXPORT_SYMBOL(country_states)(,%eax,2)
		mov    %dl,data_5539e(,%eax,2)
	jump_3809e:
		xor    %edx,%edx
		mov    data_60b36,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $0x1e,%dh
		mov    EXPORT_SYMBOL(Network__Slot),%di
		mov    %dh,data_5539f(,%eax,2)
		xor    %bh,%bh
		mov    %dh,data_553a0(,%eax,2)
		mov    $0xa,%edx
		xor    %bl,%bl
		mov    %edx,AniSpeed
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %ebx,%ebx
	jump_380e0:
		xor    %edx,%edx
		mov    %bl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_5539e(%eax),%dl
		cmp    %di,%dx
		jne    jump_38109
		cmpw   $0xff,EXPORT_SYMBOL(country_states)(%eax)
		jge    jump_38109
		inc    %bh
	jump_38109:
		inc    %bl
		cmp    $0x32,%bl
		jb     jump_380e0
		cmp    $0x32,%bh
		jne    jump_38161
		push   $data_5bbb4
		mov    $AniName,%edi
		mov    $aDataMgamewinDa,%esi
		mov    $data_5bbd4,%ebx
		push   $0x1
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		push   $0x0
		mov    $AniName,%edi
		mov    $aDataMendwinDat,%esi
		call   AniPlay
		mov    $0x1,%ch
		mov    data_60afc,%cl
		add    $0xc,%esp
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		or     $0x10,%cl
		mov    %ch,0x4(%esp)
		mov    %cl,data_60afc
		jmp    jump_38176
	jump_38161:
		mov    $AniName,%edi
		mov    $aDataMgamewinDa,%esi
		mov    $data_5bbb4,%ebx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
	jump_38176:
		testb  $0x4,data_60afc
		je     jump_38224
		xor    %cl,%cl
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
		mov    %ebx,%ebx
	jump_38190:
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%ebx
		shl    $0x5,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,4),%ebx
		sub    %edx,%ebx
		lea    0x0(,%ebx,8),%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    %cl,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpw   $0x0,data_5e5ba(%ebx,%eax,8)
		jle    jump_381cc
		movb   $0x1,(%esp)
	jump_381cc:
		inc    %cl
		cmp    $0x12,%cl
		jb     jump_38190
		cmpb   $0x0,(%esp)
		je     jump_381f0
		mov    $AniName,%edi
		mov    $aDataMendloseDa,%esi
		mov    $data_5bb94,%ebx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		jmp    jump_38224
	jump_381f0:
		mov    $0xa,%edi
		mov    $aDataMlosegamDa,%esi
		mov    data_60afc,%dh
		mov    %edi,AniSpeed
		or     $0x10,%dh
		mov    $AniName,%edi
		mov    $data_5bbc8,%ebx
		mov    %dh,data_60afc
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		call   set_default_player
	jump_38224:
		mov    $0x1,%ebp
		xor    %eax,%eax
		mov    %ebp,EXPORT_SYMBOL(MouseSwap)
		mov    %eax,MouseOldW
		test   %ebx,%ebx
		je     jump_382b9
		cmpb   $0x0,0x4(%esp)
		je     jump_382ae
		push   %ebx
		push   %ebp
		push   %eax
		call   AniPlay
		add    $0xc,%esp
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		mov    EXPORT_SYMBOL(debug_k),%edx
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jne    jump_382b9
	jump_38271:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106	/* lbDisplay.MLeftButton */
		jne    jump_382b9
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104	/* lbDisplay.RightButton */
		jne    jump_382b9
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107	/* lbDisplay.MRightButton */
		jne    jump_382b9
		cmpb   $0x7f,EXPORT_SYMBOL(lbInkey)
		jbe    jump_382b9
		mov    EXPORT_SYMBOL(debug_k),%eax
		sub    %edx,%eax
		cmp    $0x870,%eax
		jae    jump_382b9
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		je     jump_38271
		jmp    jump_382b9
	jump_382ae:
		push   %ebx
		push   %ebp
		push   %ebp
		call   AniPlay
		add    $0xc,%esp
	jump_382b9:
		movl   $0x5,AniSpeed
		call   BFMidiStopMusic
		movb   $0x1,data_55590
	jump_382cf:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
load_text:	/* 0x382e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x64,%esp
		mov    0x6c(%esp),%ebx
		mov    0x70(%esp),%eax
		mov    EXPORT_SYMBOL(language),%dl
		movb   $0x0,(%ebx)
		test   %dl,%dl
		jne    jump_3830e
		push   %eax
		push   $aDataMiss022dDa
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		jmp    jump_38326
	jump_3830e:
		push   %eax
		xor    %eax,%eax
		mov    %dl,%al
		push   %eax
		push   $aDataMiss01d022
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
	jump_38326:
		push   %ebx
		lea    0x4(%esp),%eax
		push   %eax
		call   LbFileReadRNC
		add    $0x8,%esp
		mov    %esp,%eax
		push   %eax
		call   LbFileLengthRnc
		add    $0x4,%esp
		movb   $0x0,(%ebx,%eax,1)
		add    $0x64,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
load_player:	/* 0x38350 */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x64,%esp
		mov    0x6c(%esp),%edx
		push   %edx
		push   $aCSyndSave
		push   $aS022dGam
		lea    0xc(%esp),%ebx
		push   %ebx
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x202
		lea    0x4(%esp),%ebx
		push   %ebx
		call   LbFileOpen_
		mov    %eax,%ebx
		add    $0x8,%esp
		test   %eax,%eax
		jle    jump_38414
		push   $0x14
		push   $EXPORT_SYMBOL(players)
		push   %eax
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x20b8
		push   $EXPORT_SYMBOL(players)
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x1f4
		push   $EXPORT_SYMBOL(country_states)
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x2724
		push   $EXPORT_SYMBOL(weapons)
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x2286
		push   $EXPORT_SYMBOL(cybmods)
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x1e9
		push   $EXPORT_SYMBOL(research)
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(selected_team)
		push   %ebx
		call   LbFileRead_
		add    $0xc,%esp
		push   %ebx
		call   LbFileClose_
		add    $0x4,%esp
	jump_38414:
		add    $0x64,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
save_player:	/* 0x38420 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x64,%esp
		movswl EXPORT_SYMBOL(Network__Slot),%ebx
		mov    %ebx,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(players)(%eax),%edx
		mov    %eax,%ebx
		cmp    $0x7530,%edx
		jbe    jump_38470
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $0x64,%ecx
		add    %eax,%eax
		xor    %edx,%edx
		div    %ecx
		sub    %eax,EXPORT_SYMBOL(players)(%ebx)
	jump_38470:
		mov    0x78(%esp),%esi
		push   %esi
		push   $aCSyndSave
		push   $aS022dGam
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x222
		lea    0x4(%esp),%eax
		push   %eax
		call   LbFileOpen_
		mov    %eax,%ebx
		add    $0x8,%esp
		test   %eax,%eax
		jle    jump_38530
		push   $0x14
		mov    0x78(%esp),%edi
		push   %edi
		push   %eax
		call   LbFileWrite_
		add    $0xc,%esp
		push   $0x20b8
		push   $EXPORT_SYMBOL(players)
		push   %ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   $0x1f4
		push   $EXPORT_SYMBOL(country_states)
		push   %ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   $0x2724
		push   $EXPORT_SYMBOL(weapons)
		push   %ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   $0x2286
		push   $EXPORT_SYMBOL(cybmods)
		push   %ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   $0x1e9
		push   $EXPORT_SYMBOL(research)
		push   %ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(selected_team)
		push   %ebx
		call   LbFileWrite_
		add    $0xc,%esp
		push   %ebx
		call   LbFileClose_
		add    $0x4,%esp
	jump_38530:
		add    $0x64,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_load_save_text:	/* 0x38540 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		sub    $0x64,%esp
		mov    0x70(%esp),%esi
		mov    0x74(%esp),%edx
		push   %edx
		push   $aCSyndSave
		push   $aS022dGam
		lea    0xc(%esp),%ebx
		push   %ebx
		movb   $0x0,(%esi)
		call   ac_sprintf
		add    $0x10,%esp
		push   $0x202
		lea    0x4(%esp),%ebx
		push   %ebx
		call   LbFileOpen_
		mov    %eax,%ebx
		add    $0x8,%esp
		test   %eax,%eax
		jle    jump_38595
		push   $0x14
		push   %esi
		push   %eax
		call   LbFileRead_
		add    $0xc,%esp
		push   %ebx
		call   LbFileClose_
		add    $0x4,%esp
	jump_38595:
		cmpb   $0x0,(%esi)
		jne    jump_385b3
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(language),%bl
		mov    text_empty_slot(,%ebx,4),%ecx
		push   %ecx
		push   %esi
		call   ac_strcpy
		add    $0x8,%esp
	jump_385b3:
		movb   $0x0,0x13(%esi)
		add    $0x64,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(init_sound)	/* 0x385c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x18(%esp),%esi
		push   $0x0
		push   $DIGdriver_fn
		call   FILE_read
		add    $0x8,%esp
		mov    %eax,DIGdll
		test   %eax,%eax
		jne    jump_385e7
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_385e7:
		push   $0x0
		push   $0x5
		push   %eax
		call   DLL_load
		add    $0xc,%esp
		mov    %eax,DIGdrvr
		test   %eax,%eax
		jne    jump_38604
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_38604:
		mov    DIGdll,%edx
		push   %edx
		call   ac_free
		add    $0x4,%esp
		call   AIL_startup
		mov    DIGdrvr,%ebx
		push   %ebx
		call   AIL_register_driver
		add    $0x4,%esp
		mov    %eax,DIGhdriver
		cmp    $0xffffffff,%eax
		jne    jump_38642
		push   $0x0
		call   AIL_shutdown
		add    $0x4,%esp
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_38642:
		push   %eax
		call   AIL_describe_driver
		mov    %ds,data_61e00
		mov    %eax,data_61dfc
		mov    data_61e00,%gs
		mov    %gs:0x4(%eax),%ecx
		add    $0x4,%esp
		cmp    $0x2,%ecx
		je     jump_38676
		push   $0x0
		call   AIL_shutdown
		add    $0x4,%esp
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_38676:
		cmpw   $0x0,0x14(%esp)
		jne    jump_38687
		mov    %gs:0x14(%eax),%ax
		mov    %eax,0x14(%esp)
	jump_38687:
		test   %si,%si
		jne    jump_38698
		lgs    data_61dfc,%eax
		mov    %gs:0x18(%eax),%si
	jump_38698:
		cmpw   $0x0,0x1c(%esp)
		jne    jump_386b0
		lgs    data_61dfc,%eax
		mov    %gs:0x10(%eax),%ax
		mov    %eax,0x1c(%esp)
	jump_386b0:
		lgs    data_61dfc,%eax
		mov    %gs:0x1c(%eax),%edi
		push   %edi
		xor    %edi,%edi
		mov    %si,%di
		xor    %esi,%esi
		push   %edi
		mov    0x1c(%esp),%si
		push   %esi
		movzwl 0x28(%esp),%ebp
		push   %ebp
		mov    DIGhdriver,%eax
		push   %eax
		call   AIL_detect_device
		add    $0x14,%esp
		test   %eax,%eax
		jne    jump_386f2
		push   %eax
		call   AIL_shutdown
		add    $0x4,%esp
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_386f2:
		lgs    data_61dfc,%eax
		mov    %gs:0x1c(%eax),%edx
		push   %edx
		push   %edi
		push   %esi
		push   %ebp
		mov    DIGhdriver,%ebx
		push   %ebx
		call   AIL_init_driver
		mov    $0x1,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
sound_bank_setup:	/* 0x38720 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    smptable,%edx
		test   %edx,%edx
		je     jump_38782
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_38782
		mov    smptable_end,%ebx
		lea    0x20(%edx),%esi
		cmp    %ebx,%esi
		jae    jump_38782
	jump_38744:
		mov    smpdata,%ecx
		mov    0x12(%esi),%eax
		add    %ecx,%eax
		mov    %eax,%edx
		shl    $0xc,%edx
		mov    %edx,0xe(%esi)
		mov    %ds,%edx
		push   $0xffffffff
		and    $0xffff,%edx
		push   %edx
		push   %eax
		mov    DIGhdriver,%edi
		add    $0x20,%esi
		push   %edi
		mov    %eax,-0xe(%esi)
		call   AIL_format_VOC_file
		mov    smptable_end,%ebp
		add    $0x10,%esp
		cmp    %ebp,%esi
		jb     jump_38744
	jump_38782:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ClearBFSampleStatus:	/* 0x38790 */
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		xor    %dl,%dl
		lea    0x0(%eax),%eax
		lea    0x0(%edx),%edx
	jump_387a0:
		add    $0x10,%eax
		mov    %dl,data_61bdc(%eax)
		mov    %dl,data_61bde(%eax)
		mov    %dl,m_logos(%eax)
		mov    %dl,data_61be2(%eax)
		mov    %dl,m_sprites(%eax)
		mov    %dl,data_61be6(%eax)
		mov    %dl,data_61be8(%eax)
		mov    %dl,data_61bea(%eax)
		cmp    $0x200,%eax
		jne    jump_387a0
		ret


/*----------------------------------------------------------------*/
SetBFSampleStatus:	/* 0x387e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0xc(%esp),%cl
		xor    %eax,%eax
		mov    0x8(%esp),%al
		mov    %eax,%edx
		mov    smptable,%ebx
		cmp    $0x0,%ebx
		je     jump_3882e
		shl    $0x5,%edx
		cmpb   $0x0,0x1e(%edx,%ebx,1)
		je     jump_3882e
		add    %eax,%eax
		cmpb   $0x0,sample_status(%eax)
		je     jump_38820
		cmp    data_61bed(%eax),%cl
		jbe    jump_3882e
		mov    $0x1,%bh
		mov    %cl,data_61bed(%eax)
		mov    %bh,sample_status(%eax)
		pop    %ebx
		ret
	jump_38820:
		mov    $0x1,%dh
		mov    %cl,data_61bed(%eax)
		mov    %dh,sample_status(%eax)
	jump_3882e:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFPlaySample:	/* 0x38830 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_38887
		cmpb   $0x0,SoundActive
		je     jump_38887
		xor    %eax,%eax
		mov    0xc(%esp),%al
		mov    %eax,%edx
		mov    smptable,%eax
		shl    $0x5,%edx
		add    %edx,%eax
		push   $0xffffffff
		mov    0xe(%eax),%ebx
		mov    %ds,%edx
		push   %ebx
		and    $0xffff,%edx
		push   %edx
		mov    0x12(%eax),%eax
		push   %eax
		mov    DIGhdriver,%ecx
		push   %ecx
		call   AIL_play_VOC_file
		add    $0x14,%esp
		mov    DIGhdriver,%esi
		push   %esi
		call   AIL_start_digital_playback
		add    $0x4,%esp
	jump_38887:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFSoundPause:	/* 0x38890 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_388b2
		cmpb   $0x0,SoundActive
		je     jump_388b2
		mov    DIGhdriver,%edx
		push   %edx
		call   AIL_pause_digital_playback
		add    $0x4,%esp
	jump_388b2:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFSoundResume:	/* 0x388c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_388e2
		cmpb   $0x0,SoundActive
		je     jump_388e2
		mov    DIGhdriver,%edx
		push   %edx
		call   AIL_resume_digital_playback
		add    $0x4,%esp
	jump_388e2:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFSonundUnkn1:	/* 0x388f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    smptable,%edi
		mov    EXPORT_SYMBOL(SoundAble),%ah
		xor    %ebp,%ebp
		test   %ah,%ah
		je     jump_38a0f
		cmpb   $0x0,SoundActive
		je     jump_38a0f
		mov    DIGhdriver,%edx
		push   %edx
		call   AIL_VOC_playback_status
		add    $0x4,%esp
		cmp    $0x3,%eax
		jne    jump_38933
		xor    %dh,%dh
		mov    %dh,data_5bbe8
	jump_38933:
		mov    $0x1,%ebx
		mov    $0x2,%eax
		mov    $0x20,%edx
		mov    smptable,%edi
		xor    %ch,%ch
		lea    0x0(%eax),%eax
	jump_38950:
		mov    sample_status(%eax),%cl
		cmp    %cl,%ch
		je     jump_389ad
		dec    %cl
		lea    (%edi,%edx,1),%esi
		mov    %cl,sample_status(%eax)
		mov    0x1e(%esi),%cl
		cmp    data_5bbe8,%cl
		ja     jump_38993
		jne    jump_38977
		cmp    0x1f(%esi),%ch
		je     jump_38993
	jump_38977:
		mov    %edi,%esi
		mov    0x1e(%edx,%esi,1),%cl
		cmp    data_5bbe8,%cl
		jne    jump_389ad
		mov    data_61bed(%eax),%cl
		cmp    data_5bbe9,%cl
		jbe    jump_389ad
	jump_38993:
		mov    %edi,%esi
		mov    0x1e(%edx,%esi,1),%cl
		mov    %cl,data_5bbe8
		mov    data_61bed(%eax),%cl
		mov    %ebx,%ebp
		mov    %cl,data_5bbe9
	jump_389ad:
		add    $0x2,%eax
		inc    %ebx
		add    $0x20,%edx
		cmp    $0x100,%ebx
		jl     jump_38950
		mov    %edi,smptable
		test   %ebp,%ebp
		je     jump_38a0f
		mov    %ebp,%eax
		shl    $0x5,%eax
		add    %edi,%eax
		push   $0xffffffff
		mov    %edi,%edx
		mov    0xe(%eax),%ebx
		mov    %ds,%edx
		push   %ebx
		and    $0xffff,%edx
		push   %edx
		mov    0x12(%eax),%eax
		push   %eax
		mov    DIGhdriver,%ecx
		push   %ecx
		call   AIL_play_VOC_file
		add    $0x14,%esp
		mov    DIGhdriver,%esi
		push   %esi
		call   AIL_start_digital_playback
		mov    smptable,%edi
		xor    %ch,%ch
		add    $0x4,%esp
		mov    %ch,sample_status(,%ebp,2)
	jump_38a0f:
		mov    smptable,%edi
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
FreeSound:	/* 0x38a20 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_38a34
		push   $0x0
		call   AIL_shutdown
		add    $0x4,%esp
	jump_38a34:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
StopAllSounds:	/* 0x38a40 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_38a59
		mov    DIGhdriver,%edx
		push   %edx
		call   AIL_stop_digital_playback
		add    $0x4,%esp
	jump_38a59:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
DisplayScreenTitle:	/* 0x38a60 */
/*----------------------------------------------------------------*/
		push   %esi
		push   $0x1
		push   $0x0
		push   $0xc
		push   $0xfffffffe
		mov    m_sprites,%edx
		push   %edx
		push   $0x413
		push   $0x10
		push   $0x30
		push   $0xc
		push   $0xfffffffe
		push   $0x413
		push   %edx
		mov    0x38(%esp),%ecx
		push   %ecx
		call   GetLineWidth
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x280,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x14,%esp
		and    $0xffff,%eax
		push   %eax
		mov    0x2c(%esp),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
		pop    %esi
		ret


/*----------------------------------------------------------------*/
DrawScreenGadget:	/* 0x38ac0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   $0x0
		xor    %ebx,%ebx
		push   $0x0
		mov    0x2c(%esp),%bl
		push   %ebx
		movsbl 0x2c(%esp),%eax
		push   %eax
		mov    m_sprites,%edx
		push   %edx
		xor    %edx,%edx
		mov    0x30(%esp),%dx
		mov    0x28(%esp),%cx
		push   %edx
		add    $0x8,%cx
		push   $0xa
		and    $0xffff,%ecx
		push   %ecx
		push   %ebx
		push   %eax
		push   %edx
		mov    m_sprites,%ebx
		push   %ebx
		mov    0x3c(%esp),%ecx
		push   %ecx
		call   GetLineWidth
		add    $0x14,%esp
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x38(%esp),%dx
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		xor    %edx,%edx
		mov    0x30(%esp),%dx
		add    %edx,%eax
		and    $0xffff,%eax
		push   %eax
		mov    0x30(%esp),%esi
		push   %esi
		call   new_show_text
		add    $0x28,%esp
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
DrawAcceptGadget:	/* 0x38b50 */
/*----------------------------------------------------------------*/
		push   %edi
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b6ca,%dx
		push   $0xfffffffe
		cmp    %dx,%ax
		jbe    jump_38b9b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b6ce,%ax
		jae    jump_38b9b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		cmp    data_5b6c8,%ax
		jbe    jump_38b9b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b6cc,%ax
		jae    jump_38b9b
		mov    $0x166,%eax
		jmp    jump_38ba0
	jump_38b9b:
		mov    $0x1ef,%eax
	jump_38ba0:
		and    $0xffff,%eax
		mov    data_5b6c8,%di
		push   %eax
		mov    data_5b6cc,%ax
		sub    %di,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b6ca,%ax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p255(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
		pop    %edi
		ret


/*----------------------------------------------------------------*/
DrawMenuGadget:	/* 0x38bf0 */
/*----------------------------------------------------------------*/
		push   %edi
		push   $0xc
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    data_5b6d4,%dx
		push   $0xfffffffe
		cmp    %dx,%ax
		jbe    jump_38c3b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		cmp    data_5b6d8,%ax
		jae    jump_38c3b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b6d2,%ax
		jbe    jump_38c3b
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		cmp    data_5b6d6,%ax
		jae    jump_38c3b
		mov    $0x166,%eax
		jmp    jump_38c40
	jump_38c3b:
		mov    $0x1ef,%eax
	jump_38c40:
		and    $0xffff,%eax
		mov    data_5b6d2,%di
		push   %eax
		mov    data_5b6d6,%ax
		sub    %di,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    data_5b6d4,%ax
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(language),%al
		mov    gui_strings_p258(,%eax,4),%edx
		push   %edx
		call   DrawScreenGadget
		add    $0x1c,%esp
		pop    %edi
		ret


/*----------------------------------------------------------------*/
show_text_file:	/* 0x38c90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    0x20(%esp),%ebx
		mov    0x34(%esp),%edi
		mov    0x48(%esp),%ebp
		mov    0x24(%esp),%eax
		mov    %eax,0x8(%esp)
		mov    0x28(%esp),%eax
		mov    %eax,0x4(%esp)
		cmpb   $0x0,(%ebx)
		je     jump_38e8d
	jump_38cbc:
		cmpb   $0x7c,(%ebx)
		je     jump_38e8d
		movsbl 0x40(%esp),%eax
		push   %eax
		xor    %eax,%eax
		mov    0x3c(%esp),%ax
		push   %eax
		push   %edi
		push   %ebx
		call   get_word_width
		add    $0x10,%esp
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x8(%esp),%dx
		lea    (%edx,%eax,1),%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x24(%esp),%dx
		mov    0x2c(%esp),%ax
		add    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_38d10
		mov    %edx,%eax
		mov    %edx,0x8(%esp)
		mov    0x3c(%esp),%al
		xor    %dh,%ah
		add    %eax,0x4(%esp)
	jump_38d10:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x28(%esp),%ax
		mov    0x30(%esp),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x4(%esp),%dx
		cmp    %eax,%edx
		jle    jump_38d39
		test   %ebp,%ebp
		je     jump_38d32
		mov    %ebx,0x0(%ebp)
	jump_38d32:
		xor    %bl,%bl
		jmp    jump_38e91
	jump_38d39:
		mov    %edx,%eax
		add    $0xc,%eax
		mov    %eax,(%esp)
	jump_38d43:
		mov    (%ebx),%cl
		test   %cl,%cl
		je     jump_38dfe
		cmp    $0x20,%cl
		je     jump_38dfe
		cmp    $0xa,%cl
		je     jump_38dfe
		cmp    $0x5c,%cl
		je     jump_38dfe
		cmp    $0x7c,%cl
		je     jump_38dfe
		cmp    $0x9,%cl
		jne    jump_38d79
		movb   $0x20,(%ebx)
	jump_38d79:
		xor    %ecx,%ecx
		xor    %esi,%esi
		mov    (%ebx),%cl
		mov    0x38(%esp),%si
		lea    -0x20(%ecx),%edx
		add    %esi,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		lea    (%esi,%ecx,1),%edx
		add    %edi,%eax
		sub    $0x20,%edx
		push   %eax
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		add    %edi,%eax
		mov    0x4(%esp),%edx
		mov    0x5(%eax),%al
		xor    %ah,%ah
		sub    %eax,%edx
		mov    %dx,%ax
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		push   %eax
		call   LbSpriteDrawMCGA
		xor    %eax,%eax
		mov    (%ebx),%al
		add    %esi,%eax
		lea    -0x20(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    $0xc,%esp
		mov    0x4(%edi,%eax,2),%dl
		xor    %dh,%dh
		movsbw 0x40(%esp),%ax
		mov    0x8(%esp),%esi
		add    %edx,%eax
		add    %eax,%esi
		inc    %ebx
		mov    %esi,0x8(%esp)
		jmp    jump_38d43
	jump_38dfe:
		xor    %edx,%edx
		mov    0x38(%esp),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    0x8(%esp),%ecx
		mov    0x4(%edi,%eax,2),%al
		xor    %ah,%ah
		add    %eax,%ecx
		mov    %ecx,0x8(%esp)
		mov    $0x5c,%dh
		mov    $0xa,%dl
		mov    $0x7c,%cl
	jump_38e24:
		mov    (%ebx),%ch
		cmp    $0x20,%ch
		je     jump_38e37
		cmp    %ch,%dl
		je     jump_38e37
		cmp    %ch,%dh
		je     jump_38e37
		cmp    %ch,%cl
		jne    jump_38e84
	jump_38e37:
		mov    (%ebx),%al
		cmp    %al,%dl
		jne    jump_38e5c
		cmp    0x1(%ebx),%al
		jne    jump_38e5c
		mov    0x3c(%esp),%al
		xor    %ah,%ah
		mov    0x4(%esp),%esi
		add    %eax,%eax
		add    %eax,%esi
		mov    0x24(%esp),%eax
		mov    %esi,0x4(%esp)
		mov    %eax,0x8(%esp)
	jump_38e5c:
		cmp    (%ebx),%dh
		jne    jump_38e78
		mov    0x3c(%esp),%al
		mov    0x4(%esp),%esi
		xor    %ah,%ah
		add    %eax,%esi
		mov    0x24(%esp),%eax
		mov    %esi,0x4(%esp)
		mov    %eax,0x8(%esp)
	jump_38e78:
		cmp    (%ebx),%cl
		je     jump_38e84
		mov    0x1(%ebx),%ah
		inc    %ebx
		test   %ah,%ah
		jne    jump_38e24
	jump_38e84:
		cmpb   $0x0,(%ebx)
		jne    jump_38cbc
	jump_38e8d:
		test   %ebp,%ebp
		mov    $0x1,%bl
	jump_38e91:
		mov    %bl,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_word_width:	/* 0x38ea0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%edx
		mov    0x10(%esp),%esi
		mov    (%edx),%ah
		xor    %ecx,%ecx
		test   %ah,%ah
		je     jump_38ef7
	jump_38eb2:
		mov    (%edx),%bh
		cmp    $0x20,%bh
		je     jump_38ef7
		cmp    $0xa,%bh
		je     jump_38ef7
		cmp    $0x5c,%bh
		je     jump_38ef7
		cmp    $0x7c,%bh
		je     jump_38ef7
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    0x14(%esp),%bx
		mov    (%edx),%al
		add    %ebx,%eax
		lea    -0x20(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    0x4(%esi,%eax,2),%bl
		xor    %bh,%bh
		movsbw 0x18(%esp),%ax
		add    %ebx,%eax
		inc    %edx
		add    %eax,%ecx
		cmpb   $0x0,(%edx)
		jne    jump_38eb2
	jump_38ef7:
		mov    %ecx,%eax
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GetLineWidth:	/* 0x38f00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%edx
		mov    0x14(%esp),%esi
		mov    0x18(%esp),%edi
		mov    (%edx),%ah
		xor    %ecx,%ecx
		test   %ah,%ah
		je     jump_38f49
	jump_38f17:
		cmpb   $0xa,(%edx)
		je     jump_38f49
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    %di,%ax
		mov    (%edx),%bl
		add    %ebx,%eax
		lea    -0x20(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		movsbw 0x1c(%esp),%bx
		mov    0x4(%esi,%eax,2),%al
		xor    %ah,%ah
		add    %ebx,%eax
		inc    %edx
		add    %eax,%ecx
		cmpb   $0x0,(%edx)
		jne    jump_38f17
	jump_38f49:
		mov    %ecx,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
new_show_text:	/* 0x38f50 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    0x30(%esp),%edi
		xor    %ah,%ah
		mov    0x20(%esp),%ebx
		mov    %ah,(%esp)
	jump_38f64:
		xor    %eax,%eax
		mov    0x1c(%esp),%edx
		mov    (%esp),%al
		add    %edx,%eax
		mov    (%eax),%dl
		test   %dl,%dl
		je     jump_390b2
		cmp    $0xa,%dl
		jne    jump_38f97
		mov    0x28(%esp),%al
		mov    0x24(%esp),%ebx
		xor    %ah,%ah
		add    %eax,%ebx
		mov    %ebx,0x24(%esp)
		mov    0x20(%esp),%ebx
		jmp    jump_390aa
	jump_38f97:
		mov    0x3c(%esp),%cl
		mov    %dl,0x4(%esp)
		test   %cl,%cl
		je     jump_38ff4
		xor    %eax,%eax
		mov    %cl,%al
		push   %eax
		xor    %eax,%eax
		mov    0x28(%esp),%edx
		mov    0x2c(%esp),%al
		add    %edx,%eax
		sub    $0x2,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		movzbl 0x8(%esp),%esi
		mov    0x30(%esp),%ax
		add    %eax,%esi
		sub    $0x20,%esi
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		movzbw 0x4(%edi,%eax,2),%si
		movsbw 0x38(%esp),%ax
		add    %ebx,%esi
		add    %esi,%eax
		push   %edx
		cwtl
		push   %eax
		push   %edx
		movswl %bx,%eax
		push   %eax
		call   func_1b3a0
		add    $0x14,%esp
	jump_38ff4:
		mov    0x4(%esp),%ch
		test   %ch,%ch
		je     jump_390b2
		mov    %ch,%al
		sub    $0x20,%al
		mov    %al,0x4(%esp)
		je     jump_3908a
		cmpb   $0x0,0x40(%esp)
		je     jump_39025
		mov    BScreen,%eax
		mov    EXPORT_SYMBOL(WScreen),%ebp
		mov    %eax,EXPORT_SYMBOL(WScreen)
	jump_39025:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2c(%esp),%ax
		mov    0x4(%esp),%dl
		add    %eax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    0x24(%esp),%edx
		lea    (%edi,%eax,1),%esi
		add    $0xc,%edx
		mov    0x5(%esi),%al
		xor    %ah,%ah
		sub    %eax,%edx
		xor    %eax,%eax
		push   %esi
		mov    %dx,%ax
		push   %eax
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		mov    0x4(%esi),%dl
		xor    %dh,%dh
		movsbw 0x34(%esp),%ax
		add    %edx,%eax
		mov    0x40(%esp),%dh
		add    %eax,%ebx
		test   %dh,%dh
		je     jump_390aa
		mov    %ebp,EXPORT_SYMBOL(WScreen)
		incb   (%esp)
		jmp    jump_38f64
	jump_3908a:
		xor    %edx,%edx
		mov    0x2c(%esp),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		movsbw 0x34(%esp),%dx
		mov    0x4(%edi,%eax,2),%al
		xor    %ah,%ah
		add    %edx,%eax
		add    %eax,%ebx
	jump_390aa:
		incb   (%esp)
		jmp    jump_38f64
	jump_390b2:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_line:	/* 0x390c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x5c,%esp
		mov    0x80(%esp),%esi
		mov    0x8c(%esp),%ebp
		mov    0x88(%esp),%ebx
		mov    (%ebx),%dl
		xor    %edi,%edi
		test   %dl,%dl
		je     jump_390ed
	jump_390e4:
		mov    0x1(%ebx),%dh
		inc    %ebx
		inc    %edi
		test   %dh,%dh
		jne    jump_390e4
	jump_390ed:
		cmp    (%esi),%di
		jae    jump_390f5
		mov    %di,(%esi)
	jump_390f5:
		mov    0x84(%esp),%eax
		xor    %ecx,%ecx
		mov    (%eax),%dx
		mov    %ecx,0x58(%esp)
		test   %dx,%dx
		je     jump_392df
#if defined(DOS) /* get key via interrupts */
		call   ac_read_key
#else
		call   ac_read_char
#endif
		mov    %al,%dh
		test   %al,%al
		je     jump_3915b
		cmp    $0x20,%al
		jb     jump_3915b
		cmp    0x7c(%esp),%di
		jae    jump_3915b
		cmp    $0x61,%al
		jb     jump_39139
		cmp    $0x7a,%al
		ja     jump_39139
		cmpb   $0x0,0x94(%esp)
		je     jump_39139
		sub    $0x20,%dh
	jump_39139:
		xor    %eax,%eax
		mov    0x88(%esp),%ecx
		mov    (%esi),%ax
		add    %ecx,%eax
		cmp    %eax,%ebx
		jb     jump_39156
	jump_3914b:
		dec    %ebx
		mov    0x1(%ebx),%dl
		mov    %dl,0x2(%ebx)
		cmp    %eax,%ebx
		jae    jump_3914b
	jump_39156:
		mov    %dh,(%eax)
		incw   (%esi)
	jump_3915b:
		mov    $0x1,%edx
		mov    %edx,0x58(%esp)
		mov    EXPORT_SYMBOL(lbInkey),%al
		cmp    $0x4b,%al
		jb     jump_39193
		jbe    jump_391ea
		cmp    $0x4f,%al
		jb     jump_39186
		jbe    jump_391da
		cmp    $0x53,%al
		je     jump_39221
		jmp    jump_392d9
	jump_39186:
		cmp    $0x4d,%al
		je     jump_39205
		jmp    jump_392d9
	jump_39193:
		cmp    $0x1c,%al
		jb     jump_391a2
		jbe    jump_391af
		cmp    $0x47,%al
		je     jump_391c8
		jmp    jump_392d9
	jump_391a2:
		cmp    $0xe,%al
		je     jump_39272
		jmp    jump_392d9
	jump_391af:
		mov    0x84(%esp),%eax
		xor    %bh,%bh
		movw   $0x0,(%eax)
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+0x1c	/* lbKeyOn[KC_RETURN] */
		jmp    jump_392df
	jump_391c8:
		movw   $0x0,(%esi)
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)+0x47
		jmp    jump_392df
	jump_391da:
		xor    %ah,%ah
		mov    %di,(%esi)
		mov    %ah,EXPORT_SYMBOL(lbKeyOn)+0x4f
		jmp    jump_392df
	jump_391ea:
		mov    (%esi),%ax
		test   %ax,%ax
		je     jump_391f8
		mov    %eax,%edx
		dec    %edx
		mov    %dx,(%esi)
	jump_391f8:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbKeyOn)+0x4b
		jmp    jump_392df
	jump_39205:
		mov    (%esi),%cx
		cmp    %cx,%di
		jbe    jump_39214
		mov    %ecx,%edi
		add    %edx,%edi
		mov    %di,(%esi)
	jump_39214:
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbKeyOn)+0x4d
		jmp    jump_392df
	jump_39221:
		mov    (%esi),%bx
		cmp    %bx,%di
		jbe    jump_39265
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1d
		je     jump_39245
		xor    %eax,%eax
		mov    0x88(%esp),%edx
		mov    %bx,%ax
		add    %edx,%eax
		movb   $0x0,(%eax)
		jmp    jump_39265
	jump_39245:
		xor    %ebx,%ebx
		mov    0x88(%esp),%edi
		mov    (%esi),%bx
		add    %edi,%ebx
		cmpb   $0x0,(%ebx)
		je     jump_39265
	jump_39258:
		mov    0x1(%ebx),%al
		mov    %al,(%ebx)
		mov    0x1(%ebx),%dh
		inc    %ebx
		test   %dh,%dh
		jne    jump_39258
	jump_39265:
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)+0x53
		jmp    jump_392df
	jump_39272:
		cmpw   $0x0,(%esi)
		je     jump_392d0
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+0x1d
		je     jump_392ac
		xor    %ebx,%ebx
		mov    (%esi),%bx
		mov    0x88(%esp),%edi
		dec    %ebx
		add    %edi,%ebx
		mov    (%ebx),%dl
		mov    %edi,%eax
		test   %dl,%dl
		je     jump_392a5
	jump_39298:
		mov    0x1(%ebx),%dl
		inc    %ebx
		mov    %dl,(%eax)
		mov    (%ebx),%ch
		inc    %eax
		test   %ch,%ch
		jne    jump_39298
	jump_392a5:
		movw   $0x0,(%esi)
		jmp    jump_392d0
	jump_392ac:
		xor    %ebx,%ebx
		mov    (%esi),%bx
		mov    0x88(%esp),%ecx
		dec    %ebx
		add    %ecx,%ebx
		cmpb   $0x0,(%ebx)
		je     jump_392cd
	jump_392c0:
		mov    0x1(%ebx),%al
		mov    %al,(%ebx)
		mov    0x1(%ebx),%cl
		inc    %ebx
		test   %cl,%cl
		jne    jump_392c0
	jump_392cd:
		decw   (%esi)
	jump_392d0:
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+0x0e	/* lbKeyOn[KC_BACK] */
		jmp    jump_392df
	jump_392d9:
		xor    %ebx,%ebx
		mov    %ebx,0x58(%esp)
	jump_392df:
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbInkey)
		mov    0x78(%esp),%edx
		mov    (%esi),%ax
		sub    %edx,%eax
		test   %ax,%ax
		jge    jump_392f7
		xor    %eax,%eax
	jump_392f7:
		movswl %ax,%ebx
		add    0x88(%esp),%ebx
		xor    %ecx,%ecx
		mov    (%ebx),%dl
		mov    %cx,0x54(%esp)
		test   %dl,%dl
		jne    jump_3932b
		jmp    jump_39336
	jump_39310:
		xor    %eax,%eax
		mov    (%ebx),%dl
		mov    0x54(%esp),%ax
		inc    %ebx
		mov    %eax,%edi
		mov    %dl,(%esp,%eax,1)
		inc    %edi
		mov    (%ebx),%dh
		mov    %di,0x54(%esp)
		test   %dh,%dh
		je     jump_39336
	jump_3932b:
		mov    0x54(%esp),%eax
		cmp    0x78(%esp),%ax
		jb     jump_39310
	jump_39336:
		xor    %eax,%eax
		mov    0x54(%esp),%ax
		xor    %bl,%bl
		mov    %bl,(%esp,%eax,1)
		mov    0x84(%esp),%eax
		xor    %bh,%bh
		mov    (%eax),%cx
		mov    %bx,0x54(%esp)
		test   %cx,%cx
		je     jump_39375
		mov    $0xfc,%edi
		mov    0x9c(%esp),%bh
		mov    %di,0x54(%esp)
		test   $0x4,%bh
		je     jump_39375
		movw   $0x58,0x54(%esp)
	jump_39375:
		push   $0x0
		xor    %eax,%eax
		push   $0x0
		mov    0xac(%esp),%al
		push   %eax
		movsbl 0xac(%esp),%eax
		push   %eax
		xor    %eax,%eax
		push   %ebp
		mov    0xa4(%esp),%ax
		push   %eax
		xor    %eax,%eax
		mov    0xb0(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x90(%esp),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x90(%esp),%ax
		push   %eax
		lea    0x24(%esp),%eax
		push   %eax
		call   new_show_text
		add    $0x28,%esp
		mov    0x84(%esp),%eax
		cmpw   $0x0,(%eax)
		je     jump_3948f
		mov    (%esi),%bx
		xor    %edx,%edx
		xor    %edi,%edi
		test   %bx,%bx
		je     jump_39421
	jump_393e2:
		xor    %eax,%eax
		mov    %dx,%ax
		xor    %ebx,%ebx
		mov    (%esp,%eax,1),%bl
		xor    %eax,%eax
		mov    0x90(%esp),%ax
		add    %ebx,%eax
		sub    $0x20,%eax
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		add    %ebx,%ebx
		lea    (%ebx,%ebp,1),%eax
		mov    0x4(%eax),%bl
		xor    %bh,%bh
		movsbw 0xa0(%esp),%ax
		add    %ebx,%eax
		inc    %edx
		add    %eax,%edi
		cmp    (%esi),%dx
		jne    jump_393e2
	jump_39421:
		xor    %eax,%eax
		mov    0x54(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    0x78(%esp),%edx
		mov    0x9c(%esp),%al
		add    %edx,%eax
		sub    $0x2,%eax
		movswl %ax,%ebx
		xor    %eax,%eax
		mov    (%esi),%ax
		xor    %esi,%esi
		mov    0x4(%esp,%eax,1),%al
		mov    0x94(%esp),%si
		and    $0xff,%eax
		add    %esi,%eax
		lea    -0x20(%eax),%esi
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    0x74(%esp),%ecx
		add    %eax,%ebp
		xor    %eax,%eax
		add    %ecx,%edi
		mov    0x4(%ebp),%al
		movsbw 0xa4(%esp),%dx
		add    %edi,%eax
		add    %edx,%eax
		push   %ebx
		cwtl
		push   %eax
		push   %ebx
		movswl %di,%eax
		push   %eax
		call   func_1b3a0
		add    $0x14,%esp
	jump_3948f:
		mov    0x58(%esp),%eax
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_in_car:	/* 0x394a0 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		cmpw   $0x0,0x24(%edx)
		je     jump_394d7
		mov    0x8(%esp),%eax
		mov    0x1c(%eax),%ax
		test   %ax,%ax
		je     jump_394d7
	jump_394b8:
		test   %ax,%ax
		je     jump_394d7
		and    $0xffff,%eax
		add    $level__things_base,%eax
		cmp    %edx,%eax
		jne    jump_394d1
		mov    $0x1,%eax
		ret
	jump_394d1:
		mov    0x22(%eax),%ax
		jmp    jump_394b8
	jump_394d7:
		xor    %eax,%eax
		ret


/*----------------------------------------------------------------*/
kill_driver_and_passengers:	/* 0x394e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		mov    0x1c(%esi),%bx
		test   %bx,%bx
		je     jump_39522
	jump_394ef:
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		push   %ebx
		call   fn_S_PERSON_MOVE_OUT_OF_VEHICLE
		mov    0x16(%esi),%ax
		mov    %ax,0x16(%ebx)
		mov    0xa(%ebx),%ah
		movb   $0x14,0x19(%ebx)
		or     $0x8,%ah
		mov    %ah,0xa(%ebx)
		add    $0x4,%esp
		mov    0x22(%ebx),%bx
		test   %bx,%bx
		jne    jump_394ef
	jump_39522:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
escape_passengers_and_wander:	/* 0x39530 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%esi
		mov    0x19(%esi),%ah
		cmp    $0x5,%ah
		je     jump_395be
		cmp    $0x6,%ah
		je     jump_395be
		mov    0x1c(%esi),%bx
		test   %bx,%bx
		je     jump_395be
	jump_39554:
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		cmpw   $0x0,0x20(%ebx)
		jne    jump_395b5
		mov    0x1c(%ebx),%dh
		test   $0x1,%dh
		je     jump_3957f
		push   %ebx
		call   fn_S_PERSON_MOVE_OUT_OF_VEHICLE
		movb   $0x1f,0x19(%ebx)
		movb   $0x1f,0x58(%ebx)
		jmp    jump_39592
	jump_3957f:
		test   $0xc,%dh
		je     jump_395b5
		push   %ebx
		call   fn_S_PERSON_MOVE_OUT_OF_VEHICLE
		movb   $0x20,0x19(%ebx)
		movb   $0x20,0x58(%ebx)
	jump_39592:
		mov    0x16(%esi),%ax
		movb   $0xff,0x4a(%ebx)
		movb   $0xff,0x49(%ebx)
		movb   $0xff,0x4e(%ebx)
		movb   $0xff,0x4d(%ebx)
		movb   $0xff,0x52(%ebx)
		movb   $0xff,0x51(%ebx)
		add    $0x4,%esp
		mov    %ax,0x2a(%ebx)
	jump_395b5:
		mov    0x22(%ebx),%bx
		test   %bx,%bx
		jne    jump_39554
	jump_395be:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
affect_vehicle:	/* 0x395d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		testb  $0x1,0xb(%ebx)
		jne    jump_39653
		cmpw   $0x0,0xc(%ebx)
		je     jump_39653
		mov    0x1c(%ebx),%ax
		cmp    0x16(%ebx),%ax
		je     jump_39646
		mov    0xc(%ebx),%dl
		test   $0x8,%dl
		je     jump_3960c
		mov    0x14(%ebx),%ax
		sub    $0xa,%eax
		push   %ebx
		mov    %ax,0x14(%ebx)
		jmp    jump_3963e
	jump_3960c:
		test   $0x10,%dl
		je     jump_39622
		mov    0x14(%ebx),%di
		sub    $0x12c,%edi
		push   %ebx
		mov    %di,0x14(%ebx)
		jmp    jump_3963e
	jump_39622:
		test   $0x80,%dl
		je     jump_39638
		mov    0x14(%ebx),%si
		sub    $0x12c,%esi
		push   %ebx
		mov    %si,0x14(%ebx)
		jmp    jump_3963e
	jump_39638:
		test   $0x40,%dl
		je     jump_39646
		push   %ebx
	jump_3963e:
		call   escape_passengers_and_wander
		add    $0x4,%esp
	jump_39646:
		mov    0xc(%ebx),%dx
		and    $0x2,%dh
		xor    %dl,%dl
		mov    %dx,0xc(%ebx)
	jump_39653:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
vehicle_moving:	/* 0x39660 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%ebx
		mov    0x10(%esp),%dl
		cmpw   $0x0,0x14(%ebx)
		jge    jump_396b2
		movswl 0x8(%ebx),%eax
		push   %eax
		mov    0x6(%ebx),%ax
		inc    %eax
		cwtl
		mov    0xa(%ebx),%si
		push   %eax
		mov    0x4(%ebx),%ax
		movw   $0x64,0x14(%ebx)
		inc    %eax
		mov    %dl,0x19(%ebx)
		cwtl
		or     $0x108,%esi
		push   %eax
		mov    %si,0xa(%ebx)
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_39729
		movb   $0xd,0x19(%eax)
		pop    %esi
		pop    %ebx
		ret
	jump_396b2:
		mov    0x1c(%ebx),%ax
		test   %ax,%ax
		je     jump_3970d
		and    $0xffff,%eax
		add    $level__things_base,%eax
		testb  $0x2,0x1c(%eax)
		jne    jump_396d5
		cmp    $0x7,%dl
		je     jump_396d5
		cmp    $0xb,%dl
		jne    jump_3970d
	jump_396d5:
		cmpb   $0x20,0x54(%eax)
		jb     jump_3970d
		push   $0x1
		push   $0x100
		push   $0xf0
		push   $0xf0
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   sprite_colide
		add    $0x20,%esp
	jump_3970d:
		mov    0x1a(%ebx),%al
		add    $0x20,%al
		and    $0xc0,%al
		push   %ebx
		mov    %al,0x1a(%ebx)
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   affect_vehicle
		add    $0x4,%esp
	jump_39729:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
vehicle_on_fire:	/* 0x39730 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%ebx),%dx
		dec    %edx
		mov    %dx,0x14(%ebx)
		test   %dx,%dx
		jge    jump_397b2
		mov    0x19(%ebx),%ah
		inc    %ah
		mov    0x16(%ebx),%si
		mov    %ah,0x19(%ebx)
		test   %si,%si
		je     jump_397b2
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		mov    %edx,%eax
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%eax
		sub    %edx,%eax
		mov    data_5e551(%eax),%al
		and    $0xff,%eax
		imul   $0x5c,%eax,%edx
		xor    %ecx,%ecx
		mov    %si,%cx
		add    $level__things_base,%ecx
		add    $level__People,%edx
		cmp    %edx,%ecx
		jb     jump_397b2
		add    $0x4,%eax
		imul   $0x5c,%eax,%eax
		add    $level__People,%eax
		cmp    %eax,%ecx
		jae    jump_397b2
		mov    0x14(%esp),%eax
		add    %eax,data_60af0
	jump_397b2:
		mov    0xa(%ebx),%di
		or     $0x108,%edi
		push   %ebx
		mov    %di,0xa(%ebx)
		call   animate_model
		add    $0x4,%esp
		push   %ebx
		call   kill_driver_and_passengers
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_397d8:
		.long   jump_39e88
		.long   func_39948
		.long   func_39948
		.long   func_39976
		.long   func_399a7
		.long   func_399d3
		.long   func_399d3
		.long   func_39a00
		.long   func_39a30
		.long   func_39a58
		.long   func_39a58
		.long   func_39ae5
		.long   func_39b73
		.long   func_39bfe
		.long   func_39bfe
		.long   func_39c2c
		.long   func_39c5d
		.long   func_39c80
		.long   func_39c80
		.long   func_39cad
		.long   func_39cdd
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   func_39d05
		.long   func_39d05
		.long   func_39d32
		.long   func_39d62
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   jump_39e88
		.long   func_39d84
		.long   func_39d84
		.long   func_39db1
		.long   func_39de1
		.long   func_39e09
		.long   func_39e09
		.long   func_39e33
		.long   func_39e60
	move_vehicles:	/* 0x39890 */
		push   %ebx
		push   %esi
		push   %edi
		mov    $level__Vehicles,%ebx
		cmp    last_vehicle,%ebx
		jae    jump_39ebb
	jump_398a4:
		cmpb   $0x0,0x18(%ebx)
		je     jump_39eaa
		mov    0x20(%ebx),%dx
		xor    %esi,%esi
		test   %dx,%dx
		je     jump_39912
		xor    %edx,%edx
		mov    0x20(%ebx),%dx
		add    $level__things_base,%edx
		mov    0x22(%ebx),%cx
		mov    0x4(%edx),%ax
		add    %ecx,%eax
		mov    0x24(%ebx),%di
		mov    %ax,data_60b28
		mov    0x6(%edx),%ax
		add    %edi,%eax
		mov    %ax,data_60b2a
		mov    0x8(%edx),%ax
		mov    0x26(%ebx),%dx
		add    %edx,%eax
		mov    %ax,data_60b2c
		cwtl
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		jmp    jump_39930
	jump_39912:
		mov    0x4(%ebx),%ax
		mov    %ax,data_60b28
		mov    0x6(%ebx),%ax
		mov    %ax,data_60b2a
		mov    0x8(%ebx),%ax
		mov    %ax,data_60b2c
	jump_39930:
		mov    0x19(%ebx),%dl
		cmp    $0x2b,%dl
		ja     jump_39e88
		xor    %eax,%eax
		mov    %dl,%al
		jmp    *%cs:vtable_397d8(,%eax,4)


/*----------------------------------------------------------------*/
func_39948:
/*----------------------------------------------------------------*/
		push   $0x3
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    $0x8,%esp
		lea    0x190(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39976:
/*----------------------------------------------------------------*/
		push   $0x249f0
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x8,%esp
		lea    0x198(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_399a7:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x4,%esp
		lea    0x19c(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_399d3:
/*----------------------------------------------------------------*/
		push   $0x7
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1a0,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39a00:
/*----------------------------------------------------------------*/
		push   $0x1e8480
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1a4,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39a30:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1a8,%eax
		jmp    jump_39e83


/*----------------------------------------------------------------*/
func_39a58:
/*----------------------------------------------------------------*/
		push   $0xb
		push   %ebx
		call   vehicle_moving
		mov    0xe(%ebx),%ax
		add    $0x8,%esp
		test   %ax,%ax
		jne    jump_39a8f
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1ac(%eax),%esi
		jmp    jump_39e88
	jump_39a8f:
		cmp    $0x1,%ax
		jne    jump_39ab8
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1b2(%eax),%esi
		jmp    jump_39e88
	jump_39ab8:
		cmp    $0x2,%ax
		jne    jump_39e88
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1b8(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39ae5:
/*----------------------------------------------------------------*/
		push   $0xdbba0
		push   %ebx
		call   vehicle_on_fire
		mov    0xe(%ebx),%dx
		add    $0x8,%esp
		test   %dx,%dx
		jne    jump_39b1e
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x1ae,%eax
		jmp    jump_39e86
	jump_39b1e:
		cmp    $0x1,%dx
		jne    jump_39b46
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		add    $0x1b4,%eax
		jmp    jump_39e86
	jump_39b46:
		cmp    $0x2,%dx
		jne    jump_39e88
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1ba(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39b73:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		mov    0xe(%ebx),%cx
		add    $0x4,%esp
		test   %cx,%cx
		jne    jump_39ba8
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1b0(%eax),%esi
		jmp    jump_39e88
	jump_39ba8:
		cmp    $0x1,%cx
		jne    jump_39bd1
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1b6(%eax),%esi
		jmp    jump_39e88
	jump_39bd1:
		cmp    $0x2,%cx
		jne    jump_39e88
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x1,%eax
		lea    0x1bc(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39bfe:
/*----------------------------------------------------------------*/
		push   $0xf
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    $0x8,%esp
		lea    0x1be(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39c2c:
/*----------------------------------------------------------------*/
		push   $0x2328
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x8,%esp
		lea    0x1c6(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39c5d:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		lea    0x1ca(%eax),%esi
		jmp    jump_39e88


/*----------------------------------------------------------------*/
func_39c80:
/*----------------------------------------------------------------*/
		push   $0x13
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    $0x206,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39cad:
/*----------------------------------------------------------------*/
		push   $0xafc8
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x20e,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39cdd:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x212,%eax
		jmp    jump_39e83


/*----------------------------------------------------------------*/
func_39d05:
/*----------------------------------------------------------------*/
		push   $0x1e
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    $0x216,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39d32:
/*----------------------------------------------------------------*/
		push   $0xc350
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x21e,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39d62:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x222,%eax
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39d84:
/*----------------------------------------------------------------*/
		push   $0x26
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    $0x1d6,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39db1:
/*----------------------------------------------------------------*/
		push   $0x9c40
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1de,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39de1:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1e2,%eax
		jmp    jump_39e83


/*----------------------------------------------------------------*/
func_39e09:
/*----------------------------------------------------------------*/
		push   $0x2a
		push   %ebx
		call   vehicle_moving
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x5,%edx
		sbb    %edx,%eax
		sar    $0x5,%eax
		and    $0x7,%eax
		add    $0x1ee,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39e33:
/*----------------------------------------------------------------*/
		push   $0x88b8
		push   %ebx
		call   vehicle_on_fire
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1f6,%eax
		add    $0x8,%esp
		jmp    jump_39e86


/*----------------------------------------------------------------*/
func_39e60:
/*----------------------------------------------------------------*/
		push   %ebx
		call   animate_model
		xor    %edx,%edx
		mov    0x1a(%ebx),%dl
		add    $0x20,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0x3,%eax
		add    $0x1fa,%eax
	jump_39e83:
		add    $0x4,%esp
	jump_39e86:
		mov    %eax,%esi
	jump_39e88:
		cmp    0x12(%ebx),%si
		je     jump_39eaa
		test   %si,%si
		je     jump_39eaa
		xor    %eax,%eax
		mov    starts_ani,%edx
		mov    %si,%ax
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x10(%ebx)
		mov    %si,0x12(%ebx)
	jump_39eaa:
		mov    last_vehicle,%ecx
		add    $0x2a,%ebx
		cmp    %ecx,%ebx
		jb     jump_398a4
	jump_39ebb:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
which_weapon:	/* 0x39ec0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0x10(%esp),%esi
		mov    0xc(%esp),%edx
		xor    %eax,%eax
		mov    0x3a(%edx),%ax
		mov    $0x1,%ecx
		add    $level__things_base,%eax
	jump_39eda:
		xor    %ebx,%ebx
		movswl %cx,%edx
		mov    %si,%bx
		cmp    %ebx,%edx
		jge    jump_39eff
		mov    0x1c(%eax),%dx
		test   %dx,%dx
		je     jump_39efc
		mov    %dx,%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
	jump_39efc:
		inc    %ecx
		jmp    jump_39eda
	jump_39eff:
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
weapon_to_person:	/* 0x39f10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%ecx
		xor    %edx,%edx
		mov    %dx,0x1c(%ebx)
		mov    0x3a(%ecx),%di
		test   %di,%di
		je     jump_39f75
		xor    %eax,%eax
		mov    %di,%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x1c(%eax)
		je     jump_39f51
	jump_39f3b:
		mov    0x1c(%eax),%ax
		and    $0xffff,%eax
		add    $level__things_base,%eax
		inc    %edx
		cmpw   $0x0,0x1c(%eax)
		jne    jump_39f3b
	jump_39f51:
		cmp    $0x7,%dx
		jb     jump_39f5b
		xor    %esi,%esi
		jmp    jump_39f9e
	jump_39f5b:
		mov    %eax,%edx
		sub    $level__things_base,%edx
		mov    %dx,0x1e(%ebx)
		mov    %ebx,%edx
		sub    $level__things_base,%edx
		mov    %dx,0x1c(%eax)
		jmp    jump_39f8b
	jump_39f75:
		mov    %ecx,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x1e(%ebx)
		mov    %ebx,%eax
		sub    $level__things_base,%eax
		mov    %ax,0x3a(%ecx)
	jump_39f8b:
		mov    0xa(%ebx),%ah
		sub    $level__things_base,%ecx
		or     $0x1,%ah
		mov    %cx,0x20(%ebx)
		mov    %ah,0xa(%ebx)
	jump_39f9e:
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
weapons_in_weight:	/* 0x39fb0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0x3a(%eax),%ax
		xor    %ebx,%ebx
		test   %ax,%ax
		je     jump_39fe4
	jump_39fc0:
		test   %ax,%ax
		je     jump_39fe4
		and    $0xffff,%eax
		add    $level__things_base,%eax
		xor    %edx,%edx
		mov    0x19(%eax),%dl
		mov    weapon_weights(,%edx,2),%cx
		mov    0x1c(%eax),%ax
		add    %ecx,%ebx
		jmp    jump_39fc0
	jump_39fe4:
		xor    %eax,%eax
		mov    %bx,%ax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
weapon_time_in_use:	/* 0x39ff0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%edx
		mov    0x44(%edx),%bx
		test   %bx,%bx
		je     jump_3a020
		xor    %eax,%eax
		mov    %bx,%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a020
		mov    0x19(%eax),%al
		and    $0xff,%eax
		mov    weapons_time_in_use(%eax),%al
		mov    %al,0x46(%edx)
	jump_3a020:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_has_weapon:	/* 0x3a030 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0xc(%esp),%ecx
		mov    0x8(%esp),%eax
		mov    0x3a(%eax),%ax
		test   %ax,%ax
		je     jump_3a06c
	jump_3a042:
		test   %ax,%ax
		je     jump_3a06c
		and    $0xffff,%eax
		xor    %edx,%edx
		add    $level__things_base,%eax
		xor    %ebx,%ebx
		mov    %cx,%dx
		mov    0x19(%eax),%bl
		cmp    %edx,%ebx
		jne    jump_3a066
		mov    $0x1,%eax
		pop    %ebx
		ret
	jump_3a066:
		mov    0x1c(%eax),%ax
		jmp    jump_3a042
	jump_3a06c:
		xor    %eax,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
count_weapons:	/* 0x3a070 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x3a(%eax),%ax
		xor    %edx,%edx
		test   %ax,%ax
		je     jump_3a095
	jump_3a07f:
		test   %ax,%ax
		je     jump_3a095
		and    $0xffff,%eax
		add    $level__things_base,%eax
		inc    %edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a07f
	jump_3a095:
		mov    %edx,%eax
		ret


/*----------------------------------------------------------------*/
auto_weapon:	/* 0x3a0a0 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    0x44(%edx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_3a0c7
		mov    0x19(%eax),%al
		and    $0xff,%eax
		mov    data_5a6ea(%eax),%al
		xor    %ah,%ah
		ret
	jump_3a0c7:
		xor    %eax,%eax
		ret


/*----------------------------------------------------------------*/
fatal_weapon:	/* 0x3a0d0 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    0x44(%edx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_3a0c7
		mov    0x19(%eax),%al
		and    $0xff,%eax
		mov    data_5a686(%eax),%al
		xor    %ah,%ah
		ret


/*----------------------------------------------------------------*/
weapon_is_empty:	/* 0x3a100 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    0x44(%edx),%ax
		add    $level__things_base,%eax
		cmp    $level__Weapons,%eax
		jb     jump_3a123
		cmpw   $0x0,0x14(%eax)
		jge    jump_3a123
		mov    $0x1,%eax
		ret
	jump_3a123:
		xor    %eax,%eax
		ret


/*----------------------------------------------------------------*/
drop_weapon:	/* 0x3a130 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    0xc(%esp),%edx
		mov    0x44(%edx),%bx
		test   %bx,%bx
		je     jump_3a1be
		xor    %eax,%eax
		mov    %bx,%ax
		add    $level__things_base,%eax
		xor    %ebx,%ebx
		mov    0x1e(%eax),%bx
		add    $level__things_base,%ebx
		cmp    %ebx,%edx
		jne    jump_3a183
		mov    0x1c(%eax),%si
		test   %si,%si
		je     jump_3a179
		xor    %ebx,%ebx
		mov    %si,%bx
		add    $level__things_base,%ebx
		mov    0x1e(%eax),%cx
		mov    %cx,0x1e(%ebx)
	jump_3a179:
		mov    0x1c(%eax),%bx
		mov    %bx,0x3a(%edx)
		jmp    jump_3a1a3
	jump_3a183:
		mov    0x1c(%eax),%cx
		mov    %cx,0x1c(%ebx)
		test   %cx,%cx
		je     jump_3a1a3
		xor    %ebx,%ebx
		mov    %cx,%bx
		add    $level__things_base,%ebx
		mov    0x1e(%eax),%cx
		mov    %cx,0x1e(%ebx)
	jump_3a1a3:
		movw   $0x0,0x1e(%eax)
		movw   $0x0,0x1c(%eax)
		mov    0xa(%eax),%bl
		movw   $0x0,0x20(%eax)
		and    $0xfe,%bl
		mov    %bl,0xa(%eax)
	jump_3a1be:
		movb   $0x0,0x46(%edx)
		movw   $0x0,0x44(%edx)
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
drop_all_weapons:	/* 0x3a1d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    0x18(%esp),%esi
		mov    0x3a(%esi),%ax
		mov    %eax,(%esp)
		test   %ax,%ax
		je     jump_3a2f9
		movw   $0x0,0x3a(%esi)
		movb   $0x0,0x46(%esi)
		movw   $0x0,0x44(%esi)
		je     jump_3a2f9
	jump_3a200:
		xor    %ebx,%ebx
		mov    (%esp),%bx
		add    $level__things_base,%ebx
		movw   $0x0,0x1e(%ebx)
		mov    0x1c(%ebx),%ax
		movw   $0x0,0x20(%ebx)
		mov    %eax,(%esp)
		mov    0xa(%ebx),%ah
		movw   $0x0,0x1c(%ebx)
		and    $0xfe,%ah
		mov    %ah,0xa(%ebx)
		mov    0x4(%esi),%ax
		push   $0xff
		xor    %ah,%ah
		mov    0x6(%esi),%di
		mov    %eax,0x8(%esp)
		call   random
		add    $0x4,%esp
		sub    $0x64,%eax
		mov    0x4(%esp),%edx
		push   $0xff
		add    %eax,%edx
		and    $0xff,%edi
		mov    %edx,0x8(%esp)
		call   random
		add    $0x4,%esp
		sub    $0x64,%eax
		mov    0x4(%esp),%ecx
		add    %eax,%edi
		cmp    $0x100,%cx
		jl     jump_3a282
		mov    %ecx,%eax
		sub    $0x64,%eax
		mov    %eax,0x4(%esp)
	jump_3a282:
		cmp    $0x100,%di
		jl     jump_3a28c
		sub    $0x64,%edi
	jump_3a28c:
		mov    0x4(%esp),%edx
		test   %dx,%dx
		jge    jump_3a29e
		mov    %edx,%ecx
		add    $0x64,%ecx
		mov    %ecx,0x4(%esp)
	jump_3a29e:
		test   %di,%di
		jge    jump_3a2a6
		add    $0x64,%edi
	jump_3a2a6:
		movswl 0x8(%esi),%eax
		push   %eax
		mov    0x6(%esi),%ax
		xor    %al,%al
		add    %edi,%eax
		cwtl
		push   %eax
		mov    0x4(%esi),%ax
		mov    0xc(%esp),%ecx
		xor    %al,%al
		add    %ecx,%eax
		cwtl
		push   %eax
		call   get_altitude_point1
		add    $0xc,%esp
		cwtl
		push   %eax
		mov    0x6(%esi),%ax
		xor    %al,%al
		add    %edi,%eax
		cwtl
		push   %eax
		mov    0x4(%esi),%ax
		mov    0xc(%esp),%edi
		xor    %al,%al
		add    %edi,%eax
		cwtl
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
		cmpw   $0x0,(%esp)
		jne    jump_3a200
	jump_3a2f9:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
kill_all_weapons:	/* 0x3a300 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%eax
		mov    0x3a(%eax),%bx
		test   %bx,%bx
		je     jump_3a33e
		movw   $0x0,0x3a(%eax)
		movb   $0x0,0x46(%eax)
		movw   $0x0,0x44(%eax)
		je     jump_3a33e
	jump_3a320:
		and    $0xffff,%ebx
		add    $level__things_base,%ebx
		push   %ebx
		call   remove_model
		add    $0x4,%esp
		mov    0x1c(%ebx),%bx
		test   %bx,%bx
		jne    jump_3a320
	jump_3a33e:
		pop    %ebx
		ret

vtable_3a340:
		.long   jump_3a52e
		.long   func_3a3de
		.long   func_3a513
		.long   func_3a40b
		.long   func_3a43b
		.long   func_3a46b
		.long   func_3a49b
		.long   func_3a4cb
		.long   func_3a4ef
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e
		.long   jump_3a52e


/*----------------------------------------------------------------*/
choose_best_weapon:	/* 0x3a390 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%edi
		mov    0x14(%esp),%esi
		mov    $0x1,%ebx
		mov    0x3a(%edi),%ax
		xor    %edx,%edx
		test   %ax,%ax
		je     jump_3a537
	jump_3a3af:
		test   %ax,%ax
		je     jump_3a537
		and    $0xffff,%eax
		add    $level__things_base,%eax
		mov    0x19(%eax),%cl
		dec    %cl
		cmp    $0x12,%cl
		ja     jump_3a52e
		and    $0xff,%ecx
		jmp    *%cs:vtable_3a340(,%ecx,4)


/*----------------------------------------------------------------*/
func_3a3de:
/*----------------------------------------------------------------*/
		cmp    $0x4,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x500,%si
		ja     jump_3a52e
		mov    $0x4,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a40b:
/*----------------------------------------------------------------*/
		cmp    $0x5,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x400,%si
		ja     jump_3a52e
		mov    $0x5,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a43b:
/*----------------------------------------------------------------*/
		cmp    $0x7,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x700,%si
		ja     jump_3a52e
		mov    $0x7,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a46b:
/*----------------------------------------------------------------*/
		cmp    $0x8,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x900,%si
		ja     jump_3a52e
		mov    $0x8,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a49b:
/*----------------------------------------------------------------*/
		cmp    $0x9,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x1000,%si
		ja     jump_3a52e
		mov    $0x9,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a4cb:
/*----------------------------------------------------------------*/
		cmp    $0x6,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x200,%si
		ja     jump_3a52e
		mov    $0x6,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a4ef:
/*----------------------------------------------------------------*/
		cmp    $0x5,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x1800,%si
		ja     jump_3a52e
		mov    $0x5,%ebx
		mov    %eax,%edx
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af


/*----------------------------------------------------------------*/
func_3a513:
/*----------------------------------------------------------------*/
		cmp    $0x1,%bx
		ja     jump_3a52e
		cmpw   $0x0,0x14(%eax)
		jl     jump_3a52e
		cmp    $0x1400,%si
		ja     jump_3a52e
		mov    $0x1,%ebx
		mov    %eax,%edx
	jump_3a52e:
		mov    0x1c(%eax),%ax
		jmp    jump_3a3af
	jump_3a537:
		test   %edx,%edx
		jne    jump_3a55b
		xor    %eax,%eax
		mov    0x44(%edi),%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x14(%eax)
		jge    jump_3a553
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3a553:
		mov    0x44(%edi),%ax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3a55b:
		mov    %edx,%eax
		sub    $level__things_base,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret

vtable_3a568:
		.long   func_3a80c
		.long   func_3a60f
		.long   func_3a7cc
		.long   func_3a64c
		.long   func_3a68c
		.long   func_3a6cc
		.long   func_3a70c
		.long   func_3a74c
		.long   func_3a78c
		.long   jump_3a870
		.long   func_3a865
		.long   jump_3a870
		.long   func_3a865
		.long   func_3a865
		.long   func_3a865
		.long   jump_3a870
		.long   func_3a820
		.long   func_3a820
		.long   func_3a820


/*----------------------------------------------------------------*/
choose_best_weapon_or_same:	/* 0x3a5c0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x18(%esp),%ebp
		mov    $0x1,%edi
		mov    0x3a(%ebp),%ax
		xor    %esi,%esi
		xor    %ecx,%ecx
		test   %ax,%ax
		je     jump_3a879
	jump_3a5e1:
		test   %ax,%ax
		je     jump_3a879
		xor    %ebx,%ebx
		mov    %ax,%bx
		add    $level__things_base,%ebx
		mov    0x19(%ebx),%al
		dec    %al
		cmp    $0x12,%al
		ja     jump_3a870
		and    $0xff,%eax
		jmp    *%cs:vtable_3a568(,%eax,4)


/*----------------------------------------------------------------*/
func_3a60f:
/*----------------------------------------------------------------*/
		cmp    $0x4,%di
		ja     jump_3a62c
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a62c
		cmpw   $0x500,0x1c(%esp)
		ja     jump_3a62c
		mov    $0x4,%edi
		mov    %ebx,%esi
	jump_3a62c:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a64c:
/*----------------------------------------------------------------*/
		cmp    $0x5,%di
		ja     jump_3a669
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a669
		cmpw   $0x400,0x1c(%esp)
		ja     jump_3a669
		mov    $0x5,%edi
		mov    %ebx,%esi
	jump_3a669:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a68c:
/*----------------------------------------------------------------*/
		cmp    $0x7,%di
		ja     jump_3a6a9
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a6a9
		cmpw   $0x700,0x1c(%esp)
		ja     jump_3a6a9
		mov    $0x7,%edi
		mov    %ebx,%esi
	jump_3a6a9:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a6cc:
/*----------------------------------------------------------------*/
		cmp    $0x8,%di
		ja     jump_3a6e9
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a6e9
		cmpw   $0x900,0x1c(%esp)
		ja     jump_3a6e9
		mov    $0x8,%edi
		mov    %ebx,%esi
	jump_3a6e9:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a70c:
/*----------------------------------------------------------------*/
		cmp    $0x9,%di
		ja     jump_3a729
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a729
		cmpw   $0x1000,0x1c(%esp)
		ja     jump_3a729
		mov    $0x9,%edi
		mov    %ebx,%esi
	jump_3a729:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a74c:
/*----------------------------------------------------------------*/
		cmp    $0x6,%di
		ja     jump_3a769
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a769
		cmpw   $0x200,0x1c(%esp)
		ja     jump_3a769
		mov    $0x6,%edi
		mov    %ebx,%esi
	jump_3a769:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a78c:
/*----------------------------------------------------------------*/
		cmp    $0x5,%di
		ja     jump_3a7a9
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a7a9
		cmpw   $0x1800,0x1c(%esp)
		ja     jump_3a7a9
		mov    $0x5,%edi
		mov    %ebx,%esi
	jump_3a7a9:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a7cc:
/*----------------------------------------------------------------*/
		cmp    $0x1,%di
		ja     jump_3a7e9
		cmpw   $0x0,0x14(%ebx)
		jl     jump_3a7e9
		cmpw   $0x1400,0x1c(%esp)
		ja     jump_3a7e9
		mov    $0x1,%edi
		mov    %ebx,%esi
	jump_3a7e9:
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a80c:
/*----------------------------------------------------------------*/
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		mov    %ebx,%ecx
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1


/*----------------------------------------------------------------*/
func_3a820:
/*----------------------------------------------------------------*/
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		cmpw   $0xffff,0x14(%ebx)
		jle    jump_3a870
		xor    %eax,%eax
		mov    0x19(%ebx),%al
		xor    %edx,%edx
		mov    weapon_max_ammo(,%eax,2),%dx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		add    %edx,%edx
		movl   $0x64,(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  (%esp)
		movswl 0x14(%ebx),%edx
		cmp    %eax,%edx
		jl     jump_3a870
		mov    %ebx,%ecx
		jmp    jump_3a870


/*----------------------------------------------------------------*/
func_3a865:
/*----------------------------------------------------------------*/
		mov    0x20(%esp),%al
		cmp    0x19(%ebx),%al
		jne    jump_3a870
		mov    %ebx,%ecx
	jump_3a870:
		mov    0x1c(%ebx),%ax
		jmp    jump_3a5e1
	jump_3a879:
		test   %ecx,%ecx
		je     jump_3a881
		mov    %ecx,%eax
		jmp    jump_3a8a3
	jump_3a881:
		test   %esi,%esi
		jne    jump_3a8a1
		xor    %eax,%eax
		mov    0x44(%ebp),%ax
		add    $level__things_base,%eax
		cmpw   $0x0,0x14(%eax)
		jge    jump_3a89b
		xor    %eax,%eax
		jmp    jump_3a8a8
	jump_3a89b:
		mov    0x44(%ebp),%ax
		jmp    jump_3a8a8
	jump_3a8a1:
		mov    %esi,%eax
	jump_3a8a3:
		sub    $level__things_base,%eax
	jump_3a8a8:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
create_ammo_effect:	/* 0x3a8b0 */
/*----------------------------------------------------------------*/
		movswl 0xc(%esp),%edx
		push   %edx
		movswl 0xc(%esp),%edx
		push   %edx
		movswl 0xc(%esp),%edx
		push   %edx
		call   init_effect
		mov    %eax,%edx
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_3a8f7
		mov    0x10(%esp),%al
		mov    %al,0x1a(%edx)
		mov    0x14(%esp),%al
		mov    %al,0x1b(%edx)
		xor    %eax,%eax
		mov    0x18(%esp),%al
		mov    %ax,0x14(%edx)
		mov    0x20(%esp),%al
		mov    %al,0x19(%edx)
		mov    0x1c(%esp),%eax
		mov    %ax,0x1c(%edx)
	jump_3a8f7:
		mov    %edx,%eax
		ret


/*----------------------------------------------------------------*/
affect_weapon:	/* 0x3a900 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0xc(%eax),%dx
		test   %dx,%dx
		je     jump_3a91e
		movw   $0x0,0xc(%eax)
		test   $0xd9,%dl
		je     jump_3a91e
		movw   $0xffff,0x14(%eax)
	jump_3a91e:
		ret

vtable_3a920:
		.long   jump_3b478
		.long   func_3aa35
		.long   func_3aa89
		.long   func_3ab68
		.long   func_3ac03
		.long   func_3acfb
		.long   func_3add0
		.long   func_3aeb8
		.long   func_3af8d
		.long   func_3b122
		.long   func_3b1f9
		.long   func_3b2bd
		.long   func_3b301
		.long   func_3b392
		.long   func_3b3b5
		.long   func_3b3d8
		.long   func_3b3fb
		.long   func_3b41b
		.long   func_3b41b
		.long   func_3b41b


/*----------------------------------------------------------------*/
move_weapons:	/* 0x3a970 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    $level__Weapons,%edi
		cmp    $level__Effects,%edi
		jae    jump_3b4bc
		mov    $level__things_base,%eax
		neg    %eax
		add    %edi,%eax
		mov    %eax,(%esp)
	jump_3a994:
		cmpb   $0x0,0x18(%edi)
		je     jump_3b4a4
		xor    %edx,%edx
		mov    0x20(%edi),%cx
		mov    %edx,0x14(%esp)
		mov    %edx,0x10(%esp)
		test   %cx,%cx
		je     jump_3aa1d
		movzwl %cx,%ebp
		add    $level__things_base,%ebp
		movswl 0x8(%ebp),%eax
		push   %eax
		movswl 0x6(%ebp),%eax
		push   %eax
		movswl 0x4(%ebp),%eax
		push   %eax
		push   %edi
		call   move_mapwho
		mov    0x1a(%ebp),%al
		mov    %al,0x1a(%edi)
		mov    0x1b(%ebp),%al
		add    $0x10,%esp
		mov    %al,0x1b(%edi)
		mov    (%esp),%eax
		cmp    0x44(%ebp),%ax
		jne    jump_3aa1d
		cmpw   $0x0,0x14(%edi)
		jl     jump_3aa1d
		cmpb   $0x0,0x46(%ebp)
		je     jump_3aa15
		push   $0xf
		mov    $0x2,%ebx
		push   %ebp
		mov    %ebx,0x1c(%esp)
		call   get_person_perception
		mov    $0xf,%edx
		add    $0x8,%esp
		sub    %eax,%edx
		mov    %edx,0x8(%esp)
		jmp    jump_3aa1d
	jump_3aa15:
		movl   $0x1,0x14(%esp)
	jump_3aa1d:
		mov    0x19(%edi),%dh
		cmp    $0x13,%dh
		ja     jump_3b478
		xor    %eax,%eax
		mov    %dh,%al
		jmp    *%cs:vtable_3a920(,%eax,4)


/*----------------------------------------------------------------*/
func_3aa35:
/*----------------------------------------------------------------*/
		cmpw   $0x1,0x14(%esp)
		jne    jump_3aa66
		mov    $0x32,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		push   %eax
		push   %eax
		push   %eax
		movswl 0x8(%edi),%eax
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		add    $0x20,%esp
	jump_3aa66:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x16f,%edx
		push   %edi
		mov    %edx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3aa89:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3ab45
		push   %edi
		mov    $0x2,%eax
		push   %eax
		call   play_distance_sample
		add    $0x8,%esp
		mov    0x8(%esp),%esi
		test   %si,%si
		je     jump_3aad5
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		xor    %ebx,%ebx
		call   random
		movswl %si,%edx
		mov    %ax,%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x4,%esp
		sub    %eax,%ebx
		mov    %bx,0x4(%esp)
		jmp    jump_3aada
	jump_3aad5:
		mov    %si,0x4(%esp)
	jump_3aada:
		xor    %edx,%edx
		mov    0x19(%edi),%dl
		add    %edx,%edx
		push   $0x1d
		xor    %eax,%eax
		mov    data_5a6c2(%edx),%dx
		mov    0x20(%edi),%ax
		and    $0xffff,%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		mov    0x10(%esp),%bh
		push   %eax
		mov    0x1a(%edi),%al
		add    %bh,%al
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		mov    0x14(%edi),%dx
		dec    %edx
		add    $0x20,%esp
		mov    %dx,0x14(%edi)
	jump_3ab45:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x170,%ecx
		push   %edi
		mov    %ecx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3ab68:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3abe0
		push   %edi
		mov    $0x16,%eax
		push   %eax
		call   play_distance_sample
		add    $0x8,%esp
		mov    $0x2c,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		push   %eax
		xor    %eax,%eax
		mov    0x1a(%edi),%al
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		mov    0x14(%edi),%ax
		dec    %eax
		add    $0x20,%esp
		mov    %ax,0x14(%edi)
	jump_3abe0:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		push   %edi
		mov    $0x171,%ebx
		call   animate_model
		mov    %ebx,0x14(%esp)
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3ac03:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3acd8
		push   %edi
		mov    $0x1,%eax
		push   %eax
		call   play_distance_sample
		mov    0x14(%edi),%cx
		mov    $0xfffffffd,%esi
		dec    %ecx
		add    $0x8,%esp
		mov    %cx,0x14(%edi)
	jump_3ac2c:
		mov    0x8(%esp),%ecx
		test   %cx,%cx
		je     jump_3ac55
		xor    %ebx,%ebx
		mov    %cx,%bx
		push   %ebx
		call   random
		xor    %ecx,%ecx
		mov    %ebx,%edx
		mov    %ax,%cx
		sar    $0x1f,%edx
		mov    %ebx,%eax
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x4,%esp
		sub    %eax,%ecx
	jump_3ac55:
		mov    %cx,0x4(%esp)
		xor    %edx,%edx
		mov    0x19(%edi),%dl
		add    %edx,%edx
		push   $0x1d
		xor    %eax,%eax
		mov    data_5a6c2(%edx),%dx
		mov    0x20(%edi),%ax
		and    $0xffff,%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		movswl %si,%edx
		push   %eax
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		xor    %ebx,%ebx
		mov    0x1a(%edi),%bl
		movswl 0x14(%esp),%edx
		add    %ebx,%eax
		add    %edx,%eax
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		inc    %esi
		call   create_ammo_effect
		add    $0x20,%esp
		cmp    $0x3,%si
		jle    jump_3ac2c
	jump_3acd8:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		push   %edi
		mov    $0x172,%ebx
		call   animate_model
		mov    %ebx,0x14(%esp)
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3acfb:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3adad
		push   %edi
		mov    $0xb,%eax
		push   %eax
		call   play_distance_sample
		add    $0x8,%esp
		mov    0x8(%esp),%ebx
		test   %bx,%bx
		je     jump_3ad42
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		call   random
		add    $0x4,%esp
		xor    %ebx,%ebx
		movswl 0x8(%esp),%edx
		mov    %ax,%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    $1,%eax
		sub    %eax,%ebx
	jump_3ad42:
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		push   $0x1d
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		mov    0x10(%esp),%bl
		push   %eax
		mov    0x1a(%edi),%al
		add    %bl,%al
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		mov    0x14(%edi),%si
		dec    %esi
		add    $0x20,%esp
		mov    %si,0x14(%edi)
	jump_3adad:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x173,%edx
		push   %edi
		mov    %edx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3add0:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3ae95
		push   %edi
		mov    $0xd,%eax
		push   %eax
		xor    %esi,%esi
		call   play_distance_sample
		add    $0x8,%esp
	jump_3aded:
		mov    0x8(%esp),%ebx
		test   %bx,%bx
		je     jump_3ae1f
		xor    %ebx,%ebx
		mov    0x8(%esp),%bx
		push   %ebx
		call   random
		xor    %ecx,%ecx
		mov    %ebx,%edx
		mov    %ax,%cx
		sar    $0x1f,%edx
		mov    %ebx,%eax
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x4,%esp
		sub    %eax,%ecx
		mov    %cx,0x4(%esp)
		jmp    jump_3ae24
	jump_3ae1f:
		mov    %bx,0x4(%esp)
	jump_3ae24:
		xor    %eax,%eax
		push   $0x1d
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		mov    0x10(%esp),%cl
		push   %eax
		mov    0x1a(%edi),%al
		add    %cl,%al
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		mov    0x14(%edi),%ax
		inc    %esi
		dec    %eax
		add    $0x20,%esp
		mov    %ax,0x14(%edi)
		cmp    $0x5,%si
		jl     jump_3aded
	jump_3ae95:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		push   %edi
		mov    $0x174,%ebx
		call   animate_model
		mov    %ebx,0x14(%esp)
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3aeb8:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3af6a
		push   %edi
		push   $0x4
		call   play_distance_sample
		add    $0x8,%esp
		mov    0x8(%esp),%eax
		test   %ax,%ax
		je     jump_3aeff
		xor    %ebx,%ebx
		mov    %ax,%bx
		push   %ebx
		call   random
		xor    %ecx,%ecx
		mov    %ebx,%edx
		mov    %ax,%cx
		sar    $0x1f,%edx
		mov    %ebx,%eax
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x4,%esp
		sub    %eax,%ecx
		mov    %cx,0x4(%esp)
		jmp    jump_3af04
	jump_3aeff:
		mov    %ax,0x4(%esp)
	jump_3af04:
		xor    %eax,%eax
		push   $0x26
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x6,%edx
		sbb    %edx,%eax
		sar    $0x6,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		mov    0x10(%esp),%dh
		push   %eax
		mov    0x1a(%edi),%al
		add    %dh,%al
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		mov    0x14(%edi),%bx
		dec    %ebx
		add    $0x20,%esp
		mov    %bx,0x14(%edi)
	jump_3af6a:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		push   %edi
		mov    $0x175,%esi
		call   animate_model
		mov    %esi,0x14(%esp)
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3af8d:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3b0ff
		push   %edi
		push   $0x5
		call   play_distance_sample
		add    $0x8,%esp
		xor    %ecx,%ecx
		mov    %ecx,0xc(%esp)
	jump_3afaa:
		xor    %eax,%eax
		push   $0x20
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		mov    $0x26,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%dx
		xor    %eax,%eax
		push   $0x0
		mov    0x1a(%edi),%al
		add    $0x6c,%edx
		push   %eax
		movswl %dx,%edx
		push   %edx
		lea    0x10(%eax),%edx
		and    $0xe0,%edx
		movswl data_5ad60(,%edx,2),%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x5,%eax
		movswl 0x6(%edi),%ebx
		sar    $0x8,%eax
		add    %ebx,%eax
		cwtl
		movswl data_5ab60(,%edx,2),%edx
		push   %eax
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x5,%eax
		movswl 0x4(%edi),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		cwtl
		push   %eax
		call   create_ammo_effect
		add    $0x20,%esp
		mov    %eax,%ebx
		test   %eax,%eax
		je     jump_3b0e3
		mov    0xc(%esp),%ecx
		mov    0x4(%eax),%dx
		xor    %esi,%esi
		mov    %dx,data_60b28
		mov    0x6(%eax),%dx
		mov    0x8(%eax),%ax
		mov    %dx,data_60b2a
		mov    %ax,data_60b2c
		test   %cx,%cx
		jle    jump_3b0c2
	jump_3b06b:
		mov    0x1a(%ebx),%al
		xor    %ah,%ah
		and    $0xffff,%eax
		mov    0x14(%ebx),%dx
		push   %eax
		dec    %edx
		push   $0xb
		mov    %dx,0x14(%ebx)
		call   random
		add    $0x26,%ax
		add    $0x4,%esp
		and    $0xffff,%eax
		push   %eax
		call   goto_angle
		add    $0x8,%esp
		call   affect_by_wind
		push   $0x3
		call   random
		add    $0x4,%esp
		test   %ax,%ax
		jne    jump_3b0b8
		push   %ebx
		call   animate_model
		add    $0x4,%esp
	jump_3b0b8:
		mov    0xc(%esp),%eax
		inc    %esi
		cmp    %ax,%si
		jl     jump_3b06b
	jump_3b0c2:
		movswl data_60b2c,%eax
		push   %eax
		movswl data_60b2a,%eax
		push   %eax
		movswl data_60b28,%eax
		push   %eax
		push   %ebx
		call   move_mapwho
		add    $0x10,%esp
	jump_3b0e3:
		mov    0xc(%esp),%ecx
		mov    0x14(%edi),%bx
		inc    %ecx
		dec    %ebx
		mov    %ecx,0xc(%esp)
		mov    %bx,0x14(%edi)
		cmp    $0x4,%cx
		jl     jump_3afaa
	jump_3b0ff:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x176,%edx
		push   %edi
		mov    %edx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b122:
/*----------------------------------------------------------------*/
		cmpw   $0x2,0x14(%esp)
		jne    jump_3b1d6
		push   %edi
		push   $0xc
		call   play_distance_sample
		add    $0x8,%esp
		mov    0x8(%esp),%ebx
		test   %bx,%bx
		je     jump_3b16b
		xor    %ebx,%ebx
		mov    0x8(%esp),%bx
		push   %ebx
		call   random
		xor    %ecx,%ecx
		mov    %ebx,%edx
		mov    %ax,%cx
		sar    $0x1f,%edx
		mov    %ebx,%eax
		sub    %edx,%eax
		sar    $1,%eax
		add    $0x4,%esp
		sub    %eax,%ecx
		mov    %cx,0x4(%esp)
		jmp    jump_3b170
	jump_3b16b:
		mov    %bx,0x4(%esp)
	jump_3b170:
		xor    %eax,%eax
		push   $0x1d
		mov    0x20(%edi),%ax
		push   %eax
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    data_5a6c2(,%eax,2),%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1b(%edi),%al
		mov    0x10(%esp),%dl
		push   %eax
		mov    0x1a(%edi),%al
		add    %dl,%al
		and    $0xff,%eax
		push   %eax
		mov    0x8(%edi),%ax
		add    $0x80,%eax
		cwtl
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   create_ammo_effect
		mov    0x14(%edi),%si
		dec    %esi
		add    $0x20,%esp
		mov    %si,0x14(%edi)
	jump_3b1d6:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x177,%edx
		push   %edi
		mov    %edx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b1f9:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b213
		push   %edi
		mov    $0x178,%ebx
		call   animate_model
		mov    %ebx,0x14(%esp)
		add    $0x4,%esp
	jump_3b213:
		cmpb   $0x0,EXPORT_SYMBOL(is_multiplayer_game)
		je     jump_3b478
		movzwl 0x20(%edi),%ebp
		add    $level__things_base,%ebp
		mov    %ebp,%edx
		sub    $level__People,%edx
		mov    $0x5c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		cmpw   $0x1,0x14(%esp)
		jne    jump_3b28b
		movswl EXPORT_SYMBOL(Network__Slot),%edx
		and    $0xffff,%eax
		cmp    %edx,%eax
		jne    jump_3b287
		mov    0x14(%edi),%ax
		movswl %ax,%ebx
		mov    %ax,data_60b30
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		add    %ebx,%eax
		mov    %ax,data_60b30
	jump_3b287:
		decw   0x14(%edi)
	jump_3b28b:
		cmpb   $0x0,0x22(%edi)
		jne    jump_3b46e
		xor    %eax,%eax
		mov    0x19(%edi),%al
		add    %eax,%eax
		mov    weapon_max_ammo(%eax),%ax
		movswl 0x14(%edi),%edx
		and    $0xffff,%eax
		cmp    %eax,%edx
		jge    jump_3b46e
		incw   0x14(%edi)
		jmp    jump_3b46e


/*----------------------------------------------------------------*/
func_3b2bd:
/*----------------------------------------------------------------*/
		mov    0x14(%esp),%edx
		cmp    $0x1,%dx
		jne    jump_3b2de
		cmpw   $0x10,0x14(%ebp)
		jge    jump_3b2de
		testb  $0x1,0xb(%ebp)
		jne    jump_3b2de
		movw   $0x10,0x14(%ebp)
		sub    %dx,0x14(%edi)
	jump_3b2de:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x179,%eax
		push   %edi
		mov    %eax,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b301:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x1e(%edi)
		jne    jump_3b377
		mov    $0x17a,%ecx
		push   %edi
		mov    %ecx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		push   %edi
		call   affect_weapon
		mov    0x14(%edi),%si
		dec    %esi
		add    $0x4,%esp
		mov    %si,0x14(%edi)
		test   %si,%si
		jge    jump_3b478
		movswl 0x8(%edi),%eax
		push   %eax
		movswl 0x6(%edi),%eax
		push   %eax
		movswl 0x4(%edi),%eax
		push   %eax
		call   init_effect
		add    $0xc,%esp
		test   %eax,%eax
		je     jump_3b369
		movb   $0x34,0x19(%eax)
		movb   $0x0,0x1a(%eax)
		mov    0xa(%eax),%bh
		mov    0x20(%edi),%dx
		or     $0x1,%bh
		mov    %dx,0x1c(%eax)
		mov    %bh,0xa(%eax)
	jump_3b369:
		push   %edi
		call   remove_model
		add    $0x4,%esp
		jmp    jump_3b478
	jump_3b377:
		xor    %eax,%eax
		mov    %dh,%al
		mov    weapon_max_ammo(,%eax,2),%ax
		movw   $0x0,0xc(%edi)
		mov    %ax,0x14(%edi)
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b392:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x17b,%edx
		push   %edi
		mov    %edx,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b3b5:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		push   %edi
		mov    $0x2ea,%esi
		call   animate_model
		mov    %esi,0x14(%esp)
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b3d8:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		push   %edi
		mov    $0x2ea,%ebx
		call   animate_model
		mov    %ebx,0x14(%esp)
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b3fb:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b478
		mov    $0x17c,%eax
		push   %edi
		mov    %eax,0x14(%esp)
		call   animate_model
		add    $0x4,%esp
		jmp    jump_3b478


/*----------------------------------------------------------------*/
func_3b41b:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x14(%esp)
		je     jump_3b433
		mov    0x14(%edi),%si
		test   %si,%si
		jl     jump_3b433
		mov    %esi,%eax
		dec    %eax
		mov    %ax,0x14(%edi)
	jump_3b433:
		cmpw   $0x0,0x14(%esp)
		jne    jump_3b44d
		push   %edi
		mov    $0x17d,%ebx
		call   animate_model
		mov    %ebx,0x14(%esp)
		add    $0x4,%esp
	jump_3b44d:
		cmpb   $0x0,0x22(%edi)
		jne    jump_3b46e
		xor    %eax,%eax
		mov    0x19(%edi),%al
		xor    %edx,%edx
		mov    weapon_max_ammo(,%eax,2),%dx
		movswl 0x14(%edi),%eax
		cmp    %edx,%eax
		jge    jump_3b46e
		incw   0x14(%edi)
	jump_3b46e:
		mov    0x22(%edi),%al
		inc    %al
		and    $0x3,%al
		mov    %al,0x22(%edi)
	jump_3b478:
		mov    0x10(%esp),%ebx
		cmp    0x12(%edi),%bx
		je     jump_3b4a4
		test   %bx,%bx
		je     jump_3b4a4
		xor    %eax,%eax
		mov    %bx,%ax
		lea    0x0(,%eax,2),%edx
		mov    starts_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x10(%edi)
		mov    %bx,0x12(%edi)
	jump_3b4a4:
		mov    (%esp),%edx
		add    $0x24,%edx
		add    $0x24,%edi
		mov    %edx,(%esp)
		cmp    $level__Effects,%edi
		jb     jump_3a994
	jump_3b4bc:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
load_global_timbre:	/* 0x3b4e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%esi
		mov    0x18(%esp),%edi
		test   %ebx,%ebx
		jne    jump_3b4f9
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b4f9:
		push   %ebx
		call   ac_rewind
		add    $0x4,%esp
	jump_3b502:
		push   %ebx
		push   $0x1
		push   $0x6
		push   $GTL_hdr
		call   ac_fread
		movsbl GTL_hdr__bank,%eax
		add    $0x10,%esp
		cmp    $0xffffffff,%eax
		jne    jump_3b526
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b526:
		xor    %edx,%edx
		mov    %si,%dx
		cmp    %edx,%eax
		jne    jump_3b502
		xor    %eax,%eax
		movsbl GTL_hdr,%edx
		mov    %di,%ax
		cmp    %eax,%edx
		jne    jump_3b502
		push   $0x0
		mov    GTL_hdr__offset,%edx
		push   %edx
		push   %ebx
		call   ac_fseek
		add    $0xc,%esp
		push   %ebx
		push   $0x1
		push   $0x2
		push   $timb_len
		call   ac_fread
		xor    %eax,%eax
		add    $0x10,%esp
		mov    timb_len,%ax
		push   %eax
		call   ac_malloc
		mov    %eax,%esi
		mov    timb_len,%ax
		add    $0x4,%esp
		mov    %ax,(%esi)
		xor    %eax,%eax
		push   %ebx
		mov    timb_len,%ax
		push   $0x1
		sub    $0x2,%eax
		push   %eax
		lea    0x2(%esi),%eax
		push   %eax
		call   ac_fread
		mov    0xc(%ebx),%ah
		add    $0x10,%esp
		test   $0x20,%ah
		je     jump_3b5a8
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b5a8:
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(InitMIDI)	/* 0x3b5b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x78,%esp
		mov    0x98(%esp),%edi
		xor    %edx,%edx
		push   $0x0
		mov    %dx,data_61e30
		mov    0x94(%esp),%edx
		push   %edx
		call   FILE_read
		mov    %eax,%esi
		add    $0x8,%esp
		test   %eax,%eax
		jne    jump_3b5e6
		xor    %eax,%eax
		jmp    jump_3b88d
	jump_3b5e6:
		push   $0x0
		push   $0x5
		push   %eax
		call   DLL_load
		mov    %eax,%ebx
		add    $0xc,%esp
		test   %eax,%eax
		jne    jump_3b603
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b603:
		push   %esi
		call   ac_free
		add    $0x4,%esp
		push   %ebx
		call   AIL_register_driver
		add    $0x4,%esp
		mov    %eax,MUSdrvr
		cmp    $0xffffffff,%eax
		jne    jump_3b629
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b629:
		push   %eax
		call   AIL_describe_driver
		add    $0x4,%esp
		mov    0x4(%eax),%ebx
		mov    %eax,%ebp
		cmp    $0x3,%ebx
		je     jump_3b646
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b646:
		cmpw   $0x0,0x94(%esp)
		jne    jump_3b65c
		mov    0x14(%eax),%ax
		mov    %eax,0x94(%esp)
	jump_3b65c:
		test   %di,%di
		jne    jump_3b665
		mov    0x18(%ebp),%di
	jump_3b665:
		cmpw   $0x0,0x9c(%esp)
		jne    jump_3b67b
		mov    0x10(%ebp),%ax
		mov    %eax,0x9c(%esp)
	jump_3b67b:
		mov    0x1c(%ebp),%ecx
		push   %ecx
		and    $0xffff,%edi
		xor    %esi,%esi
		push   %edi
		mov    0x9c(%esp),%si
		xor    %eax,%eax
		push   %esi
		mov    0xa8(%esp),%ax
		push   %eax
		mov    MUSdrvr,%edx
		push   %edx
		mov    %eax,0x74(%esp)
		call   AIL_detect_device
		add    $0x14,%esp
		test   %eax,%eax
		jne    jump_3b6bd
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b6bd:
		mov    0x1c(%ebp),%ebx
		push   %ebx
		push   %edi
		push   %esi
		mov    0x6c(%esp),%ecx
		push   %ecx
		mov    MUSdrvr,%esi
		push   %esi
		call   AIL_init_driver
		add    $0x14,%esp
		mov    MUSdrvr,%edi
		push   %edi
		call   AIL_state_table_size
		add    $0x4,%esp
		push   $0x0
		mov    %eax,0x70(%esp)
		mov    0x90(%esp),%eax
		push   %eax
		call   FILE_read
		add    $0x8,%esp
		mov    %eax,0x68(%esp)
		test   %eax,%eax
		jne    jump_3b70e
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b70e:
		add    $0x8,%ebp
		mov    %esp,%edi
		push   %ebp
		lea    0x4(%esp),%eax
		mov    $aDataSample,%esi
		push   %eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		call   ac_strcat
		add    $0x8,%esp
		mov    MUSdrvr,%edx
		push   %edx
		call   AIL_default_timbre_cache_size
		add    $0x4,%esp
		test   %ax,%ax
		je     jump_3b75d
		xor    %ebx,%ebx
		mov    %ax,%bx
		push   %ebx
		call   ac_malloc
		add    $0x4,%esp
		push   %ebx
		push   %eax
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_define_timbre_cache
		add    $0xc,%esp
	jump_3b75d:
		push   $aRb
		lea    0x4(%esp),%eax
		push   %eax
		call   ac_dos_fopen
		add    $0x8,%esp
		xor    %ecx,%ecx
		mov    %eax,0x74(%esp)
		mov    %ecx,0x70(%esp)
		mov    %ecx,0x64(%esp)
	jump_3b77d:
		mov    0x6c(%esp),%edi
		push   %edi
		call   ac_malloc
		add    $0x4,%esp
		push   $0x0
		mov    0x68(%esp),%edx
		push   %eax
		mov    %eax,0x48(%esp,%edx,1)
		mov    0x78(%esp),%eax
		push   %eax
		mov    0x74(%esp),%edx
		push   %edx
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_register_sequence
		add    $0x14,%esp
		mov    0x64(%esp),%edx
		mov    %eax,sSOSTrackMap(%edx)
		cmp    $0xffffffff,%eax
		jne    jump_3b7cf
		mov    0x40(%esp,%edx,1),%ecx
		push   %ecx
		call   ac_free
		add    $0x4,%esp
		jmp    jump_3b877
	jump_3b7cf:
		mov    %edx,%ebp
	jump_3b7d1:
		mov    sSOSTrackMap(%ebp),%esi
		push   %esi
		mov    MUSdrvr,%edi
		push   %edi
		call   AIL_timbre_request
		add    $0x8,%esp
		cmp    $0xffff,%ax
		je     jump_3b85a
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%esi
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		mov    $0x100,%ebx
		idiv   %ebx
		xor    %ebx,%ebx
		mov    %dx,%bx
		xor    %edi,%edi
		push   %ebx
		mov    %si,%di
		push   %edi
		mov    0x7c(%esp),%ecx
		push   %ecx
		call   load_global_timbre
		mov    %eax,%esi
		add    $0xc,%esp
		test   %eax,%eax
		jne    jump_3b83a
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b83a:
		push   %eax
		push   %ebx
		push   %edi
		mov    MUSdrvr,%edi
		push   %edi
		call   AIL_install_timbre
		add    $0x10,%esp
		push   %esi
		call   ac_free
		add    $0x4,%esp
		jmp    jump_3b7d1
	jump_3b85a:
		mov    0x64(%esp),%ebp
		mov    0x70(%esp),%eax
		add    $0x4,%ebp
		inc    %eax
		mov    %ebp,0x64(%esp)
		mov    %eax,0x70(%esp)
		cmp    $0x8,%eax
		jb     jump_3b77d
	jump_3b877:
		mov    0x74(%esp),%ebp
		test   %ebp,%ebp
		je     jump_3b888
		push   %ebp
		call   ac_fclose
		add    $0x4,%esp
	jump_3b888:
		mov    $0x1,%eax
	jump_3b88d:
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFMidiStartMusic:	/* 0x3b8a0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_3b909
		cmpb   $0x0,MusicActive
		je     jump_3b909
		mov    0x14(%esp),%bh
		mov    SongCurrentlyPlaying,%al
		cmp    %bh,%al
		je     jump_3b935
		test   %al,%al
		jl     jump_3b8e1
		cbtw
		cwtl
		mov    sSOSTrackMap(,%eax,4),%ecx
		push   %ecx
		mov    MUSdrvr,%esi
		push   %esi
		call   AIL_stop_sequence
		add    $0x8,%esp
	jump_3b8e1:
		mov    0x14(%esp),%al
		mov    %al,SongCurrentlyPlaying
		cbtw
		cwtl
		mov    sSOSTrackMap(,%eax,4),%edi
		push   %edi
		mov    MUSdrvr,%ebp
		push   %ebp
		call   AIL_start_sequence
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_3b909:
		mov    SongCurrentlyPlaying,%dh
		test   %dh,%dh
		jl     jump_3b935
		movsbl %dh,%eax
		mov    sSOSTrackMap(,%eax,4),%edx
		push   %edx
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_stop_sequence
		mov    $0xff,%bl
		add    $0x8,%esp
		mov    %bl,SongCurrentlyPlaying
	jump_3b935:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFMidiStopMusic:	/* 0x3b940 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_3b97f
		cmpb   $0x0,MusicActive
		je     jump_3b97f
		mov    SongCurrentlyPlaying,%dh
		test   %dh,%dh
		jl     jump_3b97f
		movsbl %dh,%eax
		mov    sSOSTrackMap(,%eax,4),%edx
		push   %edx
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_stop_sequence
		mov    $0xff,%bl
		add    $0x8,%esp
		mov    %bl,SongCurrentlyPlaying
	jump_3b97f:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFMidiPauseSong:	/* 0x3b990 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_3b9c7
		cmpb   $0x0,MusicActive
		je     jump_3b9c7
		mov    SongCurrentlyPlaying,%dh
		test   %dh,%dh
		jl     jump_3b9c7
		movsbl %dh,%eax
		mov    sSOSTrackMap(,%eax,4),%edx
		push   %edx
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_stop_sequence
		add    $0x8,%esp
	jump_3b9c7:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFMidiResumeSong:	/* 0x3b9d0 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_3ba07
		cmpb   $0x0,MusicActive
		je     jump_3ba07
		mov    SongCurrentlyPlaying,%dh
		test   %dh,%dh
		jl     jump_3ba07
		movsbl %dh,%eax
		mov    sSOSTrackMap(,%eax,4),%edx
		push   %edx
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_resume_sequence
		add    $0x8,%esp
	jump_3ba07:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
BFMidiIsMusicPlaying:	/* 0x3ba10 */
/*----------------------------------------------------------------*/
		push   %ebx
		movsbl SongCurrentlyPlaying,%eax
		mov    sSOSTrackMap(,%eax,4),%edx
		push   %edx
		mov    MUSdrvr,%ebx
		push   %ebx
		call   AIL_sequence_status
		add    $0x8,%esp
		cmp    $0x1,%eax
		sete   %al
		xor    %ah,%ah
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ShutdownMIDI)	/* 0x3ba40 */
/*----------------------------------------------------------------*/
		push   %ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_3ba57
		push   $signoff_msg
		call   AIL_shutdown
		add    $0x4,%esp
	jump_3ba57:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
CheckArray:	/* 0x3ba60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		mov    AniArrayCount,%si
		mov    0xc(%esp),%ebx
	jump_3ba6d:
		movswl %si,%eax
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    CurrFrame,%cx
		cmp    (%eax),%cx
		jne    jump_3bb2e
		mov    0x2(%eax),%al
		cmp    $0x53,%al
		jb     jump_3baae
		jbe    jump_3babe
		cmp    $0x6d,%al
		jb     jump_3baa5
		jbe    jump_3bb09
		cmp    $0x73,%al
		je     jump_3babe
		jmp    jump_3bb28
	jump_3baa5:
		cmp    $0x61,%al
		je     jump_3baea
		jmp    jump_3bb28
	jump_3baae:
		cmp    $0x41,%al
		jb     jump_3bb28
		jbe    jump_3baea
		cmp    $0x4d,%al
		je     jump_3bb09
		jmp    jump_3bb28
	jump_3babe:
		cmpb   $0x0,EXPORT_SYMBOL(SoundAble)
		je     jump_3bb28
		movswl %si,%eax
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    0x3(%eax),%al
		and    $0xff,%eax
		push   %eax
		mov    %si,AniArrayCount
		call   BFPlaySample
		jmp    jump_3bb1e
	jump_3baea:
		movswl %si,%eax
		lea    0x0(,%eax,4),%eax
		add    %ebx,%eax
		mov    0x3(%eax),%al
		and    $0xff,%eax
		mov    %eax,AniSpeed
		inc    %esi
		jmp    jump_3ba6d
	jump_3bb09:
		movswl %si,%eax
		movsbl 0x3(%ebx,%eax,4),%eax
		push   %eax
		mov    %si,AniArrayCount
		call   BFMidiStartMusic
	jump_3bb1e:
		mov    AniArrayCount,%si
		add    $0x4,%esp
	jump_3bb28:
		inc    %esi
		jmp    jump_3ba6d
	jump_3bb2e:
		mov    %si,AniArrayCount
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_proc:	/* 0x3bb38 */
/*----------------------------------------------------------------*/
		cmp    $0x10,%ebx
		jae    jump_3bb5a
		shl    $1,%ebx
		shl    $1,%ebx
		mov    index_base(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_3bb5a
	jump_3bb4c:
		mov    (%ebx),%ecx
		cmp    %eax,%ecx
		je     jump_3bb60
		add    $0x8,%ebx
		cmp    $0xffffffff,%ecx
		jne    jump_3bb4c
	jump_3bb5a:
		mov    $0x0,%eax
		ret
	jump_3bb60:
		mov    0x4(%ebx),%eax
		ret


/*----------------------------------------------------------------*/
call_driver:	/* 0x3bb64 */
/*----------------------------------------------------------------*/
		mov    %esp,%ebx
		mov    0x4(%ebx),%ebx
		call   find_proc
		cmp    $0x0,%eax
		je     jump_3bb75
		jmp    *%eax
	jump_3bb75:
		ret
API_timer:	/* 0x3bb76 */
		pusha
		push   %ds
		push   %es
		push   %fs
		push   %gs
		mov    %esp,%ebp
		cld
		data16 mov %cs:local_DS,%ds
		data16 mov %cs:local_DS,%es
		cmpw   $0x0,timer_busy
		je     jump_3bb9c
		jmp    jump_3bc1b
	jump_3bb9c:
		movw   $0x1,timer_busy
		movl   $0x0,current_timer
	jump_3bbaf:
		mov    current_timer,%esi
		shl    $1,%esi
		cmpw   $0x2,timer_status(%esi)
		jne    jump_3bc03
		shl    $1,%esi
		mov    timer_elapsed(%esi),%eax
		add    timer_period,%eax
		cmp    timer_value(%esi),%eax
		jae    jump_3bbdf
		mov    %eax,timer_elapsed(%esi)
		jmp    jump_3bc03
	jump_3bbdf:
		sub    timer_value(%esi),%eax
		mov    %eax,timer_elapsed(%esi)
		cmpl   $0x10,current_timer
		jb     jump_3bbfd
		movw   $0x0,timer_busy
	jump_3bbfd:
		call   *timer_callback(%esi)
	jump_3bc03:
		incl   current_timer
		cmpl   $0x10,current_timer
		jbe    jump_3bbaf
		movw   $0x0,timer_busy
	jump_3bc1b:
		mov    %ebp,%esp
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
		popa
		push   %eax
		mov    $0x20,%al
		out    %al,$0x20
		pop    %eax
		iret
bios_caller:	/* 0x3bc2b */
		mov    bios_cb,%ecx
		mov    bios_cb_cs,%eax
		mov    %ebp,%esp
		xchg   %ecx,0x28(%ebp)
		xchg   %eax,0x2c(%ebp)
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
		pop    %edi
		pop    %esi
		pop    %ebp
		pop    %ebx
		pop    %ebx
		pop    %edx
		lret


/*----------------------------------------------------------------*/
init_DDA_arrays:	/* 0x3bc4b */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %es
		pushf
		cli
		push   %ds
		pop    %es
		cld
		movl   $0xffffffff,timer_period
		mov    $timer_status,%edi
		mov    $0x11,%ecx
		mov    $0x0,%eax
		rep stos %ax,%es:(%edi)
		mov    $timer_elapsed,%edi
		mov    $0x11,%ecx
		rep stos %eax,%es:(%edi)
		mov    $timer_value,%edi
		mov    $0x11,%ecx
		rep stos %eax,%es:(%edi)
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bc92
		sti
	jump_3bc92:
		pop    %ebp
		popf
		pop    %es
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
hook_timer_process:	/* 0x3bc98 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0x8,%eax
		mov    $0x35,%ah
		push   %es
		int    $0x21
		mov    %es,%dx
		pop    %es
		mov    %ebx,bios_cb
		mov    %edx,bios_cb_cs
		mov    $bios_caller,%ebx
		mov    %ebx,data_5bc34
		mov    $0x8,%eax
		mov    $API_timer,%edx
		mov    %cs,%bx
		mov    $0x25,%ah
		push   %ds
		mov    %bx,%ds
		int    $0x21
		pop    %ds
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bce2
		sti
	jump_3bce2:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
unhook_timer_process:	/* 0x3bce7 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		pushf
		cli
		movl   $0xffffffff,current_timer
		mov    $0x8,%eax
		mov    bios_cb,%edx
		mov    bios_cb_cs,%ebx
		mov    $0x25,%ah
		push   %ds
		mov    %bx,%ds
		int    $0x21
		pop    %ds
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bd1a
		sti
	jump_3bd1a:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
set_PIT_divisor:	/* 0x3bd1f */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0x36,%al
		out    %al,$0x43
		mov    0x8(%ebp),%eax
		mov    %eax,PIT_divisor
		jmp    jump_3bd34
	jump_3bd34:
		out    %al,$0x40
		mov    %ah,%al
		jmp    jump_3bd3a
	jump_3bd3a:
		out    %al,$0x40
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bd47
		sti
	jump_3bd47:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
set_PIT_period:	/* 0x3bd4d */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		mov    $0x0,%eax
		cmpl   $0xd68d,0x8(%ebp)
		jae    jump_3bd71
		mov    0x8(%ebp),%eax
		mov    $0x20bc,%ebx
		mov    $0x2710,%ecx
		mul    %ecx
		div    %ebx
	jump_3bd71:
		push   %eax
		call   set_PIT_divisor
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
program_timers:	/* 0x3bd7e */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %es
		pushf
		cli
		cld
		movl   $0xffffffff,temp_period
		mov    $0x0,%esi
	jump_3bd93:
		mov    %esi,%ebx
		shl    $1,%ebx
		cmpw   $0x0,timer_status(%ebx)
		je     jump_3bdb5
		mov    timer_value(,%ebx,2),%eax
		cmp    temp_period,%eax
		jae    jump_3bdb5
		mov    %eax,temp_period
	jump_3bdb5:
		inc    %esi
		cmp    $0x10,%esi
		jbe    jump_3bd93
		mov    temp_period,%eax
		cmp    timer_period,%eax
		je     jump_3bdf3
		movl   $0xffffffff,current_timer
		mov    %eax,timer_period
		push   %eax
		call   set_PIT_period
		add    $0x4,%esp
		mov    $timer_elapsed,%edi
		mov    $0x11,%ecx
		mov    $0x0,%eax
		push   %ds
		pop    %es
		rep stos %eax,%es:(%edi)
	jump_3bdf3:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bdfe
		sti
	jump_3bdfe:
		pop    %ebp
		popf
		pop    %es
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AIL_startup:	/* 0x3be04 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %es
		pushf
		cli
		data16 mov %ds,local_DS
		data16 mov local_DS,%es
		movw   $0x0,active_timers
		movw   $0x0,timer_busy
		cld
		mov    $index_base,%edi
		mov    $0x10,%ecx
		mov    $0x0,%eax
		rep stos %eax,%es:(%edi)
		mov    $assigned_timer,%edi
		mov    $0x10,%ecx
		mov    $0xffffffff,%eax
		rep stos %eax,%es:(%edi)
		mov    $driver_active,%edi
		mov    $0x10,%ecx
		mov    $0x0,%eax
		rep stos %eax,%es:(%edi)
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3be68
		sti
	jump_3be68:
		pop    %ebp
		popf
		pop    %es
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AIL_shutdown:	/* 0x3be6e */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		movl   $0x0,cur_drvr
	jump_3be7f:
		mov    cur_drvr,%esi
		shl    $0x2,%esi
		mov    assigned_timer(%esi),%edx
		mov    index_base(%esi),%eax
		cmp    $0x0,%eax
		je     jump_3beb8
		cmp    $0xffffffff,%edx
		je     jump_3bea7
		push   %edx
		call   AIL_release_timer_handle
		add    $0x4,%esp
	jump_3bea7:
		push   0x8(%ebp)
		push   cur_drvr
		call   AIL_shutdown_driver
		add    $0x8,%esp
	jump_3beb8:
		incl   cur_drvr
		cmpl   $0x10,cur_drvr
		jne    jump_3be7f
		call   AIL_release_all_timers
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bed7
		sti
	jump_3bed7:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_register_timer:	/* 0x3bedd */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0x0,%ebx
	jump_3bee9:
		cmpw   $0x0,timer_status(%ebx)
		je     jump_3bf02
		add    $0x2,%ebx
		cmp    $0x20,%ebx
		jb     jump_3bee9
		mov    $0xffffffff,%eax
		jmp    jump_3bf7c
	jump_3bf02:
		mov    %ebx,%eax
		shr    $1,%eax
		movw   $0x1,timer_status(%ebx)
		mov    0x8(%ebp),%esi
		shl    $1,%ebx
		mov    %esi,timer_callback(%ebx)
		movl   $0xffffffff,timer_value(%ebx)
		incw   active_timers
		cmpw   $0x1,active_timers
		jne    jump_3bf7c
		push   %eax
		call   init_DDA_arrays
		movw   $0x1,data_5bc58
		call   hook_timer_process
		push   $0xd68d
		push   $0x10
		call   AIL_set_timer_period
		add    $0x8,%esp
		push   $0x10
		call   AIL_start_timer
		add    $0x4,%esp
		pop    %eax
		mov    %eax,%ebx
		shl    $1,%ebx
		movw   $0x1,timer_status(%ebx)
		shl    $1,%ebx
		movl   $0xffffffff,timer_value(%ebx)
	jump_3bf7c:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bf87
		sti
	jump_3bf87:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_release_timer_handle:	/* 0x3bf8d */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    0x8(%ebp),%ebx
		cmp    $0xffffffff,%ebx
		je     jump_3bfc9
		shl    $1,%ebx
		cmpw   $0x0,timer_status(%ebx)
		je     jump_3bfc9
		movw   $0x0,timer_status(%ebx)
		decw   active_timers
		jne    jump_3bfc9
		push   $0x0
		call   set_PIT_divisor
		add    $0x4,%esp
		call   unhook_timer_process
	jump_3bfc9:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bfd4
		sti
	jump_3bfd4:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_release_all_timers:	/* 0x3bfda */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0xf,%esi
	jump_3bfe3:
		push   %esi
		call   AIL_release_timer_handle
		add    $0x4,%esp
		dec    %esi
		jge    jump_3bfe3
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3bffa
		sti
	jump_3bffa:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AIL_start_timer:	/* 0x3bfff */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    0x8(%ebp),%ebx
		shl    $1,%ebx
		cmpw   $0x1,timer_status(%ebx)
		jne    jump_3c01e
		movw   $0x2,timer_status(%ebx)
	jump_3c01e:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c029
		sti
	jump_3c029:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret
AIL_start_all_timers:	/* 0x3c02f */
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0xf,%esi
	jump_3c038:
		push   %esi
		call   AIL_start_timer
		add    $0x4,%esp
		dec    %esi
		jge    jump_3c038
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c04f
		sti
	jump_3c04f:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AIL_stop_timer:	/* 0x3c054 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    0x8(%ebp),%ebx
		shl    $1,%ebx
		cmpw   $0x2,timer_status(%ebx)
		jne    jump_3c073
		movw   $0x1,timer_status(%ebx)
	jump_3c073:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c07e
		sti
	jump_3c07e:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret
AIL_stop_all_timers:	/* 0x3c084 */
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0xf,%esi
	jump_3c08d:
		push   %esi
		call   AIL_stop_timer
		add    $0x4,%esp
		dec    %esi
		jge    jump_3c08d
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c0a4
		sti
	jump_3c0a4:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AIL_set_timer_period:	/* 0x3c0a9 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    0x8(%ebp),%ebx
		shl    $1,%ebx
		movzwl timer_status(%ebx),%eax
		push   %eax
		movw   $0x1,timer_status(%ebx)
		shl    $1,%ebx
		mov    0xc(%ebp),%eax
		mov    %eax,timer_value(%ebx)
		movl   $0x0,timer_elapsed(%ebx)
		call   program_timers
		pop    %eax
		mov    0x8(%ebp),%ebx
		shl    $1,%ebx
		mov    %ax,timer_status(%ebx)
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c0f8
		sti
	jump_3c0f8:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_set_timer_frequency:	/* 0x3c0fe */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    $0x0,%edx
		mov    $0xf4240,%eax
		mov    0xc(%ebp),%ebx
		div    %ebx
		push   %eax
		push   0x8(%ebp)
		call   AIL_set_timer_period
		add    $0x8,%esp
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c12b
		sti
	jump_3c12b:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret
AIL_set_timer_divisor:	/* 0x3c131 */
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		cmpl   $0x0,0xc(%ebp)
		jne    jump_3c145
		mov    $0xd68d,%eax
		jmp    jump_3c159
	jump_3c145:
		mov    $0x2710,%eax
		mov    $0x0,%edx
		mov    $0x2e9c,%ebx
		mull   0xc(%ebp)
		div    %ebx
	jump_3c159:
		push   %eax
		push   0x8(%ebp)
		call   AIL_set_timer_period
		add    $0x8,%esp
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c170
		sti
	jump_3c170:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret
AIL_interrupt_divisor:	/* 0x3c176 */
		push   %esi
		push   %edi
		pushf
		cli
		mov    PIT_divisor,%eax
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c18a
		sti
	jump_3c18a:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AIL_register_driver:	/* 0x3c18f */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		movl   $0x0,cur_drvr
	jump_3c1a0:
		mov    cur_drvr,%esi
		shl    $1,%esi
		shl    $1,%esi
		mov    index_base(%esi),%eax
		cmp    $0x0,%eax
		je     jump_3c1cb
		incl   cur_drvr
		cmpl   $0x10,cur_drvr
		jne    jump_3c1a0
		mov    $0xffffffff,%eax
		jmp    jump_3c20d
	jump_3c1cb:
		mov    0x8(%ebp),%edi
		mov    $0xffffffff,%eax
		cmpl   $0x79706f43,0x4(%edi)
		jne    jump_3c20d
		mov    (%edi),%edi
		mov    %edi,index_base(%esi)
		push   cur_drvr
		call   AIL_describe_driver
		add    $0x4,%esp
		mov    %eax,%edi
		cmp    $0x0,%eax
		mov    $0xffffffff,%eax
		je     jump_3c20d
		mov    (%edi),%edx
		cmp    CURRENT_REV,%edx
		ja     jump_3c20d
		mov    cur_drvr,%eax
	jump_3c20d:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c218
		sti
	jump_3c218:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret
AIL_release_driver_handle:	/* 0x3c21e */
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		mov    0x8(%ebp),%ebx
		cmp    $0x10,%ebx
		jae    jump_3c23b
		shl    $1,%ebx
		shl    $1,%ebx
		movl   $0x0,index_base(%ebx)
	jump_3c23b:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c246
		sti
	jump_3c246:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_describe_driver:	/* 0x3c24c */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		mov    $AIL_interrupt_divisor,%eax
		push   %eax
		push   0x8(%ebp)
		mov    $0x64,%eax
		call   call_driver
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_detect_device:	/* 0x3c26b */
/*----------------------------------------------------------------*/
		mov    $0x65,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_init_driver:	/* 0x3c275 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		pushf
		cli
		cmpl   $0x10,0x8(%ebp)
		jae    jump_3c329
		movl   $0xffffffff,timer_handle
		push   0x8(%ebp)
		call   AIL_describe_driver
		add    $0x4,%esp
		mov    %eax,%edi
		mov    0x20(%edi),%esi
		cmp    $0xffffffff,%esi
		je     jump_3c2e5
		mov    $0x67,%eax
		mov    0x8(%ebp),%ebx
		call   find_proc
		mov    %eax,%ebx
		cmp    $0x0,%ebx
		je     jump_3c2e5
		mov    %eax,%edi
		push   %edi
		call   AIL_register_timer
		add    $0x4,%esp
		mov    0x8(%ebp),%ebx
		shl    $1,%ebx
		shl    $1,%ebx
		mov    %eax,assigned_timer(%ebx)
		mov    %eax,timer_handle
		push   %esi
		push   timer_handle
		call   AIL_set_timer_frequency
		add    $0x8,%esp
	jump_3c2e5:
		push   0x18(%ebp)
		push   0x14(%ebp)
		push   0x10(%ebp)
		push   0xc(%ebp)
		push   0x8(%ebp)
		mov    $0x66,%eax
		call   call_driver
		add    $0x14,%esp
		mov    0x8(%ebp),%ebx
		shl    $1,%ebx
		shl    $1,%ebx
		movl   $0x1,driver_active(%ebx)
		cmpl   $0xffffffff,timer_handle
		je     jump_3c329
		push   timer_handle
		call   AIL_start_timer
		add    $0x4,%esp
	jump_3c329:
		push   %ebp
		mov    %esp,%ebp
		testb  $0x2,0x5(%ebp)
		cli
		je     jump_3c334
		sti
	jump_3c334:
		pop    %ebp
		popf
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
AIL_shutdown_driver:	/* 0x3c33a */
/*----------------------------------------------------------------*/
		mov    %esp,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x10,%ebx
		jae    jump_3c376
		shl    $1,%ebx
		shl    $1,%ebx
		mov    $0x0,%edx
		xchg   %edx,driver_active(%ebx)
		cmp    $0x0,%edx
		je     jump_3c376
		mov    assigned_timer(%ebx),%edx
		cmp    $0xffffffff,%edx
		je     jump_3c36c
		push   %edx
		call   AIL_release_timer_handle
		add    $0x4,%esp
	jump_3c36c:
		mov    $0x68,%eax
		jmp    call_driver
	jump_3c376:
		ret
AIL_index_VOC_block:	/* 0x3c377 */
		mov    $0x78,%eax
		jmp    call_driver
AIL_register_sound_buffer:	/* 0x3c381 */
		mov    $0x79,%eax
		jmp    call_driver
AIL_format_sound_buffer:	/* 0x3c38b */
		mov    $0x86,%eax
		jmp    call_driver
AIL_sound_buffer_status:	/* 0x3c395 */
		mov    $0x7a,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_play_VOC_file:	/* 0x3c39f */
/*----------------------------------------------------------------*/
		mov    $0x7b,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_format_VOC_file:	/* 0x3c3a9 */
/*----------------------------------------------------------------*/
		mov    $0x85,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_VOC_playback_status:	/* 0x3c3b3 */
/*----------------------------------------------------------------*/
		mov    $0x7c,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_start_digital_playback:	/* 0x3c3bd */
/*----------------------------------------------------------------*/
		mov    $0x7d,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_stop_digital_playback:	/* 0x3c3c7 */
/*----------------------------------------------------------------*/
		mov    $0x7e,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_pause_digital_playback:	/* 0x3c3d1 */
/*----------------------------------------------------------------*/
		mov    $0x7f,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_resume_digital_playback:	/* 0x3c3db */
/*----------------------------------------------------------------*/
		mov    $0x80,%eax
		jmp    call_driver
AIL_set_digital_playback_volume:	/* 0x3c3e5 */
		mov    $0x81,%eax
		jmp    call_driver
AIL_digital_playback_volume:	/* 0x3c3ef */
		mov    $0x82,%eax
		jmp    call_driver
AIL_set_digital_playback_panpot:	/* 0x3c3f9 */
		mov    $0x83,%eax
		jmp    call_driver
AIL_digital_playback_panpot:	/* 0x3c403 */
		mov    $0x84,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_state_table_size:	/* 0x3c40d */
/*----------------------------------------------------------------*/
		mov    $0x96,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_register_sequence:	/* 0x3c417 */
/*----------------------------------------------------------------*/
		mov    $0x97,%eax
		jmp    call_driver
AIL_release_sequence_handle:	/* 0x3c421 */
		mov    $0x98,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_default_timbre_cache_size:	/* 0x3c42b */
/*----------------------------------------------------------------*/
		mov    $0x99,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_define_timbre_cache:	/* 0x3c435 */
/*----------------------------------------------------------------*/
		mov    $0x9a,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_timbre_request:	/* 0x3c43f */
/*----------------------------------------------------------------*/
		mov    $0x9b,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_install_timbre:	/* 0x3c449 */
/*----------------------------------------------------------------*/
		mov    $0x9c,%eax
		jmp    call_driver
AIL_protect_timbre:	/* 0x3c453 */
		mov    $0x9d,%eax
		jmp    call_driver
AIL_unprotect_timbre:	/* 0x3c45d */
		mov    $0x9e,%eax
		jmp    call_driver
AIL_timbre_status:	/* 0x3c467 */
		mov    $0x9f,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_start_sequence:	/* 0x3c471 */
/*----------------------------------------------------------------*/
		mov    $0xaa,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_stop_sequence:	/* 0x3c47b */
/*----------------------------------------------------------------*/
		mov    $0xab,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_resume_sequence:	/* 0x3c485 */
/*----------------------------------------------------------------*/
		mov    $0xad,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AIL_sequence_status:	/* 0x3c48f */
/*----------------------------------------------------------------*/
		mov    $0xae,%eax
		jmp    call_driver
AIL_relative_volume:	/* 0x3c499 */
		mov    $0xaf,%eax
		jmp    call_driver
AIL_relative_tempo:	/* 0x3c4a3 */
		mov    $0xb0,%eax
		jmp    call_driver
AIL_set_relative_volume:	/* 0x3c4ad */
		mov    $0xb1,%eax
		jmp    call_driver
AIL_set_relative_tempo:	/* 0x3c4b7 */
		mov    $0xb2,%eax
		jmp    call_driver
AIL_beat_count:	/* 0x3c4c1 */
		mov    $0xb3,%eax
		jmp    call_driver
AIL_measure_count:	/* 0x3c4cb */
		mov    $0xb4,%eax
		jmp    call_driver
AIL_branch_index:	/* 0x3c4d5 */
		mov    $0xb5,%eax
		jmp    call_driver
AIL_controller_value:	/* 0x3c4df */
		mov    $0xb6,%eax
		jmp    call_driver
AIL_set_controller_value:	/* 0x3c4e9 */
		mov    $0xb7,%eax
		jmp    call_driver
AIL_channel_notes:	/* 0x3c4f3 */
		mov    $0xb9,%eax
		jmp    call_driver
AIL_send_channel_voice_message:	/* 0x3c4fd */
		mov    $0xba,%eax
		jmp    call_driver
AIL_send_sysex_message:	/* 0x3c507 */
		mov    $0xbb,%eax
		jmp    call_driver
AIL_write_display:	/* 0x3c511 */
		mov    $0xbc,%eax
		jmp    call_driver
AIL_install_callback:	/* 0x3c51b */
		mov    $0xbd,%eax
		jmp    call_driver
AIL_cancel_callback:	/* 0x3c525 */
		mov    $0xbe,%eax
		jmp    call_driver
AIL_lock_channel:	/* 0x3c52f */
		mov    $0xbf,%eax
		jmp    call_driver
AIL_map_sequence_channel:	/* 0x3c539 */
		mov    $0xc0,%eax
		jmp    call_driver
AIL_release_channel:	/* 0x3c543 */
		mov    $0xc1,%eax
		jmp    call_driver
AIL_true_sequence_channel:	/* 0x3c54d */
		mov    $0xc2,%eax
		jmp    call_driver


/*----------------------------------------------------------------*/
AniPlay:	/* 0x3c558 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		movw   $0x1,AniQuit
		movb   $0x80,EXPORT_SYMBOL(lbInkey)
		movw   $0x0,AniArrayCount
		mov    0xc(%ebp),%eax
		mov    %eax,AniPalChange
	jump_3c582:
		push   $0x40
		push   $0x200
		push   $AniName
		call   ac_dos_sopen
		add    $0xc,%esp
		cmp    $0x0,%eax
		jle    jump_3c6f2
		mov    %eax,AniFileHandle
		movw   $0x0,CurrFrame
		movw   $0x0,loop_count
#if defined(DOS) /* get time in sec/100 */
		mov    $0x2c,%ah
		int    $0x21
		mov    $0x64,%ax
		mul    %dh
		mov    $0x0,%dh
		add    %ax,%dx
#else
		call   ac_LbTimerClock
		mov    $0x0a,%cx
		mov    $0x0,%dx
		idiv   %cx
		mov    %ax,%dx
#endif
		mov    %dx,old_time
	jump_3c5cc:
		mov    $0x4,%eax
		push   %eax
		push   $AniLength
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		push   $0x2
		push   $AniType
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		mov    AniType,%ax
		cmp    $0xaf12,%ax
		jne    jump_3c60d
		call   decode_FILE_HEADER
		jmp    jump_3c5cc
	jump_3c60d:
		cmp    $0xf1fa,%ax
		jne    jump_3c6c5
		mov    NoFrames,%ax
		sub    $0x1,%ax
		mov    %ax,NoFrames
		mov    CurrFrame,%ax
		add    $0x1,%ax
		mov    %ax,CurrFrame
		push   0x10(%ebp)
		call   CheckArray
		add    $0x4,%esp
		call   decode_FRAME_CHUNK
		cmpl   $0x0,AniSpeed
		je     jump_3c677
		cmpw   $0x1,do_colour
		jne    jump_3c65f
		call   DoPalette
	jump_3c65f:
		push   %ecx
		push   %edi
		push   %esi
#if defined(DOS)	/* copy WScreen to screen buffer, DOS method */
		mov    EXPORT_SYMBOL(VGABuffer),%edi
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    $0x3e80,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
#else
		call   ac_swap_wscreen
#endif
		pop    %esi
		pop    %edi
		pop    %ecx
	jump_3c677:
		call   DelayTimer
#if !defined(DOS) /* add input refresh, to allow reaction on keys and mouse */
		call   ac_game_handle_sdl_events
#endif
		mov    NoFrames,%ax
		cmp    $0x0,%ax
		jne    jump_3c68a
		jmp    jump_3c6c5
	jump_3c68a:
#if defined(DOS)	/* enable video refresh, DOS method */
		mov    $0x36,%bl
		mov    $0x1200,%ax
		int    $0x10
#else
		call   ac_LbScreenWaitVbi
#endif
		cmpl   $0x0,0x8(%ebp)
		je     jump_3c6b5
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103	/* lbDisplay.LeftButton */
		jne    jump_3c6ac
		cmpb   $0x80,EXPORT_SYMBOL(lbInkey)
		jg     jump_3c6ac
		jmp    jump_3c6b5
	jump_3c6ac:
		movw   $0x0,AniQuit
	jump_3c6b5:
		cmpw   $0x0,AniQuit
		je     jump_3c6c5
		jmp    jump_3c5cc
	jump_3c6c5:
		push   AniFileHandle
		call   ac_close
		add    $0x4,%esp
		mov    $0x1f4,%bx
	jump_3c6d7:
		cmpw   $0x0,AniQuit
		je     jump_3c6f2
		dec    %bx
		jne    jump_3c6d7
		decw   AniQuit
		jne    jump_3c582
	jump_3c6f2:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
decode_FRAME_CHUNK:	/* 0x3c6fa */
/*----------------------------------------------------------------*/
		push   $0x2
		push   $AniSubChunks
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		push   $0x8
		push   BScreen
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
	jump_3c725:
		mov    AniSubChunks,%ax
		cmp    $0x0,%ax
		jne    jump_3c733
		jmp    jump_3c799
	jump_3c733:
		subw   $0x1,AniSubChunks
		push   $0x4
		push   $AniLength
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		push   $0x2
		push   $AniType
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		mov    AniType,%ax
		cmp    $0x7,%ax
		jne    jump_3c778
		call   decode_SS2
		jmp    jump_3c725
	jump_3c778:
		cmp    $0x4,%ax
		jne    jump_3c785
		call   decode_COLOUR256
		jmp    jump_3c725
	jump_3c785:
		cmp    $0xf,%ax
		jne    jump_3c792
		call   decode_BRUN
		jmp    jump_3c725
	jump_3c792:
		call   decode_unknown
		jmp    jump_3c725
	jump_3c799:
		ret


/*----------------------------------------------------------------*/
decode_FILE_HEADER:	/* 0x3c79a */
/*----------------------------------------------------------------*/
		movzwl AniLength,%eax
		sub    $0x6,%eax
		push   %eax
		push   BScreen
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		mov    BScreen,%edi
		mov    (%edi),%ax
		mov    %ax,NoFrames
		add    $0x2,%edi
		mov    (%edi),%ax
		mov    %ax,AniWidth
		add    $0x2,%edi
		mov    (%edi),%ax
		mov    %ax,AniHeight
		ret
decode_COPY:	/* 0x3c7e1 */
		movzwl AniLength,%eax
		sub    $0x6,%eax
		push   %eax
		push   BScreen
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		ret


/*----------------------------------------------------------------*/
decode_unknown:	/* 0x3c801 */
/*----------------------------------------------------------------*/
		movzwl AniLength,%eax
		sub    $0x6,%eax
		push   %eax
		push   BScreen
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		ret


/*----------------------------------------------------------------*/
decode_COLOUR256:	/* 0x3c821 */
/*----------------------------------------------------------------*/
		movzwl AniLength,%eax
		sub    $0x6,%eax
		push   %eax
		push   data_60ab0
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		movw   $0x1,do_colour
		ret


/*----------------------------------------------------------------*/
DoPalette:	/* 0x3c84a */
/*----------------------------------------------------------------*/
		push   %esi
		movw   $0x0,do_colour
		cmpl   $0x1,AniPalChange
		jne    jump_3c8e9
		mov    data_60ab0,%edi
		sub    %bx,%bx
		mov    (%edi),%ax
		add    $0x2,%edi
		mov    EXPORT_SYMBOL(PalMem),%esi
	jump_3c876:
		push   %ax
		mov    $0x0,%ecx
		mov    (%edi),%cl
		inc    %edi
		add    %ecx,%esi
		add    %ecx,%esi
		add    %ecx,%esi
		mov    $0x0,%dx
		mov    (%edi),%dl
		inc    %edi
		cmp    $0x0,%dl
		jne    jump_3c896
		mov    $0x100,%dx
	jump_3c896:
		mov    (%edi),%al
		inc    %edi
		mov    %al,(%esi)
		inc    %esi
		mov    (%edi),%al
		inc    %edi
		mov    %al,(%esi)
		inc    %esi
		mov    (%edi),%al
		inc    %edi
		mov    %al,(%esi)
		inc    %esi
		dec    %dx
		cmp    $0x0,%dx
		jne    jump_3c896
		pop    %ax
		dec    %ax
		cmp    $0x0,%ax
		jne    jump_3c876
		mov    EXPORT_SYMBOL(PalMem),%esi
#if defined(DOS) /* DOS palette setting */
		mov    %esi,%edi
		mov    $0x300,%cx
		mov    $0x3c8,%dx
		mov    $0x0,%ax
		out    %al,(%dx)
		cld
		mov    $0x36,%bl
		mov    $0x1201,%ax
		int    $0x10
		mov    $0x3da,%dx
	jump_3c8dc:
		in     (%dx),%al
		test   $0x8,%al
		je     jump_3c8dc
		mov    $0x3c9,%dx
		rep outsb %ds:(%esi),(%dx)
#else
		push   %esi
		call   ac_LbPaletteSet
		add    $0x4,%esp
#endif
		mov    %esi,%edi
	jump_3c8e9:
		pop    %esi
		ret


/*----------------------------------------------------------------*/
decode_SS2:	/* 0x3c8eb */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffff0,%esp
		movzwl AniWidth,%eax
		mov    %eax,-0x4(%ebp)
		mov    AniHeight,%ax
		mov    %ax,-0x6(%ebp)
		movzwl AniLength,%eax
		sub    $0x6,%eax
		push   %eax
		push   BScreen
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    BScreen,%edi
		mov    (%edi),%ax
		mov    %ax,-0x8(%ebp)
		add    $0x2,%edi
	jump_3c93a:
		mov    (%edi),%ax
		add    $0x2,%edi
		mov    %esi,-0x10(%ebp)
		test   $0x80,%ah
		je     jump_3c965
		test   $0x40,%ah
		jne    jump_3c959
		push   %esi
		add    -0x4(%ebp),%esi
		sub    $0x1,%esi
		mov    %al,(%esi)
		pop    %esi
		jmp    jump_3c965
	jump_3c959:
		movswl %ax,%eax
		neg    %eax
		imull  -0x4(%ebp)
		add    %eax,%esi
		jmp    jump_3c93a
	jump_3c965:
		mov    %ax,-0xa(%ebp)
		cmp    $0x0,%ax
		je     jump_3c9b0
	jump_3c96f:
		mov    (%edi),%bl
		inc    %edi
		movzbl %bl,%ebx
		add    %ebx,%esi
		mov    (%edi),%dl
		inc    %edi
		cmp    $0x0,%dl
		jg     jump_3c999
		mov    (%edi),%bx
		add    $0x2,%edi
	jump_3c985:
		mov    %bx,(%esi)
		add    $0x2,%esi
		add    $0x1,%dl
		jne    jump_3c985
		subw   $0x1,-0xa(%ebp)
		jne    jump_3c96f
		jmp    jump_3c9b0
	jump_3c999:
		mov    (%edi),%bx
		add    $0x2,%edi
		mov    %bx,(%esi)
		add    $0x2,%esi
		dec    %dl
		jne    jump_3c999
		subw   $0x1,-0xa(%ebp)
		jne    jump_3c96f
	jump_3c9b0:
		mov    -0x10(%ebp),%esi
		add    -0x4(%ebp),%esi
		subw   $0x1,-0x8(%ebp)
		je     jump_3c9c2
		jmp    jump_3c93a
	jump_3c9c2:
		leave
		ret


/*----------------------------------------------------------------*/
decode_BRUN:	/* 0x3c9c4 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffffc,%esp
		mov    AniWidth,%ax
		mov    %ax,-0x2(%ebp)
		mov    AniHeight,%ax
		mov    %ax,-0x4(%ebp)
		movzwl AniLength,%eax
		sub    $0x6,%eax
		push   %eax
		push   BScreen
		push   AniFileHandle
		call   ac_read
		add    $0xc,%esp
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    BScreen,%edi
		mov    -0x4(%ebp),%bx
	jump_3ca0d:
		inc    %edi
		mov    -0x2(%ebp),%cx
	jump_3ca12:
		mov    (%edi),%dl
		inc    %edi
		cmp    $0x0,%dl
		jg     jump_3ca23
		mov    $0xff,%ah
		mov    %dl,%al
		add    %ax,%cx
		jmp    jump_3ca2b
	jump_3ca23:
		sub    %ax,%ax
		mov    %dl,%al
		sub    %ax,%cx
	jump_3ca2b:
		cmp    $0x0,%dl
		jg     jump_3ca3c
	jump_3ca30:
		mov    (%edi),%dh
		inc    %edi
		mov    %dh,(%esi)
		inc    %esi
		inc    %dl
		jne    jump_3ca30
		jmp    jump_3ca46
	jump_3ca3c:
		mov    (%edi),%dh
		inc    %edi
	jump_3ca3f:
		mov    %dh,(%esi)
		inc    %esi
		dec    %dl
		jne    jump_3ca3f
	jump_3ca46:
		cmp    $0x0,%cx
		jne    jump_3ca12
		dec    %bx
		jne    jump_3ca0d
		leave
		ret


/*----------------------------------------------------------------*/
DelayTimer:	/* 0x3ca52 */
/*----------------------------------------------------------------*/
		cmpl   $0x0,AniSpeed
		je     jump_3caa3
		push   %ax
		push   %bx
		push   %cx
		push   %dx
	jump_3ca63:
#if defined(DOS) /* get time in sec/100 */
		mov    $0x2c,%ah
		int    $0x21
		mov    $0x64,%ax
		mul    %dh
		mov    $0x0,%dh
		add    %ax,%dx
#else
		call   ac_LbTimerClock
		mov    $0x0a,%cx
		mov    $0x0,%dx
		idiv   %cx
		mov    %ax,%dx
#endif
		mov    %dx,%cx
		sub    old_time,%dx
		cmp    $0x0,%dx
		je     jump_3ca63
		jg     jump_3ca89
		add    $0x1770,%dx
	jump_3ca89:
		movzwl %dx,%edx
		cmp    AniSpeed,%edx
		jl     jump_3ca63
		mov    %cx,old_time
		pop    %dx
		pop    %cx
		pop    %bx
		pop    %ax
	jump_3caa3:
		ret


/*----------------------------------------------------------------*/
UnpackM1:	/* 0x3caa4 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %esi
		push   %edi
		push   %ds
		push   %es
		cld
		push   %ds
		pop    %es
		mov    0x8(%ebp),%esi
		lods   %ds:(%esi),%ax
		cmp    $0x4e52,%ax
		jne    jump_3cc18
		lods   %ds:(%esi),%ax
		cmp    $0x143,%ax
		jne    jump_3cc18
		call   blong
		mov    %eax,unpackm1__unpack_len
		call   blong
		mov    %eax,unpackm1__pack_len
		mov    0x5(%esi),%bl
		mov    %bl,unpackm1__blocks
		add    $0x6,%esi
		add    $0x12,%eax
		mov    0x8(%ebp),%edx
		mov    0xc(%ebp),%ebx
		add    %eax,%edx
		cmp    %ebx,%edx
		jbe    jump_3cb3f
		mov    0x8(%ebp),%edi
		xor    %eax,%eax
		mov    0x10(%edi),%al
		add    unpackm1__unpack_len,%eax
		add    %eax,%ebx
		cmp    %edx,%ebx
		jbe    jump_3cb3f
		mov    %edx,%esi
		mov    %ebx,%edi
		sub    $0x4,%esi
		sub    $0x4,%edi
		mov    unpackm1__pack_len,%ecx
		shr    $0x2,%ecx
		std
		rep movsl %ds:(%esi),%es:(%edi)
		add    $0x4,%esi
		add    $0x4,%edi
		mov    unpackm1__pack_len,%cx
		and    $0x3,%cx
		jcxz   jump_3cb3c
		dec    %esi
		dec    %edi
		rep movsb %ds:(%esi),%es:(%edi)
		inc    %esi
		inc    %edi
	jump_3cb3c:
		cld
		mov    %edi,%esi
	jump_3cb3f:
		mov    0xc(%ebp),%edi
		movb   $0x0,unpackm1__bit_count
		mov    (%esi),%ax
		mov    %ax,unpackm1__bit_buffl
		mov    $0x2,%al
		call   input_bits
	jump_3cb59:
		mov    $unpackm1__raw_table,%edx
		call   make_huftable
		mov    $unpackm1__pos_table,%edx
		call   make_huftable
		mov    $unpackm1__len_table,%edx
		call   make_huftable
		mov    $0x10,%al
		call   input_bits
		mov    %ax,unpackm1__counts
		jmp    jump_3cbb0
	jump_3cb86:
		mov    $unpackm1__pos_table,%edx
		call   input_value
		push   %cx
		mov    $unpackm1__len_table,%edx
		call   input_value
		add    $0x2,%cx
		xor    %eax,%eax
		pop    %ax
		inc    %ax
		mov    %esi,%edx
		mov    %edi,%esi
		sub    %eax,%esi
		rep movsb %ds:(%esi),%es:(%edi)
		mov    %edx,%esi
	jump_3cbb0:
		mov    $unpackm1__raw_table,%edx
		call   input_value
		jcxz   jump_3cbfb
		rep movsb %ds:(%esi),%es:(%edi)
		mov    unpackm1__bit_count,%cl
		mov    (%esi),%ax
		mov    %ax,%bx
		rol    %cl,%ax
		mov    $0x1,%dx
		shl    %cl,%dx
		dec    %dx
		and    %dx,unpackm1__bit_buffl
		and    %ax,%dx
		mov    0x2(%esi),%ax
		shl    %cl,%bx
		shl    %cl,%ax
		or     %dx,%ax
		or     %bx,unpackm1__bit_buffl
		mov    %ax,unpackm1__bit_buffh
	jump_3cbfb:
		decw   unpackm1__counts
		jne    jump_3cb86
		decb   unpackm1__blocks
		jne    jump_3cb59
		mov    unpackm1__unpack_len,%eax
		clc
		jmp    jump_3cc2c
	jump_3cc18:
		mov    $0x0,%eax
		jmp    jump_3cc2b
	jump_3cc2b:
		stc
	jump_3cc2c:
		pop    %es
		pop    %ds
		pop    %edi
		pop    %esi
		leave
		ret


/*----------------------------------------------------------------*/
blong:	/* 0x3cc32 */
/*----------------------------------------------------------------*/
		lods   %ds:(%esi),%eax
		xchg   %ah,%al
		rol    $0x10,%eax
		xchg   %ah,%al
		ret


/*----------------------------------------------------------------*/
input_value:	/* 0x3cc3b */
/*----------------------------------------------------------------*/
		xchg   %edx,%esi
		mov    unpackm1__bit_buffl,%cx
	jump_3cc44:
		lods   %ds:(%esi),%ax
		mov    %ax,%bx
		and    %cx,%bx
		lods   %ds:(%esi),%ax
		cmp    %bx,%ax
		jne    jump_3cc44
		mov    0x3c(%esi),%cx
		xchg   %edx,%esi
		mov    %ch,%al
		call   input_bits
		xor    %ch,%ch
		cmp    $0x2,%cl
		jb     jump_3cc7d
		dec    %cl
		mov    %cl,%al
		call   input_bits
		mov    $0x1,%bx
		shl    %cl,%bx
		or     %bx,%ax
		mov    %ax,%cx
	jump_3cc7d:
		ret


/*----------------------------------------------------------------*/
input_bits:	/* 0x3cc7e */
/*----------------------------------------------------------------*/
		push   %cx
		mov    %al,%cl
		mov    unpackm1__bit_buffh,%ax
		mov    unpackm1__bit_buffl,%bx
		mov    unpackm1__bit_count,%ch
		mov    $0x1,%dx
		shl    %cl,%dx
		dec    %dx
		and    %bx,%dx
		push   %dx
		sub    %cl,%ch
		jae    jump_3ccd1
		add    %cl,%ch
		xchg   %cl,%ch
		mov    $0x1,%dx
		shl    %cl,%dx
		dec    %dx
		and    %ax,%dx
		ror    %cl,%dx
		shr    %cl,%ax
		shr    %cl,%bx
		or     %dx,%bx
		add    $0x2,%esi
		mov    (%esi),%ax
		xchg   %cl,%ch
		sub    %ch,%cl
		mov    $0x10,%ch
		sub    %cl,%ch
	jump_3ccd1:
		mov    $0x1,%dx
		shl    %cl,%dx
		dec    %dx
		and    %ax,%dx
		ror    %cl,%dx
		shr    %cl,%ax
		shr    %cl,%bx
		or     %dx,%bx
		mov    %ax,unpackm1__bit_buffh
		mov    %bx,unpackm1__bit_buffl
		mov    %ch,unpackm1__bit_count
		pop    %ax
		pop    %cx
		ret


/*----------------------------------------------------------------*/
make_huftable:	/* 0x3cd01 */
/*----------------------------------------------------------------*/
		push   %edi
		push   %edx
		sub    $0x10,%esp
		mov    %esp,%edi
		mov    $0x5,%al
		call   input_bits
		xor    %ecx,%ecx
		mov    %ax,%cx
		jcxz   jump_3cd94
		push   %ecx
	jump_3cd18:
		mov    $0x4,%al
		call   input_bits
		mov    %al,%ss:(%edi)
		inc    %edi
		loop   jump_3cd18
		pop    %ecx
		push   %esi
		mov    %esp,%esi
		add    $0x4,%esi
		mov    %ss:0x10(%esi),%edi
		mov    $0x1,%al
		xor    %bx,%bx
		mov    $0x8000,%dx
	jump_3cd39:
		push   %cx
		push   %esi
	jump_3cd3c:
		cmp    %ss:(%esi),%al
		jne    jump_3cd84
		push   %ax
		push   %bx
		push   %cx
		mov    %al,%cl
		mov    $0x1,%ax
		shl    %cl,%ax
		dec    %ax
		stos   %ax,%es:(%edi)
		mov    %cl,%al
		mov    $0x10,%cl
		sub    %al,%cl
		shr    %cl,%bx
		mov    %al,%cl
		xor    %ax,%ax
	jump_3cd62:
		rcr    $1,%bx
		rcl    $1,%ax
		loop   jump_3cd62
		stos   %ax,%es:(%edi)
		mov    %esi,%eax
		sub    %esp,%eax
		sub    $0x10,%ax
		mov    %ss:(%esi),%ah
		mov    %ax,0x3c(%edi)
		pop    %cx
		pop    %bx
		pop    %ax
		add    %dx,%bx
	jump_3cd84:
		inc    %esi
		loop   jump_3cd3c
		pop    %esi
		pop    %cx
		shr    $1,%dx
		inc    %al
		cmp    $0x11,%al
		jne    jump_3cd39
		pop    %esi
	jump_3cd94:
		add    $0x10,%esp
		pop    %edx
		pop    %edi
		ret

/*----------------------------------------------------------------*/
UndoMouse:	/* 0x410ce */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		cmpw   $0x0,MouseOldW
		je     jump_4131c
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		cmp    $0x1,%ax
		jne    jump_41180
		mov    $MouseOldData,%esi
		movswl MouseOldY,%eax
		shr    $1,%eax
		mov    $0x140,%ebx
		imul   %ebx
		movzwl MouseOldX,%ebx
		cmp    $0x0,%ebx
		jge    jump_4111a
		mov    $0x0,%ebx
	jump_4111a:
		shr    $1,%ebx
		add    %ebx,%eax
		mov    %eax,%edi
		add    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x10,%ax
		jle    jump_4113e
		mov    $0x10,%ax
	jump_4113e:
		inc    %ax
		mov    $0x282,%bx
		sub    MouseOldX,%bx
		shr    $1,%bx
		cmp    $0x10,%bx
		jle    jump_41158
		mov    $0x10,%bx
	jump_41158:
		cmp    $0x0,%bx
		je     jump_4131c
		movzwl %bx,%ebx
		mov    %ds,%cx
		mov    %cx,%es
	jump_4116b:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x140,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_4116b
		jmp    jump_4131c
	jump_41180:
		cmp    $0x2,%ax
		jne    jump_41251
		mov    $MouseOldData,%esi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_4119f
		mov    $0x0,%ax
	jump_4119f:
		mov    $0x50,%bx
		imul   %bx
		mov    MouseOldX,%bx
		cmp    $0x0,%bx
		jge    jump_411b7
		mov    $0x0,%bx
	jump_411b7:
		shr    $0x3,%bx
		add    %bx,%ax
		movzwl %ax,%edi
		add    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x190,%ax
		sub    %cs:MouseOldY,%ax
		cmp    $0x30,%ax
		jle    jump_411dd
		mov    $0x30,%ax
	jump_411dd:
		mov    $0x280,%bx
		sub    %cs:MouseOldX,%bx
		cmp    $0x30,%bx
		jle    jump_411f3
		mov    $0x30,%bx
	jump_411f3:
		add    $0x7,%bx
		shr    $0x3,%bx
		push   %ax
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		pop    %ax
		movzwl %bx,%ebx
		mov    $0x102,%dx
	jump_41216:
		push   %dx
		push   %ax
		push   %edi
		push   %ax
		mov    %dx,%ax
		mov    $0x3c4,%dx
		out    %ax,(%dx)
		pop    %ax
	jump_41228:
		mov    %bx,%cx
	jump_4122b:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_4122b
		add    $0x50,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_41228
		pop    %edi
		pop    %ax
		pop    %dx
		shl    $1,%dh
		cmp    $0x1002,%dx
		jne    jump_41216
		jmp    jump_4131c
	jump_41251:
		mov    $MouseOldData,%esi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_41266
		mov    $0x0,%ax
	jump_41266:
		shr    $1,%ax
		mov    $0x28,%bx
		imul   %bx
		mov    MouseOldX,%bx
		cmp    $0x0,%bx
		jge    jump_41281
		mov    $0x0,%bx
	jump_41281:
		shr    $0x4,%bx
		add    %bx,%ax
		movzwl %ax,%edi
		add    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x190,%ax
		sub    %cs:MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x30,%ax
		jle    jump_412aa
		mov    $0x30,%ax
	jump_412aa:
		mov    $0x280,%bx
		sub    %cs:MouseOldX,%bx
		shr    $1,%bx
		cmp    $0x30,%bx
		jle    jump_412c3
		mov    $0x30,%bx
	jump_412c3:
		add    $0x7,%bx
		shr    $0x3,%bx
		push   %ax
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		pop    %ax
		movzwl %bx,%ebx
		mov    $0x102,%dx
	jump_412e6:
		push   %dx
		push   %ax
		push   %edi
		push   %ax
		mov    %dx,%ax
		mov    $0x3c4,%dx
		out    %ax,(%dx)
		pop    %ax
	jump_412f8:
		mov    %bx,%cx
	jump_412fb:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_412fb
		add    $0x28,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_412f8
		pop    %edi
		pop    %ax
		pop    %dx
		shl    $1,%dh
		cmp    $0x1002,%dx
		jne    jump_412e6
	jump_4131c:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
BackupMouse:	/* 0x41323 */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		mov    %ax,MouseOldX
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    %ax,MouseOldY
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		cmp    $0x1,%ax
		je     jump_413cb
		cmp    $0x2,%ax
		je     jump_41394
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		add    $0xfff0,%ax
		add    $0xfff0,%ax
		cmp    $0x0,%ax
		jge    jump_4136d
		add    $0x280,%ax
	jump_4136d:
		mov    %ax,MouseOldX
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		add    $0xfff0,%ax
		add    $0xfff0,%ax
		mov    %ax,MouseOldY
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		jmp    jump_41468
	jump_41394:
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax
		add    $0xfff0,%ax
		cmp    $0x0,%ax
		jge    jump_413a8
		add    $0x280,%ax
	jump_413a8:
		mov    %ax,MouseOldX
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		add    $0xfff0,%ax
		mov    %ax,MouseOldY
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		jmp    jump_41468
	jump_413cb:
		mov    EXPORT_SYMBOL(lbDisplay__MMouseX_640),%ax	/* lbDisplay.MMouseX but scaled */
		mov    %ax,MouseOldX
		mov    EXPORT_SYMBOL(lbDisplay__MMouseY_400),%ax
		mov    %ax,MouseOldY
		mov    $MouseOldData,%edi
		mov    MouseOldY,%ax
		shr    $1,%ax
		mov    $0x140,%bx
		imul   %bx
		mov    MouseOldX,%bx
		shr    $1,%bx
		add    %bx,%ax
		movzwl %ax,%esi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x10,%ax
		jle    jump_41420
		mov    $0x10,%ax
	jump_41420:
		inc    %ax
		mov    $0x282,%bx
		sub    MouseOldX,%bx
		shr    $1,%bx
		cmp    $0x10,%bx
		jle    jump_4143a
		mov    $0x10,%bx
	jump_4143a:
		cmp    $0x0,%bx
		je     jump_4164d
		add    ScrSeg,%esi
		movzwl %bx,%ebx
		mov    %ds,%cx
		mov    %cx,%es
	jump_41453:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x140,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_41453
		jmp    jump_4164d
	jump_41468:
		cmp    $0x2,%ax
		jne    jump_4155f
		mov    $MouseOldData,%edi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_41487
		mov    $0x0,%ax
	jump_41487:
		mov    $0x50,%bx
		imul   %bx
		mov    MouseOldX,%bx
		cmp    $0x0,%bx
		jge    jump_4149f
		mov    $0x0,%bx
	jump_4149f:
		shr    $0x3,%bx
		add    %bx,%ax
		movzwl %ax,%esi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		cmp    $0x30,%ax
		jle    jump_414be
		mov    $0x30,%ax
	jump_414be:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		cmp    $0x30,%bx
		jle    jump_414d3
		mov    $0x30,%bx
	jump_414d3:
		add    $0x7,%bx
		shr    $0x3,%bx
		mov    ScrSeg,%edx
		add    %edx,%esi
		cmp    EXPORT_SYMBOL(VScreen),%edx
		jne    jump_41530
		movzwl %bx,%ebx
		mov    $0x4,%dx /* VGA command - switch bit plane */
	jump_414f2:
#if defined(DOS) /* TODO without the plane switching, the writes following this will overwrite stuff */
		push   %dx
		push   %ax
		push   %esi
		push   %ax
		mov    %dx,%ax
		mov    $0x3ce,%dx
		out    %ax,(%dx)
		pop    %ax
	jump_41504:
		mov    %bx,%cx
	jump_41507:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_41507
		add    $0x50,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_41504
		pop    %esi
		pop    %ax
		pop    %dx
#endif
		add    $0x100,%dx
		cmp    $0x404,%dx
		jne    jump_414f2
		jmp    jump_4164d
	jump_41530:
		mov    %ds,%cx
		mov    %cx,%es
		movzwl %bx,%ebx
		mov    $0x4,%dx
	jump_4153d:
		push   %ax
		push   %esi
	jump_41540:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x50,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_41540
		pop    %esi
		pop    %ax
		add    $0x7d00,%esi
		dec    %dx
		jne    jump_4153d
		jmp    jump_4164d
	jump_4155f:
		mov    $MouseOldData,%edi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_41574
		mov    $0x0,%ax
	jump_41574:
		shr    $1,%ax
		mov    $0x28,%bx
		imul   %bx
		mov    MouseOldX,%bx
		cmp    $0x0,%bx
		jge    jump_4158f
		mov    $0x0,%bx
	jump_4158f:
		shr    $0x4,%bx
		add    %bx,%ax
		movzwl %ax,%esi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x30,%ax
		jle    jump_415b1
		mov    $0x30,%ax
	jump_415b1:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		shr    $1,%bx
		cmp    $0x30,%bx
		jle    jump_415c9
		mov    $0x30,%bx
	jump_415c9:
		add    $0x7,%bx
		shr    $0x3,%bx
		mov    ScrSeg,%edx
		add    %edx,%esi
		cmp    EXPORT_SYMBOL(VScreen),%edx
		jne    jump_41623
		movzwl %bx,%ebx
		mov    $0x4,%dx /* VGA command - switch bit plane */
	jump_415e8:
#if defined(DOS) /* TODO without the plane switching, the writes following this will overwrite stuff */
		push   %dx
		push   %ax
		push   %esi
		push   %ax
		mov    %dx,%ax
		mov    $0x3ce,%dx
		out    %ax,(%dx)
		pop    %ax
	jump_415fa:
		mov    %bx,%cx
	jump_415fd:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_415fd
		add    $0x28,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_415fa
		pop    %esi
		pop    %ax
		pop    %dx
#endif
		add    $0x100,%dx
		cmp    $0x404,%dx
		jne    jump_415e8
		jmp    jump_4164d
	jump_41623:
		mov    %ds,%cx
		mov    %cx,%es
		movzwl %bx,%ebx
		mov    $0x4,%dx
	jump_41630:
		push   %ax
		push   %esi
	jump_41633:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x28,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_41633
		pop    %esi
		pop    %ax
		add    $0x1f40,%esi
		dec    %dx
		jne    jump_41630
	jump_4164d:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		movw   $0x10,MouseOldW
		ret


/*----------------------------------------------------------------*/
PlaceMouse_A:	/* 0x4165e */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		movw   $0x1,EXPORT_SYMBOL(MouseSwap)
		mov    EXPORT_SYMBOL(WScreen),%eax
		mov    %eax,ScrSeg
		call   BackupMouse
		cmpb   $0x1,EXPORT_SYMBOL(DrawFlags)
		jne    jump_416ae
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   EXPORT_SYMBOL(lbDisplay)+20
#else
		push   EXPORT_SYMBOL(mouse_sprite)
#endif
		sub    $0x2,%esp
		pushw  MouseOldY
		sub    $0x2,%esp
		pushw  MouseOldX
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret
	jump_416ae:
		push   $0x0
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   EXPORT_SYMBOL(lbDisplay)+20
#else
		push   EXPORT_SYMBOL(mouse_sprite)
#endif
		sub    $0x2,%esp
		pushw  MouseOldY
		sub    $0x2,%esp
		pushw  MouseOldX
		call   DrawASpriteHires16_A
		add    $0x10,%esp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
RemoveMouse_A:	/* 0x416d9 */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		movw   $0x0,EXPORT_SYMBOL(MouseSwap)
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret

/*----------------------------------------------------------------*/
PlaceMouse_B:	/* 0x416ef */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		movw   $0x1,EXPORT_SYMBOL(MouseSwap)
		mov    EXPORT_SYMBOL(WScreen),%eax
		mov    %eax,ScrSeg
		cmpb   $0x1,EXPORT_SYMBOL(DrawFlags)
		jne    jump_4173a
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   EXPORT_SYMBOL(lbDisplay)+20
#else
		push   EXPORT_SYMBOL(mouse_sprite)
#endif
		sub    $0x2,%esp
		pushw  MouseOldY
		sub    $0x2,%esp
		pushw  MouseOldX
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret
	jump_4173a:
		push   $0x0
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   EXPORT_SYMBOL(lbDisplay)+20
#else
		push   EXPORT_SYMBOL(mouse_sprite)
#endif
		sub    $0x2,%esp
		pushw  MouseOldY
		sub    $0x2,%esp
		pushw  MouseOldX
		call   DrawASpriteHires16_A
		add    $0x10,%esp
		mov    EXPORT_SYMBOL(VScreen),%eax
		mov    %eax,ScrSeg
		cmpb   $0x1,EXPORT_SYMBOL(DrawFlags)
		jne    jump_4179a
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   EXPORT_SYMBOL(lbDisplay)+20
#else
		push   EXPORT_SYMBOL(mouse_sprite)
#endif
		sub    $0x2,%esp
		pushw  MouseOldY
		sub    $0x2,%esp
		pushw  MouseOldX
		call   LbSpriteDrawMCGA
		add    $0xc,%esp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret
	jump_4179a:
		call   GetScreenBoxHires16
		mov    MouseOldX,%ax
		and    $0x7,%ax
#if defined(USE_BFLIB_MOUSE_CURSOR)
		push   EXPORT_SYMBOL(lbDisplay)+20
#else
		push   EXPORT_SYMBOL(mouse_sprite)
#endif
		push   $0x0
		push   $0x0
		sub    $0x2,%esp
		push   %ax
		call   LbSpriteDrawHires16
		add    $0x10,%esp
		call   PutScreenBoxHires16
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret

/*----------------------------------------------------------------*/
RemoveMouse_B:	/* 0x417cc */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		movw   $0x0,EXPORT_SYMBOL(MouseSwap)
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret

/*----------------------------------------------------------------*/
UndrawWMouse:	/* 0x417e2 */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		cmpw   $0x0,MouseOldW
		je     jump_419a2
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		cmp    $0x1,%ax
		jne    jump_4187c
		mov    $MouseOldData,%esi
		mov    MouseOldY,%ax
		mov    $0x140,%bx
		imul   %bx
		mov    MouseOldX,%bx
		add    %bx,%ax
		movzwl %ax,%edi
		mov    $0xc8,%ax
		sub    MouseOldY,%ax
		cmp    $0x10,%ax
		jle    jump_41838
		mov    $0x10,%ax
	jump_41838:
		mov    $0x140,%bx
		sub    MouseOldX,%bx
		cmp    $0x10,%bx
		jle    jump_4184d
		mov    $0x10,%bx
	jump_4184d:
		cmp    $0x0,%bx
		je     jump_419a2
		movzwl %bx,%ebx
		mov    $EXPORT_SYMBOL(WScreen),%edx
		add    %edx,%edi
		mov    %ds,%cx
		mov    %cx,%es
	jump_41867:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x140,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_41867
		jmp    jump_419a2
	jump_4187c:
		cmp    $0x2,%ax
		jne    jump_41912
		mov    $MouseOldData,%esi
		mov    MouseOldY,%ax
		mov    $0x50,%bx
		imul   %bx
		mov    MouseOldX,%bx
		shr    $0x3,%bx
		add    %bx,%ax
		mov    %ax,%di
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		cmp    $0x30,%ax
		jle    jump_418be
		mov    $0x30,%ax
	jump_418be:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		cmp    $0x30,%bx
		jle    jump_418d3
		mov    $0x30,%bx
	jump_418d3:
		add    $0x7,%bx
		shr    $0x3,%bx
		mov    EXPORT_SYMBOL(WScreen),%edx
		add    %edx,%edi
		mov    %ds,%cx
		mov    %cx,%es
		movzwl %bx,%ebx
		mov    $0x4,%dx
	jump_418f0:
		push   %ax
		push   %edi
	jump_418f3:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x50,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_418f3
		pop    %edi
		pop    %ax
		add    $0x7d00,%edi
		dec    %dx
		jne    jump_418f0
		jmp    jump_419a2
	jump_41912:
		mov    $MouseOldData,%esi
		mov    MouseOldY,%ax
		shr    $1,%ax
		mov    $0x28,%bx
		imul   %bx
		mov    MouseOldX,%bx
		shr    $0x4,%bx
		add    %bx,%ax
		mov    %ax,%di
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x30,%ax
		jle    jump_41950
		mov    $0x30,%ax
	jump_41950:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		shr    $1,%bx
		cmp    $0x30,%bx
		jle    jump_41968
		mov    $0x30,%bx
	jump_41968:
		add    $0x7,%bx
		shr    $0x3,%bx
		mov    EXPORT_SYMBOL(WScreen),%edx
		add    %edx,%edi
		mov    %ds,%cx
		mov    %cx,%es
		movzwl %bx,%ebx
		mov    $0x4,%dx
	jump_41985:
		push   %ax
		push   %edi
	jump_41988:
		mov    %ebx,%ecx
		rep movsb %ds:(%esi),%es:(%edi)
		add    $0x28,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_41988
		pop    %edi
		pop    %ax
		add    $0x1f40,%edi
		dec    %dx
		jne    jump_41985
	jump_419a2:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
GetScreenBoxHires16:	/* 0x419a9 */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		cmp    $0x2,%ax
		jne    jump_41aa5
		mov    $MScreen,%edi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_419d8
		mov    $0x0,%ax
		jmp    jump_419df
	jump_419d8:
		mov    $0x50,%bx
		imul   %bx
	jump_419df:
		mov    MouseOldX,%bx
		shr    $0x3,%bx
		add    %bx,%ax
		movzwl %ax,%esi
		add    EXPORT_SYMBOL(VScreen),%esi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		cmp    $0x20,%ax
		jle    jump_41a0b
		mov    $0x20,%ax
	jump_41a0b:
		mov    MouseOldY,%bx
		cmp    $0x0,%bx
		jge    jump_41a2c
		add    %bx,%ax
		push   %eax
		mov    $0x8,%ax
		neg    %bx
		imul   %bx
		movzwl %ax,%eax
		add    %eax,%edi
		pop    %eax
	jump_41a2c:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		add    $0x7,%bx
		shr    $0x3,%bx
		cmp    $0x8,%bx
		jle    jump_41a49
		mov    $0x8,%bx
	jump_41a49:
		cmp    $0x0,%bx
		je     jump_41b68
		mov    $0x4,%dx
	jump_41a57:
		push   %dx
		push   %ax
		push   %esi
		push   %edi
		push   %ax
		mov    %dx,%ax
		mov    $0x3ce,%dx
		out    %ax,(%dx)
		pop    %ax
		movzwl %bx,%ebx
	jump_41a6d:
		mov    %bx,%cx
	jump_41a70:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_41a70
		add    $0x50,%esi
		sub    %ebx,%esi
		add    $0x8,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_41a6d
		pop    %edi
		pop    %esi
		pop    %ax
		pop    %dx
		add    $0x100,%edi
		add    $0x100,%dx
		cmp    $0x404,%dx
		jne    jump_41a57
		jmp    jump_41b68
	jump_41aa5:
		mov    $MScreen,%edi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_41abc
		mov    $0x0,%ax
		jmp    jump_41ac6
	jump_41abc:
		shr    $1,%ax
		mov    $0x28,%bx
		imul   %bx
	jump_41ac6:
		mov    MouseOldX,%bx
		shr    $0x4,%bx
		add    %bx,%ax
		movzwl %ax,%esi
		add    EXPORT_SYMBOL(VScreen),%esi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x20,%ax
		jle    jump_41af5
		mov    $0x20,%ax
	jump_41af5:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		shr    $1,%bx
		add    $0x7,%bx
		shr    $0x3,%bx
		cmp    $0x8,%bx
		jle    jump_41b15
		mov    $0x8,%bx
	jump_41b15:
		cmp    $0x0,%bx
		je     jump_41b68
		mov    $0x4,%dx
	jump_41b1f:
		push   %dx
		push   %ax
		push   %esi
		push   %edi
		push   %ax
		mov    %dx,%ax
		mov    $0x3ce,%dx
		out    %ax,(%dx)
		pop    %ax
		movzwl %bx,%ebx
	jump_41b35:
		mov    %bx,%cx
	jump_41b38:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_41b38
		add    $0x28,%esi
		sub    %ebx,%esi
		add    $0x8,%edi
		sub    %ebx,%edi
		dec    %ax
		jne    jump_41b35
		pop    %edi
		pop    %esi
		pop    %ax
		pop    %dx
		add    $0x100,%edi
		add    $0x100,%dx
		cmp    $0x404,%dx
		jne    jump_41b1f
	jump_41b68:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
PutScreenBoxHires16:	/* 0x41b6f */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		movzbw EXPORT_SYMBOL(DrawFlags),%ax
		cmp    $0x2,%ax
		jne    jump_41c8b
		mov    $MScreen,%esi
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_41bae
		mov    $0x0,%ax
		jmp    jump_41bb5
	jump_41bae:
		mov    $0x50,%bx
		imul   %bx
	jump_41bb5:
		mov    MouseOldX,%bx
		shr    $0x3,%bx
		add    %bx,%ax
		movzwl %ax,%edi
		add    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		cmp    $0x20,%ax
		jle    jump_41be1
		mov    $0x20,%ax
	jump_41be1:
		mov    MouseOldY,%bx
		cmp    $0x0,%bx
		jge    jump_41c01
		add    %bx,%ax
		push   %eax
		mov    $0x8,%eax
		neg    %bx
		imul   %bx,%ax
		add    %eax,%esi
		pop    %eax
	jump_41c01:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		add    $0x7,%bx
		shr    $0x3,%bx
		cmp    $0x8,%bx
		jle    jump_41c1e
		mov    $0x8,%bx
	jump_41c1e:
		cmp    $0x0,%bx
		je     jump_41d65
		push   %ax
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		pop    %ax
		movzwl %bx,%ebx
		mov    $0x102,%dx
	jump_41c43:
		push   %dx
		push   %ax
		push   %esi
		push   %edi
		push   %ax
		mov    %dx,%ax
		mov    $0x3c4,%dx
		out    %ax,(%dx)
		pop    %ax
	jump_41c56:
		mov    %bx,%cx
	jump_41c59:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_41c59
		add    $0x50,%edi
		sub    %ebx,%edi
		add    $0x8,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_41c56
		pop    %edi
		pop    %esi
		pop    %ax
		pop    %dx
		add    $0x100,%esi
		shl    $1,%dh
		cmp    $0x1002,%dx
		jne    jump_41c43
		jmp    jump_41d65
	jump_41c8b:
		mov    $MScreen,%esi
		mov    MouseOldY,%ax
		mov    MouseOldY,%ax
		cmp    $0x0,%ax
		jge    jump_41ca8
		mov    $0x0,%ax
		jmp    jump_41cb2
	jump_41ca8:
		shr    $1,%ax
		mov    $0x28,%bx
		imul   %bx
	jump_41cb2:
		mov    MouseOldX,%bx
		shr    $0x4,%bx
		add    %bx,%ax
		movzwl %ax,%edi
		add    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x190,%ax
		sub    MouseOldY,%ax
		shr    $1,%ax
		cmp    $0x20,%ax
		jle    jump_41ce1
		mov    $0x20,%ax
	jump_41ce1:
		mov    $0x280,%bx
		sub    MouseOldX,%bx
		shr    $1,%bx
		add    $0x7,%bx
		shr    $0x3,%bx
		cmp    $0x8,%bx
		jle    jump_41d01
		mov    $0x8,%bx
	jump_41d01:
		cmp    $0x0,%bx
		je     jump_41d65
		push   %ax
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		pop    %ax
		movzwl %bx,%ebx
		mov    $0x102,%dx
	jump_41d22:
		push   %dx
		push   %ax
		push   %esi
		push   %edi
		push   %ax
		mov    %dx,%ax
		mov    $0x3c4,%dx
		out    %ax,(%dx)
		pop    %ax
	jump_41d35:
		mov    %bx,%cx
	jump_41d38:
		mov    (%esi),%dl
		mov    %dl,(%edi)
		inc    %esi
		inc    %edi
		dec    %cx
		jne    jump_41d38
		add    $0x28,%edi
		sub    %ebx,%edi
		add    $0x8,%esi
		sub    %ebx,%esi
		dec    %ax
		jne    jump_41d35
		pop    %edi
		pop    %esi
		pop    %ax
		pop    %dx
		add    $0x100,%esi
		shl    $1,%dh
		cmp    $0x1002,%dx
		jne    jump_41d22
	jump_41d65:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
vertical_line:	/* 0x41d6c */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%eax
		mov    0xc(%ebp),%ebx
		inc    %ebx
		cmp    %ebx,%eax
		jl     jump_41d81
		xchg   %eax,%ebx
	jump_41d81:
		mov    0x10(%ebp),%ecx
		cmp    GraphicsWindowWidth,%ecx
		jge    jump_41e25
		cmp    $0x0,%ecx
		jl     jump_41e25
		cmp    GraphicsWindowHeight,%eax
		jge    jump_41e25
		cmp    $0x0,%eax
		jge    jump_41daf
		mov    $0x0,%eax
	jump_41daf:
		cmp    $0x0,%ebx
		jl     jump_41e25
		cmp    GraphicsWindowHeight,%ebx
		jl     jump_41dc2
		mov    GraphicsWindowHeight,%ebx
	jump_41dc2:
		add    GraphicsWindowY,%eax
		add    GraphicsWindowY,%ebx
		add    GraphicsWindowX,%ecx
		sub    %eax,%ebx
		cmp    $0x0,%ebx
		jle    jump_41e25
		mov    0x14(%ebp),%edx
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_41e11
		imul   $0x50,%eax,%eax
		mov    %ecx,%esi
		shr    $0x3,%esi
		add    %eax,%esi
		add    EXPORT_SYMBOL(WScreen),%esi
		and    $0x7,%cl
		mov    $0x80,%ax
		shr    %cl,%ax
		mov    %bx,%cx
		mov    %ax,%bx
		not    %bx
		call   func_42d70
		jmp    jump_41e25
	jump_41e11:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_41e1c
		jmp    jump_41e25
	jump_41e1c:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_41e25
	jump_41e25:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
pvertical_line:	/* 0x41e2d */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%eax
		mov    0xc(%ebp),%ebx
		inc    %ebx
		cmp    %ebx,%eax
		jl     jump_41e42
		xchg   %eax,%ebx
	jump_41e42:
		mov    0x10(%ebp),%ecx
		cmp    GraphicsWindowWidth,%ecx
		jge    jump_41ee6
		cmp    $0x0,%ecx
		jl     jump_41ee6
		cmp    GraphicsWindowHeight,%eax
		jge    jump_41ee6
		cmp    $0x0,%eax
		jge    jump_41e70
		mov    $0x0,%eax
	jump_41e70:
		cmp    $0x0,%ebx
		jl     jump_41ee6
		cmp    GraphicsWindowHeight,%ebx
		jl     jump_41e83
		mov    GraphicsWindowHeight,%ebx
	jump_41e83:
		add    GraphicsWindowY,%eax
		add    GraphicsWindowY,%ebx
		add    GraphicsWindowX,%ecx
		sub    %eax,%ebx
		cmp    $0x0,%ebx
		jle    jump_41ee6
		mov    0x14(%ebp),%edx
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_41ed2
		imul   $0x50,%eax,%eax
		mov    %ecx,%esi
		shr    $0x3,%esi
		add    %eax,%esi
		add    UScreen,%esi
		and    $0x7,%cl
		mov    $0x80,%ax
		shr    %cl,%ax
		mov    %bx,%cx
		mov    %ax,%bx
		not    %bx
		call   func_42d70
		jmp    jump_41ee6
	jump_41ed2:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_41edd
		jmp    jump_41ee6
	jump_41edd:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_41ee6
	jump_41ee6:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
horizontal_line:	/* 0x41eee */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%eax
		mov    0xc(%ebp),%ebx
		inc    %ebx
		cmp    %ebx,%eax
		jl     jump_41f03
		xchg   %eax,%ebx
	jump_41f03:
		mov    0x10(%ebp),%edi
		cmp    GraphicsWindowWidth,%eax
		jge    jump_4216b
		cmp    $0x0,%ebx
		jl     jump_4216b
		cmp    $0x0,%eax
		jge    jump_41f25
		mov    $0x0,%eax
	jump_41f25:
		cmp    GraphicsWindowWidth,%ebx
		jl     jump_41f33
		mov    GraphicsWindowWidth,%ebx
	jump_41f33:
		cmp    $0x0,%edi
		jl     jump_4216b
		cmp    GraphicsWindowHeight,%edi
		jge    jump_4216b
		cmp    %eax,%ebx
		je     jump_4216b
		add    GraphicsWindowX,%eax
		add    GraphicsWindowX,%ebx
		add    GraphicsWindowY,%edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_42157
		imul   $0x50,%edi,%edi
		mov    %eax,%esi
		shr    $0x3,%esi
		add    %edi,%esi
		add    EXPORT_SYMBOL(WScreen),%esi
		mov    %eax,%edx
		and    $0xfff8,%eax
		mov    %ebx,%edi
		and    $0xfff8,%ebx
		cmp    %ebx,%eax
		je     jump_42133
		add    $0x8,%eax
		sub    %eax,%edi
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		mov    %ax,%bx
		not    %bx
		mov    0x14(%ebp),%edx
		call   func_42b98
		inc    %esi
		mov    0x14(%ebp),%edx
	jump_41fb8:
		cmp    $0x10,%edi
		jle    jump_41fd2
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42b98
		add    $0x2,%esi
		sub    $0x10,%edi
		jmp    jump_41fb8
	jump_41fd2:
		jmp    *vtable_41fd9(,%edi,4)

vtable_41fd9:
		.long   func_4201d
		.long   func_42022
		.long   func_42034
		.long   func_42046
		.long   func_42058
		.long   func_4206a
		.long   func_4207c
		.long   func_4208e
		.long   func_420a0
		.long   func_420b2
		.long   func_420c4
		.long   func_420d6
		.long   func_420e8
		.long   func_420f7
		.long   func_42106
		.long   func_42115
		.long   func_42124


/*----------------------------------------------------------------*/
func_4201d:
/*----------------------------------------------------------------*/
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42022:
/*----------------------------------------------------------------*/
		mov    $0x80,%ax
		mov    $0xff7f,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42034:
/*----------------------------------------------------------------*/
		mov    $0xc0,%ax
		mov    $0xff3f,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42046:
/*----------------------------------------------------------------*/
		mov    $0xe0,%ax
		mov    $0xff1f,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42058:
/*----------------------------------------------------------------*/
		mov    $0xf0,%ax
		mov    $0xff0f,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_4206a:
/*----------------------------------------------------------------*/
		mov    $0xf8,%ax
		mov    $0xff07,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_4207c:
/*----------------------------------------------------------------*/
		mov    $0xfc,%ax
		mov    $0xff03,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_4208e:
/*----------------------------------------------------------------*/
		mov    $0xfe,%ax
		mov    $0xff01,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_420a0:
/*----------------------------------------------------------------*/
		mov    $0xff,%ax
		mov    $0xff00,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_420b2:
/*----------------------------------------------------------------*/
		mov    $0x80ff,%ax
		mov    $0x7f00,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_420c4:
/*----------------------------------------------------------------*/
		mov    $0xc0ff,%ax
		mov    $0x3f00,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_420d6:
/*----------------------------------------------------------------*/
		mov    $0xe0ff,%ax
		mov    $0x1f00,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_420e8:
/*----------------------------------------------------------------*/
		mov    $0xf0ff,%ax
		mov    $0xf00,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_420f7:
/*----------------------------------------------------------------*/
		mov    $0xf8ff,%ax
		mov    $0x700,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42106:
/*----------------------------------------------------------------*/
		mov    $0xfcff,%ax
		mov    $0x300,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42115:
/*----------------------------------------------------------------*/
		mov    $0xfeff,%ax
		mov    $0x100,%bx
		call   func_42b98
		jmp    jump_4216b


/*----------------------------------------------------------------*/
func_42124:
/*----------------------------------------------------------------*/
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42b98
		jmp    jump_4216b
	jump_42133:
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		and    $0x7,%edi
		and    data_42ae6(%edi),%al
		mov    %ax,%bx
		not    %bx
		mov    0x14(%ebp),%edx
		call   func_42b98
		jmp    jump_4216b
	jump_42157:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_42162
		jmp    jump_4216b
	jump_42162:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4216b
	jump_4216b:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret
phorizontal_line_unsure:	/* 0x42173 */
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%eax
		mov    0xc(%ebp),%ebx
		inc    %ebx
		cmp    %ebx,%eax
		jl     jump_42188
		xchg   %eax,%ebx
	jump_42188:
		mov    0x10(%ebp),%edi
		cmp    GraphicsWindowWidth,%eax
		jge    jump_423f0
		cmp    $0x0,%ebx
		jl     jump_423f0
		cmp    $0x0,%eax
		jge    jump_421aa
		mov    $0x0,%eax
	jump_421aa:
		cmp    GraphicsWindowWidth,%ebx
		jl     jump_421b8
		mov    GraphicsWindowWidth,%ebx
	jump_421b8:
		cmp    $0x0,%edi
		jl     jump_423f0
		cmp    GraphicsWindowHeight,%edi
		jge    jump_423f0
		cmp    %eax,%ebx
		je     jump_423f0
		add    GraphicsWindowX,%eax
		add    GraphicsWindowX,%ebx
		add    GraphicsWindowY,%edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_423dc
		imul   $0x50,%edi,%edi
		mov    %eax,%esi
		shr    $0x3,%esi
		add    %edi,%esi
		add    UScreen,%esi
		mov    %eax,%edx
		and    $0xfff8,%eax
		mov    %ebx,%edi
		and    $0xfff8,%ebx
		cmp    %ebx,%eax
		je     jump_423b8
		add    $0x8,%eax
		sub    %eax,%edi
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		mov    %ax,%bx
		not    %bx
		mov    0x14(%ebp),%edx
		call   func_42b98
		inc    %esi
		mov    0x14(%ebp),%edx
	jump_4223d:
		cmp    $0x10,%edi
		jle    jump_42257
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42b98
		add    $0x2,%esi
		sub    $0x10,%edi
		jmp    jump_4223d
	jump_42257:
		jmp    *jpt_42257(,%edi,4)
jpt_42257:	/* 0x4225e */
		.long   func_422a2
		.long   func_422a7
		.long   func_422b9
		.long   func_422cb
		.long   func_422dd
		.long   func_422ef
		.long   func_42301
		.long   func_42313
		.long   func_42325
		.long   func_42337
		.long   func_42349
		.long   func_4235b
		.long   func_4236d
		.long   func_4237c
		.long   func_4238b
		.long   func_4239a
		.long   func_423a9


/*----------------------------------------------------------------*/
func_422a2:
/*----------------------------------------------------------------*/
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_422a7:
/*----------------------------------------------------------------*/
		mov    $0x80,%ax
		mov    $0xff7f,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_422b9:
/*----------------------------------------------------------------*/
		mov    $0xc0,%ax
		mov    $0xff3f,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_422cb:
/*----------------------------------------------------------------*/
		mov    $0xe0,%ax
		mov    $0xff1f,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_422dd:
/*----------------------------------------------------------------*/
		mov    $0xf0,%ax
		mov    $0xff0f,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_422ef:
/*----------------------------------------------------------------*/
		mov    $0xf8,%ax
		mov    $0xff07,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_42301:
/*----------------------------------------------------------------*/
		mov    $0xfc,%ax
		mov    $0xff03,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_42313:
/*----------------------------------------------------------------*/
		mov    $0xfe,%ax
		mov    $0xff01,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_42325:
/*----------------------------------------------------------------*/
		mov    $0xff,%ax
		mov    $0xff00,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_42337:
/*----------------------------------------------------------------*/
		mov    $0x80ff,%ax
		mov    $0x7f00,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_42349:
/*----------------------------------------------------------------*/
		mov    $0xc0ff,%ax
		mov    $0x3f00,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_4235b:
/*----------------------------------------------------------------*/
		mov    $0xe0ff,%ax
		mov    $0x1f00,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_4236d:
/*----------------------------------------------------------------*/
		mov    $0xf0ff,%ax
		mov    $0xf00,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_4237c:
/*----------------------------------------------------------------*/
		mov    $0xf8ff,%ax
		mov    $0x700,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_4238b:
/*----------------------------------------------------------------*/
		mov    $0xfcff,%ax
		mov    $0x300,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_4239a:
/*----------------------------------------------------------------*/
		mov    $0xfeff,%ax
		mov    $0x100,%bx
		call   func_42b98
		jmp    jump_423f0


/*----------------------------------------------------------------*/
func_423a9:
/*----------------------------------------------------------------*/
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42b98
		jmp    jump_423f0
	jump_423b8:
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		and    $0x7,%edi
		and    data_42ae6(%edi),%al
		mov    %ax,%bx
		not    %bx
		mov    0x14(%ebp),%edx
		call   func_42b98
		jmp    jump_423f0
	jump_423dc:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_423e7
		jmp    jump_423f0
	jump_423e7:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_423f0
	jump_423f0:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
rectangle:	/* 0x423f8 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffff8,%esp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		jne    jump_42416
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4243a
	jump_42416:
		mov    0x8(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0x8(%ebp)
		mov    0xc(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0xc(%ebp)
		mov    0x10(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0x10(%ebp)
		mov    0x14(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0x14(%ebp)
	jump_4243a:
		cmpl   $0x0,0x10(%ebp)
		je     jump_42763
		jg     jump_42451
		mov    0x10(%ebp),%eax
		neg    %eax
		mov    %eax,0x10(%ebp)
		sub    %eax,0x8(%ebp)
	jump_42451:
		cmpl   $0x0,0x14(%ebp)
		je     jump_42763
		jg     jump_42468
		mov    0x14(%ebp),%eax
		neg    %eax
		mov    %eax,0x14(%ebp)
		sub    %eax,0xc(%ebp)
	jump_42468:
		mov    0x8(%ebp),%eax
		mov    0x10(%ebp),%ebx
		add    %eax,%ebx
		mov    0xc(%ebp),%edi
		mov    0x14(%ebp),%edx
		add    %edi,%edx
		cmp    GraphicsWindowWidth,%eax
		jge    jump_42763
		cmp    $0x0,%ebx
		jl     jump_42763
		cmp    $0x0,%eax
		jge    jump_42497
		mov    $0x0,%eax
	jump_42497:
		cmp    GraphicsWindowWidth,%ebx
		jl     jump_424a5
		mov    GraphicsWindowWidth,%ebx
	jump_424a5:
		cmp    $0x0,%edx
		jl     jump_42763
		cmp    $0x0,%edi
		jge    jump_424b8
		mov    $0x0,%edi
	jump_424b8:
		cmp    GraphicsWindowHeight,%edi
		jge    jump_42763
		cmp    GraphicsWindowHeight,%edx
		jl     jump_424d2
		mov    GraphicsWindowHeight,%edx
	jump_424d2:
		add    GraphicsWindowX,%eax
		add    GraphicsWindowX,%ebx
		add    GraphicsWindowY,%edi
		add    GraphicsWindowY,%edx
		sub    %edi,%edx
		mov    %edx,-0x4(%ebp)
		cmp    %ebx,%eax
		je     jump_42763
		cmp    $0x0,%edx
		jle    jump_42763
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_42711
		imul   $0x50,%edi,%edi
		mov    %eax,%esi
		shr    $0x3,%esi
		add    %edi,%esi
		add    EXPORT_SYMBOL(WScreen),%esi
		mov    %eax,%edx
		and    $0xfff8,%eax
		mov    %ebx,%edi
		and    $0xfff8,%ebx
		cmp    %ebx,%eax
		je     jump_426ea
		add    $0x8,%eax
		sub    %eax,%edi
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		mov    %ax,%bx
		not    %bx
		mov    0x18(%ebp),%edx
		mov    -0x4(%ebp),%ecx
		push   %esi
		call   func_42d70
		pop    %esi
		inc    %esi
		mov    0x18(%ebp),%edx
	jump_4255b:
		cmp    $0x10,%edi
		jle    jump_4257a
		mov    -0x4(%ebp),%ecx
		push   %esi
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42d70
		pop    %esi
		add    $0x2,%esi
		sub    $0x10,%edi
		jmp    jump_4255b
	jump_4257a:
		mov    -0x4(%ebp),%ecx
		jmp    *vtable_42584(,%edi,4)

vtable_42584:
		.long   func_425c8
		.long   func_425cd
		.long   func_425df
		.long   func_425f1
		.long   func_42603
		.long   func_42615
		.long   func_42627
		.long   func_42639
		.long   func_4264b
		.long   func_4265d
		.long   func_4266f
		.long   func_42681
		.long   func_42693
		.long   func_426a5
		.long   func_426b7
		.long   func_426c9
		.long   func_426db


/*----------------------------------------------------------------*/
func_425c8:
/*----------------------------------------------------------------*/
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_425cd:
/*----------------------------------------------------------------*/
		mov    $0x80,%ax
		mov    $0xff7f,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_425df:
/*----------------------------------------------------------------*/
		mov    $0xc0,%ax
		mov    $0xff3f,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_425f1:
/*----------------------------------------------------------------*/
		mov    $0xe0,%ax
		mov    $0xff1f,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_42603:
/*----------------------------------------------------------------*/
		mov    $0xf0,%ax
		mov    $0xff0f,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_42615:
/*----------------------------------------------------------------*/
		mov    $0xf8,%ax
		mov    $0xff07,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_42627:
/*----------------------------------------------------------------*/
		mov    $0xfc,%ax
		mov    $0xff03,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_42639:
/*----------------------------------------------------------------*/
		mov    $0xfe,%ax
		mov    $0xff01,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_4264b:
/*----------------------------------------------------------------*/
		mov    $0xff,%ax
		mov    $0xff00,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_4265d:
/*----------------------------------------------------------------*/
		mov    $0x80ff,%ax
		mov    $0x7f00,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_4266f:
/*----------------------------------------------------------------*/
		mov    $0xc0ff,%ax
		mov    $0x3f00,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_42681:
/*----------------------------------------------------------------*/
		mov    $0xe0ff,%ax
		mov    $0x1f00,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_42693:
/*----------------------------------------------------------------*/
		mov    $0xf0ff,%ax
		mov    $0xf00,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_426a5:
/*----------------------------------------------------------------*/
		mov    $0xf8ff,%ax
		mov    $0x700,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_426b7:
/*----------------------------------------------------------------*/
		mov    $0xfcff,%ax
		mov    $0x300,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_426c9:
/*----------------------------------------------------------------*/
		mov    $0xfeff,%ax
		mov    $0x100,%bx
		call   func_42d70
		jmp    jump_42763


/*----------------------------------------------------------------*/
func_426db:
/*----------------------------------------------------------------*/
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42d70
		jmp    jump_42763
	jump_426ea:
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		and    $0x7,%edi
		and    data_42ae6(%edi),%al
		mov    %ax,%bx
		not    %bx
		mov    0x18(%ebp),%edx
		mov    -0x4(%ebp),%ecx
		call   func_42d70
		jmp    jump_42763
	jump_42711:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4271c
		jmp    jump_42763
	jump_4271c:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_42763
		mov    0xc(%ebp),%edi
		sar    $1,%edi
		imul   $0x140,%edi,%edi
		mov    0x8(%ebp),%eax
		sar    $1,%eax
		add    %eax,%edi
		add    EXPORT_SYMBOL(WScreen),%edi
		mov    0x14(%ebp),%edx
		sar    $1,%edx
		mov    0x18(%ebp),%eax
	jump_42745:
		mov    0x10(%ebp),%ecx
		sar    $1,%ecx
	jump_4274a:
		mov    %al,(%edi)
		inc    %edi
		loop   jump_4274a
		add    $0x140,%edi
		mov    0x10(%ebp),%ebx
		sar    $1,%ebx
		sub    %ebx,%edi
		dec    %edx
		or     %edx,%edx
		jne    jump_42745
		jmp    jump_42763
	jump_42763:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
prectangle:	/* 0x4276b */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffff8,%esp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		jne    jump_42789
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_427ad
	jump_42789:
		mov    0x8(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0x8(%ebp)
		mov    0xc(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0xc(%ebp)
		mov    0x10(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0x10(%ebp)
		mov    0x14(%ebp),%eax
		and    $0xfffffffe,%eax
		mov    %eax,0x14(%ebp)
	jump_427ad:
		cmpl   $0x0,0x10(%ebp)
		je     jump_42ad6
		jg     jump_427c4
		mov    0x10(%ebp),%eax
		neg    %eax
		mov    %eax,0x10(%ebp)
		sub    %eax,0x8(%ebp)
	jump_427c4:
		cmpl   $0x0,0x14(%ebp)
		je     jump_42ad6
		jg     jump_427db
		mov    0x14(%ebp),%eax
		neg    %eax
		mov    %eax,0x14(%ebp)
		sub    %eax,0xc(%ebp)
	jump_427db:
		mov    0x8(%ebp),%eax
		mov    0x10(%ebp),%ebx
		add    %eax,%ebx
		mov    0xc(%ebp),%edi
		mov    0x14(%ebp),%edx
		add    %edi,%edx
		cmp    GraphicsWindowWidth,%eax
		jge    jump_42ad6
		cmp    $0x0,%ebx
		jl     jump_42ad6
		cmp    $0x0,%eax
		jge    jump_4280a
		mov    $0x0,%eax
	jump_4280a:
		cmp    GraphicsWindowWidth,%ebx
		jl     jump_42818
		mov    GraphicsWindowWidth,%ebx
	jump_42818:
		cmp    $0x0,%edx
		jl     jump_42ad6
		cmp    $0x0,%edi
		jge    jump_4282b
		mov    $0x0,%edi
	jump_4282b:
		cmp    GraphicsWindowHeight,%edi
		jge    jump_42ad6
		cmp    GraphicsWindowHeight,%edx
		jl     jump_42845
		mov    GraphicsWindowHeight,%edx
	jump_42845:
		add    GraphicsWindowX,%eax
		add    GraphicsWindowX,%ebx
		add    GraphicsWindowY,%edi
		add    GraphicsWindowY,%edx
		sub    %edi,%edx
		mov    %edx,-0x4(%ebp)
		cmp    %ebx,%eax
		je     jump_42ad6
		cmp    $0x0,%edx
		jle    jump_42ad6
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_42a84
		imul   $0x50,%edi,%edi
		mov    %eax,%esi
		shr    $0x3,%esi
		add    %edi,%esi
		add    UScreen,%esi
		mov    %eax,%edx
		and    $0xfff8,%eax
		mov    %ebx,%edi
		and    $0xfff8,%ebx
		cmp    %ebx,%eax
		je     jump_42a5d
		add    $0x8,%eax
		sub    %eax,%edi
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		mov    %ax,%bx
		not    %bx
		mov    0x18(%ebp),%edx
		mov    -0x4(%ebp),%ecx
		push   %esi
		call   func_42d70
		pop    %esi
		inc    %esi
		mov    0x18(%ebp),%edx
	jump_428ce:
		cmp    $0x10,%edi
		jle    jump_428ed
		mov    -0x4(%ebp),%ecx
		push   %esi
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42d70
		pop    %esi
		add    $0x2,%esi
		sub    $0x10,%edi
		jmp    jump_428ce
	jump_428ed:
		mov    -0x4(%ebp),%ecx
		jmp    *vtable_428f7(,%edi,4)

vtable_428f7:
		.long   func_4293b
		.long   func_42940
		.long   func_42952
		.long   func_42964
		.long   func_42976
		.long   func_42988
		.long   func_4299a
		.long   func_429ac
		.long   func_429be
		.long   func_429d0
		.long   func_429e2
		.long   func_429f4
		.long   func_42a06
		.long   func_42a18
		.long   func_42a2a
		.long   func_42a3c
		.long   func_42a4e


/*----------------------------------------------------------------*/
func_4293b:
/*----------------------------------------------------------------*/
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42940:
/*----------------------------------------------------------------*/
		mov    $0x80,%ax
		mov    $0xff7f,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42952:
/*----------------------------------------------------------------*/
		mov    $0xc0,%ax
		mov    $0xff3f,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42964:
/*----------------------------------------------------------------*/
		mov    $0xe0,%ax
		mov    $0xff1f,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42976:
/*----------------------------------------------------------------*/
		mov    $0xf0,%ax
		mov    $0xff0f,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42988:
/*----------------------------------------------------------------*/
		mov    $0xf8,%ax
		mov    $0xff07,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_4299a:
/*----------------------------------------------------------------*/
		mov    $0xfc,%ax
		mov    $0xff03,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_429ac:
/*----------------------------------------------------------------*/
		mov    $0xfe,%ax
		mov    $0xff01,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_429be:
/*----------------------------------------------------------------*/
		mov    $0xff,%ax
		mov    $0xff00,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_429d0:
/*----------------------------------------------------------------*/
		mov    $0x80ff,%ax
		mov    $0x7f00,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_429e2:
/*----------------------------------------------------------------*/
		mov    $0xc0ff,%ax
		mov    $0x3f00,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_429f4:
/*----------------------------------------------------------------*/
		mov    $0xe0ff,%ax
		mov    $0x1f00,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42a06:
/*----------------------------------------------------------------*/
		mov    $0xf0ff,%ax
		mov    $0xf00,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42a18:
/*----------------------------------------------------------------*/
		mov    $0xf8ff,%ax
		mov    $0x700,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42a2a:
/*----------------------------------------------------------------*/
		mov    $0xfcff,%ax
		mov    $0x300,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42a3c:
/*----------------------------------------------------------------*/
		mov    $0xfeff,%ax
		mov    $0x100,%bx
		call   func_42d70
		jmp    jump_42ad6


/*----------------------------------------------------------------*/
func_42a4e:
/*----------------------------------------------------------------*/
		mov    $0xffff,%ax
		mov    $0x0,%bx
		call   func_42d70
		jmp    jump_42ad6
	jump_42a5d:
		and    $0x7,%edx
		movzbw data_42ade(%edx),%ax
		and    $0x7,%edi
		and    data_42ae6(%edi),%al
		mov    %ax,%bx
		not    %bx
		mov    0x18(%ebp),%edx
		mov    -0x4(%ebp),%ecx
		call   func_42d70
		jmp    jump_42ad6
	jump_42a84:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_42a8f
		jmp    jump_42ad6
	jump_42a8f:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_42ad6
		mov    0xc(%ebp),%edi
		sar    $1,%edi
		imul   $0x140,%edi,%edi
		mov    0x8(%ebp),%eax
		sar    $1,%eax
		add    %eax,%edi
		add    UScreen,%edi
		mov    0x14(%ebp),%edx
		sar    $1,%edx
		mov    0x18(%ebp),%eax
	jump_42ab8:
		mov    0x10(%ebp),%ecx
		sar    $1,%ecx
	jump_42abd:
		mov    %al,(%edi)
		inc    %edi
		loop   jump_42abd
		add    $0x140,%edi
		mov    0x10(%ebp),%ebx
		sar    $1,%ebx
		sub    %ebx,%edi
		dec    %edx
		or     %edx,%edx
		jne    jump_42ab8
		jmp    jump_42ad6
	jump_42ad6:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret
.data
data_42ade:
		.ascii  "\xff\x7f\x3f\x1f\x0f\x07\x03\x01"
data_42ae6:
		.ascii  "\x00\x80\xc0\xe0\xf0\xf8\xfc\xfe"
.text


/*----------------------------------------------------------------*/
pixel_plot:	/* 0x42aee */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%ecx
		mov    0xc(%ebp),%eax
		cmp    $0x0,%ecx
		jl     jump_42b90
		cmp    $0x0,%eax
		jl     jump_42b90
		cmp    GraphicsWindowWidth,%ecx
		jge    jump_42b90
		cmp    GraphicsWindowHeight,%eax
		jge    jump_42b90
		add    GraphicsWindowX,%ecx
		add    GraphicsWindowY,%eax
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_42b5f
		mov    0x10(%ebp),%edx
		imul   $0x280,%eax,%esi
		add    %ecx,%esi
		shr    $0x3,%esi
		add    EXPORT_SYMBOL(WScreen),%esi
		and    $0x7,%cl
		mov    $0x80,%ax
		shr    %cl,%ax
		mov    %ax,%bx
		not    %bx
		call   func_42b98
		jmp    jump_42b90
	jump_42b5f:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_42b6a
		jmp    jump_42b90
	jump_42b6a:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_42b90
		mov    0x8(%ebp),%eax
		sar    $1,%eax
		mov    0xc(%ebp),%ebx
		sar    $1,%ebx
		imul   $0x140,%ebx,%ebx
		add    %ebx,%eax
		add    EXPORT_SYMBOL(WScreen),%eax
		mov    0x10(%ebp),%ebx
		mov    %bl,(%eax)
	jump_42b90:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_42b98:
/*----------------------------------------------------------------*/
		jmp    *vtable_42b9f(,%edx,4)

vtable_42b9f:
		.long   func_42bdf
		.long   func_42bf8
		.long   func_42c11
		.long   func_42c2a
		.long   func_42c43
		.long   func_42c5c
		.long   func_42c75
		.long   func_42c8e
		.long   func_42ca7
		.long   func_42cc0
		.long   func_42cd9
		.long   func_42cf2
		.long   func_42d0b
		.long   func_42d24
		.long   func_42d3d
		.long   func_42d56


/*----------------------------------------------------------------*/
func_42bdf:
/*----------------------------------------------------------------*/
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42bf8:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42c11:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		and    %bx,(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42c2a:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42c43:
/*----------------------------------------------------------------*/
		or     %ax,0xfa00(%esi)
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42c5c:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0xfa00(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42c75:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		and    %bx,(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42c8e:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42ca7:
/*----------------------------------------------------------------*/
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		ret


/*----------------------------------------------------------------*/
func_42cc0:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		ret


/*----------------------------------------------------------------*/
func_42cd9:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		and    %bx,0xfa00(%esi)
		ret


/*----------------------------------------------------------------*/
func_42cf2:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,0xfa00(%esi)
		ret


/*----------------------------------------------------------------*/
func_42d0b:
/*----------------------------------------------------------------*/
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		ret


/*----------------------------------------------------------------*/
func_42d24:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,0x7d00(%esi)
		ret


/*----------------------------------------------------------------*/
func_42d3d:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		ret


/*----------------------------------------------------------------*/
func_42d56:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		ret


/*----------------------------------------------------------------*/
func_42d70:
/*----------------------------------------------------------------*/
		jmp    *vtable_42d77(,%edx,4)

vtable_42d77:
		.long   func_42db7
		.long   func_42dd5
		.long   func_42df3
		.long   func_42e11
		.long   func_42e2f
		.long   func_42e4d
		.long   func_42e6b
		.long   func_42e89
		.long   func_42ea7
		.long   func_42ec5
		.long   func_42ee3
		.long   func_42f01
		.long   func_42f1f
		.long   func_42f3d
		.long   func_42f5b
		.long   func_42f79


/*----------------------------------------------------------------*/
func_42db7:
/*----------------------------------------------------------------*/
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42db7
		ret


/*----------------------------------------------------------------*/
func_42dd5:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42dd5
		ret


/*----------------------------------------------------------------*/
func_42df3:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		and    %bx,(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42df3
		ret


/*----------------------------------------------------------------*/
func_42e11:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42e11
		ret


/*----------------------------------------------------------------*/
func_42e2f:
/*----------------------------------------------------------------*/
		or     %ax,0xfa00(%esi)
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42e2f
		ret


/*----------------------------------------------------------------*/
func_42e4d:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0xfa00(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42e4d
		ret


/*----------------------------------------------------------------*/
func_42e6b:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		and    %bx,(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42e6b
		ret


/*----------------------------------------------------------------*/
func_42e89:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		and    %bx,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42e89
		ret


/*----------------------------------------------------------------*/
func_42ea7:
/*----------------------------------------------------------------*/
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		add    $0x50,%esi
		loop   func_42ea7
		ret


/*----------------------------------------------------------------*/
func_42ec5:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,0x7d00(%esi)
		and    %bx,0xfa00(%esi)
		add    $0x50,%esi
		loop   func_42ec5
		ret


/*----------------------------------------------------------------*/
func_42ee3:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		and    %bx,0xfa00(%esi)
		add    $0x50,%esi
		loop   func_42ee3
		ret


/*----------------------------------------------------------------*/
func_42f01:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,0xfa00(%esi)
		add    $0x50,%esi
		loop   func_42f01
		ret


/*----------------------------------------------------------------*/
func_42f1f:
/*----------------------------------------------------------------*/
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		and    %bx,0x7d00(%esi)
		add    $0x50,%esi
		loop   func_42f1f
		ret


/*----------------------------------------------------------------*/
func_42f3d:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,0x7d00(%esi)
		add    $0x50,%esi
		loop   func_42f3d
		ret


/*----------------------------------------------------------------*/
func_42f5b:
/*----------------------------------------------------------------*/
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		and    %bx,(%esi)
		add    $0x50,%esi
		loop   func_42f5b
		ret


/*----------------------------------------------------------------*/
func_42f79:
/*----------------------------------------------------------------*/
		or     %ax,(%esi)
		or     %ax,0x7d00(%esi)
		or     %ax,0xfa00(%esi)
		or     %ax,0x17700(%esi)
		add    $0x50,%esi
		loop   func_42f79
		ret


/*----------------------------------------------------------------*/
func_42f98:
/*----------------------------------------------------------------*/
		mov    $data_5e144,%ebx
		mov    (%ebx),%ecx
		not    %ecx
		and    %ecx,(%edi)
		and    %ecx,0x7d00(%edi)
		and    %ecx,0xfa00(%edi)
		and    %ecx,0x17700(%edi)
		not    %ecx
		mov    (%eax),%edx
		and    %ecx,%edx
		or     %edx,(%edi)
		mov    0x7d00(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7d00(%edi)
		mov    0xfa00(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfa00(%edi)
		mov    0x17700(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17700(%edi)
		mov    0x14(%ebx),%ecx
		not    %ecx
		and    %ecx,0x50(%edi)
		and    %ecx,0x7d50(%edi)
		and    %ecx,0xfa50(%edi)
		and    %ecx,0x17750(%edi)
		not    %ecx
		mov    0x50(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x50(%edi)
		mov    0x7d50(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7d50(%edi)
		mov    0xfa50(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfa50(%edi)
		mov    0x17750(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17750(%edi)
		mov    0x28(%ebx),%ecx
		not    %ecx
		and    %ecx,0xa0(%edi)
		and    %ecx,0x7da0(%edi)
		and    %ecx,0xfaa0(%edi)
		and    %ecx,0x177a0(%edi)
		not    %ecx
		mov    0xa0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xa0(%edi)
		mov    0x7da0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7da0(%edi)
		mov    0xfaa0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfaa0(%edi)
		mov    0x177a0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x177a0(%edi)
		mov    0x3c(%ebx),%ecx
		not    %ecx
		and    %ecx,0xf0(%edi)
		and    %ecx,0x7df0(%edi)
		and    %ecx,0xfaf0(%edi)
		and    %ecx,0x177f0(%edi)
		not    %ecx
		mov    0xf0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xf0(%edi)
		mov    0x7df0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7df0(%edi)
		mov    0xfaf0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfaf0(%edi)
		mov    0x177f0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x177f0(%edi)
		mov    0x50(%ebx),%ecx
		not    %ecx
		and    %ecx,0x140(%edi)
		and    %ecx,0x7e40(%edi)
		and    %ecx,0xfb40(%edi)
		and    %ecx,0x17840(%edi)
		not    %ecx
		mov    0x140(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x140(%edi)
		mov    0x7e40(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7e40(%edi)
		mov    0xfb40(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfb40(%edi)
		mov    0x17840(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17840(%edi)
		mov    0x64(%ebx),%ecx
		not    %ecx
		and    %ecx,0x190(%edi)
		and    %ecx,0x7e90(%edi)
		and    %ecx,0xfb90(%edi)
		and    %ecx,0x17890(%edi)
		not    %ecx
		mov    0x190(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x190(%edi)
		mov    0x7e90(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7e90(%edi)
		mov    0xfb90(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfb90(%edi)
		mov    0x17890(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17890(%edi)
		mov    0x78(%ebx),%ecx
		not    %ecx
		and    %ecx,0x1e0(%edi)
		and    %ecx,0x7ee0(%edi)
		and    %ecx,0xfbe0(%edi)
		and    %ecx,0x178e0(%edi)
		not    %ecx
		mov    0x1e0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x1e0(%edi)
		mov    0x7ee0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7ee0(%edi)
		mov    0xfbe0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfbe0(%edi)
		mov    0x178e0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x178e0(%edi)
		mov    0x8c(%ebx),%ecx
		not    %ecx
		and    %ecx,0x230(%edi)
		and    %ecx,0x7f30(%edi)
		and    %ecx,0xfc30(%edi)
		and    %ecx,0x17930(%edi)
		not    %ecx
		mov    0x230(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x230(%edi)
		mov    0x7f30(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7f30(%edi)
		mov    0xfc30(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfc30(%edi)
		mov    0x17930(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17930(%edi)
		mov    0xa0(%ebx),%ecx
		not    %ecx
		and    %ecx,0x280(%edi)
		and    %ecx,0x7f80(%edi)
		and    %ecx,0xfc80(%edi)
		and    %ecx,0x17980(%edi)
		not    %ecx
		mov    0x280(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x280(%edi)
		mov    0x7f80(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7f80(%edi)
		mov    0xfc80(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfc80(%edi)
		mov    0x17980(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17980(%edi)
		mov    0xb4(%ebx),%ecx
		not    %ecx
		and    %ecx,0x2d0(%edi)
		and    %ecx,0x7fd0(%edi)
		and    %ecx,0xfcd0(%edi)
		and    %ecx,0x179d0(%edi)
		not    %ecx
		mov    0x2d0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x2d0(%edi)
		mov    0x7fd0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x7fd0(%edi)
		mov    0xfcd0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfcd0(%edi)
		mov    0x179d0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x179d0(%edi)
		mov    0xc8(%ebx),%ecx
		not    %ecx
		and    %ecx,0x320(%edi)
		and    %ecx,0x8020(%edi)
		and    %ecx,0xfd20(%edi)
		and    %ecx,0x17a20(%edi)
		not    %ecx
		mov    0x320(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x320(%edi)
		mov    0x8020(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x8020(%edi)
		mov    0xfd20(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfd20(%edi)
		mov    0x17a20(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17a20(%edi)
		mov    0xdc(%ebx),%ecx
		not    %ecx
		and    %ecx,0x370(%edi)
		and    %ecx,0x8070(%edi)
		and    %ecx,0xfd70(%edi)
		and    %ecx,0x17a70(%edi)
		not    %ecx
		mov    0x370(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x370(%edi)
		mov    0x8070(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x8070(%edi)
		mov    0xfd70(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfd70(%edi)
		mov    0x17a70(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17a70(%edi)
		mov    0xf0(%ebx),%ecx
		not    %ecx
		and    %ecx,0x3c0(%edi)
		and    %ecx,0x80c0(%edi)
		and    %ecx,0xfdc0(%edi)
		and    %ecx,0x17ac0(%edi)
		not    %ecx
		mov    0x3c0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x3c0(%edi)
		mov    0x80c0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x80c0(%edi)
		mov    0xfdc0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfdc0(%edi)
		mov    0x17ac0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17ac0(%edi)
		mov    0x104(%ebx),%ecx
		not    %ecx
		and    %ecx,0x410(%edi)
		and    %ecx,0x8110(%edi)
		and    %ecx,0xfe10(%edi)
		and    %ecx,0x17b10(%edi)
		not    %ecx
		mov    0x410(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x410(%edi)
		mov    0x8110(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x8110(%edi)
		mov    0xfe10(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfe10(%edi)
		mov    0x17b10(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17b10(%edi)
		mov    0x118(%ebx),%ecx
		not    %ecx
		and    %ecx,0x460(%edi)
		and    %ecx,0x8160(%edi)
		and    %ecx,0xfe60(%edi)
		and    %ecx,0x17b60(%edi)
		not    %ecx
		mov    0x460(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x460(%edi)
		mov    0x8160(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x8160(%edi)
		mov    0xfe60(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfe60(%edi)
		mov    0x17b60(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17b60(%edi)
		mov    0x12c(%ebx),%ecx
		not    %ecx
		and    %ecx,0x4b0(%edi)
		and    %ecx,0x81b0(%edi)
		and    %ecx,0xfeb0(%edi)
		and    %ecx,0x17bb0(%edi)
		not    %ecx
		mov    0x4b0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x4b0(%edi)
		mov    0x81b0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x81b0(%edi)
		mov    0xfeb0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0xfeb0(%edi)
		mov    0x17bb0(%eax),%edx
		and    %ecx,%edx
		or     %edx,0x17bb0(%edi)
		ret


/*----------------------------------------------------------------*/
func_43513:
/*----------------------------------------------------------------*/
		mov    (%eax),%edx
		mov    %edx,(%edi)
		mov    0x7d00(%eax),%edx
		mov    %edx,0x7d00(%edi)
		mov    0xfa00(%eax),%edx
		mov    %edx,0xfa00(%edi)
		mov    0x17700(%eax),%edx
		mov    %edx,0x17700(%edi)
		mov    0x50(%eax),%edx
		mov    %edx,0x50(%edi)
		mov    0x7d50(%eax),%edx
		mov    %edx,0x7d50(%edi)
		mov    0xfa50(%eax),%edx
		mov    %edx,0xfa50(%edi)
		mov    0x17750(%eax),%edx
		mov    %edx,0x17750(%edi)
		mov    0xa0(%eax),%edx
		mov    %edx,0xa0(%edi)
		mov    0x7da0(%eax),%edx
		mov    %edx,0x7da0(%edi)
		mov    0xfaa0(%eax),%edx
		mov    %edx,0xfaa0(%edi)
		mov    0x177a0(%eax),%edx
		mov    %edx,0x177a0(%edi)
		mov    0xf0(%eax),%edx
		mov    %edx,0xf0(%edi)
		mov    0x7df0(%eax),%edx
		mov    %edx,0x7df0(%edi)
		mov    0xfaf0(%eax),%edx
		mov    %edx,0xfaf0(%edi)
		mov    0x177f0(%eax),%edx
		mov    %edx,0x177f0(%edi)
		mov    0x140(%eax),%edx
		mov    %edx,0x140(%edi)
		mov    0x7e40(%eax),%edx
		mov    %edx,0x7e40(%edi)
		mov    0xfb40(%eax),%edx
		mov    %edx,0xfb40(%edi)
		mov    0x17840(%eax),%edx
		mov    %edx,0x17840(%edi)
		mov    0x190(%eax),%edx
		mov    %edx,0x190(%edi)
		mov    0x7e90(%eax),%edx
		mov    %edx,0x7e90(%edi)
		mov    0xfb90(%eax),%edx
		mov    %edx,0xfb90(%edi)
		mov    0x17890(%eax),%edx
		mov    %edx,0x17890(%edi)
		mov    0x1e0(%eax),%edx
		mov    %edx,0x1e0(%edi)
		mov    0x7ee0(%eax),%edx
		mov    %edx,0x7ee0(%edi)
		mov    0xfbe0(%eax),%edx
		mov    %edx,0xfbe0(%edi)
		mov    0x178e0(%eax),%edx
		mov    %edx,0x178e0(%edi)
		mov    0x230(%eax),%edx
		mov    %edx,0x230(%edi)
		mov    0x7f30(%eax),%edx
		mov    %edx,0x7f30(%edi)
		mov    0xfc30(%eax),%edx
		mov    %edx,0xfc30(%edi)
		mov    0x17930(%eax),%edx
		mov    %edx,0x17930(%edi)
		mov    0x280(%eax),%edx
		mov    %edx,0x280(%edi)
		mov    0x7f80(%eax),%edx
		mov    %edx,0x7f80(%edi)
		mov    0xfc80(%eax),%edx
		mov    %edx,0xfc80(%edi)
		mov    0x17980(%eax),%edx
		mov    %edx,0x17980(%edi)
		mov    0x2d0(%eax),%edx
		mov    %edx,0x2d0(%edi)
		mov    0x7fd0(%eax),%edx
		mov    %edx,0x7fd0(%edi)
		mov    0xfcd0(%eax),%edx
		mov    %edx,0xfcd0(%edi)
		mov    0x179d0(%eax),%edx
		mov    %edx,0x179d0(%edi)
		mov    0x320(%eax),%edx
		mov    %edx,0x320(%edi)
		mov    0x8020(%eax),%edx
		mov    %edx,0x8020(%edi)
		mov    0xfd20(%eax),%edx
		mov    %edx,0xfd20(%edi)
		mov    0x17a20(%eax),%edx
		mov    %edx,0x17a20(%edi)
		mov    0x370(%eax),%edx
		mov    %edx,0x370(%edi)
		mov    0x8070(%eax),%edx
		mov    %edx,0x8070(%edi)
		mov    0xfd70(%eax),%edx
		mov    %edx,0xfd70(%edi)
		mov    0x17a70(%eax),%edx
		mov    %edx,0x17a70(%edi)
		mov    0x3c0(%eax),%edx
		mov    %edx,0x3c0(%edi)
		mov    0x80c0(%eax),%edx
		mov    %edx,0x80c0(%edi)
		mov    0xfdc0(%eax),%edx
		mov    %edx,0xfdc0(%edi)
		mov    0x17ac0(%eax),%edx
		mov    %edx,0x17ac0(%edi)
		mov    0x410(%eax),%edx
		mov    %edx,0x410(%edi)
		mov    0x8110(%eax),%edx
		mov    %edx,0x8110(%edi)
		mov    0xfe10(%eax),%edx
		mov    %edx,0xfe10(%edi)
		mov    0x17b10(%eax),%edx
		mov    %edx,0x17b10(%edi)
		mov    0x460(%eax),%edx
		mov    %edx,0x460(%edi)
		mov    0x8160(%eax),%edx
		mov    %edx,0x8160(%edi)
		mov    0xfe60(%eax),%edx
		mov    %edx,0xfe60(%edi)
		mov    0x17b60(%eax),%edx
		mov    %edx,0x17b60(%edi)
		mov    0x4b0(%eax),%edx
		mov    %edx,0x4b0(%edi)
		mov    0x81b0(%eax),%edx
		mov    %edx,0x81b0(%edi)
		mov    0xfeb0(%eax),%edx
		mov    %edx,0xfeb0(%edi)
		mov    0x17bb0(%eax),%edx
		mov    %edx,0x17bb0(%edi)
		ret


/*----------------------------------------------------------------*/
__cover_sprite:	/* 0x43806 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffff4,%esp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_43917
		mov    0x1c(%ebp),%ax
		sar    $0x5,%ax
		mov    0x24(%ebp),%cx
		sar    $0x5,%cx
		mov    0x20(%ebp),%bx
		sar    $0x4,%bx
		mov    0x28(%ebp),%dx
		sar    $0x4,%dx
		sub    %ax,%cx
		inc    %cx
		mov    %cx,-0xa(%ebp)
		sub    %bx,%dx
		inc    %dx
		mov    %dx,-0xc(%ebp)
		movswl %ax,%eax
		movswl %bx,%ebx
		shl    $0x2,%eax
		imul   $0x500,%ebx,%ebx
		mov    %eax,-0x4(%ebp)
		mov    %ebx,-0x8(%ebp)
		mov    -0xc(%ebp),%bx
		movzwl %bx,%edi
		inc    %edi
		mov    0x18(%ebp),%ax
		shl    $0x7,%bx
		add    %ax,%bx
		sub    $0x100,%bx
		movzbw 0x8(%ebp),%cx
		movzbw 0x10(%ebp),%dx
		add    %dx,%cx
		cmp    $0x100,%cx
		jl     jump_43893
		dec    %edi
	jump_43893:
		sub    %bx,0x8(%ebp)
		sub    %bx,0x10(%ebp)
		add    $0x7f,%ax
		sar    $0x7,%ax
		shl    $0x4,%ax
		add    %ax,%di
		mov    0xc(%ebp),%ax
		mov    0x14(%ebp),%bx
		add    %ax,0x8(%ebp)
		add    %bx,0x10(%ebp)
	jump_438ba:
		movzbw data_5a7dc(%edi),%ax
		dec    %edi
		cmpl   $0x0,-0x8(%ebp)
		jl     jump_438fc
		cmpl   $0x7d00,-0x8(%ebp)
		jge    jump_4392b
		push   %edi
		push   -0x8(%ebp)
		push   -0x4(%ebp)
		sub    $0x2,%esp
		push   %ax
		sub    $0x2,%esp
		pushw  -0xa(%ebp)
		sub    $0x2,%esp
		pushw  0x10(%ebp)
		sub    $0x2,%esp
		pushw  0x8(%ebp)
		call   func_43933
		add    $0x18,%esp
		pop    %edi
	jump_438fc:
		addw   $0x80,0x8(%ebp)
		addw   $0x80,0x10(%ebp)
		addl   $0x500,-0x8(%ebp)
		decw   -0xc(%ebp)
		jg     jump_438ba
		jmp    jump_4392b
	jump_43917:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_43922
		jmp    jump_4392b
	jump_43922:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4392b
	jump_4392b:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_43933:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    %ax,%cx
		mov    %bx,%dx
		sar    $0x8,%ax
		sar    $0x8,%bx
		shl    $0x7,%bx
		mov    %ax,%si
		add    %bx,%si
		and    $0xffff,%esi
		shl    $0x2,%esi
		and    $0xff,%cx
		and    $0xff,%dx
		mov    %dx,%bx
		add    %cx,%bx
		mov    $0x0,%eax
		cmp    $0x100,%bx
		jl     jump_4397e
		add    $0x8,%eax
	jump_4397e:
		cmp    %dx,%cx
		jl     jump_43986
		add    $0x4,%eax
	jump_43986:
		add    data_55358,%esi
		jmp    *jpt_4398C(%eax)
jpt_4398C:	/* 0x43992 */
		.long   func_439b2
		.long   jump_43a84
		.long   func_439a2
		.long   func_439ad


/*----------------------------------------------------------------*/
func_439a2:
/*----------------------------------------------------------------*/
		add    $0x200,%esi
		jmp    jump_43a84


/*----------------------------------------------------------------*/
func_439ad:
/*----------------------------------------------------------------*/
		add    $0x4,%esi
		jmp    func_439b2


/*----------------------------------------------------------------*/
func_439b2:
/*----------------------------------------------------------------*/
		cmpl   $0x40,0x18(%ebp)
		jge    jump_43b5c
		cmpl   $0x0,0x18(%ebp)
		jl     jump_43a76
		movzwl 0x14(%ebp),%edx
		call   func_442fc
		cmp    $0x0,%al
		je     jump_43a76
		cmp    $0x1,%ah
		je     jump_43a2a
		mov    DestinationX,%eax
		shl    $0x2,%eax
		add    0x18(%ebp),%eax
		cmp    $0x40,%eax
		jl     jump_439ef
		sub    $0x40,%eax
	jump_439ef:
		mov    DestinationY,%ebx
		imul   $0x500,%ebx,%ebx
		add    0x1c(%ebp),%ebx
		cmp    $0x7d00,%ebx
		jl     jump_43a0c
		sub    $0x7d00,%ebx
	jump_43a0c:
		add    BScreen,%eax
		add    %ebx,%eax
		mov    0x18(%ebp),%edi
		add    0x1c(%ebp),%edi
		add    EXPORT_SYMBOL(WScreen),%edi
		add    $0x10,%edi
		call   func_42f98
		jmp    jump_43a76
	jump_43a2a:
		mov    DestinationX,%eax
		shl    $0x2,%eax
		add    0x18(%ebp),%eax
		cmp    $0x40,%eax
		jl     jump_43a3d
		sub    $0x40,%eax
	jump_43a3d:
		mov    DestinationY,%ebx
		imul   $0x500,%ebx,%ebx
		add    0x1c(%ebp),%ebx
		cmp    $0x7d00,%ebx
		jl     jump_43a5a
		sub    $0x7d00,%ebx
	jump_43a5a:
		add    BScreen,%eax
		add    %ebx,%eax
		mov    0x18(%ebp),%edi
		add    0x1c(%ebp),%edi
		add    EXPORT_SYMBOL(WScreen),%edi
		add    $0x10,%edi
		call   func_43513
	jump_43a76:
		addl   $0x4,0x18(%ebp)
		decw   0x10(%ebp)
		je     jump_43b5c
	jump_43a84:
		cmpl   $0x40,0x18(%ebp)
		jge    jump_43b5c
		cmpl   $0x0,0x18(%ebp)
		jl     jump_43b48
		movzwl 0x14(%ebp),%edx
		call   func_45136
		cmp    $0x0,%al
		je     jump_43b48
		cmp    $0x1,%ah
		je     jump_43afc
		mov    DestinationX,%eax
		shl    $0x2,%eax
		add    0x18(%ebp),%eax
		cmp    $0x40,%eax
		jl     jump_43ac1
		sub    $0x40,%eax
	jump_43ac1:
		mov    DestinationY,%ebx
		imul   $0x500,%ebx,%ebx
		add    0x1c(%ebp),%ebx
		cmp    $0x7d00,%ebx
		jl     jump_43ade
		sub    $0x7d00,%ebx
	jump_43ade:
		add    BScreen,%eax
		add    %ebx,%eax
		mov    0x18(%ebp),%edi
		add    0x1c(%ebp),%edi
		add    EXPORT_SYMBOL(WScreen),%edi
		add    $0x10,%edi
		call   func_42f98
		jmp    jump_43b48
	jump_43afc:
		mov    DestinationX,%eax
		shl    $0x2,%eax
		add    0x18(%ebp),%eax
		cmp    $0x40,%eax
		jl     jump_43b0f
		sub    $0x40,%eax
	jump_43b0f:
		mov    DestinationY,%ebx
		imul   $0x500,%ebx,%ebx
		add    0x1c(%ebp),%ebx
		cmp    $0x7d00,%ebx
		jl     jump_43b2c
		sub    $0x7d00,%ebx
	jump_43b2c:
		add    BScreen,%eax
		add    %ebx,%eax
		mov    0x18(%ebp),%edi
		add    0x1c(%ebp),%edi
		add    EXPORT_SYMBOL(WScreen),%edi
		add    $0x10,%edi
		call   func_43513
	jump_43b48:
		addl   $0x4,0x18(%ebp)
		add    $0xfffffe04,%esi
		decw   0x10(%ebp)
		jne    func_439b2
	jump_43b5c:
		leave
		ret


/*----------------------------------------------------------------*/
func_43b5e:
/*----------------------------------------------------------------*/
		mov    $0x0,%eax
		mov    %eax,(%edi)
		mov    %eax,0x7d00(%edi)
		mov    %eax,0xfa00(%edi)
		mov    %eax,0x17700(%edi)
		mov    %eax,0x50(%edi)
		mov    %eax,0x7d50(%edi)
		mov    %eax,0xfa50(%edi)
		mov    %eax,0x17750(%edi)
		mov    %eax,0xa0(%edi)
		mov    %eax,0x7da0(%edi)
		mov    %eax,0xfaa0(%edi)
		mov    %eax,0x177a0(%edi)
		mov    %eax,0xf0(%edi)
		mov    %eax,0x7df0(%edi)
		mov    %eax,0xfaf0(%edi)
		mov    %eax,0x177f0(%edi)
		mov    %eax,0x140(%edi)
		mov    %eax,0x7e40(%edi)
		mov    %eax,0xfb40(%edi)
		mov    %eax,0x17840(%edi)
		mov    %eax,0x190(%edi)
		mov    %eax,0x7e90(%edi)
		mov    %eax,0xfb90(%edi)
		mov    %eax,0x17890(%edi)
		mov    %eax,0x1e0(%edi)
		mov    %eax,0x7ee0(%edi)
		mov    %eax,0xfbe0(%edi)
		mov    %eax,0x178e0(%edi)
		mov    %eax,0x230(%edi)
		mov    %eax,0x7f30(%edi)
		mov    %eax,0xfc30(%edi)
		mov    %eax,0x17930(%edi)
		mov    %eax,0x280(%edi)
		mov    %eax,0x7f80(%edi)
		mov    %eax,0xfc80(%edi)
		mov    %eax,0x17980(%edi)
		mov    %eax,0x2d0(%edi)
		mov    %eax,0x7fd0(%edi)
		mov    %eax,0xfcd0(%edi)
		mov    %eax,0x179d0(%edi)
		mov    %eax,0x320(%edi)
		mov    %eax,0x8020(%edi)
		mov    %eax,0xfd20(%edi)
		mov    %eax,0x17a20(%edi)
		mov    %eax,0x370(%edi)
		mov    %eax,0x8070(%edi)
		mov    %eax,0xfd70(%edi)
		mov    %eax,0x17a70(%edi)
		mov    %eax,0x3c0(%edi)
		mov    %eax,0x80c0(%edi)
		mov    %eax,0xfdc0(%edi)
		mov    %eax,0x17ac0(%edi)
		mov    %eax,0x410(%edi)
		mov    %eax,0x8110(%edi)
		mov    %eax,0xfe10(%edi)
		mov    %eax,0x17b10(%edi)
		mov    %eax,0x460(%edi)
		mov    %eax,0x8160(%edi)
		mov    %eax,0xfe60(%edi)
		mov    %eax,0x17b60(%edi)
		mov    %eax,0x4b0(%edi)
		mov    %eax,0x81b0(%edi)
		mov    %eax,0xfeb0(%edi)
		mov    %eax,0x17bb0(%edi)
	jump_43cdc:
		cmp    $0x0,%ecx
		je     jump_44163
		dec    %ecx
		mov    data_48ad0(,%ecx,4),%ebx
		mov    (%ebx),%eax
		and    %eax,(%edi)
		and    %eax,0x7d00(%edi)
		and    %eax,0xfa00(%edi)
		and    %eax,0x17700(%edi)
		mov    0x4(%ebx),%eax
		or     %eax,(%edi)
		mov    0x8(%ebx),%eax
		or     %eax,0x7d00(%edi)
		mov    0xc(%ebx),%eax
		or     %eax,0xfa00(%edi)
		mov    0x10(%ebx),%eax
		or     %eax,0x17700(%edi)
		mov    0x14(%ebx),%eax
		and    %eax,0x50(%edi)
		and    %eax,0x7d50(%edi)
		and    %eax,0xfa50(%edi)
		and    %eax,0x17750(%edi)
		mov    0x18(%ebx),%eax
		or     %eax,0x50(%edi)
		mov    0x1c(%ebx),%eax
		or     %eax,0x7d50(%edi)
		mov    0x20(%ebx),%eax
		or     %eax,0xfa50(%edi)
		mov    0x24(%ebx),%eax
		or     %eax,0x17750(%edi)
		mov    0x28(%ebx),%eax
		and    %eax,0xa0(%edi)
		and    %eax,0x7da0(%edi)
		and    %eax,0xfaa0(%edi)
		and    %eax,0x177a0(%edi)
		mov    0x2c(%ebx),%eax
		or     %eax,0xa0(%edi)
		mov    0x30(%ebx),%eax
		or     %eax,0x7da0(%edi)
		mov    0x34(%ebx),%eax
		or     %eax,0xfaa0(%edi)
		mov    0x38(%ebx),%eax
		or     %eax,0x177a0(%edi)
		mov    0x3c(%ebx),%eax
		and    %eax,0xf0(%edi)
		and    %eax,0x7df0(%edi)
		and    %eax,0xfaf0(%edi)
		and    %eax,0x177f0(%edi)
		mov    0x40(%ebx),%eax
		or     %eax,0xf0(%edi)
		mov    0x44(%ebx),%eax
		or     %eax,0x7df0(%edi)
		mov    0x48(%ebx),%eax
		or     %eax,0xfaf0(%edi)
		mov    0x4c(%ebx),%eax
		or     %eax,0x177f0(%edi)
		mov    0x50(%ebx),%eax
		and    %eax,0x140(%edi)
		and    %eax,0x7e40(%edi)
		and    %eax,0xfb40(%edi)
		and    %eax,0x17840(%edi)
		mov    0x54(%ebx),%eax
		or     %eax,0x140(%edi)
		mov    0x58(%ebx),%eax
		or     %eax,0x7e40(%edi)
		mov    0x5c(%ebx),%eax
		or     %eax,0xfb40(%edi)
		mov    0x60(%ebx),%eax
		or     %eax,0x17840(%edi)
		mov    0x64(%ebx),%eax
		and    %eax,0x190(%edi)
		and    %eax,0x7e90(%edi)
		and    %eax,0xfb90(%edi)
		and    %eax,0x17890(%edi)
		mov    0x68(%ebx),%eax
		or     %eax,0x190(%edi)
		mov    0x6c(%ebx),%eax
		or     %eax,0x7e90(%edi)
		mov    0x70(%ebx),%eax
		or     %eax,0xfb90(%edi)
		mov    0x74(%ebx),%eax
		or     %eax,0x17890(%edi)
		mov    0x78(%ebx),%eax
		and    %eax,0x1e0(%edi)
		and    %eax,0x7ee0(%edi)
		and    %eax,0xfbe0(%edi)
		and    %eax,0x178e0(%edi)
		mov    0x7c(%ebx),%eax
		or     %eax,0x1e0(%edi)
		mov    0x80(%ebx),%eax
		or     %eax,0x7ee0(%edi)
		mov    0x84(%ebx),%eax
		or     %eax,0xfbe0(%edi)
		mov    0x88(%ebx),%eax
		or     %eax,0x178e0(%edi)
		mov    0x8c(%ebx),%eax
		and    %eax,0x230(%edi)
		and    %eax,0x7f30(%edi)
		and    %eax,0xfc30(%edi)
		and    %eax,0x17930(%edi)
		mov    0x90(%ebx),%eax
		or     %eax,0x230(%edi)
		mov    0x94(%ebx),%eax
		or     %eax,0x7f30(%edi)
		mov    0x98(%ebx),%eax
		or     %eax,0xfc30(%edi)
		mov    0x9c(%ebx),%eax
		or     %eax,0x17930(%edi)
		mov    0xa0(%ebx),%eax
		and    %eax,0x280(%edi)
		and    %eax,0x7f80(%edi)
		and    %eax,0xfc80(%edi)
		and    %eax,0x17980(%edi)
		mov    0xa4(%ebx),%eax
		or     %eax,0x280(%edi)
		mov    0xa8(%ebx),%eax
		or     %eax,0x7f80(%edi)
		mov    0xac(%ebx),%eax
		or     %eax,0xfc80(%edi)
		mov    0xb0(%ebx),%eax
		or     %eax,0x17980(%edi)
		mov    0xb4(%ebx),%eax
		and    %eax,0x2d0(%edi)
		and    %eax,0x7fd0(%edi)
		and    %eax,0xfcd0(%edi)
		and    %eax,0x179d0(%edi)
		mov    0xb8(%ebx),%eax
		or     %eax,0x2d0(%edi)
		mov    0xbc(%ebx),%eax
		or     %eax,0x7fd0(%edi)
		mov    0xc0(%ebx),%eax
		or     %eax,0xfcd0(%edi)
		mov    0xc4(%ebx),%eax
		or     %eax,0x179d0(%edi)
		mov    0xc8(%ebx),%eax
		and    %eax,0x320(%edi)
		and    %eax,0x8020(%edi)
		and    %eax,0xfd20(%edi)
		and    %eax,0x17a20(%edi)
		mov    0xcc(%ebx),%eax
		or     %eax,0x320(%edi)
		mov    0xd0(%ebx),%eax
		or     %eax,0x8020(%edi)
		mov    0xd4(%ebx),%eax
		or     %eax,0xfd20(%edi)
		mov    0xd8(%ebx),%eax
		or     %eax,0x17a20(%edi)
		mov    0xdc(%ebx),%eax
		and    %eax,0x370(%edi)
		and    %eax,0x8070(%edi)
		and    %eax,0xfd70(%edi)
		and    %eax,0x17a70(%edi)
		mov    0xe0(%ebx),%eax
		or     %eax,0x370(%edi)
		mov    0xe4(%ebx),%eax
		or     %eax,0x8070(%edi)
		mov    0xe8(%ebx),%eax
		or     %eax,0xfd70(%edi)
		mov    0xec(%ebx),%eax
		or     %eax,0x17a70(%edi)
		mov    0xf0(%ebx),%eax
		and    %eax,0x3c0(%edi)
		and    %eax,0x80c0(%edi)
		and    %eax,0xfdc0(%edi)
		and    %eax,0x17ac0(%edi)
		mov    0xf4(%ebx),%eax
		or     %eax,0x3c0(%edi)
		mov    0xf8(%ebx),%eax
		or     %eax,0x80c0(%edi)
		mov    0xfc(%ebx),%eax
		or     %eax,0xfdc0(%edi)
		mov    0x100(%ebx),%eax
		or     %eax,0x17ac0(%edi)
		mov    0x104(%ebx),%eax
		and    %eax,0x410(%edi)
		and    %eax,0x8110(%edi)
		and    %eax,0xfe10(%edi)
		and    %eax,0x17b10(%edi)
		mov    0x108(%ebx),%eax
		or     %eax,0x410(%edi)
		mov    0x10c(%ebx),%eax
		or     %eax,0x8110(%edi)
		mov    0x110(%ebx),%eax
		or     %eax,0xfe10(%edi)
		mov    0x114(%ebx),%eax
		or     %eax,0x17b10(%edi)
		mov    0x118(%ebx),%eax
		and    %eax,0x460(%edi)
		and    %eax,0x8160(%edi)
		and    %eax,0xfe60(%edi)
		and    %eax,0x17b60(%edi)
		mov    0x11c(%ebx),%eax
		or     %eax,0x460(%edi)
		mov    0x120(%ebx),%eax
		or     %eax,0x8160(%edi)
		mov    0x124(%ebx),%eax
		or     %eax,0xfe60(%edi)
		mov    0x128(%ebx),%eax
		or     %eax,0x17b60(%edi)
		mov    0x12c(%ebx),%eax
		and    %eax,0x4b0(%edi)
		and    %eax,0x81b0(%edi)
		and    %eax,0xfeb0(%edi)
		and    %eax,0x17bb0(%edi)
		mov    0x130(%ebx),%eax
		or     %eax,0x4b0(%edi)
		mov    0x134(%ebx),%eax
		or     %eax,0x81b0(%edi)
		mov    0x138(%ebx),%eax
		or     %eax,0xfeb0(%edi)
		mov    0x13c(%ebx),%eax
		or     %eax,0x17bb0(%edi)
		jmp    jump_43cdc
	jump_44163:
		ret


/*----------------------------------------------------------------*/
func_44164:
/*----------------------------------------------------------------*/
		mov    $data_5e144,%edi
		mov    $0x10,%cx
		mov    (%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_4417c
		mov    (%ebx),%eax
		not    %eax
		or     %eax,(%edi)
		inc    %cx
	jump_4417c:
		dec    %cx
		mov    0x14(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_44190
		mov    0x14(%ebx),%eax
		not    %eax
		or     %eax,0x14(%edi)
		inc    %cx
	jump_44190:
		dec    %cx
		mov    0x28(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_441a4
		mov    0x28(%ebx),%eax
		not    %eax
		or     %eax,0x28(%edi)
		inc    %cx
	jump_441a4:
		dec    %cx
		mov    0x3c(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_441b8
		mov    0x3c(%ebx),%eax
		not    %eax
		or     %eax,0x3c(%edi)
		inc    %cx
	jump_441b8:
		dec    %cx
		mov    0x50(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_441cc
		mov    0x50(%ebx),%eax
		not    %eax
		or     %eax,0x50(%edi)
		inc    %cx
	jump_441cc:
		dec    %cx
		mov    0x64(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_441e0
		mov    0x64(%ebx),%eax
		not    %eax
		or     %eax,0x64(%edi)
		inc    %cx
	jump_441e0:
		dec    %cx
		mov    0x78(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_441f4
		mov    0x78(%ebx),%eax
		not    %eax
		or     %eax,0x78(%edi)
		inc    %cx
	jump_441f4:
		dec    %cx
		mov    0x8c(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_44211
		mov    0x8c(%ebx),%eax
		not    %eax
		or     %eax,0x8c(%edi)
		inc    %cx
	jump_44211:
		dec    %cx
		mov    0xa0(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_4422e
		mov    0xa0(%ebx),%eax
		not    %eax
		or     %eax,0xa0(%edi)
		inc    %cx
	jump_4422e:
		dec    %cx
		mov    0xb4(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_4424b
		mov    0xb4(%ebx),%eax
		not    %eax
		or     %eax,0xb4(%edi)
		inc    %cx
	jump_4424b:
		dec    %cx
		mov    0xc8(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_44268
		mov    0xc8(%ebx),%eax
		not    %eax
		or     %eax,0xc8(%edi)
		inc    %cx
	jump_44268:
		dec    %cx
		mov    0xdc(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_44285
		mov    0xdc(%ebx),%eax
		not    %eax
		or     %eax,0xdc(%edi)
		inc    %cx
	jump_44285:
		dec    %cx
		mov    0xf0(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_442a2
		mov    0xf0(%ebx),%eax
		not    %eax
		or     %eax,0xf0(%edi)
		inc    %cx
	jump_442a2:
		dec    %cx
		mov    0x104(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_442bf
		mov    0x104(%ebx),%eax
		not    %eax
		or     %eax,0x104(%edi)
		inc    %cx
	jump_442bf:
		dec    %cx
		mov    0x118(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_442dc
		mov    0x118(%ebx),%eax
		not    %eax
		or     %eax,0x118(%edi)
		inc    %cx
	jump_442dc:
		dec    %cx
		mov    0x12c(%edi),%eax
		xor    $0xffffffff,%eax
		je     jump_442f9
		mov    0x12c(%ebx),%eax
		not    %eax
		or     %eax,0x12c(%edi)
		inc    %cx
	jump_442f9:
		dec    %cx
		ret


/*----------------------------------------------------------------*/
func_442fc:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffffc,%esp
		movb   $0x0,-0x1(%ebp)
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xc14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4436c
		cmp    $0x0,%ecx
		jl     jump_4436c
		mov    0xc14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4436c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4436c
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44353
		call   func_48a40
	jump_44353:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_4436c:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_443d2
		cmp    $0x0,%ecx
		jl     jump_443d2
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_443d2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_443d2
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_443b9
		call   func_48a40
	jump_443b9:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_443d2:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xa10,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44438
		cmp    $0x0,%ecx
		jl     jump_44438
		mov    0xa10(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44438
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44438
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4441f
		call   func_48a40
	jump_4441f:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44438:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4449d
		cmp    $0x0,%ecx
		jl     jump_4449d
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4449d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4449d
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44484
		call   func_48a40
	jump_44484:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_4449d:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xa10,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44503
		cmp    $0x0,%ecx
		jl     jump_44503
		mov    0xa10(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44503
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44503
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_444ea
		call   func_48a40
	jump_444ea:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44503:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44569
		cmp    $0x0,%ecx
		jl     jump_44569
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44569
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44569
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44550
		call   func_48a40
	jump_44550:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44569:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xa10,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_445cf
		cmp    $0x0,%ecx
		jl     jump_445cf
		mov    0xa10(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_445cf
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_445cf
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_445b6
		call   func_48a40
	jump_445b6:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_445cf:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44635
		cmp    $0x0,%ecx
		jl     jump_44635
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44635
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44635
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4461c
		call   func_48a40
	jump_4461c:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44635:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x80c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4469b
		cmp    $0x0,%ecx
		jl     jump_4469b
		mov    0x80c(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4469b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4469b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44682
		call   func_48a40
	jump_44682:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_4469b:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44700
		cmp    $0x0,%ecx
		jl     jump_44700
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44700
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44700
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_446e7
		call   func_48a40
	jump_446e7:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44700:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x80c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44766
		cmp    $0x0,%ecx
		jl     jump_44766
		mov    0x80c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44766
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44766
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4474d
		call   func_48a40
	jump_4474d:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44766:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_447cc
		cmp    $0x0,%ecx
		jl     jump_447cc
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_447cc
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_447cc
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_447b3
		call   func_48a40
	jump_447b3:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_447cc:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x80c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44832
		cmp    $0x0,%ecx
		jl     jump_44832
		mov    0x80c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44832
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44832
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44819
		call   func_48a40
	jump_44819:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44832:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44898
		cmp    $0x0,%ecx
		jl     jump_44898
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44898
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44898
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4487f
		call   func_48a40
	jump_4487f:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44898:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x608,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_448fe
		cmp    $0x0,%ecx
		jl     jump_448fe
		mov    0x608(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_448fe
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_448fe
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_448e5
		call   func_48a40
	jump_448e5:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_448fe:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44963
		cmp    $0x0,%ecx
		jl     jump_44963
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44963
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44963
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4494a
		call   func_48a40
	jump_4494a:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44963:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x608,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_449c9
		cmp    $0x0,%ecx
		jl     jump_449c9
		mov    0x608(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_449c9
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_449c9
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_449b0
		call   func_48a40
	jump_449b0:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_449c9:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44a2f
		cmp    $0x0,%ecx
		jl     jump_44a2f
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44a2f
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44a2f
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44a16
		call   func_48a40
	jump_44a16:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44a2f:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x608,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44a95
		cmp    $0x0,%ecx
		jl     jump_44a95
		mov    0x608(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44a95
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44a95
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44a7c
		call   func_48a40
	jump_44a7c:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44a95:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44afb
		cmp    $0x0,%ecx
		jl     jump_44afb
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44afb
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44afb
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44ae2
		call   func_48a40
	jump_44ae2:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44afb:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x404,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44b61
		cmp    $0x0,%ecx
		jl     jump_44b61
		mov    0x404(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44b61
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44b61
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44b48
		call   func_48a40
	jump_44b48:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44b61:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44bc6
		cmp    $0x0,%ecx
		jl     jump_44bc6
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44bc6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44bc6
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44bad
		call   func_48a40
	jump_44bad:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44bc6:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x404,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44c2c
		cmp    $0x0,%ecx
		jl     jump_44c2c
		mov    0x404(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44c2c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44c2c
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44c13
		call   func_48a40
	jump_44c13:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44c2c:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44c92
		cmp    $0x0,%ecx
		jl     jump_44c92
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44c92
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44c92
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44c79
		call   func_48a40
	jump_44c79:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44c92:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x404,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44cf8
		cmp    $0x0,%ecx
		jl     jump_44cf8
		mov    0x404(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44cf8
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44cf8
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44cdf
		call   func_48a40
	jump_44cdf:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44cf8:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44d5e
		cmp    $0x0,%ecx
		jl     jump_44d5e
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44d5e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44d5e
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44d45
		call   func_48a40
	jump_44d45:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44d5e:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x200,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44dc4
		cmp    $0x0,%ecx
		jl     jump_44dc4
		mov    0x200(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44dc4
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44dc4
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44dab
		call   func_48a40
	jump_44dab:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44dc4:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44e29
		cmp    $0x0,%ecx
		jl     jump_44e29
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44e29
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44e29
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44e10
		call   func_48a40
	jump_44e10:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44e29:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x200,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44e8f
		cmp    $0x0,%ecx
		jl     jump_44e8f
		mov    0x200(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44e8f
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44e8f
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44e76
		call   func_48a40
	jump_44e76:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44e8f:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44eee
		cmp    $0x0,%ecx
		jl     jump_44eee
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44eee
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44eee
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44ed5
		call   func_48a40
	jump_44ed5:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44eee:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x200,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44f54
		cmp    $0x0,%ecx
		jl     jump_44f54
		mov    0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44f54
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44f54
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44f3b
		call   func_48a40
	jump_44f3b:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44f54:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_44fb3
		cmp    $0x0,%ecx
		jl     jump_44fb3
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_44fb3
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_44fb3
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44f9a
		call   func_48a40
	jump_44f9a:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_44fb3:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xfffffffc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45013
		cmp    $0x0,%ecx
		jl     jump_45013
		mov    -0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45013
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45013
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_44ffa
		call   func_48a40
	jump_44ffa:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_45013:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45070
		cmp    $0x0,%ecx
		jl     jump_45070
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45070
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45070
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45057
		call   func_48a40
	jump_45057:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_45070:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xfffffffc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_450cb
		cmp    $0x0,%ecx
		jl     jump_450cb
		mov    -0x4(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_450cb
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_450cb
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_450b6
		call   func_48a40
	jump_450b6:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_450cb:
		dec    %edx
		jl     jump_45128
		mov    %esi,%ecx
		add    $0xfffffdfc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45128
		cmp    $0x0,%ecx
		jl     jump_45128
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45128
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45128
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45113
		call   func_48a40
	jump_45113:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_4512f
	jump_45128:
		mov    -0x1(%ebp),%al
		mov    $0x0,%ah
		leave
		ret
	jump_4512f:
		mov    -0x1(%ebp),%al
		mov    $0x1,%ah
		leave
		ret


/*----------------------------------------------------------------*/
func_45136:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffffc,%esp
		movb   $0x0,-0x1(%ebp)
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0xa18,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_451a5
		cmp    $0x0,%ecx
		jl     jump_451a5
		mov    0xa18(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_451a5
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_451a5
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4518c
		call   func_48a40
	jump_4518c:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_451a5:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4520b
		cmp    $0x0,%ecx
		jl     jump_4520b
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4520b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4520b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_451f2
		call   func_48a40
	jump_451f2:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4520b:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x814,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45271
		cmp    $0x0,%ecx
		jl     jump_45271
		mov    0x814(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45271
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45271
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45258
		call   func_48a40
	jump_45258:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45271:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_452d7
		cmp    $0x0,%ecx
		jl     jump_452d7
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_452d7
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_452d7
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_452be
		call   func_48a40
	jump_452be:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_452d7:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x814,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4533d
		cmp    $0x0,%ecx
		jl     jump_4533d
		mov    0x814(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4533d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4533d
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45324
		call   func_48a40
	jump_45324:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4533d:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_453a3
		cmp    $0x0,%ecx
		jl     jump_453a3
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_453a3
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_453a3
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4538a
		call   func_48a40
	jump_4538a:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_453a3:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x814,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45408
		cmp    $0x0,%ecx
		jl     jump_45408
		mov    0x814(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45408
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45408
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_453ef
		call   func_48a40
	jump_453ef:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45408:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4546e
		cmp    $0x0,%ecx
		jl     jump_4546e
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4546e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4546e
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45455
		call   func_48a40
	jump_45455:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4546e:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x610,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_454d4
		cmp    $0x0,%ecx
		jl     jump_454d4
		mov    0x610(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_454d4
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_454d4
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_454bb
		call   func_48a40
	jump_454bb:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_454d4:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4553a
		cmp    $0x0,%ecx
		jl     jump_4553a
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4553a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4553a
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45521
		call   func_48a40
	jump_45521:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4553a:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x610,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_455a0
		cmp    $0x0,%ecx
		jl     jump_455a0
		mov    0x610(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_455a0
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_455a0
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45587
		call   func_48a40
	jump_45587:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_455a0:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45606
		cmp    $0x0,%ecx
		jl     jump_45606
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45606
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45606
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_455ed
		call   func_48a40
	jump_455ed:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45606:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x610,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4566b
		cmp    $0x0,%ecx
		jl     jump_4566b
		mov    0x610(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4566b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4566b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45652
		call   func_48a40
	jump_45652:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4566b:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_456d1
		cmp    $0x0,%ecx
		jl     jump_456d1
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_456d1
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_456d1
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_456b8
		call   func_48a40
	jump_456b8:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_456d1:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x40c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45737
		cmp    $0x0,%ecx
		jl     jump_45737
		mov    0x40c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45737
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45737
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4571e
		call   func_48a40
	jump_4571e:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45737:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4579d
		cmp    $0x0,%ecx
		jl     jump_4579d
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4579d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4579d
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45784
		call   func_48a40
	jump_45784:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4579d:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x40c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45803
		cmp    $0x0,%ecx
		jl     jump_45803
		mov    0x40c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45803
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45803
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_457ea
		call   func_48a40
	jump_457ea:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45803:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45869
		cmp    $0x0,%ecx
		jl     jump_45869
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45869
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45869
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45850
		call   func_48a40
	jump_45850:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45869:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x40c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_458ce
		cmp    $0x0,%ecx
		jl     jump_458ce
		mov    0x40c(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_458ce
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_458ce
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_458b5
		call   func_48a40
	jump_458b5:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_458ce:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45934
		cmp    $0x0,%ecx
		jl     jump_45934
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45934
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45934
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4591b
		call   func_48a40
	jump_4591b:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45934:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x208,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4599a
		cmp    $0x0,%ecx
		jl     jump_4599a
		mov    0x208(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4599a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4599a
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45981
		call   func_48a40
	jump_45981:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_4599a:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45a00
		cmp    $0x0,%ecx
		jl     jump_45a00
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45a00
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45a00
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_459e7
		call   func_48a40
	jump_459e7:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45a00:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x208,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45a66
		cmp    $0x0,%ecx
		jl     jump_45a66
		mov    0x208(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45a66
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45a66
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45a4d
		call   func_48a40
	jump_45a4d:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45a66:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45acc
		cmp    $0x0,%ecx
		jl     jump_45acc
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45acc
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45acc
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45ab3
		call   func_48a40
	jump_45ab3:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45acc:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x208,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45b31
		cmp    $0x0,%ecx
		jl     jump_45b31
		mov    0x208(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45b31
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45b31
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45b18
		call   func_48a40
	jump_45b18:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45b31:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45b97
		cmp    $0x0,%ecx
		jl     jump_45b97
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45b97
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45b97
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45b7e
		call   func_48a40
	jump_45b7e:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45b97:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x4,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45bf7
		cmp    $0x0,%ecx
		jl     jump_45bf7
		mov    0x4(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45bf7
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45bf7
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45bde
		call   func_48a40
	jump_45bde:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45bf7:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45c5d
		cmp    $0x0,%ecx
		jl     jump_45c5d
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45c5d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45c5d
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45c44
		call   func_48a40
	jump_45c44:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45c5d:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x4,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45cbd
		cmp    $0x0,%ecx
		jl     jump_45cbd
		mov    0x4(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45cbd
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45cbd
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45ca4
		call   func_48a40
	jump_45ca4:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45cbd:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45d1c
		cmp    $0x0,%ecx
		jl     jump_45d1c
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45d1c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45d1c
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45d03
		call   func_48a40
	jump_45d03:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45d1c:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x4,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45d7b
		cmp    $0x0,%ecx
		jl     jump_45d7b
		mov    0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45d7b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45d7b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45d62
		call   func_48a40
	jump_45d62:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45d7b:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45dda
		cmp    $0x0,%ecx
		jl     jump_45dda
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45dda
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45dda
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45dc1
		call   func_48a40
	jump_45dc1:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45dda:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0xfffffe00,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45e40
		cmp    $0x0,%ecx
		jl     jump_45e40
		mov    -0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45e40
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45e40
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45e27
		call   func_48a40
	jump_45e27:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45e40:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45e9e
		cmp    $0x0,%ecx
		jl     jump_45e9e
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45e9e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45e9e
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45e85
		call   func_48a40
	jump_45e85:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45e9e:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0xfffffe00,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45eff
		cmp    $0x0,%ecx
		jl     jump_45eff
		mov    -0x200(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45eff
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45eff
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45eea
		call   func_48a40
	jump_45eea:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45eff:
		dec    %edx
		jl     jump_45f5c
		mov    %esi,%ecx
		add    $0xfffffdfc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45f5c
		cmp    $0x0,%ecx
		jl     jump_45f5c
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45f5c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45f5c
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45f47
		call   func_48a40
	jump_45f47:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_45f63
	jump_45f5c:
		mov    -0x1(%ebp),%al
		mov    $0x0,%ah
		leave
		ret
	jump_45f63:
		mov    -0x1(%ebp),%al
		mov    $0x1,%ah
		leave
		ret


/*----------------------------------------------------------------*/
func_45f6a:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffffc,%esp
		movb   $0x0,-0x1(%ebp)
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xc14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_45ff2
		cmp    $0x0,%ecx
		jl     jump_45ff2
		mov    0xc14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_45ff2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_45ff2
		mov    %esi,%ecx
		add    $0xc14,%ecx
		cmp    vtable_48952,%ecx
		je     jump_45ff2
		cmp    vtable_48956,%ecx
		je     jump_45ff2
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_45fd9
		call   func_48a40
	jump_45fd9:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_45ff2:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46070
		cmp    $0x0,%ecx
		jl     jump_46070
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46070
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46070
		mov    %esi,%ecx
		add    $0xa14,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46070
		cmp    vtable_48956,%ecx
		je     jump_46070
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46057
		call   func_48a40
	jump_46057:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46070:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xa10,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_460ee
		cmp    $0x0,%ecx
		jl     jump_460ee
		mov    0xa10(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_460ee
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_460ee
		mov    %esi,%ecx
		add    $0xa10,%ecx
		cmp    vtable_48952,%ecx
		je     jump_460ee
		cmp    vtable_48956,%ecx
		je     jump_460ee
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_460d5
		call   func_48a40
	jump_460d5:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_460ee:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4616b
		cmp    $0x0,%ecx
		jl     jump_4616b
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4616b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4616b
		mov    %esi,%ecx
		add    $0xa14,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4616b
		cmp    vtable_48956,%ecx
		je     jump_4616b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46152
		call   func_48a40
	jump_46152:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_4616b:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xa10,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_461e9
		cmp    $0x0,%ecx
		jl     jump_461e9
		mov    0xa10(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_461e9
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_461e9
		mov    %esi,%ecx
		add    $0xa10,%ecx
		cmp    vtable_48952,%ecx
		je     jump_461e9
		cmp    vtable_48956,%ecx
		je     jump_461e9
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_461d0
		call   func_48a40
	jump_461d0:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_461e9:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46267
		cmp    $0x0,%ecx
		jl     jump_46267
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46267
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46267
		mov    %esi,%ecx
		add    $0x810,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46267
		cmp    vtable_48956,%ecx
		je     jump_46267
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4624e
		call   func_48a40
	jump_4624e:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46267:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xa10,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_462e5
		cmp    $0x0,%ecx
		jl     jump_462e5
		mov    0xa10(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_462e5
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_462e5
		mov    %esi,%ecx
		add    $0xa10,%ecx
		cmp    vtable_48952,%ecx
		je     jump_462e5
		cmp    vtable_48956,%ecx
		je     jump_462e5
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_462cc
		call   func_48a40
	jump_462cc:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_462e5:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46363
		cmp    $0x0,%ecx
		jl     jump_46363
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46363
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46363
		mov    %esi,%ecx
		add    $0x810,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46363
		cmp    vtable_48956,%ecx
		je     jump_46363
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4634a
		call   func_48a40
	jump_4634a:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46363:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x80c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_463e1
		cmp    $0x0,%ecx
		jl     jump_463e1
		mov    0x80c(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_463e1
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_463e1
		mov    %esi,%ecx
		add    $0x80c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_463e1
		cmp    vtable_48956,%ecx
		je     jump_463e1
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_463c8
		call   func_48a40
	jump_463c8:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_463e1:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4645e
		cmp    $0x0,%ecx
		jl     jump_4645e
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4645e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4645e
		mov    %esi,%ecx
		add    $0x810,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4645e
		cmp    vtable_48956,%ecx
		je     jump_4645e
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46445
		call   func_48a40
	jump_46445:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_4645e:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x80c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_464dc
		cmp    $0x0,%ecx
		jl     jump_464dc
		mov    0x80c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_464dc
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_464dc
		mov    %esi,%ecx
		add    $0x80c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_464dc
		cmp    vtable_48956,%ecx
		je     jump_464dc
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_464c3
		call   func_48a40
	jump_464c3:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_464dc:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4655a
		cmp    $0x0,%ecx
		jl     jump_4655a
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4655a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4655a
		mov    %esi,%ecx
		add    $0x60c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4655a
		cmp    vtable_48956,%ecx
		je     jump_4655a
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46541
		call   func_48a40
	jump_46541:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_4655a:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x80c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_465d8
		cmp    $0x0,%ecx
		jl     jump_465d8
		mov    0x80c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_465d8
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_465d8
		mov    %esi,%ecx
		add    $0x80c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_465d8
		cmp    vtable_48956,%ecx
		je     jump_465d8
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_465bf
		call   func_48a40
	jump_465bf:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_465d8:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46656
		cmp    $0x0,%ecx
		jl     jump_46656
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46656
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46656
		mov    %esi,%ecx
		add    $0x60c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46656
		cmp    vtable_48956,%ecx
		je     jump_46656
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4663d
		call   func_48a40
	jump_4663d:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46656:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x608,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_466d4
		cmp    $0x0,%ecx
		jl     jump_466d4
		mov    0x608(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_466d4
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_466d4
		mov    %esi,%ecx
		add    $0x608,%ecx
		cmp    vtable_48952,%ecx
		je     jump_466d4
		cmp    vtable_48956,%ecx
		je     jump_466d4
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_466bb
		call   func_48a40
	jump_466bb:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_466d4:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46751
		cmp    $0x0,%ecx
		jl     jump_46751
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46751
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46751
		mov    %esi,%ecx
		add    $0x60c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46751
		cmp    vtable_48956,%ecx
		je     jump_46751
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46738
		call   func_48a40
	jump_46738:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46751:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x608,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_467cf
		cmp    $0x0,%ecx
		jl     jump_467cf
		mov    0x608(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_467cf
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_467cf
		mov    %esi,%ecx
		add    $0x608,%ecx
		cmp    vtable_48952,%ecx
		je     jump_467cf
		cmp    vtable_48956,%ecx
		je     jump_467cf
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_467b6
		call   func_48a40
	jump_467b6:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_467cf:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4684d
		cmp    $0x0,%ecx
		jl     jump_4684d
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4684d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4684d
		mov    %esi,%ecx
		add    $0x408,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4684d
		cmp    vtable_48956,%ecx
		je     jump_4684d
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46834
		call   func_48a40
	jump_46834:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_4684d:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x608,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_468cb
		cmp    $0x0,%ecx
		jl     jump_468cb
		mov    0x608(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_468cb
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_468cb
		mov    %esi,%ecx
		add    $0x608,%ecx
		cmp    vtable_48952,%ecx
		je     jump_468cb
		cmp    vtable_48956,%ecx
		je     jump_468cb
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_468b2
		call   func_48a40
	jump_468b2:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_468cb:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46949
		cmp    $0x0,%ecx
		jl     jump_46949
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46949
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46949
		mov    %esi,%ecx
		add    $0x408,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46949
		cmp    vtable_48956,%ecx
		je     jump_46949
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46930
		call   func_48a40
	jump_46930:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46949:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x404,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_469c7
		cmp    $0x0,%ecx
		jl     jump_469c7
		mov    0x404(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_469c7
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_469c7
		mov    %esi,%ecx
		add    $0x404,%ecx
		cmp    vtable_48952,%ecx
		je     jump_469c7
		cmp    vtable_48956,%ecx
		je     jump_469c7
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_469ae
		call   func_48a40
	jump_469ae:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_469c7:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46a44
		cmp    $0x0,%ecx
		jl     jump_46a44
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46a44
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46a44
		mov    %esi,%ecx
		add    $0x408,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46a44
		cmp    vtable_48956,%ecx
		je     jump_46a44
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46a2b
		call   func_48a40
	jump_46a2b:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46a44:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x404,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46ac2
		cmp    $0x0,%ecx
		jl     jump_46ac2
		mov    0x404(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46ac2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46ac2
		mov    %esi,%ecx
		add    $0x404,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46ac2
		cmp    vtable_48956,%ecx
		je     jump_46ac2
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46aa9
		call   func_48a40
	jump_46aa9:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46ac2:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46b40
		cmp    $0x0,%ecx
		jl     jump_46b40
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46b40
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46b40
		mov    %esi,%ecx
		add    $0x204,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46b40
		cmp    vtable_48956,%ecx
		je     jump_46b40
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46b27
		call   func_48a40
	jump_46b27:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46b40:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x404,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46bbe
		cmp    $0x0,%ecx
		jl     jump_46bbe
		mov    0x404(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46bbe
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46bbe
		mov    %esi,%ecx
		add    $0x404,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46bbe
		cmp    vtable_48956,%ecx
		je     jump_46bbe
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46ba5
		call   func_48a40
	jump_46ba5:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46bbe:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46c3c
		cmp    $0x0,%ecx
		jl     jump_46c3c
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46c3c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46c3c
		mov    %esi,%ecx
		add    $0x204,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46c3c
		cmp    vtable_48956,%ecx
		je     jump_46c3c
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46c23
		call   func_48a40
	jump_46c23:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46c3c:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x200,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46cba
		cmp    $0x0,%ecx
		jl     jump_46cba
		mov    0x200(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46cba
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46cba
		mov    %esi,%ecx
		add    $0x200,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46cba
		cmp    vtable_48956,%ecx
		je     jump_46cba
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46ca1
		call   func_48a40
	jump_46ca1:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46cba:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46d37
		cmp    $0x0,%ecx
		jl     jump_46d37
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46d37
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46d37
		mov    %esi,%ecx
		add    $0x204,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46d37
		cmp    vtable_48956,%ecx
		je     jump_46d37
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46d1e
		call   func_48a40
	jump_46d1e:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46d37:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x200,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46db5
		cmp    $0x0,%ecx
		jl     jump_46db5
		mov    0x200(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46db5
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46db5
		mov    %esi,%ecx
		add    $0x200,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46db5
		cmp    vtable_48956,%ecx
		je     jump_46db5
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46d9c
		call   func_48a40
	jump_46d9c:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46db5:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46e29
		cmp    $0x0,%ecx
		jl     jump_46e29
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46e29
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46e29
		mov    %esi,%ecx
		add    $0x0,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46e29
		cmp    vtable_48956,%ecx
		je     jump_46e29
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46e10
		call   func_48a40
	jump_46e10:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46e29:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x200,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46ea7
		cmp    $0x0,%ecx
		jl     jump_46ea7
		mov    0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46ea7
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46ea7
		mov    %esi,%ecx
		add    $0x200,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46ea7
		cmp    vtable_48956,%ecx
		je     jump_46ea7
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46e8e
		call   func_48a40
	jump_46e8e:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46ea7:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46f1b
		cmp    $0x0,%ecx
		jl     jump_46f1b
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46f1b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46f1b
		mov    %esi,%ecx
		add    $0x0,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46f1b
		cmp    vtable_48956,%ecx
		je     jump_46f1b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46f02
		call   func_48a40
	jump_46f02:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46f1b:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xfffffffc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_46f90
		cmp    $0x0,%ecx
		jl     jump_46f90
		mov    -0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_46f90
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_46f90
		mov    %esi,%ecx
		add    $0xfffffffc,%ecx
		cmp    vtable_48952,%ecx
		je     jump_46f90
		cmp    vtable_48956,%ecx
		je     jump_46f90
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46f77
		call   func_48a40
	jump_46f77:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_46f90:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47002
		cmp    $0x0,%ecx
		jl     jump_47002
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47002
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47002
		mov    %esi,%ecx
		add    $0x0,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47002
		cmp    vtable_48956,%ecx
		je     jump_47002
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_46fe9
		call   func_48a40
	jump_46fe9:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_47002:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xfffffffc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47072
		cmp    $0x0,%ecx
		jl     jump_47072
		mov    -0x4(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47072
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47072
		mov    %esi,%ecx
		add    $0xfffffffc,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47072
		cmp    vtable_48956,%ecx
		je     jump_47072
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4705d
		call   func_48a40
	jump_4705d:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_47072:
		dec    %edx
		jl     jump_470e7
		mov    %esi,%ecx
		add    $0xfffffdfc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_470e7
		cmp    $0x0,%ecx
		jl     jump_470e7
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_470e7
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_470e7
		mov    %esi,%ecx
		add    $0xfffffdfc,%ecx
		cmp    vtable_48952,%ecx
		je     jump_470e7
		cmp    vtable_48956,%ecx
		je     jump_470e7
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_470d2
		call   func_48a40
	jump_470d2:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_470ee
	jump_470e7:
		mov    -0x1(%ebp),%al
		mov    $0x0,%ah
		leave
		ret
	jump_470ee:
		mov    -0x1(%ebp),%al
		mov    $0x1,%ah
		leave
		ret


/*----------------------------------------------------------------*/
func_470f5:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffffc,%esp
		movb   $0x0,-0x1(%ebp)
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0xa18,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4717c
		cmp    $0x0,%ecx
		jl     jump_4717c
		mov    0xa18(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4717c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4717c
		mov    %esi,%ecx
		add    $0xa18,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4717c
		cmp    vtable_48956,%ecx
		je     jump_4717c
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47163
		call   func_48a40
	jump_47163:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4717c:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_471fa
		cmp    $0x0,%ecx
		jl     jump_471fa
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_471fa
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_471fa
		mov    %esi,%ecx
		add    $0xa14,%ecx
		cmp    vtable_48952,%ecx
		je     jump_471fa
		cmp    vtable_48956,%ecx
		je     jump_471fa
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_471e1
		call   func_48a40
	jump_471e1:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_471fa:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x814,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47278
		cmp    $0x0,%ecx
		jl     jump_47278
		mov    0x814(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47278
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47278
		mov    %esi,%ecx
		add    $0x814,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47278
		cmp    vtable_48956,%ecx
		je     jump_47278
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4725f
		call   func_48a40
	jump_4725f:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47278:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0xa14,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_472f6
		cmp    $0x0,%ecx
		jl     jump_472f6
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_472f6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_472f6
		mov    %esi,%ecx
		add    $0xa14,%ecx
		cmp    vtable_48952,%ecx
		je     jump_472f6
		cmp    vtable_48956,%ecx
		je     jump_472f6
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_472dd
		call   func_48a40
	jump_472dd:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_472f6:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x814,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47374
		cmp    $0x0,%ecx
		jl     jump_47374
		mov    0x814(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47374
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47374
		mov    %esi,%ecx
		add    $0x814,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47374
		cmp    vtable_48956,%ecx
		je     jump_47374
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4735b
		call   func_48a40
	jump_4735b:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47374:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_473f2
		cmp    $0x0,%ecx
		jl     jump_473f2
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_473f2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_473f2
		mov    %esi,%ecx
		add    $0x810,%ecx
		cmp    vtable_48952,%ecx
		je     jump_473f2
		cmp    vtable_48956,%ecx
		je     jump_473f2
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_473d9
		call   func_48a40
	jump_473d9:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_473f2:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x814,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4746f
		cmp    $0x0,%ecx
		jl     jump_4746f
		mov    0x814(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4746f
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4746f
		mov    %esi,%ecx
		add    $0x814,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4746f
		cmp    vtable_48956,%ecx
		je     jump_4746f
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47456
		call   func_48a40
	jump_47456:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4746f:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_474ed
		cmp    $0x0,%ecx
		jl     jump_474ed
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_474ed
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_474ed
		mov    %esi,%ecx
		add    $0x810,%ecx
		cmp    vtable_48952,%ecx
		je     jump_474ed
		cmp    vtable_48956,%ecx
		je     jump_474ed
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_474d4
		call   func_48a40
	jump_474d4:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_474ed:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x610,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4756b
		cmp    $0x0,%ecx
		jl     jump_4756b
		mov    0x610(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4756b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4756b
		mov    %esi,%ecx
		add    $0x610,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4756b
		cmp    vtable_48956,%ecx
		je     jump_4756b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47552
		call   func_48a40
	jump_47552:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4756b:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x810,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_475e9
		cmp    $0x0,%ecx
		jl     jump_475e9
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_475e9
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_475e9
		mov    %esi,%ecx
		add    $0x810,%ecx
		cmp    vtable_48952,%ecx
		je     jump_475e9
		cmp    vtable_48956,%ecx
		je     jump_475e9
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_475d0
		call   func_48a40
	jump_475d0:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_475e9:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x610,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47667
		cmp    $0x0,%ecx
		jl     jump_47667
		mov    0x610(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47667
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47667
		mov    %esi,%ecx
		add    $0x610,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47667
		cmp    vtable_48956,%ecx
		je     jump_47667
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_4764e
		call   func_48a40
	jump_4764e:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47667:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_476e5
		cmp    $0x0,%ecx
		jl     jump_476e5
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_476e5
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_476e5
		mov    %esi,%ecx
		add    $0x60c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_476e5
		cmp    vtable_48956,%ecx
		je     jump_476e5
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_476cc
		call   func_48a40
	jump_476cc:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_476e5:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x610,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47762
		cmp    $0x0,%ecx
		jl     jump_47762
		mov    0x610(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47762
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47762
		mov    %esi,%ecx
		add    $0x610,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47762
		cmp    vtable_48956,%ecx
		je     jump_47762
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47749
		call   func_48a40
	jump_47749:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47762:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_477e0
		cmp    $0x0,%ecx
		jl     jump_477e0
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_477e0
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_477e0
		mov    %esi,%ecx
		add    $0x60c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_477e0
		cmp    vtable_48956,%ecx
		je     jump_477e0
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_477c7
		call   func_48a40
	jump_477c7:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_477e0:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x40c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4785e
		cmp    $0x0,%ecx
		jl     jump_4785e
		mov    0x40c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4785e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4785e
		mov    %esi,%ecx
		add    $0x40c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4785e
		cmp    vtable_48956,%ecx
		je     jump_4785e
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47845
		call   func_48a40
	jump_47845:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4785e:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x60c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_478dc
		cmp    $0x0,%ecx
		jl     jump_478dc
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_478dc
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_478dc
		mov    %esi,%ecx
		add    $0x60c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_478dc
		cmp    vtable_48956,%ecx
		je     jump_478dc
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_478c3
		call   func_48a40
	jump_478c3:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_478dc:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x40c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4795a
		cmp    $0x0,%ecx
		jl     jump_4795a
		mov    0x40c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4795a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4795a
		mov    %esi,%ecx
		add    $0x40c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4795a
		cmp    vtable_48956,%ecx
		je     jump_4795a
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47941
		call   func_48a40
	jump_47941:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4795a:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_479d8
		cmp    $0x0,%ecx
		jl     jump_479d8
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_479d8
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_479d8
		mov    %esi,%ecx
		add    $0x408,%ecx
		cmp    vtable_48952,%ecx
		je     jump_479d8
		cmp    vtable_48956,%ecx
		je     jump_479d8
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_479bf
		call   func_48a40
	jump_479bf:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_479d8:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x40c,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47a55
		cmp    $0x0,%ecx
		jl     jump_47a55
		mov    0x40c(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47a55
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47a55
		mov    %esi,%ecx
		add    $0x40c,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47a55
		cmp    vtable_48956,%ecx
		je     jump_47a55
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47a3c
		call   func_48a40
	jump_47a3c:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47a55:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47ad3
		cmp    $0x0,%ecx
		jl     jump_47ad3
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47ad3
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47ad3
		mov    %esi,%ecx
		add    $0x408,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47ad3
		cmp    vtable_48956,%ecx
		je     jump_47ad3
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47aba
		call   func_48a40
	jump_47aba:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47ad3:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x208,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47b51
		cmp    $0x0,%ecx
		jl     jump_47b51
		mov    0x208(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47b51
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47b51
		mov    %esi,%ecx
		add    $0x208,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47b51
		cmp    vtable_48956,%ecx
		je     jump_47b51
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47b38
		call   func_48a40
	jump_47b38:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47b51:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x408,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47bcf
		cmp    $0x0,%ecx
		jl     jump_47bcf
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47bcf
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47bcf
		mov    %esi,%ecx
		add    $0x408,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47bcf
		cmp    vtable_48956,%ecx
		je     jump_47bcf
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47bb6
		call   func_48a40
	jump_47bb6:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47bcf:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x208,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47c4d
		cmp    $0x0,%ecx
		jl     jump_47c4d
		mov    0x208(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47c4d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47c4d
		mov    %esi,%ecx
		add    $0x208,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47c4d
		cmp    vtable_48956,%ecx
		je     jump_47c4d
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47c34
		call   func_48a40
	jump_47c34:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47c4d:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47ccb
		cmp    $0x0,%ecx
		jl     jump_47ccb
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47ccb
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47ccb
		mov    %esi,%ecx
		add    $0x204,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47ccb
		cmp    vtable_48956,%ecx
		je     jump_47ccb
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47cb2
		call   func_48a40
	jump_47cb2:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47ccb:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x208,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47d48
		cmp    $0x0,%ecx
		jl     jump_47d48
		mov    0x208(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47d48
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47d48
		mov    %esi,%ecx
		add    $0x208,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47d48
		cmp    vtable_48956,%ecx
		je     jump_47d48
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47d2f
		call   func_48a40
	jump_47d2f:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47d48:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47dc6
		cmp    $0x0,%ecx
		jl     jump_47dc6
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47dc6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47dc6
		mov    %esi,%ecx
		add    $0x204,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47dc6
		cmp    vtable_48956,%ecx
		je     jump_47dc6
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47dad
		call   func_48a40
	jump_47dad:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47dc6:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x4,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47e3b
		cmp    $0x0,%ecx
		jl     jump_47e3b
		mov    0x4(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47e3b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47e3b
		mov    %esi,%ecx
		add    $0x4,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47e3b
		cmp    vtable_48956,%ecx
		je     jump_47e3b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47e22
		call   func_48a40
	jump_47e22:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47e3b:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x204,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47eb9
		cmp    $0x0,%ecx
		jl     jump_47eb9
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47eb9
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47eb9
		mov    %esi,%ecx
		add    $0x204,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47eb9
		cmp    vtable_48956,%ecx
		je     jump_47eb9
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47ea0
		call   func_48a40
	jump_47ea0:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47eb9:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x4,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47f2e
		cmp    $0x0,%ecx
		jl     jump_47f2e
		mov    0x4(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47f2e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47f2e
		mov    %esi,%ecx
		add    $0x4,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47f2e
		cmp    vtable_48956,%ecx
		je     jump_47f2e
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47f15
		call   func_48a40
	jump_47f15:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47f2e:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_47fa2
		cmp    $0x0,%ecx
		jl     jump_47fa2
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_47fa2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_47fa2
		mov    %esi,%ecx
		add    $0x0,%ecx
		cmp    vtable_48952,%ecx
		je     jump_47fa2
		cmp    vtable_48956,%ecx
		je     jump_47fa2
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47f89
		call   func_48a40
	jump_47f89:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_47fa2:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x4,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_48016
		cmp    $0x0,%ecx
		jl     jump_48016
		mov    0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48016
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_48016
		mov    %esi,%ecx
		add    $0x4,%ecx
		cmp    vtable_48952,%ecx
		je     jump_48016
		cmp    vtable_48956,%ecx
		je     jump_48016
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_47ffd
		call   func_48a40
	jump_47ffd:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_48016:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4808a
		cmp    $0x0,%ecx
		jl     jump_4808a
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4808a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4808a
		mov    %esi,%ecx
		add    $0x0,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4808a
		cmp    vtable_48956,%ecx
		je     jump_4808a
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_48071
		call   func_48a40
	jump_48071:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4808a:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0xfffffe00,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_48108
		cmp    $0x0,%ecx
		jl     jump_48108
		mov    -0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48108
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_48108
		mov    %esi,%ecx
		add    $0xfffffe00,%ecx
		cmp    vtable_48952,%ecx
		je     jump_48108
		cmp    vtable_48956,%ecx
		je     jump_48108
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_480ef
		call   func_48a40
	jump_480ef:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_48108:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0x0,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_4817b
		cmp    $0x0,%ecx
		jl     jump_4817b
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4817b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4817b
		mov    %esi,%ecx
		add    $0x0,%ecx
		cmp    vtable_48952,%ecx
		je     jump_4817b
		cmp    vtable_48956,%ecx
		je     jump_4817b
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_48162
		call   func_48a40
	jump_48162:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_4817b:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0xfffffe00,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_481f4
		cmp    $0x0,%ecx
		jl     jump_481f4
		mov    -0x200(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_481f4
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_481f4
		mov    %esi,%ecx
		add    $0xfffffe00,%ecx
		cmp    vtable_48952,%ecx
		je     jump_481f4
		cmp    vtable_48956,%ecx
		je     jump_481f4
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_481df
		call   func_48a40
	jump_481df:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_481f4:
		dec    %edx
		jl     jump_48269
		mov    %esi,%ecx
		add    $0xfffffdfc,%ecx
		sub    data_55358,%ecx
		cmp    $0xc000,%ecx
		jge    jump_48269
		cmp    $0x0,%ecx
		jl     jump_48269
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48269
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_48269
		mov    %esi,%ecx
		add    $0xfffffdfc,%ecx
		cmp    vtable_48952,%ecx
		je     jump_48269
		cmp    vtable_48956,%ecx
		je     jump_48269
		cmpb   $0x0,-0x1(%ebp)
		jne    jump_48254
		call   func_48a40
	jump_48254:
		addb   $0x1,-0x1(%ebp)
		add    h_blocks,%ebx
		call   func_44164
		cmp    $0x0,%cx
		jle    jump_48270
	jump_48269:
		mov    -0x1(%ebp),%al
		mov    $0x0,%ah
		leave
		ret
	jump_48270:
		mov    -0x1(%ebp),%al
		mov    $0x1,%ah
		leave
		ret


/*----------------------------------------------------------------*/
func_48719:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    %ax,%cx
		mov    %bx,%dx
		sar    $1,%ax
		sar    $1,%bx
		shl    $0x7,%bx
		mov    %ax,%si
		add    %bx,%si
		and    $0xffff,%esi
		shl    $0x2,%esi
		and    $0x1,%cx
		and    $0x1,%dx
		mov    %dx,%bx
		add    %cx,%bx
		mov    $0x0,%eax
		cmp    $0x2,%bx
		jl     jump_48765
		add    $0x8,%eax
	jump_48765:
		cmp    %dx,%cx
		jl     jump_4876d
		add    $0x4,%eax
	jump_4876d:
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_48826
		imul   $0x500,0x18(%ebp),%ebx
		mov    %ebx,0x18(%ebp)
		shll   $0x2,0x14(%ebp)
		add    data_55358,%esi
		jmp    *jpt_4878E(%eax)
jpt_4878E:	/* 0x48794 */
		.long   func_487b1
		.long   jump_487ec
		.long   func_487a4
		.long   func_487ac


/*----------------------------------------------------------------*/
func_487a4:
/*----------------------------------------------------------------*/
		add    $0x200,%esi
		jmp    jump_487ec


/*----------------------------------------------------------------*/
func_487ac:
/*----------------------------------------------------------------*/
		add    $0x4,%esi
		jmp    func_487b1


/*----------------------------------------------------------------*/
func_487b1:
/*----------------------------------------------------------------*/
		cmpl   $0x7d00,0x18(%ebp)
		jl     jump_487c1
		subl   $0x7d00,0x18(%ebp)
	jump_487c1:
		call   func_48a3a
		push   %esi
		mov    0x14(%ebp),%edi
		add    0x18(%ebp),%edi
		add    BScreen,%edi
		call   func_48b60
		pop    %esi
		addl   $0x500,0x18(%ebp)
		add    $0x200,%esi
		decw   0x10(%ebp)
		je     jump_4883a
	jump_487ec:
		cmpl   $0x7d00,0x18(%ebp)
		jl     jump_487fc
		subl   $0x7d00,0x18(%ebp)
	jump_487fc:
		call   func_48a3a
		push   %esi
		mov    0x14(%ebp),%edi
		add    0x18(%ebp),%edi
		add    BScreen,%edi
		call   func_4974e
		pop    %esi
		addl   $0x500,0x18(%ebp)
		add    $0x4,%esi
		decw   0x10(%ebp)
		jne    func_487b1
		jmp    jump_4883a
	jump_48826:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_48831
		jmp    jump_4883a
	jump_48831:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4883a
	jump_4883a:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
draw_horizontal:	/* 0x48842 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    %ax,%cx
		mov    %bx,%dx
		sar    $1,%ax
		sar    $1,%bx
		shl    $0x7,%bx
		mov    %ax,%si
		add    %bx,%si
		and    $0xffff,%esi
		shl    $0x2,%esi
		and    $0x1,%cx
		and    $0x1,%dx
		mov    %dx,%bx
		add    %cx,%bx
		mov    $0x0,%eax
		cmp    $0x2,%bx
		jl     jump_4888e
		add    $0x8,%eax
	jump_4888e:
		cmp    %dx,%cx
		jl     jump_48896
		add    $0x4,%eax
	jump_48896:
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_48936
		imul   $0x500,0x18(%ebp),%ebx
		mov    %ebx,0x18(%ebp)
		shll   $0x2,0x14(%ebp)
		add    data_55358,%esi
		jmp    *jpt_488B7(%eax)
jpt_488B7:	/* 0x488bd */
		.long   func_488da
		.long   jump_48904
		.long   func_488cd
		.long   func_488d5


/*----------------------------------------------------------------*/
func_488cd:
/*----------------------------------------------------------------*/
		add    $0x200,%esi
		jmp    jump_48904


/*----------------------------------------------------------------*/
func_488d5:
/*----------------------------------------------------------------*/
		add    $0x4,%esi
		jmp    func_488da


/*----------------------------------------------------------------*/
func_488da:
/*----------------------------------------------------------------*/
		cmpl   $0x40,0x14(%ebp)
		jl     jump_488e4
		subl   $0x40,0x14(%ebp)
	jump_488e4:
		call   func_48a3a
		mov    0x14(%ebp),%edi
		add    0x18(%ebp),%edi
		add    BScreen,%edi
		call   func_48b60
		addl   $0x4,0x14(%ebp)
		decw   0x10(%ebp)
		je     jump_4894a
	jump_48904:
		cmpl   $0x40,0x14(%ebp)
		jl     jump_4890e
		subl   $0x40,0x14(%ebp)
	jump_4890e:
		call   func_48a3a
		mov    0x14(%ebp),%edi
		add    0x18(%ebp),%edi
		add    BScreen,%edi
		call   func_4974e
		addl   $0x4,0x14(%ebp)
		add    $0xfffffe04,%esi
		decw   0x10(%ebp)
		jne    func_488da
		jmp    jump_4894a
	jump_48936:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_48941
		jmp    jump_4894a
	jump_48941:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4894a
	jump_4894a:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret

vtable_48952:
		.long   0

vtable_48956:
		.long   0
jpt_489C6:	/* 0x489cc */
		.long   func_489df
		.long   func_489f0
		.long   func_489ea
		.long   func_489dc


/*----------------------------------------------------------------*/
func_489dc:
/*----------------------------------------------------------------*/
		add    $0x4,%esi


/*----------------------------------------------------------------*/
func_489df:
/*----------------------------------------------------------------*/
		movzwl 0x18(%ebp),%edx
		call   func_45f6a
		jmp    jump_489f9


/*----------------------------------------------------------------*/
func_489ea:
/*----------------------------------------------------------------*/
		add    $0x200,%esi


/*----------------------------------------------------------------*/
func_489f0:
/*----------------------------------------------------------------*/
		movzwl 0x18(%ebp),%edx
		call   func_470f5
	jump_489f9:
		cmp    $0x0,%al
		je     jump_48a32
		cmp    $0x1,%ah
		je     jump_48a0f
		mov    0x10(%ebp),%edi
		mov    0x14(%ebp),%eax
		call   func_42f98
		jmp    jump_48a32
	jump_48a0f:
		mov    0x10(%ebp),%edi
		mov    0x14(%ebp),%eax
		call   func_43513
		jmp    jump_48a32
	jump_48a32:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_48a3a:
/*----------------------------------------------------------------*/
		mov    $0x0,%ecx
		ret


/*----------------------------------------------------------------*/
func_48a40:
/*----------------------------------------------------------------*/
		mov    $data_5e144,%eax
		movl   $0x0,(%eax)
		movl   $0x0,0x14(%eax)
		movl   $0x0,0x28(%eax)
		movl   $0x0,0x3c(%eax)
		movl   $0x0,0x50(%eax)
		movl   $0x0,0x64(%eax)
		movl   $0x0,0x78(%eax)
		movl   $0x0,0x8c(%eax)
		movl   $0x0,0xa0(%eax)
		movl   $0x0,0xb4(%eax)
		movl   $0x0,0xc8(%eax)
		movl   $0x0,0xdc(%eax)
		movl   $0x0,0xf0(%eax)
		movl   $0x0,0x104(%eax)
		movl   $0x0,0x118(%eax)
		movl   $0x0,0x12c(%eax)
		ret

.data

data_48ad0: /* 0x48ad0, 36 dwords */
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0

.text

/*----------------------------------------------------------------*/
func_48b60:
/*----------------------------------------------------------------*/
		push   %edi
		mov    %esi,%ebx
		add    $0xc14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48bb7
		cmp    $0x0,%ebx
		jl     jump_48bb7
		mov    0xc14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48bb7
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48bb7
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_49747
	jump_48bb7:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48c0d
		cmp    $0x0,%ebx
		jl     jump_48c0d
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48c0d
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48c0d
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_49747
	jump_48c0d:
		mov    %esi,%ebx
		add    $0xa10,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48c63
		cmp    $0x0,%ebx
		jl     jump_48c63
		mov    0xa10(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48c63
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48c63
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_49747
	jump_48c63:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48cb8
		cmp    $0x0,%ebx
		jl     jump_48cb8
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48cb8
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_48cb8
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_49747
	jump_48cb8:
		mov    %esi,%ebx
		add    $0xa10,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48d0e
		cmp    $0x0,%ebx
		jl     jump_48d0e
		mov    0xa10(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48d0e
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48d0e
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_49747
	jump_48d0e:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48d64
		cmp    $0x0,%ebx
		jl     jump_48d64
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48d64
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48d64
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_49747
	jump_48d64:
		mov    %esi,%ebx
		add    $0xa10,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48dba
		cmp    $0x0,%ebx
		jl     jump_48dba
		mov    0xa10(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48dba
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48dba
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_49747
	jump_48dba:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48e10
		cmp    $0x0,%ebx
		jl     jump_48e10
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48e10
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48e10
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_49747
	jump_48e10:
		mov    %esi,%ebx
		add    $0x80c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48e66
		cmp    $0x0,%ebx
		jl     jump_48e66
		mov    0x80c(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48e66
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48e66
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_49747
	jump_48e66:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48ebb
		cmp    $0x0,%ebx
		jl     jump_48ebb
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48ebb
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_48ebb
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_49747
	jump_48ebb:
		mov    %esi,%ebx
		add    $0x80c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48f11
		cmp    $0x0,%ebx
		jl     jump_48f11
		mov    0x80c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48f11
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48f11
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_49747
	jump_48f11:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48f67
		cmp    $0x0,%ebx
		jl     jump_48f67
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48f67
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48f67
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_49747
	jump_48f67:
		mov    %esi,%ebx
		add    $0x80c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_48fbd
		cmp    $0x0,%ebx
		jl     jump_48fbd
		mov    0x80c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_48fbd
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_48fbd
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_49747
	jump_48fbd:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49013
		cmp    $0x0,%ebx
		jl     jump_49013
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49013
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49013
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_49747
	jump_49013:
		mov    %esi,%ebx
		add    $0x608,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49069
		cmp    $0x0,%ebx
		jl     jump_49069
		mov    0x608(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49069
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49069
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_49747
	jump_49069:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_490be
		cmp    $0x0,%ebx
		jl     jump_490be
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_490be
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_490be
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_49747
	jump_490be:
		mov    %esi,%ebx
		add    $0x608,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49114
		cmp    $0x0,%ebx
		jl     jump_49114
		mov    0x608(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49114
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49114
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_49747
	jump_49114:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4916a
		cmp    $0x0,%ebx
		jl     jump_4916a
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4916a
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4916a
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_49747
	jump_4916a:
		mov    %esi,%ebx
		add    $0x608,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_491c0
		cmp    $0x0,%ebx
		jl     jump_491c0
		mov    0x608(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_491c0
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_491c0
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_49747
	jump_491c0:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49216
		cmp    $0x0,%ebx
		jl     jump_49216
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49216
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49216
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_49747
	jump_49216:
		mov    %esi,%ebx
		add    $0x404,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4926c
		cmp    $0x0,%ebx
		jl     jump_4926c
		mov    0x404(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4926c
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4926c
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_49747
	jump_4926c:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_492c1
		cmp    $0x0,%ebx
		jl     jump_492c1
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_492c1
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_492c1
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_49747
	jump_492c1:
		mov    %esi,%ebx
		add    $0x404,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49317
		cmp    $0x0,%ebx
		jl     jump_49317
		mov    0x404(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49317
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49317
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_49747
	jump_49317:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4936d
		cmp    $0x0,%ebx
		jl     jump_4936d
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4936d
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4936d
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_49747
	jump_4936d:
		mov    %esi,%ebx
		add    $0x404,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_493c3
		cmp    $0x0,%ebx
		jl     jump_493c3
		mov    0x404(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_493c3
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_493c3
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_49747
	jump_493c3:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49419
		cmp    $0x0,%ebx
		jl     jump_49419
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49419
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49419
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_49747
	jump_49419:
		mov    %esi,%ebx
		add    $0x200,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4946f
		cmp    $0x0,%ebx
		jl     jump_4946f
		mov    0x200(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4946f
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4946f
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_49747
	jump_4946f:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_494c4
		cmp    $0x0,%ebx
		jl     jump_494c4
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_494c4
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_494c4
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_49747
	jump_494c4:
		mov    %esi,%ebx
		add    $0x200,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4951a
		cmp    $0x0,%ebx
		jl     jump_4951a
		mov    0x200(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4951a
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4951a
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_49747
	jump_4951a:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49569
		cmp    $0x0,%ebx
		jl     jump_49569
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49569
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49569
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_49747
	jump_49569:
		mov    %esi,%ebx
		add    $0x200,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_495bf
		cmp    $0x0,%ebx
		jl     jump_495bf
		mov    0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_495bf
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_495bf
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_49747
	jump_495bf:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4960e
		cmp    $0x0,%ebx
		jl     jump_4960e
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4960e
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4960e
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_49747
	jump_4960e:
		mov    %esi,%ebx
		add    $0xfffffffc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4965e
		cmp    $0x0,%ebx
		jl     jump_4965e
		mov    -0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4965e
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4965e
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_49747
	jump_4965e:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_496ab
		cmp    $0x0,%ebx
		jl     jump_496ab
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_496ab
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_496ab
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_49747
	jump_496ab:
		mov    %esi,%ebx
		add    $0xfffffffc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_496f6
		cmp    $0x0,%ebx
		jl     jump_496f6
		mov    -0x4(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_496f6
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_496f6
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_49747
	jump_496f6:
		mov    %esi,%ebx
		add    $0xfffffdfc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49747
		cmp    $0x0,%ebx
		jl     jump_49747
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49747
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49747
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_49747
	jump_49747:
		pop    %edi
		call   func_43b5e
		ret


/*----------------------------------------------------------------*/
func_4974e:
/*----------------------------------------------------------------*/
		push   %edi
		mov    %esi,%ebx
		add    $0xa18,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_497a4
		cmp    $0x0,%ebx
		jl     jump_497a4
		mov    0xa18(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_497a4
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_497a4
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_497a4:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_497fa
		cmp    $0x0,%ebx
		jl     jump_497fa
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_497fa
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_497fa
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_497fa:
		mov    %esi,%ebx
		add    $0x814,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49850
		cmp    $0x0,%ebx
		jl     jump_49850
		mov    0x814(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49850
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49850
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49850:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_498a6
		cmp    $0x0,%ebx
		jl     jump_498a6
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_498a6
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_498a6
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_498a6:
		mov    %esi,%ebx
		add    $0x814,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_498fc
		cmp    $0x0,%ebx
		jl     jump_498fc
		mov    0x814(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_498fc
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_498fc
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_498fc:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49952
		cmp    $0x0,%ebx
		jl     jump_49952
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49952
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49952
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49952:
		mov    %esi,%ebx
		add    $0x814,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_499a7
		cmp    $0x0,%ebx
		jl     jump_499a7
		mov    0x814(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_499a7
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_499a7
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_499a7:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_499fd
		cmp    $0x0,%ebx
		jl     jump_499fd
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_499fd
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_499fd
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_499fd:
		mov    %esi,%ebx
		add    $0x610,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49a53
		cmp    $0x0,%ebx
		jl     jump_49a53
		mov    0x610(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49a53
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49a53
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49a53:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49aa9
		cmp    $0x0,%ebx
		jl     jump_49aa9
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49aa9
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49aa9
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49aa9:
		mov    %esi,%ebx
		add    $0x610,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49aff
		cmp    $0x0,%ebx
		jl     jump_49aff
		mov    0x610(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49aff
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49aff
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49aff:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49b55
		cmp    $0x0,%ebx
		jl     jump_49b55
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49b55
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49b55
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49b55:
		mov    %esi,%ebx
		add    $0x610,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49baa
		cmp    $0x0,%ebx
		jl     jump_49baa
		mov    0x610(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49baa
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_49baa
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49baa:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49c00
		cmp    $0x0,%ebx
		jl     jump_49c00
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49c00
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49c00
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49c00:
		mov    %esi,%ebx
		add    $0x40c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49c56
		cmp    $0x0,%ebx
		jl     jump_49c56
		mov    0x40c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49c56
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49c56
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49c56:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49cac
		cmp    $0x0,%ebx
		jl     jump_49cac
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49cac
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49cac
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49cac:
		mov    %esi,%ebx
		add    $0x40c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49d02
		cmp    $0x0,%ebx
		jl     jump_49d02
		mov    0x40c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49d02
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49d02
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49d02:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49d58
		cmp    $0x0,%ebx
		jl     jump_49d58
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49d58
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49d58
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49d58:
		mov    %esi,%ebx
		add    $0x40c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49dad
		cmp    $0x0,%ebx
		jl     jump_49dad
		mov    0x40c(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49dad
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_49dad
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49dad:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49e03
		cmp    $0x0,%ebx
		jl     jump_49e03
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49e03
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49e03
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49e03:
		mov    %esi,%ebx
		add    $0x208,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49e59
		cmp    $0x0,%ebx
		jl     jump_49e59
		mov    0x208(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49e59
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49e59
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49e59:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49eaf
		cmp    $0x0,%ebx
		jl     jump_49eaf
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49eaf
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49eaf
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49eaf:
		mov    %esi,%ebx
		add    $0x208,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49f05
		cmp    $0x0,%ebx
		jl     jump_49f05
		mov    0x208(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49f05
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49f05
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49f05:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49f5b
		cmp    $0x0,%ebx
		jl     jump_49f5b
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49f5b
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_49f5b
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49f5b:
		mov    %esi,%ebx
		add    $0x208,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_49fb0
		cmp    $0x0,%ebx
		jl     jump_49fb0
		mov    0x208(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_49fb0
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_49fb0
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_49fb0:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a006
		cmp    $0x0,%ebx
		jl     jump_4a006
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a006
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a006
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a006:
		mov    %esi,%ebx
		add    $0x4,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a056
		cmp    $0x0,%ebx
		jl     jump_4a056
		mov    0x4(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a056
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a056
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a056:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a0ac
		cmp    $0x0,%ebx
		jl     jump_4a0ac
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a0ac
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a0ac
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a0ac:
		mov    %esi,%ebx
		add    $0x4,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a0fc
		cmp    $0x0,%ebx
		jl     jump_4a0fc
		mov    0x4(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a0fc
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a0fc
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a0fc:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a14b
		cmp    $0x0,%ebx
		jl     jump_4a14b
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a14b
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a14b
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a14b:
		mov    %esi,%ebx
		add    $0x4,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a19a
		cmp    $0x0,%ebx
		jl     jump_4a19a
		mov    0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a19a
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    (%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a19a
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x1,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a19a:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a1e9
		cmp    $0x0,%ebx
		jl     jump_4a1e9
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a1e9
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x10(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a1e9
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x10,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a1e9:
		mov    %esi,%ebx
		add    $0xfffffe00,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a23f
		cmp    $0x0,%ebx
		jl     jump_4a23f
		mov    -0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a23f
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x8(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a23f
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x4,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a23f:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a28d
		cmp    $0x0,%ebx
		jl     jump_4a28d
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a28d
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0xc(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a28d
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x8,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a28d:
		mov    %esi,%ebx
		add    $0xfffffe00,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a2de
		cmp    $0x0,%ebx
		jl     jump_4a2de
		mov    -0x200(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a2de
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x4(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a2de
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x2,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a2de:
		mov    %esi,%ebx
		add    $0xfffffdfc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a32f
		cmp    $0x0,%ebx
		jl     jump_4a32f
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a32f
		imul   $0x18,%ebx,%edx
		add    h_blocks,%edx
		mov    0x14(%edx),%edx
		cmp    $0x0,%edx
		je     jump_4a32f
		add    h_blocks,%edx
		mov    %edx,data_48ad0(,%ecx,4)
		inc    %ecx
		testb  $0x20,data_5e39c(%ebx)
		jne    jump_4a32f
	jump_4a32f:
		pop    %edi
		call   func_43b5e
		ret


/*----------------------------------------------------------------*/
func_4a336:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c11a
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    %ax,%cx
		mov    %bx,%dx
		sar    $0x8,%ax
		sar    $0x8,%bx
		shl    $0x7,%bx
		mov    %ax,%si
		add    %bx,%si
		and    $0xffff,%esi
		shl    $0x2,%esi
		and    $0xff,%cx
		and    $0xff,%dx
		mov    %dx,%bx
		add    %cx,%bx
		mov    $0x0,%eax
		cmp    $0x100,%bx
		jl     jump_4a393
		add    $0x8,%eax
	jump_4a393:
		cmp    %dx,%cx
		jl     jump_4a39b
		add    $0x4,%eax
	jump_4a39b:
		add    data_55358,%esi
		jmp    *jpt_4A3A1(%eax)
jpt_4A3A1:	/* 0x4a3a7 */
		.long   func_4a3c5
		.long   func_4b277
		.long   func_4a3b7
		.long   func_4a3c2


/*----------------------------------------------------------------*/
func_4a3b7:
/*----------------------------------------------------------------*/
		add    $0x200,%esi
		jmp    func_4b277


/*----------------------------------------------------------------*/
func_4a3c2:
/*----------------------------------------------------------------*/
		add    $0x4,%esi


/*----------------------------------------------------------------*/
func_4a3c5:
/*----------------------------------------------------------------*/
		mov    0x10(%ebp),%cx
		mov    $0x80000000,%eax
		ror    %cl,%eax
		xchg   %al,%ah
		rol    $0x10,%eax
		xchg   %al,%ah
		movzwl 0x14(%ebp),%ecx
		imul   $0x14,%ecx,%ecx
		mov    %esi,%ebx
		add    $0xc14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a447
		cmp    $0x0,%ebx
		jl     jump_4a447
		mov    0xc14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a447
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a447
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a447
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x21305,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4a447:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a4b0
		cmp    $0x0,%ebx
		jl     jump_4a4b0
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a4b0
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a4b0
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a4b0
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x21285,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4a4b0:
		mov    %esi,%ebx
		add    $0xa10,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a519
		cmp    $0x0,%ebx
		jl     jump_4a519
		mov    0xa10(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a519
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a519
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a519
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x21284,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4a519:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a581
		cmp    $0x0,%ebx
		jl     jump_4a581
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a581
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a581
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a581
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1e285,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4a581:
		mov    %esi,%ebx
		add    $0xa10,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a5ea
		cmp    $0x0,%ebx
		jl     jump_4a5ea
		mov    0xa10(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a5ea
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a5ea
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a5ea
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1e284,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4a5ea:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a653
		cmp    $0x0,%ebx
		jl     jump_4a653
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a653
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a653
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a653
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1e204,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4a653:
		mov    %esi,%ebx
		add    $0xa10,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a6bc
		cmp    $0x0,%ebx
		jl     jump_4a6bc
		mov    0xa10(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a6bc
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a6bc
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a6bc
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1b284,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4a6bc:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a725
		cmp    $0x0,%ebx
		jl     jump_4a725
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a725
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a725
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a725
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1b204,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4a725:
		mov    %esi,%ebx
		add    $0x80c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a78e
		cmp    $0x0,%ebx
		jl     jump_4a78e
		mov    0x80c(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a78e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a78e
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a78e
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1b203,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4a78e:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a7f6
		cmp    $0x0,%ebx
		jl     jump_4a7f6
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a7f6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a7f6
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a7f6
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x18204,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4a7f6:
		mov    %esi,%ebx
		add    $0x80c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a85f
		cmp    $0x0,%ebx
		jl     jump_4a85f
		mov    0x80c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a85f
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a85f
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a85f
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x18203,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4a85f:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a8c8
		cmp    $0x0,%ebx
		jl     jump_4a8c8
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a8c8
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a8c8
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a8c8
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x18183,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4a8c8:
		mov    %esi,%ebx
		add    $0x80c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a931
		cmp    $0x0,%ebx
		jl     jump_4a931
		mov    0x80c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a931
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a931
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a931
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x15203,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4a931:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4a99a
		cmp    $0x0,%ebx
		jl     jump_4a99a
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4a99a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4a99a
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4a99a
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x15183,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4a99a:
		mov    %esi,%ebx
		add    $0x608,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4aa03
		cmp    $0x0,%ebx
		jl     jump_4aa03
		mov    0x608(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4aa03
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4aa03
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4aa03
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x15182,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4aa03:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4aa6b
		cmp    $0x0,%ebx
		jl     jump_4aa6b
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4aa6b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4aa6b
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4aa6b
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x12183,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4aa6b:
		mov    %esi,%ebx
		add    $0x608,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4aad4
		cmp    $0x0,%ebx
		jl     jump_4aad4
		mov    0x608(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4aad4
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4aad4
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4aad4
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x12182,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4aad4:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ab3d
		cmp    $0x0,%ebx
		jl     jump_4ab3d
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ab3d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ab3d
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ab3d
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x12102,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4ab3d:
		mov    %esi,%ebx
		add    $0x608,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4aba6
		cmp    $0x0,%ebx
		jl     jump_4aba6
		mov    0x608(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4aba6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4aba6
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4aba6
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xf182,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4aba6:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ac0f
		cmp    $0x0,%ebx
		jl     jump_4ac0f
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ac0f
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ac0f
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ac0f
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xf102,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4ac0f:
		mov    %esi,%ebx
		add    $0x404,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ac78
		cmp    $0x0,%ebx
		jl     jump_4ac78
		mov    0x404(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ac78
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ac78
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ac78
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xf101,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4ac78:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ace0
		cmp    $0x0,%ebx
		jl     jump_4ace0
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ace0
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ace0
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ace0
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xc102,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4ace0:
		mov    %esi,%ebx
		add    $0x404,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ad49
		cmp    $0x0,%ebx
		jl     jump_4ad49
		mov    0x404(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ad49
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ad49
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ad49
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xc101,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4ad49:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4adb2
		cmp    $0x0,%ebx
		jl     jump_4adb2
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4adb2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4adb2
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4adb2
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xc081,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4adb2:
		mov    %esi,%ebx
		add    $0x404,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ae1b
		cmp    $0x0,%ebx
		jl     jump_4ae1b
		mov    0x404(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ae1b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ae1b
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ae1b
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x9101,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4ae1b:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ae84
		cmp    $0x0,%ebx
		jl     jump_4ae84
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ae84
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ae84
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ae84
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x9081,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4ae84:
		mov    %esi,%ebx
		add    $0x200,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4aeed
		cmp    $0x0,%ebx
		jl     jump_4aeed
		mov    0x200(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4aeed
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4aeed
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4aeed
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x9080,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4aeed:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4af55
		cmp    $0x0,%ebx
		jl     jump_4af55
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4af55
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4af55
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4af55
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x6081,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4af55:
		mov    %esi,%ebx
		add    $0x200,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4afbe
		cmp    $0x0,%ebx
		jl     jump_4afbe
		mov    0x200(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4afbe
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4afbe
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4afbe
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x6080,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4afbe:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b020
		cmp    $0x0,%ebx
		jl     jump_4b020
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b020
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b020
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b020
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x6000,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4b020:
		mov    %esi,%ebx
		add    $0x200,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b089
		cmp    $0x0,%ebx
		jl     jump_4b089
		mov    0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b089
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b089
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b089
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x3080,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4b089:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b0eb
		cmp    $0x0,%ebx
		jl     jump_4b0eb
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b0eb
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b0eb
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b0eb
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x3000,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4b0eb:
		mov    %esi,%ebx
		add    $0xfffffffc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b14e
		cmp    $0x0,%ebx
		jl     jump_4b14e
		mov    -0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b14e
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b14e
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b14e
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x2fff,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4b14e:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b1ab
		cmp    $0x0,%ebx
		jl     jump_4b1ab
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b1ab
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b1ab
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b1ab
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x0,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4b1ab:
		mov    %esi,%ebx
		add    $0xfffffffc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b20a
		cmp    $0x0,%ebx
		jl     jump_4b20a
		mov    -0x4(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b20a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b20a
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b20a
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xffffffff,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4b20a:
		mov    %esi,%ebx
		add    $0xfffffdfc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b272
		cmp    $0x0,%ebx
		jl     jump_4b272
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b272
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b272
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b272
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xffffff7f,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4b272:
		jmp    jump_4c12e


/*----------------------------------------------------------------*/
func_4b277:
/*----------------------------------------------------------------*/
		mov    0x10(%ebp),%cx
		mov    $0x80000000,%eax
		ror    %cl,%eax
		xchg   %al,%ah
		rol    $0x10,%eax
		xchg   %al,%ah
		movzwl 0x14(%ebp),%ecx
		imul   $0x14,%ecx,%ecx
		mov    %esi,%ebx
		add    $0xa18,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b2f8
		cmp    $0x0,%ebx
		jl     jump_4b2f8
		mov    0xa18(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b2f8
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b2f8
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b2f8
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $jump_21286,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4b2f8:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b361
		cmp    $0x0,%ebx
		jl     jump_4b361
		mov    0xa14(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b361
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b361
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b361
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x21285,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4b361:
		mov    %esi,%ebx
		add    $0x814,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b3ca
		cmp    $0x0,%ebx
		jl     jump_4b3ca
		mov    0x814(%esi),%ebx
		movzbl 0xb(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b3ca
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b3ca
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b3ca
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x21205,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4b3ca:
		mov    %esi,%ebx
		add    $0xa14,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b433
		cmp    $0x0,%ebx
		jl     jump_4b433
		mov    0xa14(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b433
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b433
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b433
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1e285,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4b433:
		mov    %esi,%ebx
		add    $0x814,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b49c
		cmp    $0x0,%ebx
		jl     jump_4b49c
		mov    0x814(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b49c
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b49c
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b49c
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1e205,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4b49c:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b505
		cmp    $0x0,%ebx
		jl     jump_4b505
		mov    0x810(%esi),%ebx
		movzbl 0xa(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b505
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b505
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b505
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1e204,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4b505:
		mov    %esi,%ebx
		add    $0x814,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b56d
		cmp    $0x0,%ebx
		jl     jump_4b56d
		mov    0x814(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b56d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b56d
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b56d
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1b205,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4b56d:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b5d6
		cmp    $0x0,%ebx
		jl     jump_4b5d6
		mov    0x810(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b5d6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b5d6
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b5d6
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1b204,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4b5d6:
		mov    %esi,%ebx
		add    $0x610,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b63f
		cmp    $0x0,%ebx
		jl     jump_4b63f
		mov    0x610(%esi),%ebx
		movzbl 0x9(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b63f
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b63f
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b63f
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x1b184,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4b63f:
		mov    %esi,%ebx
		add    $0x810,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b6a8
		cmp    $0x0,%ebx
		jl     jump_4b6a8
		mov    0x810(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b6a8
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b6a8
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b6a8
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x18204,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4b6a8:
		mov    %esi,%ebx
		add    $0x610,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b711
		cmp    $0x0,%ebx
		jl     jump_4b711
		mov    0x610(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b711
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b711
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b711
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x18184,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4b711:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b77a
		cmp    $0x0,%ebx
		jl     jump_4b77a
		mov    0x60c(%esi),%ebx
		movzbl 0x8(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b77a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b77a
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b77a
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x18183,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4b77a:
		mov    %esi,%ebx
		add    $0x610,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b7e2
		cmp    $0x0,%ebx
		jl     jump_4b7e2
		mov    0x610(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b7e2
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b7e2
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b7e2
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x15184,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4b7e2:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b84b
		cmp    $0x0,%ebx
		jl     jump_4b84b
		mov    0x60c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b84b
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b84b
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b84b
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x15183,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4b84b:
		mov    %esi,%ebx
		add    $0x40c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b8b4
		cmp    $0x0,%ebx
		jl     jump_4b8b4
		mov    0x40c(%esi),%ebx
		movzbl 0x7(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b8b4
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b8b4
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b8b4
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x15103,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4b8b4:
		mov    %esi,%ebx
		add    $0x60c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b91d
		cmp    $0x0,%ebx
		jl     jump_4b91d
		mov    0x60c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b91d
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b91d
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b91d
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x12183,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4b91d:
		mov    %esi,%ebx
		add    $0x40c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b986
		cmp    $0x0,%ebx
		jl     jump_4b986
		mov    0x40c(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b986
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b986
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b986
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x12103,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4b986:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4b9ef
		cmp    $0x0,%ebx
		jl     jump_4b9ef
		mov    0x408(%esi),%ebx
		movzbl 0x6(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4b9ef
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4b9ef
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4b9ef
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x12102,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4b9ef:
		mov    %esi,%ebx
		add    $0x40c,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4ba57
		cmp    $0x0,%ebx
		jl     jump_4ba57
		mov    0x40c(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4ba57
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4ba57
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4ba57
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xf103,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4ba57:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bac0
		cmp    $0x0,%ebx
		jl     jump_4bac0
		mov    0x408(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bac0
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bac0
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bac0
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xf102,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4bac0:
		mov    %esi,%ebx
		add    $0x208,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bb29
		cmp    $0x0,%ebx
		jl     jump_4bb29
		mov    0x208(%esi),%ebx
		movzbl 0x5(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bb29
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bb29
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bb29
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xf082,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4bb29:
		mov    %esi,%ebx
		add    $0x408,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bb92
		cmp    $0x0,%ebx
		jl     jump_4bb92
		mov    0x408(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bb92
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bb92
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bb92
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xc102,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4bb92:
		mov    %esi,%ebx
		add    $0x208,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bbfb
		cmp    $0x0,%ebx
		jl     jump_4bbfb
		mov    0x208(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bbfb
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bbfb
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bbfb
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xc082,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4bbfb:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bc64
		cmp    $0x0,%ebx
		jl     jump_4bc64
		mov    0x204(%esi),%ebx
		movzbl 0x4(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bc64
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bc64
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bc64
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xc081,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4bc64:
		mov    %esi,%ebx
		add    $0x208,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bccc
		cmp    $0x0,%ebx
		jl     jump_4bccc
		mov    0x208(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bccc
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bccc
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bccc
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x9082,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4bccc:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bd35
		cmp    $0x0,%ebx
		jl     jump_4bd35
		mov    0x204(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bd35
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bd35
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bd35
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x9081,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4bd35:
		mov    %esi,%ebx
		add    $0x4,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bd98
		cmp    $0x0,%ebx
		jl     jump_4bd98
		mov    0x4(%esi),%ebx
		movzbl 0x3(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bd98
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bd98
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bd98
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x9001,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4bd98:
		mov    %esi,%ebx
		add    $0x204,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4be01
		cmp    $0x0,%ebx
		jl     jump_4be01
		mov    0x204(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4be01
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4be01
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4be01
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x6081,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4be01:
		mov    %esi,%ebx
		add    $0x4,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4be64
		cmp    $0x0,%ebx
		jl     jump_4be64
		mov    0x4(%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4be64
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4be64
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4be64
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x6001,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4be64:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bec6
		cmp    $0x0,%ebx
		jl     jump_4bec6
		mov    (%esi),%ebx
		movzbl 0x2(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bec6
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bec6
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bec6
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x6000,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4bec6:
		mov    %esi,%ebx
		add    $0x4,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bf28
		cmp    $0x0,%ebx
		jl     jump_4bf28
		mov    0x4(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bf28
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    (%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bf28
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bf28
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x3001,%esi
		mov    %esi,data_60aac
		movw   $0x0,data_60b18
		jmp    jump_4c12e
	jump_4bf28:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bf8a
		cmp    $0x0,%ebx
		jl     jump_4bf8a
		mov    (%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bf8a
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x10(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bf8a
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bf8a
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x3000,%esi
		mov    %esi,data_60aac
		movw   $0x4,data_60b18
		jmp    jump_4c12e
	jump_4bf8a:
		mov    %esi,%ebx
		add    $0xfffffe00,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4bff3
		cmp    $0x0,%ebx
		jl     jump_4bff3
		mov    -0x200(%esi),%ebx
		movzbl 0x1(%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4bff3
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x8(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4bff3
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4bff3
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x2f80,%esi
		mov    %esi,data_60aac
		movw   $0x2,data_60b18
		jmp    jump_4c12e
	jump_4bff3:
		mov    %esi,%ebx
		add    $0x0,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4c051
		cmp    $0x0,%ebx
		jl     jump_4c051
		mov    (%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4c051
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0xc(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4c051
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4c051
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0x0,%esi
		mov    %esi,data_60aac
		movw   $0x3,data_60b18
		jmp    jump_4c12e
	jump_4c051:
		mov    %esi,%ebx
		add    $0xfffffe00,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4c0b3
		cmp    $0x0,%ebx
		jl     jump_4c0b3
		mov    -0x200(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4c0b3
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x4(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4c0b3
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4c0b3
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xffffff80,%esi
		mov    %esi,data_60aac
		movw   $0x1,data_60b18
		jmp    jump_4c12e
	jump_4c0b3:
		mov    %esi,%ebx
		add    $0xfffffdfc,%ebx
		sub    data_55358,%ebx
		cmp    $0xc000,%ebx
		jge    jump_4c118
		cmp    $0x0,%ebx
		jl     jump_4c118
		mov    -0x204(%esi),%ebx
		movzbl (%ebx),%ebx
		cmp    $0x4,%ebx
		jle    jump_4c118
		imul   $0x18,%ebx,%ebx
		add    h_blocks,%ebx
		mov    0x14(%ebx),%ebx
		cmp    $0x0,%ebx
		je     jump_4c118
		add    h_blocks,%ebx
		test   %eax,(%ecx,%ebx,1)
		jne    jump_4c118
		sub    data_55358,%esi
		shr    $0x2,%esi
		add    $0xffffff7f,%esi
		mov    %esi,data_60aac
		movw   $0x5,data_60b18
		jmp    jump_4c12e
	jump_4c118:
		jmp    jump_4c12e
	jump_4c11a:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c125
		jmp    jump_4c12e
	jump_4c125:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c12e
	jump_4c12e:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
ASM_LbPaletteSet:	/* 0x4c136 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		jne    jump_4c151
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c183
	jump_4c151:
		mov    $0x0,%bx
		mov    $0x10,%cx
	jump_4c159:
		push   %bx
		push   %cx
		mov    $0x1000,%ax
		int    $0x10
		pop    %cx
		pop    %bx
		inc    %bh
		inc    %bl
		loopw  jump_4c159
		mov    0x8(%ebp),%esi
		mov    $0x3c8,%dx
		mov    $0x0,%al
		out    %al,(%dx)
		mov    $0xc9,%dl
		mov    $0x30,%ecx
		rep outsb %ds:(%esi),(%dx)
		jmp    jump_4c19f
	jump_4c183:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c19f
		mov    0x8(%ebp),%esi
		mov    $0x3c8,%dx
		mov    $0x0,%al
		out    %al,(%dx)
		mov    $0xc9,%dl
		mov    $0x300,%ecx
		rep outsb %ds:(%esi),(%dx)
	jump_4c19f:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
ASM_LbScreenSetup:	/* 0x4c1a7 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		mov    0x8(%ebp),%ax
		mov    $0x0,%ah
		int    $0x10
		mov    $0x7,%ax
		xor    %cx,%cx
		mov    $0x27e,%dx
		int    $0x33
		mov    $0x8,%ax
		xor    %cx,%cx
		mov    $0x18e,%dx
		int    $0x33
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
screen_ega_bitmask_allow_all:	/* 0x4c1da */
/*----------------------------------------------------------------*/
		push   %ax
		push   %dx
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		pop    %dx
		pop    %ax
		ret


/*----------------------------------------------------------------*/
LbScreenSurfaceClear:	/* 0x4c1f3 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c21a
		push   $0x1f400
		push   0xc(%ebp)
		push   0x8(%ebp)
		call   ac_LbMemorySet
		add    $0xc,%esp
		jmp    jump_4c22e
	jump_4c21a:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c225
		jmp    jump_4c22e
	jump_4c225:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c22e
	jump_4c22e:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
LbScreenClearVres16:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cld
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c2cd
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		mov    $0xc4,%dl
		mov    $0x102,%ax
		out    %ax,(%dx)
		push   $0x9600
		push   0x8(%ebp)
		push   EXPORT_SYMBOL(VGABuffer)
		call   ac_LbMemorySet
		add    $0xc,%esp
		mov    $0x202,%ax
		out    %ax,(%dx)
		push   $0x9600
		push   0x8(%ebp)
		push   EXPORT_SYMBOL(VGABuffer)
		call   ac_LbMemorySet
		add    $0xc,%esp
		mov    $0x402,%ax
		out    %ax,(%dx)
		push   $0x9600
		push   0x8(%ebp)
		push   EXPORT_SYMBOL(VGABuffer)
		call   ac_LbMemorySet
		add    $0xc,%esp
		mov    $0x802,%ax
		out    %ax,(%dx)
		push   $0x9600
		push   0x8(%ebp)
		push   EXPORT_SYMBOL(VGABuffer)
		call   ac_LbMemorySet
		add    $0xc,%esp
		jmp    jump_4c2e1
	jump_4c2cd:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c2d8
		jmp    jump_4c2e1
	jump_4c2d8:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c2e1
	jump_4c2e1:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_4c32f:
/*----------------------------------------------------------------*/
		push   %eax
		push   %ecx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c406
		mov    UScreen,%esi
		mov    EXPORT_SYMBOL(WScreen),%edi
		mov    $0x190,%cx
	jump_4c350:
		mov    (%esi),%eax
		mov    %eax,(%edi)
		mov    0x4(%esi),%eax
		mov    %eax,0x4(%edi)
		mov    0x8(%esi),%eax
		mov    %eax,0x8(%edi)
		mov    0xc(%esi),%eax
		mov    %eax,0xc(%edi)
		mov    0x7d00(%esi),%eax
		mov    %eax,0x7d00(%edi)
		mov    0x7d04(%esi),%eax
		mov    %eax,0x7d04(%edi)
		mov    0x7d08(%esi),%eax
		mov    %eax,0x7d08(%edi)
		mov    0x7d0c(%esi),%eax
		mov    %eax,0x7d0c(%edi)
		mov    0xfa00(%esi),%eax
		mov    %eax,0xfa00(%edi)
		mov    0xfa04(%esi),%eax
		mov    %eax,0xfa04(%edi)
		mov    0xfa08(%esi),%eax
		mov    %eax,0xfa08(%edi)
		mov    0xfa0c(%esi),%eax
		mov    %eax,0xfa0c(%edi)
		mov    0x17700(%esi),%eax
		mov    %eax,0x17700(%edi)
		mov    0x17704(%esi),%eax
		mov    %eax,0x17704(%edi)
		mov    0x17708(%esi),%eax
		mov    %eax,0x17708(%edi)
		mov    0x1770c(%esi),%eax
		mov    %eax,0x1770c(%edi)
		add    $0x50,%esi
		add    $0x50,%edi
		dec    %cx
		jne    jump_4c350
		jmp    jump_4c41a
	jump_4c406:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c411
		jmp    jump_4c41a
	jump_4c411:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c41a
	jump_4c41a:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
copy_screen_cube:	/* 0x4c41f */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c77b
		mov    0x8(%ebp),%eax
		add    DestinationX,%eax
		and    $0xf,%eax
		shl    $0x2,%eax
		mov    0xc(%ebp),%ebx
		add    DestinationY,%ebx
		cmp    $0x19,%ebx
		jl     jump_4c455
		sub    $0x19,%ebx
	jump_4c455:
		imul   $0x500,%ebx,%ebx
		add    %ebx,%eax
		mov    BScreen,%esi
		add    %eax,%esi
		mov    0x8(%ebp),%eax
		shl    $0x2,%eax
		imul   $0x500,0xc(%ebp),%ebx
		add    %ebx,%eax
		add    $0x10,%eax
		mov    EXPORT_SYMBOL(WScreen),%edi
		add    %eax,%edi
		mov    (%esi),%eax
		mov    %eax,(%edi)
		mov    0x7d00(%esi),%eax
		mov    %eax,0x7d00(%edi)
		mov    0xfa00(%esi),%eax
		mov    %eax,0xfa00(%edi)
		mov    0x17700(%esi),%eax
		mov    %eax,0x17700(%edi)
		mov    0x50(%esi),%eax
		mov    %eax,0x50(%edi)
		mov    0x7d50(%esi),%eax
		mov    %eax,0x7d50(%edi)
		mov    0xfa50(%esi),%eax
		mov    %eax,0xfa50(%edi)
		mov    0x17750(%esi),%eax
		mov    %eax,0x17750(%edi)
		mov    0xa0(%esi),%eax
		mov    %eax,0xa0(%edi)
		mov    0x7da0(%esi),%eax
		mov    %eax,0x7da0(%edi)
		mov    0xfaa0(%esi),%eax
		mov    %eax,0xfaa0(%edi)
		mov    0x177a0(%esi),%eax
		mov    %eax,0x177a0(%edi)
		mov    0xf0(%esi),%eax
		mov    %eax,0xf0(%edi)
		mov    0x7df0(%esi),%eax
		mov    %eax,0x7df0(%edi)
		mov    0xfaf0(%esi),%eax
		mov    %eax,0xfaf0(%edi)
		mov    0x177f0(%esi),%eax
		mov    %eax,0x177f0(%edi)
		mov    0x140(%esi),%eax
		mov    %eax,0x140(%edi)
		mov    0x7e40(%esi),%eax
		mov    %eax,0x7e40(%edi)
		mov    0xfb40(%esi),%eax
		mov    %eax,0xfb40(%edi)
		mov    0x17840(%esi),%eax
		mov    %eax,0x17840(%edi)
		mov    0x190(%esi),%eax
		mov    %eax,0x190(%edi)
		mov    0x7e90(%esi),%eax
		mov    %eax,0x7e90(%edi)
		mov    0xfb90(%esi),%eax
		mov    %eax,0xfb90(%edi)
		mov    0x17890(%esi),%eax
		mov    %eax,0x17890(%edi)
		mov    0x1e0(%esi),%eax
		mov    %eax,0x1e0(%edi)
		mov    0x7ee0(%esi),%eax
		mov    %eax,0x7ee0(%edi)
		mov    0xfbe0(%esi),%eax
		mov    %eax,0xfbe0(%edi)
		mov    0x178e0(%esi),%eax
		mov    %eax,0x178e0(%edi)
		mov    0x230(%esi),%eax
		mov    %eax,0x230(%edi)
		mov    0x7f30(%esi),%eax
		mov    %eax,0x7f30(%edi)
		mov    0xfc30(%esi),%eax
		mov    %eax,0xfc30(%edi)
		mov    0x17930(%esi),%eax
		mov    %eax,0x17930(%edi)
		mov    0x280(%esi),%eax
		mov    %eax,0x280(%edi)
		mov    0x7f80(%esi),%eax
		mov    %eax,0x7f80(%edi)
		mov    0xfc80(%esi),%eax
		mov    %eax,0xfc80(%edi)
		mov    0x17980(%esi),%eax
		mov    %eax,0x17980(%edi)
		mov    0x2d0(%esi),%eax
		mov    %eax,0x2d0(%edi)
		mov    0x7fd0(%esi),%eax
		mov    %eax,0x7fd0(%edi)
		mov    0xfcd0(%esi),%eax
		mov    %eax,0xfcd0(%edi)
		mov    0x179d0(%esi),%eax
		mov    %eax,0x179d0(%edi)
		mov    0x320(%esi),%eax
		mov    %eax,0x320(%edi)
		mov    0x8020(%esi),%eax
		mov    %eax,0x8020(%edi)
		mov    0xfd20(%esi),%eax
		mov    %eax,0xfd20(%edi)
		mov    0x17a20(%esi),%eax
		mov    %eax,0x17a20(%edi)
		mov    0x370(%esi),%eax
		mov    %eax,0x370(%edi)
		mov    0x8070(%esi),%eax
		mov    %eax,0x8070(%edi)
		mov    0xfd70(%esi),%eax
		mov    %eax,0xfd70(%edi)
		mov    0x17a70(%esi),%eax
		mov    %eax,0x17a70(%edi)
		mov    0x3c0(%esi),%eax
		mov    %eax,0x3c0(%edi)
		mov    0x80c0(%esi),%eax
		mov    %eax,0x80c0(%edi)
		mov    0xfdc0(%esi),%eax
		mov    %eax,0xfdc0(%edi)
		mov    0x17ac0(%esi),%eax
		mov    %eax,0x17ac0(%edi)
		mov    0x410(%esi),%eax
		mov    %eax,0x410(%edi)
		mov    0x8110(%esi),%eax
		mov    %eax,0x8110(%edi)
		mov    0xfe10(%esi),%eax
		mov    %eax,0xfe10(%edi)
		mov    0x17b10(%esi),%eax
		mov    %eax,0x17b10(%edi)
		mov    0x460(%esi),%eax
		mov    %eax,0x460(%edi)
		mov    0x8160(%esi),%eax
		mov    %eax,0x8160(%edi)
		mov    0xfe60(%esi),%eax
		mov    %eax,0xfe60(%edi)
		mov    0x17b60(%esi),%eax
		mov    %eax,0x17b60(%edi)
		mov    0x4b0(%esi),%eax
		mov    %eax,0x4b0(%edi)
		mov    0x81b0(%esi),%eax
		mov    %eax,0x81b0(%edi)
		mov    0xfeb0(%esi),%eax
		mov    %eax,0xfeb0(%edi)
		mov    0x17bb0(%esi),%eax
		mov    %eax,0x17bb0(%edi)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret
	jump_4c77b:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c786
		jmp    jump_4c78f
	jump_4c786:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4c78f
	jump_4c78f:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_4c797:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4cb58
		imul   $0x500,0xc(%ebp),%eax
		add    $0x10,%eax
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    EXPORT_SYMBOL(VScreen),%edi
		add    %eax,%esi
		add    %eax,%edi
		mov    $0x3c4,%dx
		mov    $0x102,%ax
		out    %ax,(%dx)
		mov    $0x10,%ecx
		mov    0x8(%ebp),%ebx
	jump_4c7d9:
		cmpb   $0x0,(%ebx)
		jle    jump_4c894
		mov    (%esi),%eax
		mov    %eax,(%edi)
		mov    0x50(%esi),%eax
		mov    %eax,0x50(%edi)
		mov    0xa0(%esi),%eax
		mov    %eax,0xa0(%edi)
		mov    0xf0(%esi),%eax
		mov    %eax,0xf0(%edi)
		mov    0x140(%esi),%eax
		mov    %eax,0x140(%edi)
		mov    0x190(%esi),%eax
		mov    %eax,0x190(%edi)
		mov    0x1e0(%esi),%eax
		mov    %eax,0x1e0(%edi)
		mov    0x230(%esi),%eax
		mov    %eax,0x230(%edi)
		mov    0x280(%esi),%eax
		mov    %eax,0x280(%edi)
		mov    0x2d0(%esi),%eax
		mov    %eax,0x2d0(%edi)
		mov    0x320(%esi),%eax
		mov    %eax,0x320(%edi)
		mov    0x370(%esi),%eax
		mov    %eax,0x370(%edi)
		mov    0x3c0(%esi),%eax
		mov    %eax,0x3c0(%edi)
		mov    0x410(%esi),%eax
		mov    %eax,0x410(%edi)
		mov    0x460(%esi),%eax
		mov    %eax,0x460(%edi)
		mov    0x4b0(%esi),%eax
		mov    %eax,0x4b0(%edi)
	jump_4c894:
		add    $0x4,%esi
		add    $0x4,%edi
		inc    %ebx
		dec    %ecx
		jne    jump_4c7d9
		sub    $0x40,%edi
		sub    $0x40,%esi
		mov    $0x202,%ax
		out    %ax,(%dx)
		mov    $0x10,%ecx
		mov    0x8(%ebp),%ebx
	jump_4c8b6:
		cmpb   $0x0,(%ebx)
		jle    jump_4c978
		mov    0x7d00(%esi),%eax
		mov    %eax,(%edi)
		mov    0x7d50(%esi),%eax
		mov    %eax,0x50(%edi)
		mov    0x7da0(%esi),%eax
		mov    %eax,0xa0(%edi)
		mov    0x7df0(%esi),%eax
		mov    %eax,0xf0(%edi)
		mov    0x7e40(%esi),%eax
		mov    %eax,0x140(%edi)
		mov    0x7e90(%esi),%eax
		mov    %eax,0x190(%edi)
		mov    0x7ee0(%esi),%eax
		mov    %eax,0x1e0(%edi)
		mov    0x7f30(%esi),%eax
		mov    %eax,0x230(%edi)
		mov    0x7f80(%esi),%eax
		mov    %eax,0x280(%edi)
		mov    0x7fd0(%esi),%eax
		mov    %eax,0x2d0(%edi)
		mov    0x8020(%esi),%eax
		mov    %eax,0x320(%edi)
		mov    0x8070(%esi),%eax
		mov    %eax,0x370(%edi)
		mov    0x80c0(%esi),%eax
		mov    %eax,0x3c0(%edi)
		mov    0x8110(%esi),%eax
		mov    %eax,0x410(%edi)
		mov    0x8160(%esi),%eax
		mov    %eax,0x460(%edi)
		mov    0x81b0(%esi),%eax
		mov    %eax,0x4b0(%edi)
	jump_4c978:
		add    $0x4,%esi
		add    $0x4,%edi
		inc    %ebx
		dec    %ecx
		jne    jump_4c8b6
		sub    $0x40,%edi
		sub    $0x40,%esi
		mov    $0x402,%ax
		out    %ax,(%dx)
		mov    $0x10,%ecx
		mov    0x8(%ebp),%ebx
	jump_4c99a:
		cmpb   $0x0,(%ebx)
		jle    jump_4ca5c
		mov    0xfa00(%esi),%eax
		mov    %eax,(%edi)
		mov    0xfa50(%esi),%eax
		mov    %eax,0x50(%edi)
		mov    0xfaa0(%esi),%eax
		mov    %eax,0xa0(%edi)
		mov    0xfaf0(%esi),%eax
		mov    %eax,0xf0(%edi)
		mov    0xfb40(%esi),%eax
		mov    %eax,0x140(%edi)
		mov    0xfb90(%esi),%eax
		mov    %eax,0x190(%edi)
		mov    0xfbe0(%esi),%eax
		mov    %eax,0x1e0(%edi)
		mov    0xfc30(%esi),%eax
		mov    %eax,0x230(%edi)
		mov    0xfc80(%esi),%eax
		mov    %eax,0x280(%edi)
		mov    0xfcd0(%esi),%eax
		mov    %eax,0x2d0(%edi)
		mov    0xfd20(%esi),%eax
		mov    %eax,0x320(%edi)
		mov    0xfd70(%esi),%eax
		mov    %eax,0x370(%edi)
		mov    0xfdc0(%esi),%eax
		mov    %eax,0x3c0(%edi)
		mov    0xfe10(%esi),%eax
		mov    %eax,0x410(%edi)
		mov    0xfe60(%esi),%eax
		mov    %eax,0x460(%edi)
		mov    0xfeb0(%esi),%eax
		mov    %eax,0x4b0(%edi)
	jump_4ca5c:
		add    $0x4,%esi
		add    $0x4,%edi
		inc    %ebx
		dec    %ecx
		jne    jump_4c99a
		sub    $0x40,%edi
		sub    $0x40,%esi
		mov    $0x802,%ax
		out    %ax,(%dx)
		mov    $0x10,%ecx
		mov    0x8(%ebp),%ebx
	jump_4ca7e:
		cmpb   $0x0,(%ebx)
		jle    jump_4cb42
		decb   (%ebx)
		mov    0x17700(%esi),%eax
		mov    %eax,(%edi)
		mov    0x17750(%esi),%eax
		mov    %eax,0x50(%edi)
		mov    0x177a0(%esi),%eax
		mov    %eax,0xa0(%edi)
		mov    0x177f0(%esi),%eax
		mov    %eax,0xf0(%edi)
		mov    0x17840(%esi),%eax
		mov    %eax,0x140(%edi)
		mov    0x17890(%esi),%eax
		mov    %eax,0x190(%edi)
		mov    0x178e0(%esi),%eax
		mov    %eax,0x1e0(%edi)
		mov    0x17930(%esi),%eax
		mov    %eax,0x230(%edi)
		mov    0x17980(%esi),%eax
		mov    %eax,0x280(%edi)
		mov    0x179d0(%esi),%eax
		mov    %eax,0x2d0(%edi)
		mov    0x17a20(%esi),%eax
		mov    %eax,0x320(%edi)
		mov    0x17a70(%esi),%eax
		mov    %eax,0x370(%edi)
		mov    0x17ac0(%esi),%eax
		mov    %eax,0x3c0(%edi)
		mov    0x17b10(%esi),%eax
		mov    %eax,0x410(%edi)
		mov    0x17b60(%esi),%eax
		mov    %eax,0x460(%edi)
		mov    0x17bb0(%esi),%eax
		mov    %eax,0x4b0(%edi)
	jump_4cb42:
		add    $0x4,%esi
		add    $0x4,%edi
		inc    %ebx
		dec    %ecx
		jne    jump_4ca7e
		sub    $0x40,%edi
		sub    $0x40,%esi
		jmp    jump_4cb6c
	jump_4cb58:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4cb63
		jmp    jump_4cb6c
	jump_4cb63:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4cb6c
	jump_4cb6c:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret

.data

dword_4CB74:	/* 0x4CB74, 68 elements */
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0
		.long   0

.text

/*----------------------------------------------------------------*/
func_4cc84:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    $dword_4CB74,%edi
		movzwl 0x8(%ebp),%eax
		imul   $0x50,%eax,%eax
		add    %eax,%esi
		mov    $0x11,%ecx
	jump_4cca6:
		cmpw   $0x190,0x8(%ebp)
		jge    jump_4ccdf
		mov    (%edi),%edx
		mov    %edx,(%esi)
		add    $0x4,%edi
		mov    (%edi),%edx
		mov    %edx,0x7d00(%esi)
		add    $0x4,%edi
		mov    (%edi),%edx
		mov    %edx,0xfa00(%esi)
		add    $0x4,%edi
		mov    (%edi),%edx
		mov    %edx,0x17700(%esi)
		add    $0x4,%edi
		add    $0x50,%esi
		incw   0x8(%ebp)
		loop   jump_4cca6
	jump_4ccdf:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_4cce7:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    $dword_4CB74,%edi
		movzwl 0x8(%ebp),%eax
		imul   $0x50,%eax,%eax
		add    %eax,%esi
		mov    $0x11,%ecx
	jump_4cd09:
		cmpw   $0x190,0x8(%ebp)
		jge    jump_4cd42
		mov    (%esi),%edx
		mov    %edx,(%edi)
		add    $0x4,%edi
		mov    0x7d00(%esi),%edx
		mov    %edx,(%edi)
		add    $0x4,%edi
		mov    0xfa00(%esi),%edx
		mov    %edx,(%edi)
		add    $0x4,%edi
		mov    0x17700(%esi),%edx
		mov    %edx,(%edi)
		add    $0x4,%edi
		add    $0x50,%esi
		incw   0x8(%ebp)
		loop   jump_4cd09
	jump_4cd42:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_4cd4a:
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4ce11
		mov    $0x3c4,%dx
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x102,%ax
		out    %ax,(%dx)
		mov    $0x190,%ebx
	jump_4cd78:
		mov    $0x4,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    $0x40,%esi
		add    $0x40,%edi
		dec    %ebx
		jne    jump_4cd78
		mov    EXPORT_SYMBOL(WScreen),%esi
		add    $0x7d00,%esi
		mov    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x202,%ax
		out    %ax,(%dx)
		mov    $0x190,%ebx
	jump_4cda5:
		mov    $0x4,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    $0x40,%esi
		add    $0x40,%edi
		dec    %ebx
		jne    jump_4cda5
		mov    EXPORT_SYMBOL(WScreen),%esi
		add    $0xfa00,%esi
		mov    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x402,%ax
		out    %ax,(%dx)
		mov    $0x190,%ebx
	jump_4cdd2:
		mov    $0x4,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    $0x40,%esi
		add    $0x40,%edi
		dec    %ebx
		jne    jump_4cdd2
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    EXPORT_SYMBOL(VScreen),%edi
		add    $0x17700,%esi
		mov    $0x802,%ax
		out    %ax,(%dx)
		mov    $0x190,%ebx
	jump_4cdff:
		mov    $0x4,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    $0x40,%esi
		add    $0x40,%edi
		dec    %ebx
		jne    jump_4cdff
		jmp    jump_4ce25
	jump_4ce11:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4ce1c
		jmp    jump_4ce25
	jump_4ce1c:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4ce25
	jump_4ce25:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
LbScreenSwapVres16:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4ce41
		call   ac_update_vscreen_whole_vres16
		jmp    jump_4ce5a
	jump_4ce41:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4ce51
		call   nullsub_6
		jmp    jump_4ce5a
	jump_4ce51:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4ce5a
	jump_4ce5a:
#if !defined(DOS) /* new bflibrary has generic screen swapping routine */
		call   ac_swap_wscreen
#endif
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_update_vscreen_whole_vres16:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffff8,%esp
		cld
		mov    $0x3ce,%dx
		mov    $0xff08,%ax
		out    %ax,(%dx)
		mov    $0x5,%ax
		out    %ax,(%dx)
		mov    $0xc4,%dl
		mov    EXPORT_SYMBOL(WScreen),%esi
		mov    EXPORT_SYMBOL(VScreen),%edi
		mov    $0x32,%ebx
	jump_4ce8a:
		mov    $0x102,%ax
		out    %ax,(%dx)
		mov    $0x140,%ecx
		rep movsw %ds:(%esi),%es:(%edi)
		sub    $0x280,%edi
		add    $0x7a80,%esi
		mov    $0x202,%ax
		out    %ax,(%dx)
		mov    $0x140,%ecx
		rep movsw %ds:(%esi),%es:(%edi)
		sub    $0x280,%edi
		add    $0x7a80,%esi
		mov    $0x402,%ax
		out    %ax,(%dx)
		mov    $0x140,%ecx
		rep movsw %ds:(%esi),%es:(%edi)
		sub    $0x280,%edi
		add    $0x7a80,%esi
		mov    $0x802,%ax
		out    %ax,(%dx)
		mov    $0x140,%ecx
		rep movsw %ds:(%esi),%es:(%edi)
		sub    $0x17700,%esi
		dec    %ebx
		jne    jump_4ce8a
		leave
		ret


/*----------------------------------------------------------------*/
nullsub_6:	/* 0x4cef1 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
DrawASpriteHires16_A:	/* 0x4cef2 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x10(%ebp),%edi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    0x4(%edi),%cl
		mov    0x5(%edi),%ch
		mov    (%edi),%esi
		mov    0x14(%ebp),%dx
		mov    EXPORT_SYMBOL(WScreen),%edi
		call   DrawSpriteLores16
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
DrawASpriteLores16_B:	/* 0x4cf23 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x10(%ebp),%edi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    0x4(%edi),%cl
		mov    0x5(%edi),%ch
		mov    (%edi),%esi
		mov    0x14(%ebp),%dx
		mov    UScreen,%edi
		call   DrawSpriteLores16
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret
DrawASpriteLores16_C:	/* 0x4cf54 */
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    0x10(%ebp),%cl
		mov    0x14(%ebp),%ch
		mov    $0x0,%dx
		mov    0x1c(%ebp),%edi
		mov    0x20(%ebp),%esi
		call   DrawSpriteLores16
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
LbSpriteDrawMCGA:	/* 0x4cf80 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		push   %ebp
		mov    0x10(%ebp),%esi
		movswl 0x8(%ebp),%ebx
		movswl 0xc(%ebp),%ecx
		mov    EXPORT_SYMBOL(WScreen),%edi
		mov    0x4(%esi),%dl
		mov    0x5(%esi),%dh
		mov    $0x0,%eax
		mov    (%esi),%esi
		call   DrawSpriteVres256
		pop    %ebp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
LbSpriteDrawMCGA_0:	/* 0x4cfb6 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		push   %ebp
		mov    0x10(%ebp),%esi
		movswl 0x8(%ebp),%ebx
		movswl 0xc(%ebp),%ecx
		mov    EXPORT_SYMBOL(VScreen),%edi
		mov    0x4(%esi),%dl
		mov    0x5(%esi),%dh
		mov    $0x0,%eax
		mov    (%esi),%esi
		call   DrawSpriteVres256
		pop    %ebp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
DrawSpriteVres256:	/* 0x4cfec */
/*----------------------------------------------------------------*/
		sar    $1,%ebx
		sar    $1,%ecx
		shr    $1,%dl
		shr    $1,%dh
		cmp    $0xc8,%cx
		jge    jump_4d14f
		cmp    $0x0,%cx
		jl     jump_4d123
		mov    %dh,%al
		cbtw
		add    %cx,%ax
		cmp    $0xc8,%ax
		jge    jump_4d141
	jump_4d01a:
		cmp    $0x140,%bx
		jge    jump_4d14f
		cmp    $0x0,%bx
		jl     jump_4d077
		mov    %dl,%al
		cbtw
		add    %bx,%ax
		cmp    $0x140,%ax
		jge    jump_4d0d5
		add    %ebx,%edi
		movswl %cx,%eax
		mov    %dh,%bh
		imul   $0x140,%eax,%eax
		add    %eax,%edi
		movzbl %cl,%ecx
		mov    $0xffffffff,%eax
		mov    %edi,%ebp
	jump_4d055:
		lods   %ds:(%esi),%al
		cmp    %ch,%al
		je     jump_4d066
		js     jump_4d062
		mov    %al,%cl
		rep movsb %ds:(%esi),%es:(%edi)
		jmp    jump_4d055
	jump_4d062:
		sub    %eax,%edi
		jmp    jump_4d055
	jump_4d066:
		add    $0x140,%ebp
		mov    %ebp,%edi
		dec    %bh
		jne    jump_4d055
		jmp    jump_4d14f
	jump_4d077:
		movzbl %dl,%eax
		add    %ebx,%eax
		js     jump_4d14f
		mov    %ecx,%eax
		mov    %dh,%ch
		imul   $0x140,%eax,%eax
		add    %eax,%edi
		mov    %edi,%ebp
		mov    %bl,%cl
		movzbl %bl,%ebx
	jump_4d095:
		lods   %ds:(%esi),%al
		cmp    $0x0,%al
		je     jump_4d0c5
		js     jump_4d0aa
		mov    %al,%ah
	jump_4d09e:
		lods   %ds:(%esi),%al
		inc    %bl
		jle    jump_4d0a4
		stos   %al,%es:(%edi)
	jump_4d0a4:
		dec    %ah
		jg     jump_4d09e
		jmp    jump_4d095
	jump_4d0aa:
		mov    %bl,%bh
		sub    %al,%bl
		jle    jump_4d095
		cmp    $0x0,%bh
		jge    jump_4d0bc
		xor    %bh,%bh
		add    %bx,%di
		jmp    jump_4d0c1
	jump_4d0bc:
		movsbl %al,%eax
		sub    %eax,%edi
	jump_4d0c1:
		xor    %bh,%bh
		jmp    jump_4d095
	jump_4d0c5:
		add    $0x140,%ebp
		mov    %ebp,%edi
		mov    %cl,%bl
		dec    %ch
		jne    jump_4d095
		jmp    jump_4d14f
	jump_4d0d5:
		add    %ebx,%edi
		neg    %ebx
		add    $0x140,%ebx
		mov    %ecx,%eax
		mov    %edx,%ecx
		mov    %bl,%cl
		xor    %edx,%edx
		imul   $0x140,%eax,%eax
		add    %eax,%edi
		mov    %edi,%ebp
	jump_4d0f1:
		lods   %ds:(%esi),%al
		cmp    $0x0,%al
		je     jump_4d113
		js     jump_4d106
		mov    %al,%ah
	jump_4d0fa:
		lods   %ds:(%esi),%al
		dec    %bl
		js     jump_4d100
		stos   %al,%es:(%edi)
	jump_4d100:
		dec    %ah
		jg     jump_4d0fa
		jmp    jump_4d0f1
	jump_4d106:
		add    %al,%bl
		jle    jump_4d0f1
		cbtw
		movswl %ax,%eax
		sub    %eax,%edi
		jmp    jump_4d0f1
	jump_4d113:
		add    $0x140,%ebp
		mov    %ebp,%edi
		mov    %cl,%bl
		dec    %ch
		jne    jump_4d0f1
		jmp    jump_4d14f
	jump_4d123:
		movzbl %dh,%eax
		add    %ecx,%eax
		jle    jump_4d14f
		mov    %al,%dh
		xor    %ah,%ah
	jump_4d12e:
		lods   %ds:(%esi),%al
		cmp    $0x0,%al
		je     jump_4d139
		js     jump_4d12e
		add    %eax,%esi
		jmp    jump_4d12e
	jump_4d139:
		inc    %ecx
		jne    jump_4d12e
		jmp    jump_4d01a
	jump_4d141:
		mov    $0xc8,%eax
		sub    %ecx,%eax
		mov    %al,%dh
		jmp    jump_4d01a
	jump_4d14f:
		ret
DrawASpriteLores16_D:	/* 0x4d150 */
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		push   %ebp
		push   %es
		mov    %ds,%ax
		mov    %ax,%es
		mov    0x14(%ebp),%esi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    0x4(%esi),%cl
		mov    0x5(%esi),%ch
		mov    (%esi),%edi
		mov    EXPORT_SYMBOL(VScreen),%esi
		call   DrawSpriteLores16
		pop    %es
		pop    %ebp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
LbSpriteDrawHires16:	/* 0x4d189 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		push   %ebp
		push   %es
		mov    %ds,%ax
		mov    %ax,%es
		mov    0x14(%ebp),%esi
		mov    0x8(%ebp),%ax
		mov    0xc(%ebp),%bx
		mov    0x4(%esi),%cl
		mov    0x5(%esi),%ch
		mov    (%esi),%esi
		mov    $MScreen,%edi
		call   func_4d1c1
		pop    %es
		pop    %ebp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
func_4d1c1:
/*----------------------------------------------------------------*/
		sar    $0x3,%cl
		dec    %cl
		jl     jump_4d92a
		movzbl %cl,%edx
		jmp    *vtable_4d1d6(,%edx,4)

vtable_4d1d6:
		.long   func_4d1f6
		.long   func_4d2c6
		.long   func_4d3f4
		.long   func_4d3f9
		.long   func_4d5db
		.long   func_4d5db
		.long   func_4d5db
		.long   func_4d5e0


/*----------------------------------------------------------------*/
func_4d1f6:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x8,%eax
		jge    jump_4d92a
		cmp    $0x0,%eax
		jl     jump_4d92a
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x20,%bx
		jge    jump_4d92a
		cmp    $0x0,%dx
		jl     jump_4d92a
		cmp    $0x20,%dx
		jge    jump_4d255
		cmp    $0x0,%bx
		jge    jump_4d25e
		add    %bl,%ch
		je     jump_4d92a
		movsbl %bl,%edx
		neg    %edx
		imul   $0x5,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4d261
	jump_4d255:
		mov    $0x20,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4d25e:
		movzwl %bx,%ebx
	jump_4d261:
		imul   $0x8,%ebx,%ebx
		add    %ebx,%edi
	jump_4d266:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x100(%edi)
		and    %ax,0x200(%edi)
		and    %ax,0x300(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x100(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x200(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x300(%edi)
		add    $0x8,%edi
		dec    %ch
		jne    jump_4d266
		ret


/*----------------------------------------------------------------*/
func_4d2c6:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x8,%eax
		jge    jump_4d92a
		cmp    $0x0,%eax
		jl     jump_4d92a
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x20,%bx
		jge    jump_4d92a
		cmp    $0x0,%dx
		jl     jump_4d92a
		cmp    $0x20,%dx
		jge    jump_4d325
		cmp    $0x0,%bx
		jge    jump_4d32e
		add    %bl,%ch
		je     jump_4d92a
		movsbl %bl,%edx
		neg    %edx
		imul   $0xa,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4d331
	jump_4d325:
		mov    $0x20,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4d32e:
		movzwl %bx,%ebx
	jump_4d331:
		imul   $0x8,%ebx,%ebx
		add    %ebx,%edi
	jump_4d336:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x100(%edi)
		and    %ax,0x200(%edi)
		and    %ax,0x300(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x100(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x200(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x300(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x101(%edi)
		and    %ax,0x201(%edi)
		and    %ax,0x301(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x101(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x201(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x301(%edi)
		add    $0x8,%edi
		dec    %ch
		jne    jump_4d336
		ret


/*----------------------------------------------------------------*/
func_4d3f4:
/*----------------------------------------------------------------*/
		jmp    jump_4d92a


/*----------------------------------------------------------------*/
func_4d3f9:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x8,%eax
		jge    jump_4d92a
		cmp    $0x0,%eax
		jl     jump_4d92a
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x20,%bx
		jge    jump_4d92a
		cmp    $0x0,%dx
		jl     jump_4d92a
		cmp    $0x20,%dx
		jge    jump_4d458
		cmp    $0x0,%bx
		jge    jump_4d461
		add    %bl,%ch
		je     jump_4d92a
		movsbl %bl,%edx
		neg    %edx
		imul   $0x14,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4d464
	jump_4d458:
		mov    $0x20,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4d461:
		movzwl %bx,%ebx
	jump_4d464:
		imul   $0x8,%ebx,%ebx
		add    %ebx,%edi
	jump_4d469:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x100(%edi)
		and    %ax,0x200(%edi)
		and    %ax,0x300(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x100(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x200(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x300(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x101(%edi)
		and    %ax,0x201(%edi)
		and    %ax,0x301(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x101(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x201(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x301(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x2(%edi)
		and    %ax,0x102(%edi)
		and    %ax,0x202(%edi)
		and    %ax,0x302(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x102(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x202(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x302(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x3(%edi)
		and    %ax,0x103(%edi)
		and    %ax,0x203(%edi)
		and    %ax,0x303(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x103(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x203(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x303(%edi)
		add    $0x8,%edi
		dec    %ch
		jne    jump_4d469
		ret


/*----------------------------------------------------------------*/
func_4d5db:
/*----------------------------------------------------------------*/
		jmp    jump_4d92a


/*----------------------------------------------------------------*/
func_4d5e0:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x8,%eax
		jge    jump_4d92a
		cmp    $0x0,%eax
		jl     jump_4d92a
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x20,%bx
		jge    jump_4d92a
		cmp    $0x0,%dx
		jl     jump_4d92a
		cmp    $0x20,%dx
		jge    jump_4d63f
		cmp    $0x0,%bx
		jge    jump_4d648
		add    %bl,%ch
		je     jump_4d92a
		movsbl %bl,%edx
		neg    %edx
		imul   $0x28,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4d64b
	jump_4d63f:
		mov    $0x20,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4d648:
		movzwl %bx,%ebx
	jump_4d64b:
		imul   $0x8,%ebx,%ebx
		add    %ebx,%edi
	jump_4d650:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x100(%edi)
		and    %ax,0x200(%edi)
		and    %ax,0x300(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x100(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x200(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x300(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x101(%edi)
		and    %ax,0x201(%edi)
		and    %ax,0x301(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x101(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x201(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x301(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x2(%edi)
		and    %ax,0x102(%edi)
		and    %ax,0x202(%edi)
		and    %ax,0x302(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x102(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x202(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x302(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x3(%edi)
		and    %ax,0x103(%edi)
		and    %ax,0x203(%edi)
		and    %ax,0x303(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x103(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x203(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x303(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x4(%edi)
		and    %ax,0x104(%edi)
		and    %ax,0x204(%edi)
		and    %ax,0x304(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x4(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x104(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x204(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x304(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x5(%edi)
		and    %ax,0x105(%edi)
		and    %ax,0x205(%edi)
		and    %ax,0x305(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x5(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x105(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x205(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x305(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x6(%edi)
		and    %ax,0x106(%edi)
		and    %ax,0x206(%edi)
		and    %ax,0x306(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x6(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x106(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x206(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x306(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x7(%edi)
		and    %ax,0x107(%edi)
		and    %ax,0x207(%edi)
		and    %ax,0x307(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x107(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x207(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x307(%edi)
		add    $0x8,%edi
		dec    %ch
		jne    jump_4d650
		ret
	jump_4d92a:
		ret


/*----------------------------------------------------------------*/
DrawSpriteLores16:	/* 0x4d92b */
/*----------------------------------------------------------------*/
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f36f
		and    $0x3,%edx
		shl    $0x3,%edx
		push   %edi
		add    $0x7,%cl
		and    $0xf8,%cl
		sar    $0x3,%cl
		movzbl %cl,%edi
		dec    %edi
		add    %edi,%edx
		pop    %edi
		jmp    *%cs:spr_lr16_jt(,%edx,4)

spr_lr16_jt:
		.long   func_4d9d6
		.long   func_4daa8
		.long   func_4dbd8
		.long   func_4dbd9
		.long   func_4ddbd
		.long   func_4ddbe
		.long   func_4ddbf
		.long   func_4ddc0
		.long   func_4e10c
		.long   func_4e205
		.long   func_4e37b
		.long   func_4e37c
		.long   func_4e5ec
		.long   func_4e5ed
		.long   func_4e5ee
		.long   func_4e5ef
		.long   func_4ea53
		.long   func_4eb2f
		.long   func_4ec69
		.long   func_4ec6a
		.long   func_4ee58
		.long   func_4ee59
		.long   func_4ee5a
		.long   func_4ee5b
		.long   lrswidth09
		.long   lrswidth10
		.long   lrswidth11
		.long   lrswidth12
		.long   lrswidth13
		.long   lrswidth14
		.long   lrswidth15
		.long   lrswidth16


/*----------------------------------------------------------------*/
func_4d9d6:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4da37
		cmp    $0x0,%bx
		jge    jump_4da40
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x5,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4da43
	jump_4da37:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4da40:
		movzwl %bx,%ebx
	jump_4da43:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4da48:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4da48
		ret


/*----------------------------------------------------------------*/
func_4daa8:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4db09
		cmp    $0x0,%bx
		jge    jump_4db12
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0xa,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4db15
	jump_4db09:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4db12:
		movzwl %bx,%ebx
	jump_4db15:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4db1a:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x7d01(%edi)
		and    %ax,0xfa01(%edi)
		and    %ax,0x17701(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d01(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa01(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17701(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4db1a
		ret


/*----------------------------------------------------------------*/
func_4dbd8:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4dbd9:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4dc3a
		cmp    $0x0,%bx
		jge    jump_4dc43
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x14,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4dc46
	jump_4dc3a:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4dc43:
		movzwl %bx,%ebx
	jump_4dc46:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4dc4b:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x7d01(%edi)
		and    %ax,0xfa01(%edi)
		and    %ax,0x17701(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d01(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa01(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17701(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x2(%edi)
		and    %ax,0x7d02(%edi)
		and    %ax,0xfa02(%edi)
		and    %ax,0x17702(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d02(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa02(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17702(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x3(%edi)
		and    %ax,0x7d03(%edi)
		and    %ax,0xfa03(%edi)
		and    %ax,0x17703(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d03(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa03(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17703(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4dc4b
		ret


/*----------------------------------------------------------------*/
func_4ddbd:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ddbe:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ddbf:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ddc0:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4de21
		cmp    $0x0,%bx
		jge    jump_4de2a
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x28,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4de2d
	jump_4de21:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4de2a:
		movzwl %bx,%ebx
	jump_4de2d:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4de32:
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x7d01(%edi)
		and    %ax,0xfa01(%edi)
		and    %ax,0x17701(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d01(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa01(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17701(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x2(%edi)
		and    %ax,0x7d02(%edi)
		and    %ax,0xfa02(%edi)
		and    %ax,0x17702(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d02(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa02(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17702(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x3(%edi)
		and    %ax,0x7d03(%edi)
		and    %ax,0xfa03(%edi)
		and    %ax,0x17703(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d03(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa03(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17703(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x4(%edi)
		and    %ax,0x7d04(%edi)
		and    %ax,0xfa04(%edi)
		and    %ax,0x17704(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x4(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d04(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa04(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17704(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x5(%edi)
		and    %ax,0x7d05(%edi)
		and    %ax,0xfa05(%edi)
		and    %ax,0x17705(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x5(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d05(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa05(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17705(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x6(%edi)
		and    %ax,0x7d06(%edi)
		and    %ax,0xfa06(%edi)
		and    %ax,0x17706(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x6(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d06(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa06(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17706(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,0x7(%edi)
		and    %ax,0x7d07(%edi)
		and    %ax,0xfa07(%edi)
		and    %ax,0x17707(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7d07(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xfa07(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x17707(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4de32
		ret


/*----------------------------------------------------------------*/
func_4e10c:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4e16d
		cmp    $0x0,%bx
		jge    jump_4e176
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x5,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4e179
	jump_4e16d:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4e176:
		movzwl %bx,%ebx
	jump_4e179:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4e17e:
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4e17e
		ret


/*----------------------------------------------------------------*/
func_4e205:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4e266
		cmp    $0x0,%bx
		jge    jump_4e26f
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0xa,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4e272
	jump_4e266:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4e26f:
		movzwl %bx,%ebx
	jump_4e272:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4e277:
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x7d01(%edi)
		and    %ax,0xfa01(%edi)
		and    %ax,0x17701(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d01(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa01(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17701(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4e277
		ret


/*----------------------------------------------------------------*/
func_4e37b:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4e37c:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4e3dd
		cmp    $0x0,%bx
		jge    jump_4e3e6
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x14,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4e3e9
	jump_4e3dd:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4e3e6:
		movzwl %bx,%ebx
	jump_4e3e9:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4e3ee:
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x3(%edi)
		and    %ax,0x7d03(%edi)
		and    %ax,0xfa03(%edi)
		and    %ax,0x17703(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x3(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d03(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa03(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17703(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x2(%edi)
		and    %ax,0x7d02(%edi)
		and    %ax,0xfa02(%edi)
		and    %ax,0x17702(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x2(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d02(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa02(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17702(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x7d01(%edi)
		and    %ax,0xfa01(%edi)
		and    %ax,0x17701(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d01(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa01(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17701(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4e3ee
		ret


/*----------------------------------------------------------------*/
func_4e5ec:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4e5ed:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4e5ee:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4e5ef:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4e650
		cmp    $0x0,%bx
		jge    jump_4e659
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x28,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4e65c
	jump_4e650:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4e659:
		movzwl %bx,%ebx
	jump_4e65c:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4e661:
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x7(%edi)
		and    %ax,0x7d07(%edi)
		and    %ax,0xfa07(%edi)
		and    %ax,0x17707(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d07(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa07(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17707(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x6(%edi)
		and    %ax,0x7d06(%edi)
		and    %ax,0xfa06(%edi)
		and    %ax,0x17706(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x6(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d06(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa06(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17706(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x5(%edi)
		and    %ax,0x7d05(%edi)
		and    %ax,0xfa05(%edi)
		and    %ax,0x17705(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x5(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d05(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa05(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17705(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x4(%edi)
		and    %ax,0x7d04(%edi)
		and    %ax,0xfa04(%edi)
		and    %ax,0x17704(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x4(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d04(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa04(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17704(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x3(%edi)
		and    %ax,0x7d03(%edi)
		and    %ax,0xfa03(%edi)
		and    %ax,0x17703(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x3(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d03(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa03(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17703(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x2(%edi)
		and    %ax,0x7d02(%edi)
		and    %ax,0xfa02(%edi)
		and    %ax,0x17702(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x2(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d02(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa02(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17702(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,0x1(%edi)
		and    %ax,0x7d01(%edi)
		and    %ax,0xfa01(%edi)
		and    %ax,0x17701(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x1(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d01(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa01(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17701(%edi)
		mov    $0xff,%ah
		movzbl (%esi),%ebx
		inc    %esi
		mov    data_5af60(%ebx),%al
		ror    %cl,%ax
		and    %ax,(%edi)
		and    %ax,0x7d00(%edi)
		and    %ax,0xfa00(%edi)
		and    %ax,0x17700(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x7d00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0xfa00(%edi)
		movzbl (%esi),%ebx
		inc    %esi
		movzbw data_5af60(%ebx),%ax
		ror    %cl,%ax
		or     %ax,0x17700(%edi)
		add    $0x50,%edi
		dec    %ch
		jne    jump_4e661
		ret


/*----------------------------------------------------------------*/
func_4ea53:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4eab4
		cmp    $0x0,%bx
		jge    jump_4eabd
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x5,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4eac0
	jump_4eab4:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4eabd:
		movzwl %bx,%ebx
	jump_4eac0:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		movzbl %ch,%ebx
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4eacd:
		sub    $0x50,%edi
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x50(%edi)
		and    %ax,0x7cb0(%edi)
		and    %ax,0xf9b0(%edi)
		and    %ax,0x176b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x50(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b0(%edi)
		dec    %ch
		jne    jump_4eacd
		ret


/*----------------------------------------------------------------*/
func_4eb2f:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4eb90
		cmp    $0x0,%bx
		jge    jump_4eb99
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0xa,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4eb9c
	jump_4eb90:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4eb99:
		movzwl %bx,%ebx
	jump_4eb9c:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		movzbl %ch,%ebx
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4eba9:
		sub    $0x50,%edi
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x50(%edi)
		and    %ax,0x7cb0(%edi)
		and    %ax,0xf9b0(%edi)
		and    %ax,0x176b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x50(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b0(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4f(%edi)
		and    %ax,0x7cb1(%edi)
		and    %ax,0xf9b1(%edi)
		and    %ax,0x176b1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4f(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b1(%edi)
		dec    %ch
		jne    jump_4eba9
		ret


/*----------------------------------------------------------------*/
func_4ec69:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ec6a:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4eccb
		cmp    $0x0,%bx
		jge    jump_4ecd4
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x14,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4ecd7
	jump_4eccb:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4ecd4:
		movzwl %bx,%ebx
	jump_4ecd7:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		movzbl %ch,%ebx
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4ece4:
		sub    $0x50,%edi
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x50(%edi)
		and    %ax,0x7cb0(%edi)
		and    %ax,0xf9b0(%edi)
		and    %ax,0x176b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x50(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b0(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4f(%edi)
		and    %ax,0x7cb1(%edi)
		and    %ax,0xf9b1(%edi)
		and    %ax,0x176b1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4f(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b1(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4e(%edi)
		and    %ax,0x7cb2(%edi)
		and    %ax,0xf9b2(%edi)
		and    %ax,0x176b2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4e(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b2(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4d(%edi)
		and    %ax,0x7cb3(%edi)
		and    %ax,0xf9b3(%edi)
		and    %ax,0x176b3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4d(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b3(%edi)
		dec    %ch
		jne    jump_4ece4
		ret


/*----------------------------------------------------------------*/
func_4ee58:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ee59:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ee5a:
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4ee5b:
/*----------------------------------------------------------------*/
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4eebc
		cmp    $0x0,%bx
		jge    jump_4eec5
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x28,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4eec8
	jump_4eebc:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4eec5:
		movzwl %bx,%ebx
	jump_4eec8:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		movzbl %ch,%ebx
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
	jump_4eed5:
		sub    $0x50,%edi
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x50(%edi)
		and    %ax,0x7cb0(%edi)
		and    %ax,0xf9b0(%edi)
		and    %ax,0x176b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x50(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b0(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b0(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4f(%edi)
		and    %ax,0x7cb1(%edi)
		and    %ax,0xf9b1(%edi)
		and    %ax,0x176b1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4f(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b1(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b1(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4e(%edi)
		and    %ax,0x7cb2(%edi)
		and    %ax,0xf9b2(%edi)
		and    %ax,0x176b2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4e(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b2(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b2(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4d(%edi)
		and    %ax,0x7cb3(%edi)
		and    %ax,0xf9b3(%edi)
		and    %ax,0x176b3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4d(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b3(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b3(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4c(%edi)
		and    %ax,0x7cb4(%edi)
		and    %ax,0xf9b4(%edi)
		and    %ax,0x176b4(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4c(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb4(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b4(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b4(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4b(%edi)
		and    %ax,0x7cb5(%edi)
		and    %ax,0xf9b5(%edi)
		and    %ax,0x176b5(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4b(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb5(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b5(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b5(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x4a(%edi)
		and    %ax,0x7cb6(%edi)
		and    %ax,0xf9b6(%edi)
		and    %ax,0x176b6(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x4a(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb6(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b6(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b6(%edi)
		mov    $0xff,%ah
		mov    (%esi),%al
		inc    %esi
		ror    %cl,%ax
		and    %ax,-0x49(%edi)
		and    %ax,0x7cb7(%edi)
		and    %ax,0xf9b7(%edi)
		and    %ax,0x176b7(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,-0x49(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x7cb7(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0xf9b7(%edi)
		movzbw (%esi),%ax
		inc    %esi
		ror    %cl,%ax
		or     %ax,0x176b7(%edi)
		dec    %ch
		jne    jump_4eed5
		ret


lrswidth09:
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4f212
		cmp    $0x0,%bx
		jge    jump_4f21b
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x5,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4f21e
	jump_4f212:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4f21b:
		movzwl %bx,%ebx
	jump_4f21e:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		ret


lrswidth10:
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4f285
		cmp    $0x0,%bx
		jge    jump_4f28e
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0xa,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4f291
	jump_4f285:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4f28e:
		movzwl %bx,%ebx
	jump_4f291:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		ret


lrswidth11:
		ret


lrswidth12:
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4f2f9
		cmp    $0x0,%bx
		jge    jump_4f302
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x14,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4f305
	jump_4f2f9:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4f302:
		movzwl %bx,%ebx
	jump_4f305:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		ret


lrswidth13:
		ret


lrswidth14:
		ret


lrswidth15:
		ret


lrswidth16:
		mov    %al,%cl
		and    $0x7,%cl
		movswl %ax,%eax
		sar    $0x3,%eax
		cmp    $0x50,%eax
		jge    jump_4f383
		cmp    $0x0,%eax
		jl     jump_4f383
		add    %eax,%edi
		movzbw %ch,%dx
		add    %bx,%dx
		cmp    $0x190,%bx
		jge    jump_4f383
		cmp    $0x0,%dx
		jl     jump_4f383
		cmp    $0x190,%dx
		jge    jump_4f35b
		cmp    $0x0,%bx
		jge    jump_4f364
		add    %bl,%ch
		je     jump_4f383
		movsbl %bl,%edx
		neg    %edx
		imul   $0x28,%edx,%edx
		add    %edx,%esi
		mov    $0x0,%ebx
		jmp    jump_4f367
	jump_4f35b:
		mov    $0x190,%ax
		sub    %bx,%ax
		mov    %al,%ch
	jump_4f364:
		movzwl %bx,%ebx
	jump_4f367:
		imul   $0x50,%ebx,%ebx
		add    %ebx,%edi
		ret
	jump_4f36f:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f37a
		jmp    jump_4f383
	jump_4f37a:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f383
	jump_4f383:
		ret


/*----------------------------------------------------------------*/
func_4f3d2:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		mov    0x8(%ebp),%eax
		mov    $data_5e384,%edi
		call   int2decstr_v2
		movb   $0x0,(%edi)
		movzwl 0x1c(%ebp),%eax
		neg    %eax
		add    $data_5e384,%eax
		add    $0xa,%eax
		sub    $0x2,%esp
		pushw  0x18(%ebp)
		sub    $0x2,%esp
		pushw  0x14(%ebp)
		sub    $0x2,%esp
		pushw  0x10(%ebp)
		push   0xc(%ebp)
		push   %eax
		call   func_4f420
		add    $0x14,%esp
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
func_4f420:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffffc,%esp
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		jne    jump_4f441
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f4f5
	jump_4f441:
		mov    0x8(%ebp),%esi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		jne    jump_4f455
		shrw   $1,0x10(%ebp)
		shrw   $1,0x14(%ebp)
	jump_4f455:
		mov    0x10(%ebp),%ax
		mov    %ax,-0x2(%ebp)
		mov    0x18(%ebp),%ax
		mov    %ax,0x18(%ebp)
	jump_4f465:
		movzbl (%esi),%edi
		inc    %esi
		cmp    $0x0,%edi
		je     jump_4f4fe
		cmp    $0xd,%edi
		je     jump_4f4d1
		imul   $0x5,%edi,%edi
		add    0xc(%ebp),%edi
		mov    0x10(%ebp),%ax
		mov    0x14(%ebp),%bx
		movzbw 0x4(%edi),%cx
		add    %cx,%bx
		movzbw 0x3(%edi),%cx
		movzbw 0x2(%edi),%dx
		add    %dx,0x10(%ebp)
		addw   $0x1,0x10(%ebp)
		movzwl (%edi),%edi
		cmp    $0x0,%edi
		jle    jump_4f4cf
		cmp    $0x0,%cx
		jle    jump_4f4cf
		add    0xc(%ebp),%edi
		sar    $0x3,%dx
		cmp    $0x0,%dx
		je     jump_4f4c6
		mov    0x18(%ebp),%dx
		call   func_4f505
		jmp    jump_4f4cf
	jump_4f4c6:
		mov    0x18(%ebp),%dx
		call   func_4f5d1
	jump_4f4cf:
		jmp    jump_4f465
	jump_4f4d1:
		mov    -0x2(%ebp),%ax
		mov    %ax,0x10(%ebp)
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f4e9
		addw   $0xc,0x14(%ebp)
		jmp    jump_4f4ee
	jump_4f4e9:
		addw   $0x6,0x14(%ebp)
	jump_4f4ee:
		jmp    jump_4f465
	jump_4f4f5:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f4fe
	jump_4f4fe:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
func_4f505:
/*----------------------------------------------------------------*/
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f515
		call   func_4f52f
		jmp    jump_4f52e
	jump_4f515:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f525
		call   nullsub_7
		jmp    jump_4f52e
	jump_4f525:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f52e
	jump_4f52e:
		ret


/*----------------------------------------------------------------*/
func_4f52f:
/*----------------------------------------------------------------*/
		push   %esi
		mov    %dx,%si
		imul   $0x50,%bx,%bx
		push   %ax
		sar    $0x3,%ax
		add    %ax,%bx
		and    $0xffff,%ebx
		add    EXPORT_SYMBOL(WScreen),%ebx
		pop    %ax
		and    $0x7,%ax
		xchg   %ax,%cx
	jump_4f554:
		mov    $0x0,%edx
		mov    (%edi),%dx
		add    $0x2,%edi
		ror    %cl,%edx
		xchg   %dl,%dh
		rol    $0x10,%edx
		xchg   %dl,%dh
		rol    $0x10,%edx
		test   $0x1,%si
		je     jump_4f576
		or     %edx,(%ebx)
		jmp    jump_4f57c
	jump_4f576:
		not    %edx
		and    %edx,(%ebx)
		not    %edx
	jump_4f57c:
		test   $0x2,%si
		je     jump_4f58b
		or     %edx,0x7d00(%ebx)
		jmp    jump_4f595
	jump_4f58b:
		not    %edx
		and    %edx,0x7d00(%ebx)
		not    %edx
	jump_4f595:
		test   $0x4,%si
		je     jump_4f5a4
		or     %edx,0xfa00(%ebx)
		jmp    jump_4f5ae
	jump_4f5a4:
		not    %edx
		and    %edx,0xfa00(%ebx)
		not    %edx
	jump_4f5ae:
		test   $0x8,%si
		je     jump_4f5bd
		or     %edx,0x17700(%ebx)
		jmp    jump_4f5c7
	jump_4f5bd:
		not    %edx
		and    %edx,0x17700(%ebx)
		not    %edx
	jump_4f5c7:
		add    $0x50,%ebx
		dec    %ax
		jne    jump_4f554
		pop    %esi
		ret


/*----------------------------------------------------------------*/
nullsub_7:	/* 0x4f5d0 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
func_4f5d1:
/*----------------------------------------------------------------*/
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f5e1
		call   func_4f5f6
		jmp    jump_4f5f5
	jump_4f5e1:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f5ec
		jmp    jump_4f5f5
	jump_4f5ec:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f5f5
	jump_4f5f5:
		ret


/*----------------------------------------------------------------*/
func_4f5f6:
/*----------------------------------------------------------------*/
		push   %esi
		mov    %dx,%si
		imul   $0x50,%bx,%bx
		push   %ax
		sar    $0x3,%ax
		add    %ax,%bx
		and    $0xffff,%ebx
		add    EXPORT_SYMBOL(WScreen),%ebx
		pop    %ax
		and    $0x7,%ax
		xchg   %ax,%cx
	jump_4f61b:
		mov    $0x0,%dx
		mov    (%edi),%dl
		inc    %edi
		ror    %cl,%dx
		test   $0x1,%si
		je     jump_4f631
		or     %dx,(%ebx)
		jmp    jump_4f63a
	jump_4f631:
		not    %dx
		and    %dx,(%ebx)
		not    %dx
	jump_4f63a:
		test   $0x2,%si
		je     jump_4f64a
		or     %dx,0x7d00(%ebx)
		jmp    jump_4f657
	jump_4f64a:
		not    %dx
		and    %dx,0x7d00(%ebx)
		not    %dx
	jump_4f657:
		test   $0x4,%si
		je     jump_4f667
		or     %dx,0xfa00(%ebx)
		jmp    jump_4f674
	jump_4f667:
		not    %dx
		and    %dx,0xfa00(%ebx)
		not    %dx
	jump_4f674:
		test   $0x8,%si
		je     jump_4f684
		or     %dx,0x17700(%ebx)
		jmp    jump_4f691
	jump_4f684:
		not    %dx
		and    %dx,0x17700(%ebx)
		not    %dx
	jump_4f691:
		add    $0x50,%ebx
		dec    %ax
		jne    jump_4f61b
		pop    %esi
		ret
nullsub_12:	/* 0x4f69a */
		ret


/*----------------------------------------------------------------*/
rprint:	/* 0x4f69b */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xffffffe8,%esp
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		push   %esi
		mov    0x8(%ebp),%esi
		mov    data_60abc,%eax
		mov    %eax,-0x10(%ebp)
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f724
		movzwl 0xc(%ebp),%eax
		movzwl 0x10(%ebp),%ebx
		mov    %al,%cl
		and    $0x7,%cl
		shr    $0x3,%eax
		imul   $0x50,%ebx,%ebx
		add    %eax,%ebx
		add    EXPORT_SYMBOL(WScreen),%ebx
		mov    %ebx,-0xc(%ebp)
		mov    %ebx,-0x8(%ebp)
		movzwl 0x14(%ebp),%eax
		imul   $0x2800,%eax,%eax
		add    %eax,-0x10(%ebp)
	jump_4f6e8:
		movzbl (%esi),%edx
		inc    %esi
		cmp    $0x0,%edx
		je     jump_4f738
		cmp    $0xd,%edx
		je     jump_4f712
		sub    $0x20,%edx
		shl    $0x6,%edx
		add    -0x10(%ebp),%edx
		mov    -0x8(%ebp),%edi
		call   func_4f73f
		incl   -0x8(%ebp)
	jump_4f70a:
		decw   0x18(%ebp)
		jne    jump_4f6e8
		jmp    jump_4f738
	jump_4f712:
		mov    -0xc(%ebp),%eax
		add    $0x280,%eax
		mov    %eax,-0xc(%ebp)
		mov    %eax,-0x8(%ebp)
		jmp    jump_4f70a
	jump_4f724:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f72f
		jmp    jump_4f738
	jump_4f72f:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4f738
	jump_4f738:
		pop    %esi
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
func_4f73f:
/*----------------------------------------------------------------*/
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		mov    (%edx),%al
		inc    %edx
		mov    %al,(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x7d00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0xfa00(%edi)
		mov    (%edx),%al
		inc    %edx
		mov    %al,0x17700(%edi)
		add    $0x50,%edi
		ret
nullsub_11:	/* 0x4f8e4 */
		ret


/*----------------------------------------------------------------*/
init_hires_blocks:	/* 0x4f921 */
/*----------------------------------------------------------------*/
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    h_blocks,%esi
		mov    $data_5e39c,%edi
		mov    $0xff,%dx
	jump_4f936:
		movb   $0x0,(%edi)
		mov    $0x0,%cl
	jump_4f93b:
		mov    h_blocks,%eax
		add    (%esi),%eax
		add    $0x4,%esi
		mov    $0xf,%ch
	jump_4f947:
		cmpl   $0x0,(%eax)
		jne    jump_4f959
		add    $0x14,%eax
		dec    %ch
		jge    jump_4f947
		mov    $0x1,%bl
		shl    %cl,%bl
		or     %bl,(%edi)
	jump_4f959:
		inc    %cl
		cmp    $0x6,%cl
		jne    jump_4f93b
		inc    %edi
		dec    %dx
		jge    jump_4f936
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
LbCopyScreenBox:	/* 0x4f96c */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %eax
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(DrawFlags)
		je     jump_4fa35
		mov    0x8(%ebp),%eax
		shl    $0x2,%eax
		imul   $0x500,0xc(%ebp),%esi
		add    %eax,%esi
		mov    0x10(%ebp),%eax
		shl    $0x2,%eax
		imul   $0x500,0x14(%ebp),%edi
		add    %eax,%edi
		add    BScreen,%esi
		add    EXPORT_SYMBOL(WScreen),%edi
		mov    0x1c(%ebp),%ebx
		shl    $0x4,%ebx
		mov    0x18(%ebp),%eax
		mov    $0x14,%edx
		sub    %eax,%edx
		shl    $0x2,%edx
		push   %esi
		push   %edi
		push   %ebx
	jump_4f9c2:
		mov    %eax,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    %edx,%esi
		add    %edx,%edi
		dec    %ebx
		jg     jump_4f9c2
		pop    %ebx
		pop    %edi
		pop    %esi
		add    $0x7d00,%edi
		add    $0x7d00,%esi
		push   %esi
		push   %edi
		push   %ebx
	jump_4f9df:
		mov    %eax,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    %edx,%esi
		add    %edx,%edi
		dec    %ebx
		jg     jump_4f9df
		pop    %ebx
		pop    %edi
		pop    %esi
		add    $0x7d00,%edi
		add    $0x7d00,%esi
		push   %esi
		push   %edi
		push   %ebx
	jump_4f9fc:
		mov    %eax,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    %edx,%esi
		add    %edx,%edi
		dec    %ebx
		jg     jump_4f9fc
		pop    %ebx
		pop    %edi
		pop    %esi
		add    $0x7d00,%edi
		add    $0x7d00,%esi
		push   %esi
		push   %edi
		push   %ebx
	jump_4fa19:
		mov    %eax,%ecx
		rep movsl %ds:(%esi),%es:(%edi)
		add    %edx,%esi
		add    %edx,%edi
		dec    %ebx
		jg     jump_4fa19
		pop    %ebx
		pop    %edi
		pop    %esi
		add    $0x7d00,%edi
		add    $0x7d00,%esi
		jmp    jump_4fa49
	jump_4fa35:
		testb  $0x4,EXPORT_SYMBOL(DrawFlags)
		je     jump_4fa40
		jmp    jump_4fa49
	jump_4fa40:
		testb  $0x1,EXPORT_SYMBOL(DrawFlags)
		je     jump_4fa49
	jump_4fa49:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		pop    %eax
		leave
		ret


/*----------------------------------------------------------------*/
ASM_LbMemorySet:	/* 0x4fa51 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ecx
		push   %edi
		mov    0x10(%ebp),%ecx
		test   $0x3,%ecx
		je     jump_4fa84
		test   $0x2,%ecx
		je     jump_4fa75
		mov    0x8(%ebp),%edi
		mov    0xc(%ebp),%eax
		rep stos %al,%es:(%edi)
		pop    %edi
		pop    %ecx
		leave
		ret
	jump_4fa75:
		shr    $1,%ecx
		mov    0x8(%ebp),%edi
		mov    0xc(%ebp),%eax
		rep stos %ax,%es:(%edi)
		pop    %edi
		pop    %ecx
		leave
		ret
	jump_4fa84:
		shr    $0x2,%ecx
		mov    0x8(%ebp),%edi
		mov    0xc(%ebp),%eax
		rep stos %eax,%es:(%edi)
		pop    %edi
		pop    %ecx
		leave
		ret


/*----------------------------------------------------------------*/
LbMemoryCopy:	/* 0x4fa93 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ecx
		push   %edi
		push   %esi
		mov    0x10(%ebp),%ecx
		test   $0x3,%ecx
		je     jump_4fac9
		test   $0x2,%ecx
		je     jump_4fab9
		mov    0x8(%ebp),%esi
		mov    0xc(%ebp),%edi
		rep movsb %ds:(%esi),%es:(%edi)
		pop    %esi
		pop    %edi
		pop    %ecx
		leave
		ret
	jump_4fab9:
		shr    $1,%ecx
		mov    0x8(%ebp),%esi
		mov    0xc(%ebp),%edi
		rep movsw %ds:(%esi),%es:(%edi)
		pop    %esi
		pop    %edi
		pop    %ecx
		leave
		ret
	jump_4fac9:
		shr    $0x2,%ecx
		mov    0x8(%ebp),%esi
		mov    0xc(%ebp),%edi
		rep movsl %ds:(%esi),%es:(%edi)
		pop    %esi
		pop    %edi
		pop    %ecx
		leave
		ret


/*----------------------------------------------------------------*/
arctan:	/* 0x4fad9 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %edx
		xor    %eax,%eax
		mov    0x8(%ebp),%ax
		or     %ax,%ax
		jne    jump_4faf9
		mov    0xc(%ebp),%bx
		or     %bx,%bx
		jne    jump_4fafd
		xor    %ax,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4faf9:
		mov    0xc(%ebp),%bx
	jump_4fafd:
		neg    %bx
		xor    %dh,%dh
		or     %ax,%ax
		js     jump_4fb83
		or     %bx,%bx
		js     jump_4fb48
		cmp    %bx,%ax
		jl     jump_4fb2c
		xchg   %ax,%bx
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		add    $0x40,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fb2c:
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		neg    %ax
		add    $0x80,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fb48:
		neg    %bx
		cmp    %bx,%ax
		jl     jump_4fb6e
		xchg   %ax,%bx
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		neg    %ax
		add    $0x40,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fb6e:
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fb83:
		neg    %ax
		or     %bx,%bx
		js     jump_4fbc7
		cmp    %bx,%ax
		jl     jump_4fbae
		xchg   %ax,%bx
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		neg    %ax
		add    $0xc0,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fbae:
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		add    $0x80,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fbc7:
		neg    %bx
		cmp    %bx,%ax
		jl     jump_4fbea
		xchg   %ax,%bx
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		add    $0xc0,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_4fbea:
		mov    %ah,%dl
		mov    %al,%ah
		xor    %al,%al
		div    %bx
		mov    data_5a95e(,%eax,2),%ax
		neg    %ax
		add    $0x100,%ax
		and    $0xff,%ax
		pop    %edx
		pop    %ebx
		leave
		ret


/*----------------------------------------------------------------*/
func_4fc4b:
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		push   %ebx
		push   %ecx
		push   %edx
		mov    0x8(%ebp),%ecx
		or     %ecx,%ecx
		je     jump_4fc7a
		bsr    %ecx,%eax
		movzwl data_4fc81(,%eax,2),%ebx
	jump_4fc63:
		mov    %ecx,%eax
		xor    %edx,%edx
		div    %ebx
		cmp    %ebx,%eax
		jge    jump_4fc73
		add    %eax,%ebx
		shr    $1,%ebx
		jmp    jump_4fc63
	jump_4fc73:
		mov    %ebx,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret
	jump_4fc7a:
		xor    %eax,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		leave
		ret

.data
data_4fc81:
		.ascii  "\x01\x00\x02\x00\x02\x00\x04\x00"
		.ascii  "\x05\x00\x08\x00\x0b\x00\x10\x00"
		.ascii  "\x16\x00\x20\x00\x2d\x00\x40\x00"
		.ascii  "\x5a\x00\x80\x00\xb5\x00\x00\x01"
		.ascii  "\x6a\x01\x00\x02\xd4\x02\x00\x04"
		.ascii  "\xa8\x05\x00\x08\x50\x0b\x00\x10"
		.ascii  "\xa0\x16\x00\x20\x41\x2d\x00\x40"
		.ascii  "\x82\x5a\x00\x80\x04\xb5\xff\xff"
.text

/*----------------------------------------------------------------*/
func_4fcc1:
/*----------------------------------------------------------------*/
		push   %dx
		mov    $0x3c8,%dx
		movzbw 0x8(%ebp),%ax
		cmp    $0x10,%ax
		jge    jump_4fce8
		imul   $0x3,%ax,%ax
		out    %al,(%dx)
		mov    $0xc9,%dl
		mov    0xc(%ebp),%al
		out    %al,(%dx)
		mov    0x10(%ebp),%al
		out    %al,(%dx)
		mov    0x14(%ebp),%al
		out    %al,(%dx)
	jump_4fce8:
		pop    %dx
		leave
		ret


/*----------------------------------------------------------------*/
ASM_LbScreenWaitVbi:	/* 0x4fcec */
/*----------------------------------------------------------------*/
		push   %eax
		push   %edx
		mov    $0x3da,%dx
	jump_4fcf2:
		in     (%dx),%al
		test   $0x8,%al
		je     jump_4fcf2
		pop    %edx
		pop    %eax
		ret


/*----------------------------------------------------------------*/
ASM_read_key:	/* 0x4fcfa */
/*----------------------------------------------------------------*/
		mov    $0x1,%ah
		int    $0x16
		je     jump_4fd06
		mov    $0x0,%ah
		int    $0x16
		jmp    jump_4fd08
	jump_4fd06:
		mov    $0x0,%al
	jump_4fd08:
		ret


/*----------------------------------------------------------------*/
_chain_intr:	/* 0x3dac4 */
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    0x8(%esp),%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		mov    %ebp,%esp
		xchg   %ecx,0x28(%ebp)
		xchg   %eax,0x2c(%ebp)
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
		pop    %edi
		pop    %esi
		pop    %ebp
		pop    %ebx
		pop    %ebx
		pop    %edx
		lret


/*----------------------------------------------------------------*/
outp:	/* 0x3dae5 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		mov    0x8(%ebp),%edx
		mov    0xc(%ebp),%al
		out    %al,(%dx)
		pop    %ebp
		ret


/*----------------------------------------------------------------*/
inp:	/* 0x3db62 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		mov    0x8(%ebp),%edx
		sub    %eax,%eax
		in     (%dx),%al
		pop    %ebp
		ret


/*----------------------------------------------------------------*/
segread:	/* 0x3dc71 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ebp
		mov    %esp,%ebp
		mov    0xc(%ebp),%ebx
		mov    %cs,%eax
		mov    %ax,0x2(%ebx)
		mov    %ds,%eax
		mov    %ax,0x6(%ebx)
		mov    %es,%eax
		mov    %ax,(%ebx)
		mov    %ss,%eax
		mov    %ax,0x4(%ebx)
		mov    %fs,%eax
		mov    %ax,0x8(%ebx)
		mov    %gs,%eax
		mov    %ax,0xa(%ebx)
		pop    %ebp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
int2decstr_v2:	/* 0x4fd09 */
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    $0xa,%cx
	jump_4fd0f:
		xor    %dl,%dl
	jump_4fd11:
		sub    powers_of_10_2(%ebx),%eax
		jb     jump_4fd1d
		inc    %dl
		jmp    jump_4fd11
	jump_4fd1d:
		add    powers_of_10_2(%ebx),%eax
		add    $0x30,%dl
		mov    %dl,(%edi)
		inc    %edi
		add    $0x4,%ebx
		loopw  jump_4fd0f
		ret
.data
powers_of_10_2:	/* 0x4fd30 */
		.ascii  "\x00\xca\x9a\x3b\x00\xe1\xf5\x05"
		.ascii  "\x80\x96\x98\x00\x40\x42\x0f\x00"
		.ascii  "\xa0\x86\x01\x00\x10\x27\x00\x00"
		.ascii  "\xe8\x03\x00\x00\x64\x00\x00\x00"
		.ascii  "\x0a\x00\x00\x00\x01\x00\x00\x00"
.text


/*----------------------------------------------------------------*/
int2decstr:	/* 0x4fd58 */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		pusha
		mov    0x8(%ebp),%edi
		mov    0xc(%ebp),%eax
		xor    %ebx,%ebx
		mov    $0xa,%ecx
	jump_4fd69:
		xor    %dl,%dl
	jump_4fd6b:
		sub    powers_of_10(%ebx),%eax
		js     jump_4fd77
		inc    %dl
		jmp    jump_4fd6b
	jump_4fd77:
		add    powers_of_10(%ebx),%eax
		add    $0x30,%dl
		cmp    $0x30,%dl
		jne    jump_4fd8c
		cmp    0x8(%ebp),%edi
		jne    jump_4fd8c
		jmp    jump_4fd8f
	jump_4fd8c:
		mov    %dl,(%edi)
		inc    %edi
	jump_4fd8f:
		add    $0x4,%ebx
		loop   jump_4fd69
		cmp    0x8(%ebp),%edi
		jne    jump_4fd9d
		movb   $0x30,(%edi)
		inc    %edi
	jump_4fd9d:
		movb   $0x0,(%edi)
		popa
		leave
		ret
.data
powers_of_10:	/* 0x4fda3 */
		.ascii  "\x00\xca\x9a\x3b\x00\xe1\xf5\x05"
		.ascii  "\x80\x96\x98\x00\x40\x42\x0f\x00"
		.ascii  "\xa0\x86\x01\x00\x10\x27\x00\x00"
		.ascii  "\xe8\x03\x00\x00\x64\x00\x00\x00"
		.ascii  "\x0a\x00\x00\x00\x01\x00\x00\x00"
.text
int2hexstr:	/* 0x4fdcb */
		mov    $0x8,%cx
	jump_4fdcf:
		rol    $0x4,%eax
		mov    %eax,%ebx
		and    $0xf,%ebx
		mov    hex2char(%ebx),%bl
		mov    %bl,(%edi)
		inc    %edi
		loopw  jump_4fdcf
		ret
.data
hex2char:	/* 0x4fde4 */
		.ascii   "0123456789ABCDEF"
data_50000:
		.ascii  "\x01\x01\x01\x00"
aGameDat:	/* 0x50004 */
		.string "data/game%02d.dat"
		.ascii  "\x00\x00"
aDataMap02dDat:	/* 0x50018 */
		.string "data/map%02d.dat"
		.ascii  "\x00\x00\x00"
aD:	/* 0x5002c */
		.ascii  "\x25\x64\x00\x00"
aDataMbrieoutDa:	/* 0x50030 */
		.string "data/mbrieout.dat"
		.ascii  "\x00\x00"
aDataMconscrDat:	/* 0x50044 */
		.string "data/mconscr.dat"
		.ascii  "\x00\x00\x00"
aS_1:	/* 0x50058 */
		.ascii  "\x25\x73\x00\x00"
aDataMconfoutDa:	/* 0x5005c */
		.string "data/mconfout.dat"
		.ascii  "\x00\x00"
a02dDDnc:	/* 0x50070 */
		.string "%02d:%d:%dNC"
		.ascii  "\x00\x00\x00"
a02dSDS:	/* 0x50080 */
		.string "%02d %s %d %s"
		.ascii  "\x00\x00"
data_50090:
		.ascii  "\x25\x00\x00\x00"
aSSS:	/* 0x50094 */
		.string "%s %s %s"
		.ascii  "\x00\x00\x00"
aDataMdeoutDat:	/* 0x500a0 */
		.string "data/mdeout.dat"
aLx:	/* 0x500b0 */
		.ascii  "\x4c\x58\x00\x00"
aNotEnoughMemor:	/* 0x500b4 */
		.string "not enough memory to allocate %s\n"
		.ascii  "\x00\x00"
aMemoryControlB:	/* 0x500d8 */
		.string "memory control blocks damaged %s\n"
		.ascii  "\x00\x00"
aDescriptorsUna:	/* 0x500fc */
		.string "descriptors unavailiable %s\n"
		.ascii  "\x00\x00\x00"
aSNotFound:	/* 0x5011c */
		.string "%s not found\n"
		.ascii  "\x00\x00"
aDErrorSOccured:	/* 0x5012c */
		.string "%d error(s) occured.exiting.\n"
		.ascii  "\x00\x00"
aErrorDecompres:	/* 0x5014c */
		.string "ERROR decompressing %s\n"
aErrorOpeningS:	/* 0x50164 */
		.string "ERROR opening %s\n"
		.ascii  "\x00\x00"
aSS:	/* 0x50178 */
		.string "%s %s"
		.ascii  "\x00\x00"
aD_0:	/* 0x50180 */
		.ascii  "\x25\x64\x00\x00"
aD_1:	/* 0x50184 */
		.ascii  "\x3a\x25\x64\x00"
aDataMseloutDat:	/* 0x50188 */
		.string "data/mselout.dat"
		.ascii  "\x00\x00\x00"
aS:	/* 0x5019c */
		.ascii  "\x25\x73\x00\x00"
aNukThem:	/* 0x501a0 */
		.string "NUK THEM"
		.ascii  "\x00\x00\x00"
aWatchTheClock:	/* 0x501ac */
		.string "WATCH THE CLOCK"
aDoItAgain:	/* 0x501bc */
		.string "DO IT AGAIN"
aRobABank:	/* 0x501c8 */
		.string "ROB A BANK"
		.ascii  "\x00"
aToTheTop:	/* 0x501d4 */
		.string "TO THE TOP"
		.ascii  "\x00"
aCooperTeam:	/* 0x501e0 */
		.string "COOPER TEAM"
aSD_0:	/* 0x501ec */
		.string "%s %d\n"
		.ascii  "\x00"
aDataHpal01Dat:	/* 0x501f4 */
		.string "data/hpal01.dat"
aDataHpal02dDat:	/* 0x50204 */
		.string "data/hpal%02d.dat"
		.ascii  "\x00\x00"
a01dPlayer05dSe:	/* 0x50218 */
		.string "%01d(player) -- %05d(seed) -- %05d(game turn)."
		.ascii  "\x00"
aLoginHasFailed:	/* 0x50248 */
		.string "LOGIN HAS FAILED.\n"
		.ascii  "\x00"
aLoginAborted:	/* 0x5025c */
		.string "LOGIN ABORTED.\n"
level_fname:	/* 0x5026c */
		.string "data/game01.dat"
aAlgeria:	/* 0x5027c */
		.string "ALGERIA"
aAlgerie:	/* 0x50284 */
		.string "ALGERIE"
aLybia:	/* 0x5028c */
		.string "LYBIA"
		.ascii  "\x00\x00"
aLybie:	/* 0x50294 */
		.string "LYBIE"
		.ascii  "\x00\x00"
aLibia:	/* 0x5029c */
		.string "LIBIA"
		.ascii  "\x00\x00"
aMauritania:	/* 0x502a4 */
		.string "MAURITANIA"
		.ascii  "\x00"
aMauritanie:	/* 0x502b0 */
		.string "MAURITANIE"
		.ascii  "\x00"
aNigeria:	/* 0x502bc */
		.string "NIGERIA"
aIraq:	/* 0x502c4 */
		.string "IRAQ"
		.ascii  "\x00\x00\x00"
aArabia:	/* 0x502cc */
		.string "ARABIA"
		.ascii  "\x00"
aArabie:	/* 0x502d4 */
		.string "ARABIE"
		.ascii  "\x00"
aSudan:	/* 0x502dc */
		.string "SUDAN"
		.ascii  "\x00\x00"
aSoudan:	/* 0x502e4 */
		.string "SOUDAN"
		.ascii  "\x00"
aZaire:	/* 0x502ec */
		.string "ZAIRE"
		.ascii  "\x00\x00"
aKenya:	/* 0x502f4 */
		.string "KENYA"
		.ascii  "\x00\x00"
aKenia:	/* 0x502fc */
		.string "KENIA"
		.ascii  "\x00\x00"
aMozambique:	/* 0x50304 */
		.string "MOZAMBIQUE"
		.ascii  "\x00"
aMozambico:	/* 0x50310 */
		.string "MOZAMBICO"
		.ascii  "\x00\x00"
aSouthAfrica:	/* 0x5031c */
		.string "SOUTH AFRICA"
		.ascii  "\x00\x00\x00"
aAfriqueDuSud:	/* 0x5032c */
		.string "AFRIQUE DU SUD"
		.ascii  "\x00"
aSudAfrica:	/* 0x5033c */
		.string "SUD AFRICA"
		.ascii  "\x49"
aWesternEurope:	/* 0x50348 */
		.string "WESTERN EUROPE"
		.ascii  "\x52"
aEuropeDeLOuest:	/* 0x50358 */
		.string "EUROPE DE L'OUEST"
		.ascii  "\x00\x00"
aEuropaOccident:	/* 0x5036c */
		.string "EUROPA OCCIDENTALE"
		.ascii  "\x42"
aScandinavia:	/* 0x50380 */
		.string "SCANDINAVIA"
aScandinavie:	/* 0x5038c */
		.string "SCANDINAVIE"
aCentralEurope:	/* 0x50398 */
		.string "CENTRAL EUROPE"
		.ascii  "\x59"
aEuropeCentrale:	/* 0x503a8 */
		.string "EUROPE CENTRALE"
aEuropaCentrale:	/* 0x503b8 */
		.string "EUROPA CENTRALE"
aEasternEurope:	/* 0x503c8 */
		.string "EASTERN EUROPE"
		.ascii  "\x00"
aEuropeDeLEst:	/* 0x503d8 */
		.string "EUROPE DE L'EST"
aEuropaOriental:	/* 0x503e8 */
		.string "EUROPA ORIENTALE"
		.ascii  "\x52\x4e\x20"
aIran:	/* 0x503fc */
		.string "IRAN"
aE:	/* 0x50401 */
		.ascii  "\x45\x00\x52"
aIndia:	/* 0x50404 */
		.string "INDIA"
		.ascii  "\x20\x44"
aInde:	/* 0x5040c */
		.string "INDE"
		.ascii  "\x55\x45\x53"
aPacificRim:	/* 0x50414 */
		.string "PACIFIC RIM"
aCeintureDuPaci:	/* 0x50420 */
		.string "CEINTURE DU PACIFIQUE"
aA:	/* 0x50436 */
		.ascii  "\x41\x00"
aBacinoPacifico:	/* 0x50438 */
		.string "BACINO PACIFICO"
aIndonesia:	/* 0x50448 */
		.string "INDONESIA"
		.ascii  "\x00\x59"
aIndonesie:	/* 0x50454 */
		.string "INDONESIE"
		.ascii  "\x54\x52"
aChina:	/* 0x50460 */
		.string "CHINA"
		.ascii  "\x52\x4f"
aChine:	/* 0x50468 */
		.string "CHINE"
		.ascii  "\x54\x52"
aCina:	/* 0x50470 */
		.string "CINA"
		.ascii  "\x41\x53\x54"
aFarEast:	/* 0x50478 */
		.string "FAR EAST"
		.ascii  "\x00\x00\x00"
aExtremeOrient:	/* 0x50484 */
		.string "EXTREME-ORIENT"
		.ascii  "\x00"
aEstremoOriente:	/* 0x50494 */
		.string "ESTREMO ORIENTE"
aKazakhstan:	/* 0x504a4 */
		.string "KAZAKHSTAN"
		.ascii  "\x52"
aKazakhistan:	/* 0x504b0 */
		.string "KAZAKHISTAN"
aSiberia:	/* 0x504bc */
		.string "SIBERIA"
aSiberie:	/* 0x504c4 */
		.string "SIBERIE"
aUrals:	/* 0x504cc */
		.string "URALS"
		.ascii  "\x52\x45"
aOural:	/* 0x504d4 */
		.string "OURAL"
		.ascii  "\x43\x49"
aUrali:	/* 0x504dc */
		.string "URALI"
		.ascii  "\x41\x00"
aMongolia:	/* 0x504e4 */
		.string "MONGOLIA"
		.ascii  "\x43\x49\x46"
aMongolie:	/* 0x504f0 */
		.string "MONGOLIE"
		.ascii  "\x45\x53\x49"
aGreenland:	/* 0x504fc */
		.string "GREENLAND"
		.ascii  "\x53\x49"
aGroenland:	/* 0x50508 */
		.string "GROENLAND"
		.ascii  "\x52\x4f"
aGroenlandia:	/* 0x50514 */
		.string "GROENLANDIA"
aNortheastTerri:	/* 0x50520 */
		.string "NORTHEAST TERRITORIES"
		.ascii  "\x00\x00"
aTerritoiresDuN:	/* 0x50538 */
		.string "TERRITOIRES DU NORD-EST"
aTerritoriNordO:	/* 0x50550 */
		.string "TERRITORI NORD-ORIENTALI"
		.ascii  "\x48\x49\x53"
aYukon:	/* 0x5056c */
		.string "YUKON"
		.ascii  "\x42\x45"
aAlaska:	/* 0x50574 */
		.string "ALASKA"
		.ascii  "\x45"
aNorthwestTerri:	/* 0x5057c */
		.string "NORTHWEST TERRITORIES"
		.ascii  "\x41\x4c"
aTerritoiresDuN_0:	/* 0x50594 */
		.string "TERRITOIRES DU NORD-OUEST"
		.ascii  "\x53\x49"
aTerritoriNordO_0:	/* 0x505b0 */
		.string "TERRITORI NORD-OCCIDENTALI"
		.ascii  "\x45"
aNewfoundland:	/* 0x505cc */
		.string "NEWFOUNDLAND"
		.ascii  "\x45\x41\x53"
aTerreNeuve:	/* 0x505dc */
		.string "TERRE-NEUVE"
aTerranova:	/* 0x505e8 */
		.string "TERRANOVA"
		.ascii  "\x53\x20"
aKamchatka:	/* 0x505f4 */
		.string "KAMCHATKA"
		.ascii  "\x54\x00"
aWesternAustral:	/* 0x50600 */
		.string "WESTERN AUSTRALIA"
		.ascii  "\x45\x4e"
aAustralieOccid:	/* 0x50614 */
		.string "AUSTRALIE OCCIDENTALE"
		.ascii  "\x00\x45"
aAustraliaOrien:	/* 0x5062c */
		.string "AUSTRALIA ORIENTALE"
aNorthernTerrit:	/* 0x50640 */
		.string "NORTHERN TERRITORIES"
		.ascii  "\x52\x44\x2d"
aTerritoireDuNo:	/* 0x50658 */
		.string "TERRITOIRE DU NORD"
		.ascii  "\x4f"
aTerritoriSette:	/* 0x5066c */
		.string "TERRITORI SETTENTRIONALI"
		.ascii  "\x41\x4e\x44"
aNewSouthWales:	/* 0x50688 */
		.string "NEW SOUTH WALES"
aNouvellesGalle:	/* 0x50698 */
		.string "NOUVELLES GALLES DU SUD"
aNuovoGallesDel:	/* 0x506b0 */
		.string "NUOVO GALLES DEL SUD"
		.ascii  "\x55\x53\x54"
aColombia:	/* 0x506c8 */
		.string "COLOMBIA"
		.ascii  "\x49\x44\x45"
aColombie:	/* 0x506d4 */
		.string "COLOMBIE"
		.ascii  "\x55\x53\x54"
aColumbia:	/* 0x506e0 */
		.string "COLUMBIA"
		.ascii  "\x45\x4e\x54"
aPeru:	/* 0x506ec */
		.string "PERU"
		.ascii  "\x4f\x52\x54"
aPerou:	/* 0x506f4 */
		.string "PEROU"
		.ascii  "\x45\x52"
aPeru_0:	/* 0x506fc */
		.string "PERU'"
		.ascii  "\x45\x53"
aArgentina:	/* 0x50704 */
		.string "ARGENTINA"
		.ascii  "\x4f\x49"
aArgentine:	/* 0x50710 */
		.string "ARGENTINE"
		.ascii  "\x00\x4f"
aUruguay:	/* 0x5071c */
		.string "URUGUAY"
aParaguay:	/* 0x50724 */
		.string "PARAGUAY"
		.ascii  "\x52\x49\x4f"
aBrazil:	/* 0x50730 */
		.string "BRAZIL"
		.ascii  "\x44"
aBresil:	/* 0x50738 */
		.string "BRESIL"
		.ascii  "\x54"
aBrasile:	/* 0x50740 */
		.string "BRASILE"
aVenezuala:	/* 0x50748 */
		.string "VENEZUALA"
		.ascii  "\x47\x41"
aVenezuela:	/* 0x50754 */
		.string "VENEZUELA"
		.ascii  "\x44\x00"
aMexico:	/* 0x50760 */
		.string "MEXICO"
		.ascii  "\x41"
aMexique:	/* 0x50768 */
		.string "MEXIQUE"
aMessico:	/* 0x50770 */
		.string "MESSICO"
aSouthernStates:	/* 0x50778 */
		.string "SOUTHERN STATES"
aEtatsDuSud:	/* 0x50788 */
		.string "ETATS DU SUD"
		.ascii  "\x42\x49\x41"
aStatiDelSud:	/* 0x50798 */
		.string "STATI DEL SUD"
		.ascii  "\x52\x4f"
aCalifornia:	/* 0x507a8 */
		.string "CALIFORNIA"
		.ascii  "\x53"
aCalifornie:	/* 0x507b4 */
		.string "CALIFORNIE"
		.ascii  "\x49"
aColorado:	/* 0x507c0 */
		.string "COLORADO"
		.ascii  "\x00\x00\x4f"
aNewEngland:	/* 0x507cc */
		.string "NEW ENGLAND"
aNouvelleAnglet:	/* 0x507d8 */
		.string "NOUVELLE ANGLETERRE"
aNuovaInghilter:	/* 0x507ec */
		.string "NUOVA INGHILTERRA"
		.ascii  "\x00\x00"
aMidWest:	/* 0x50800 */
		.string "MID WEST"
		.ascii  "\x00\x47\x41"
aMidwest:	/* 0x5080c */
		.string "MIDWEST"
aStatiMedioOcci:	/* 0x50814 */
		.string "STATI MEDIO-OCCIDENTALI"
aRockies:	/* 0x5082c */
		.string "ROCKIES"
aMontagnesRoche:	/* 0x50834 */
		.string "MONTAGNES ROCHEUSES"
aMontagneRoccio:	/* 0x50848 */
		.string "MONTAGNE ROCCIOSE"
		.ascii  "\x53\x55"
aAtlanticAccele:	/* 0x5085c */
		.string "ATLANTIC ACCELERATOR"
		.ascii  "\x4f\x52\x4e"
aAccelerateurDe:	/* 0x50874 */
		.string "ACCELERATEUR DE L'ATLANTIQUE"
		.ascii  "\x4f\x55\x56"
aAcceleratoreAt:	/* 0x50894 */
		.string "ACCELERATORE ATLANTICO"
		.ascii  "\x00"
aCryoChamber:	/* 0x508ac */
		.string "CRYO CHAMBER"
		.ascii  "\x49\x44\x57"
aLeChambreCryo:	/* 0x508bc */
		.string "LE CHAMBRE CRYO"
aVaniIbernanti:	/* 0x508cc */
		.string "VANI IBERNANTI"
		.ascii  "\x4b"
aTakeWeapon:	/* 0x508dc */
		.string "TAKE WEAPON"
aPrendreArme:	/* 0x508e8 */
		.string "PRENDRE ARME"
		.ascii  "\x4f\x4e\x54"
aPrendiArma:	/* 0x508f8 */
		.string "PRENDI ARMA"
aDestroyCar:	/* 0x50904 */
		.string "DESTROY CAR"
aDetruireVoitur:	/* 0x50910 */
		.string "DETRUIRE VOITURE"
		.ascii  "\x43\x43\x45"
aDistruggiAuto:	/* 0x50924 */
		.string "DISTRUGGI AUTO"
		.ascii  "\x54"
aUseVehicle:	/* 0x50934 */
		.string "USE VEHICLE"
aUtiliserVehicu:	/* 0x50940 */
		.string "UTILISER VEHICULE"
		.ascii  "\x54\x49"
aUsaIlVeicolo:	/* 0x50954 */
		.string "USA IL VEICOLO"
		.ascii  "\x00"
aEvacuate:	/* 0x50964 */
		.string "EVACUATE"
		.ascii  "\x42\x45\x52"
aEvacuer:	/* 0x50970 */
		.string "EVACUER"
aSgombera:	/* 0x50978 */
		.string "SGOMBERA"
aYo:	/* 0x50981 */
		.ascii  "\x59\x4f\x00"
aPersuade:	/* 0x50984 */
		.string "PERSUADE"
		.ascii  "\x4e\x41\x4e"
aPersuader:	/* 0x50990 */
		.string "PERSUADER"
		.ascii  "\x45\x41"
aConvinci:	/* 0x5099c */
		.string "CONVINCI"
		.ascii  "\x52\x45\x20"
aProtect:	/* 0x509a8 */
		.string "PROTECT"
aProteger:	/* 0x509b0 */
		.string "PROTEGER"
aMa:	/* 0x509b9 */
		.ascii  "\x4d\x41\x00"
aProteggi:	/* 0x509bc */
		.string "PROTEGGI"
aAr:	/* 0x509c5 */
		.ascii  "\x41\x52\x00"
aAssassinate:	/* 0x509c8 */
		.string "ASSASSINATE"
aAssassiner:	/* 0x509d4 */
		.string "ASSASSINER"
		.ascii  "\x54"
aUccidi:	/* 0x509e0 */
		.string "UCCIDI"
		.ascii  "\x55"
aEliminateAgent:	/* 0x509e8 */
		.string "ELIMINATE AGENTS"
		.ascii  "\x54\x49\x4c"
aEliminerAgents:	/* 0x509fc */
		.string "ELIMINER AGENTS"
aEliminaAgenti:	/* 0x50a0c */
		.string "ELIMINA AGENTI"
		.ascii  "\x00"
aMissionComplet:	/* 0x50a1c */
		.string "MISSION COMPLETE"
aEr:	/* 0x50a2d */
		.ascii  "\x45\x52\x00"
aMissionTermine:	/* 0x50a30 */
		.string "MISSION TERMINEE"
		.ascii  "\x41\x44\x45"
aMissCompiuta:	/* 0x50a44 */
		.string "MISS. COMPIUTA"
		.ascii  "\x41"
aPressSpace:	/* 0x50a54 */
		.string "PRESS SPACE"
aAppuiBEspace:	/* 0x50a60 */
		.string "APPUI B.ESPACE"
		.ascii  "\x52"
aPremiSpazio:	/* 0x50a70 */
		.string "PREMI SPAZIO"
aAr_0:	/* 0x50a7d */
		.ascii  "\x41\x52\x00"
aMissionFailed:	/* 0x50a80 */
		.string "MISSION FAILED"
		.ascii  "\x41"
aMissionEchouee:	/* 0x50a90 */
		.string "MISSION ECHOUEE"
aMissioneFallit:	/* 0x50aa0 */
		.string "MISSIONE FALLITA"
		.ascii  "\x54\x49\x4c"
aGoing:	/* 0x50ab4 */
		.string "GOING"
		.ascii  "\x45\x52"
aEnRoute:	/* 0x50abc */
		.string "EN ROUTE"
		.ascii  "\x00\x00\x00"
aVai:	/* 0x50ac8 */
		.ascii  "\x56\x41\x49\x00"
aPickupWeapon:	/* 0x50acc */
		.string "PICKUP WEAPON"
aR:	/* 0x50ada */
		.ascii  "\x52\x00"
aRaccogliArma:	/* 0x50adc */
		.string "RACCOGLI ARMA"
		.ascii  "\x45\x45"
aFollow:	/* 0x50aec */
		.string "FOLLOW"
		.ascii  "\x53"
aSuivre:	/* 0x50af4 */
		.string "SUIVRE"
		.ascii  "\x55"
aSegui:	/* 0x50afc */
		.string "SEGUI"
		.ascii  "\x45\x53"
aDropWeapon:	/* 0x50b04 */
		.string "DROP WEAPON"
aPoserArme:	/* 0x50b10 */
		.string "POSER ARME"
		.ascii  "\x52"
aLasciaArma:	/* 0x50b1c */
		.string "LASCIA ARMA"
aHitByBullet:	/* 0x50b28 */
		.string "HIT BY BULLET"
		.ascii  "\x49\x4c"
aBlesse:	/* 0x50b38 */
		.string "BLESSE"
		.ascii  "\x53"
aCrivellato:	/* 0x50b40 */
		.string "CRIVELLATO"
		.ascii  "\x00"
aHitByCar:	/* 0x50b4c */
		.string "HIT BY CAR"
		.ascii  "\x4c"
aAccidente:	/* 0x50b58 */
		.string "ACCIDENTE"
		.ascii  "\x49\x4e"
aInvestito:	/* 0x50b64 */
		.string "INVESTITO"
		.ascii  "\x54\x45"
aOnFire:	/* 0x50b70 */
		.string "ON FIRE"
aEnFeu:	/* 0x50b78 */
		.string "EN FEU"
		.ascii  "\x4b"
aIncendiato:	/* 0x50b80 */
		.string "INCENDIATO"
		.ascii  "\x00"
aEnergyDrain:	/* 0x50b8c */
		.string "ENERGY DRAIN"
		.ascii  "\x00\x45\x45"
aPerteEnergie:	/* 0x50b9c */
		.string "PERTE ENERGIE"
		.ascii  "\x00\x55"
aCaloEnergia:	/* 0x50bac */
		.string "CALO ENERGIA"
		.ascii  "\x57\x45\x41"
aDead:	/* 0x50bbc */
		.string "DEAD"
		.ascii  "\x4f\x53\x45"
aMort:	/* 0x50bc4 */
		.string "MORT"
aE_0:	/* 0x50bc9 */
		.ascii  "\x45\x00\x52"
aMorto:	/* 0x50bcc */
		.string "MORTO"
		.ascii  "\x20\x41"
aObserving:	/* 0x50bd4 */
		.string "OBSERVING"
		.ascii  "\x20\x42"
aEnObservation:	/* 0x50be0 */
		.string "EN OBSERVATION"
		.ascii  "\x53"
aEsamina:	/* 0x50bf0 */
		.string "ESAMINA"
aAwol:	/* 0x50bf8 */
		.string "AWOL"
		.ascii  "\x49\x54\x20"
aAbsenceIlleg:	/* 0x50c00 */
		.string "ABSENCE ILLEG."
		.ascii  "\x54"
aAssente:	/* 0x50c10 */
		.string "ASSENTE"
aRunningAway:	/* 0x50c18 */
		.string "RUNNING AWAY"
		.ascii  "\x00\x00\x00"
aEnFuite:	/* 0x50c28 */
		.string "EN FUITE"
		.ascii  "\x4e\x43\x45"
aScappo:	/* 0x50c34 */
		.string "SCAPPO"
		.ascii  "\x00"
aDrowning:	/* 0x50c3c */
		.string "DROWNING"
		.ascii  "\x41\x49\x4e"
aNoyade:	/* 0x50c48 */
		.string "NOYADE"
		.ascii  "\x54"
aAnnego:	/* 0x50c50 */
		.string "ANNEGO"
		.ascii  "\x49"
aDangerCar:	/* 0x50c58 */
		.string "DANGER CAR"
		.ascii  "\x45"
aDangerVoiture:	/* 0x50c64 */
		.string "DANGER!VOITURE"
		.ascii  "\x45"
aPericoloAuto:	/* 0x50c74 */
		.string "PERICOLO AUTO"
		.ascii  "\x20\x41"
aUsingWeapon:	/* 0x50c84 */
		.string "USING WEAPON"
		.ascii  "\x4e\x20\x4f"
aUtiliseArme:	/* 0x50c94 */
		.string "UTILISE ARME"
		.ascii  "\x53\x41\x4d"
aArmaInUso:	/* 0x50ca4 */
		.string "ARMA IN USO"
aChipRemoved:	/* 0x50cb0 */
		.string "CHIP REMOVED"
		.ascii  "\x2e\x00\x54"
aPuceRetiree:	/* 0x50cc0 */
		.string "PUCE RETIREE"
		.ascii  "\x4e\x47\x20"
aChipRimosso:	/* 0x50cd0 */
		.string "CHIP RIMOSSO"
		.ascii  "\x00\x00\x00"
aMainMenu:	/* 0x50ce0 */
		.string "MAIN MENU"
		.ascii  "\x43\x45"
aMenuPrincipal:	/* 0x50cec */
		.string "MENU PRINCIPAL"
		.ascii  "\x47"
aMenuPrincipale:	/* 0x50cfc */
		.string "MENU PRINCIPALE"
aLoadSaveGame:	/* 0x50d0c */
		.string "LOAD-SAVE GAME"
		.ascii  "\x45"
aChSauvPartie:	/* 0x50d1c */
		.string "CH/SAUV. PARTIE"
aSalvaCaricaGio:	/* 0x50d2c */
		.string "SALVA-CARICA GIOCO"
		.ascii  "\x4e"
aMultiPlayer:	/* 0x50d40 */
		.string "MULTI PLAYER"
		.ascii  "\x54\x49\x4c"
aMultiJoueurs:	/* 0x50d50 */
		.string "MULTI JOUEURS"
		.ascii  "\x4d\x41"
aMultiplayer:	/* 0x50d60 */
		.string "MULTIPLAYER"
aMissionBrief:	/* 0x50d6c */
		.string "MISSION BRIEF"
		.ascii  "\x43\x45"
aBriefingMissio:	/* 0x50d7c */
		.string "BRIEFING MISSION"
		.ascii  "\x00\x00\x00"
aPianoMissione:	/* 0x50d90 */
		.string "PIANO MISSIONE"
		.ascii  "\x55"
aTeamSelection:	/* 0x50da0 */
		.string "TEAM SELECTION"
		.ascii  "\x55"
aChoixDeLEquipe:	/* 0x50db0 */
		.string "CHOIX DE L'EQUIPE"
		.ascii  "\x41\x56"
aSelezioneSquad:	/* 0x50dc4 */
		.string "SELEZIONE SQUADRA"
		.ascii  "\x41\x52"
aResearch:	/* 0x50dd8 */
		.string "RESEARCH"
		.ascii  "\x2d\x43\x41"
aRecherche:	/* 0x50de4 */
		.string "RECHERCHE"
		.ascii  "\x00\x4e"
aRicerca:	/* 0x50df0 */
		.string "RICERCA"
aMissionDebrief:	/* 0x50df8 */
		.string "MISSION DEBRIEFING"
		.ascii  "\x52"
aDebriefingMiss:	/* 0x50e0c */
		.string "DEBRIEFING MISSION"
		.ascii  "\x53"
aResocontoMissi:	/* 0x50e20 */
		.string "RESOCONTO MISSIONE"
		.ascii  "\x47"
aAccept:	/* 0x50e34 */
		.string "ACCEPT"
		.ascii  "\x00"
aAccepter:	/* 0x50e3c */
		.string "ACCEPTER"
		.ascii  "\x53\x49\x4f"
aConferma:	/* 0x50e48 */
		.string "CONFERMA"
		.ascii  "\x53\x45\x4c"
aMenu:	/* 0x50e54 */
		.string "MENU"
aN:	/* 0x50e59 */
		.ascii  "\x4e\x00\x55"
aOk:	/* 0x50e5c */
		.ascii  "\x4f\x4b\x00\x49"
aCancel:	/* 0x50e60 */
		.string "CANCEL"
		.ascii  "\x45"
aAnnuler:	/* 0x50e68 */
		.string "ANNULER"
aAnnulla:	/* 0x50e70 */
		.string "ANNULLA"
aBrief:	/* 0x50e78 */
		.string "BRIEF"
		.ascii  "\x44\x52"
aBriefing:	/* 0x50e80 */
		.string "BRIEFING"
		.ascii  "\x52\x43\x48"
aPiano:	/* 0x50e8c */
		.string "PIANO"
		.ascii  "\x43\x48"
aTeam:	/* 0x50e94 */
		.string "TEAM"
		.ascii  "\x00\x00\x4e"
aEquipe:	/* 0x50e9c */
		.string "EQUIPE"
		.ascii  "\x00"
aSquadra:	/* 0x50ea4 */
		.string "SQUADRA"
aMods:	/* 0x50eac */
		.string "MODS"
		.ascii  "\x45\x46\x49"
aModifs:	/* 0x50eb4 */
		.string "MODIFS"
		.ascii  "\x52"
aModif:	/* 0x50ebc */
		.string "MODIF."
		.ascii  "\x4d"
aEquip:	/* 0x50ec4 */
		.string "EQUIP"
		.ascii  "\x00\x53"
aEquiper:	/* 0x50ecc */
		.string "EQUIPER"
aEquipag:	/* 0x50ed4 */
		.string "EQUIPAG."
		.ascii  "\x45\x00\x47"
aSell:	/* 0x50ee0 */
		.string "SELL"
		.ascii  "\x00\x00\x00"
aVendre:	/* 0x50ee8 */
		.string "VENDRE"
		.ascii  "\x52"
aVendi:	/* 0x50ef0 */
		.string "VENDI"
		.ascii  "\x4e\x46"
aPurchase:	/* 0x50ef8 */
		.string "PURCHASE"
		.ascii  "\x45\x4e\x55"
aAcheter:	/* 0x50f04 */
		.string "ACHETER"
aCompra:	/* 0x50f0c */
		.string "COMPRA"
		.ascii  "\x45"
aReload:	/* 0x50f14 */
		.string "RELOAD"
		.ascii  "\x00"
aRecharg:	/* 0x50f1c */
		.string "RECHARG."
		.ascii  "\x52\x49\x45"
aRicar:	/* 0x50f28 */
		.string "RICAR."
		.ascii  "\x45"
aFunding:	/* 0x50f30 */
		.string "FUNDING+"
		.ascii  "\x49\x41\x4e"
aBudget:	/* 0x50f3c */
		.string "BUDGET +"
		.ascii  "\x00\x00\x4e"
aFondi:	/* 0x50f48 */
		.string "+ FONDI"
aFunding_0:	/* 0x50f50 */
		.string "FUNDING-"
		.ascii  "\x4f\x44\x53"
aBudget_0:	/* 0x50f5c */
		.string "BUDGET -"
aS_2:	/* 0x50f65 */
		.ascii  "\x53\x00\x52"
aFondi_0:	/* 0x50f68 */
		.string "- FONDI"
aInfo:	/* 0x50f70 */
		.string "INFO"
		.ascii  "\x00\x00\x53"
aEnhance:	/* 0x50f78 */
		.string "ENHANCE"
aDetails:	/* 0x50f80 */
		.string "DETAILS"
aDettagli:	/* 0x50f88 */
		.string "DETTAGLI"
		.ascii  "\x00\x00\x00"
aLoad:	/* 0x50f94 */
		.string "LOAD"
aE_1:	/* 0x50f99 */
		.ascii  "\x45\x00\x52"
aCharg:	/* 0x50f9c */
		.string "CHARG."
		.ascii  "\x46"
aCarica:	/* 0x50fa4 */
		.string "CARICA"
		.ascii  "\x45"
aSave:	/* 0x50fac */
		.string "SAVE"
		.ascii  "\x43\x48\x45"
aSauver:	/* 0x50fb4 */
		.string "SAUVER"
		.ascii  "\x50"
aSalva:	/* 0x50fbc */
		.string "SALVA"
		.ascii  "\x4c\x4f"
aMap:	/* 0x50fc4 */
		.ascii  "\x4d\x41\x50\x00"
aCarte:	/* 0x50fc8 */
		.string "CARTE"
		.ascii  "\x47\x2e"
aMappa:	/* 0x50fd0 */
		.string "MAPPA"
		.ascii  "\x43\x41"
aReplay:	/* 0x50fd8 */
		.string "REPLAY"
		.ascii  "\x44"
aRejouer:	/* 0x50fe0 */
		.string "REJOUER"
aName:	/* 0x50fe8 */
		.string "NAME"
		.ascii  "\x54\x20\x2b"
aNom:	/* 0x50ff0 */
		.ascii  "\x4e\x4f\x4d\x00"
aNome:	/* 0x50ff4 */
		.string "NOME"
aDi:	/* 0x50ff9 */
		.ascii  "\x44\x49\x00"
aPop:	/* 0x50ffc */
		.ascii  "\x50\x4f\x50\x00"
aPop_0:	/* 0x51000 */
		.string "POP."
		.ascii  "\x4f\x44\x53"
aStat:	/* 0x51008 */
		.string "STAT"
		.ascii  "\x54\x20\x2d"
aTax:	/* 0x51010 */
		.ascii  "\x54\x41\x58\x00"
aTaxe:	/* 0x51014 */
		.string "TAXE"
aDi_0:	/* 0x51019 */
		.ascii  "\x44\x49\x00"
aTass:	/* 0x5101c */
		.string "TASS"
		.ascii  "\x00\x00\x53"
aOwn:	/* 0x51024 */
		.ascii  "\x4f\x57\x4e\x00"
aProp:	/* 0x51028 */
		.string "PROP"
		.ascii  "\x45\x54\x41"
aUnknown:	/* 0x51030 */
		.string "UNKNOWN"
aInconnue:	/* 0x51038 */
		.string "INCONNUE"
		.ascii  "\x00\x00\x00"
aSconosciuto:	/* 0x51044 */
		.string "SCONOSCIUTO"
aVeryHappy:	/* 0x51050 */
		.string "VERY HAPPY"
aEjoyeuse:	/* 0x5105b */
		.ascii  "\x45"
data_5105c:
		.string "JOYEUSE"
aMoltoFelice:	/* 0x51064 */
		.string "MOLTO FELICE"
		.ascii  "\x00\x4c\x4f"
aHappy:	/* 0x51074 */
		.string "HAPPY"
		.ascii  "\x52\x54"
aGaie:	/* 0x5107c */
		.string "GAIE"
		.ascii  "\x41\x50\x50"
aFelice:	/* 0x51084 */
		.string "FELICE"
		.ascii  "\x4c"
aContent:	/* 0x5108c */
		.string "CONTENT"
aContente:	/* 0x51094 */
		.string "CONTENTE"
		.ascii  "\x54\x20\x2b"
aSoddisfatto:	/* 0x510a0 */
		.string "SODDISFATTO"
aUnhappy:	/* 0x510ac */
		.string "UNHAPPY"
aMecontente:	/* 0x510b4 */
		.string "MECONTENTE"
		.ascii  "\x2d"
aInfelice:	/* 0x510c0 */
		.string "INFELICE"
aDi_1:	/* 0x510c9 */
		.ascii  "\x44\x49\x00"
aDiscontent:	/* 0x510cc */
		.string "DISCONTENT"
		.ascii  "\x00"
aFurieuse:	/* 0x510d8 */
		.string "FURIEUSE"
		.ascii  "\x4e\x4b\x4e"
aInsoddisfatto:	/* 0x510e4 */
		.string "INSODDISFATTO"
		.ascii  "\x00\x00"
aRebellious:	/* 0x510f4 */
		.string "REBELLIOUS"
		.ascii  "\x00"
aRebelle:	/* 0x51100 */
		.string "REBELLE"
aRibelle:	/* 0x51108 */
		.string "RIBELLE"
aEmpty:	/* 0x51110 */
		.string "EMPTY"
		.ascii  "\x4c\x54"
aVide:	/* 0x51118 */
		.string "VIDE"
		.ascii  "\x49\x43\x45"
aVuoto:	/* 0x51120 */
		.string "VUOTO"
		.ascii  "\x50\x50"
aSpecialAgent:	/* 0x51128 */
		.string "SPECIAL AGENT"
		.ascii  "\x4c\x49"
aAgentSpecial:	/* 0x51138 */
		.string "AGENT SPECIAL"
		.ascii  "\x4e\x54"
aAgenteSpeciale:	/* 0x51148 */
		.string "AGENTE SPECIALE"
aSelectDetailTo:	/* 0x51158 */
		.string "SELECT DETAIL TO CHANGE"
aChoixDuDetailA:	/* 0x51170 */
		.string "CHOIX DU DETAIL A MODIFIER"
		.ascii  "\x49"
aScegliLeModifi:	/* 0x5118c */
		.string "SCEGLI LE MODIFICHE"
aColourAndLogo:	/* 0x511a0 */
		.string "COLOUR AND LOGO"
aCouleurEtLogo:	/* 0x511b0 */
		.string "COULEUR ET LOGO"
aColoreELogo:	/* 0x511c0 */
		.string "COLORE E LOGO"
		.ascii  "\x4f\x54"
aCompanyName:	/* 0x511d0 */
		.string "COMPANY NAME"
		.ascii  "\x47\x45\x4e"
aNomDeLaSociete:	/* 0x511e0 */
		.string "NOM DE LA SOCIETE"
		.ascii  "\x4e\x54"
aNomeCompagnia:	/* 0x511f4 */
		.string "NOME COMPAGNIA"
		.ascii  "\x00"
aYourName:	/* 0x51204 */
		.string "YOUR NAME"
		.ascii  "\x41\x49"
aVotreNom:	/* 0x51210 */
		.string "VOTRE NOM"
aE_2:	/* 0x5121a */
		.ascii  "\x45\x00"
aIlTuoNome:	/* 0x5121c */
		.string "IL TUO NOME"
aChangeColourAn:	/* 0x51228 */
		.string "CHANGE COLOUR AND LOGO"
		.ascii  "\x4c"
aChangerCouleur:	/* 0x51240 */
		.string "CHANGER COULEUR ET LOGO"
aCambiaColoreEL:	/* 0x51258 */
		.string "CAMBIA COLORE E LOGO"
		.ascii  "\x55\x52\x20"
aColour:	/* 0x51270 */
		.string "COLOUR"
		.ascii  "\x00"
aCouleur:	/* 0x51278 */
		.string "COULEUR"
aColore:	/* 0x51280 */
		.string "COLORE"
		.ascii  "\x54"
aLogo:	/* 0x51288 */
		.string "LOGO"
		.ascii  "\x4e\x59\x20"
aChangeCompanyN:	/* 0x51290 */
		.string "CHANGE COMPANY NAME"
aModifierNomSoc:	/* 0x512a4 */
		.string "MODIFIER NOM SOCIETE"
aA_0:	/* 0x512b9 */
		.ascii  "\x41\x00\x00"
aCambiaNomeComp:	/* 0x512bc */
		.string "CAMBIA NOME COMPAGNIA"
aE_3:	/* 0x512d2 */
		.ascii  "\x45\x00"
aEnterYourName:	/* 0x512d4 */
		.string "ENTER YOUR NAME"
aEntrezVotreNom:	/* 0x512e4 */
		.string "ENTREZ VOTRE NOM"
aO:	/* 0x512f5 */
		.ascii  "\x4f\x00\x4c"
aInserisciIlNom:	/* 0x512f8 */
		.string "INSERISCI IL NOME"
		.ascii  "\x00\x00"
aCost:	/* 0x5130c */
		.string "COST"
		.ascii  "\x41\x20\x43"
aPrix:	/* 0x51314 */
		.string "PRIX"
		.ascii  "\x20\x45\x20"
aCosto:	/* 0x5131c */
		.string "COSTO"
		.ascii  "\x52\x20"
aAmmo:	/* 0x51324 */
		.string "AMMO"
aR_0:	/* 0x51329 */
		.ascii  "\x52\x00\x00"
aMun:	/* 0x5132c */
		.string "MUN."
aUr:	/* 0x51331 */
		.ascii  "\x55\x52\x00"
aRange:	/* 0x51334 */
		.string "RANGE"
		.ascii  "\x00\x54"
aPortee:	/* 0x5133c */
		.string "PORTEE"
		.ascii  "\x20"
aRaggio:	/* 0x51344 */
		.string "RAGGIO"
		.ascii  "\x43"
aShot:	/* 0x5134c */
		.string "SHOT"
		.ascii  "\x59\x20\x4e"
aCoups:	/* 0x51354 */
		.string "COUPS"
		.ascii  "\x44\x49"
aColpo:	/* 0x5135c */
		.string "COLPO"
		.ascii  "\x4f\x4d"
aAutomatic:	/* 0x51364 */
		.string "AUTOMATIC"
		.ascii  "\x00\x00"
aAutomatique:	/* 0x51370 */
		.string "AUTOMATIQUE"
aAutomatica:	/* 0x5137c */
		.string "AUTOMATICA"
		.ascii  "\x00"
aHeavy:	/* 0x51388 */
		.string "HEAVY"
		.ascii  "\x59\x4f"
aArmeLourde:	/* 0x51390 */
		.string "ARME LOURDE"
aGrossoCalibro:	/* 0x5139c */
		.string "GROSSO CALIBRO"
		.ascii  "\x4c"
aAssault:	/* 0x513ac */
		.string "ASSAULT"
aArmeDAssaut:	/* 0x513b4 */
		.string "ARME D'ASSAUT"
		.ascii  "\x00\x00"
aAssalto:	/* 0x513c4 */
		.string "ASSALTO"
aMiscellaneous:	/* 0x513cc */
		.string "MISCELLANEOUS"
		.ascii  "\x52\x20"
aDivers:	/* 0x513dc */
		.string "DIVERS"
		.ascii  "\x00"
aVarioTipo:	/* 0x513e4 */
		.string "VARIO TIPO"
		.ascii  "\x47"
aMinFunding:	/* 0x513f0 */
		.string "MIN FUNDING"
aBudgetMini:	/* 0x513fc */
		.string "BUDGET MINI"
aFondiMin:	/* 0x51408 */
		.string "FONDI MIN"
		.ascii  "\x44\x49"
aMaxFunding:	/* 0x51414 */
		.string "MAX FUNDING"
aBudgetMaxi:	/* 0x51420 */
		.string "BUDGET MAXI"
aFondiMax:	/* 0x5142c */
		.string "FONDI MAX"
		.ascii  "\x54\x4f"
aResearching:	/* 0x51438 */
		.string "RESEARCHING"
aInRicerca:	/* 0x51444 */
		.string "IN RICERCA"
		.ascii  "\x55"
aLoggingOut:	/* 0x51450 */
		.string "LOGGING OUT"
aFinDuJeu:	/* 0x5145c */
		.string "FIN DU JEU"
		.ascii  "\x41"
aInUscita:	/* 0x51468 */
		.string "IN USCITA"
		.ascii  "\x00\x00"
aLoadingMultipl:	/* 0x51474 */
		.string "LOADING MULTIPLAYER"
aChargMultijoue:	/* 0x51488 */
		.string "CHARG.MULTIJOUEURS"
		.ascii  "\x49"
aCaricaMultipla:	/* 0x5149c */
		.string "CARICA MULTIPLAYER"
		.ascii  "\x47"
aLoadingGame:	/* 0x514b0 */
		.string "LOADING GAME"
		.ascii  "\x20\x4d\x49"
aChargementPart:	/* 0x514c0 */
		.string "CHARGEMENT PARTIE"
		.ascii  "\x44\x47"
aCaricamentoGio:	/* 0x514d4 */
		.string "CARICAMENTO GIOCO"
		.ascii  "\x54\x4f"
aMissionStatus:	/* 0x514e8 */
		.string "MISSION STATUS:"
aStatutDeLaMiss:	/* 0x514f8 */
		.string "STATUT DE LA MISSION:"
		.ascii  "\x4e\x20"
aStatoMissione:	/* 0x51510 */
		.string "STATO MISSIONE"
		.ascii  "\x00"
aCompleted:	/* 0x51520 */
		.string "COMPLETED"
		.ascii  "\x4c\x54"
aTerminee:	/* 0x5152c */
		.string "TERMINEE"
		.ascii  "\x48\x41\x52"
aCompletata:	/* 0x51538 */
		.string "COMPLETATA"
		.ascii  "\x55"
aWithdrewFromMi:	/* 0x51544 */
		.string "WITHDREW FROM MISSION"
		.ascii  "\x00\x47"
aRetireDeLaMiss:	/* 0x5155c */
		.string "RETIRE DE LA MISSION"
		.ascii  "\x45\x4d\x45"
aRitiratoDallaM:	/* 0x51574 */
		.string "RITIRATO DALLA MISSIONE"
aFailed:	/* 0x5158c */
		.string "FAILED"
		.ascii  "\x4f"
aEchouee:	/* 0x51594 */
		.string "ECHOUEE"
aFallita:	/* 0x5159c */
		.string "FALLITA"
aAgentsUsed:	/* 0x515a4 */
		.string "AGENTS USED:"
		.ascii  "\x4d\x49\x53"
aAgentsUtilises:	/* 0x515b4 */
		.string "AGENTS UTILISES"
aAgentiImpiegat:	/* 0x515c4 */
		.string "AGENTI IMPIEGATI"
		.ascii  "\x00\x00\x00"
aNewAgentsGaine:	/* 0x515d8 */
		.string "NEW AGENTS GAINED:"
		.ascii  "\x45"
aAgentsRecupere:	/* 0x515ec */
		.string "AGENTS RECUPERES"
		.ascii  "\x49\x54\x48"
aNuoviAgentiAcq:	/* 0x51600 */
		.string "NUOVI AGENTI ACQUISITI"
		.ascii  "\x49"
aTimeInMission:	/* 0x51618 */
		.string "TIME IN MISSION:"
		.ascii  "\x45\x4d\x45"
aDureeDeLaMissi:	/* 0x5162c */
		.string "DUREE DE LA MISSION"
aTempoDellaMiss:	/* 0x51640 */
		.string "TEMPO DELLA MISSIONE"
		.ascii  "\x41\x4c\x4c"
aHours:	/* 0x51658 */
		.string "HOURS"
		.ascii  "\x45\x4e"
aHeures:	/* 0x51660 */
		.string "HEURES"
		.ascii  "\x3a"
aOre:	/* 0x51668 */
		.ascii  "\x4f\x52\x45\x00"
aDays:	/* 0x5166c */
		.string "DAYS"
		.ascii  "\x53\x20\x55"
aJours:	/* 0x51674 */
		.string "JOURS"
aS_3:	/* 0x5167a */
		.ascii  "\x53\x00"
aGiorni:	/* 0x5167c */
		.string "GIORNI"
		.ascii  "\x00"
aValueOfDamage:	/* 0x51684 */
		.string "VALUE OF DAMAGE:"
		.ascii  "\x3a\x00\x45"
aDegatsSubis:	/* 0x51698 */
		.string "DEGATS SUBIS"
		.ascii  "\x52\x45\x53"
aAmmontareDeiDa:	/* 0x516a8 */
		.string "AMMONTARE DEI DANNI"
aEnemyAgentsKil:	/* 0x516bc */
		.string "ENEMY AGENTS KILLED:"
		.ascii  "\x4f\x4e\x3a"
aAgentsEnnemisT:	/* 0x516d4 */
		.string "AGENTS ENNEMIS TUES"
aAgentiNemiciEl:	/* 0x516e8 */
		.string "AGENTI NEMICI ELIMINATI"
aCriminalsKille:	/* 0x51700 */
		.string "CRIMINALS KILLED:"
		.ascii  "\x00\x3a"
aCriminelsElimi:	/* 0x51714 */
		.string "CRIMINELS ELIMINES"
		.ascii  "\x00"
aCriminaliElimi:	/* 0x51728 */
		.string "CRIMINALI ELIMINATI"
aCiviliansKille:	/* 0x5173c */
		.string "CIVILIANS KILLED"
		.ascii  "\x3a\x00\x45"
aCivilsTues:	/* 0x51750 */
		.string "CIVILS TUES"
aCiviliUccisi:	/* 0x5175c */
		.string "CIVILI UCCISI"
		.ascii  "\x44\x45"
aPoliceKilled:	/* 0x5176c */
		.string "POLICE KILLED:"
		.ascii  "\x47"
aPoliciersTues:	/* 0x5177c */
		.string "POLICIERS TUES:"
aPoliziottiUcci:	/* 0x5178c */
		.string "POLIZIOTTI UCCISI"
aS_4:	/* 0x5179e */
		.ascii  "\x53\x00"
aGuardsKilled:	/* 0x517a0 */
		.string "GUARDS KILLED:"
		.ascii  "\x4c"
aGardesTues:	/* 0x517b0 */
		.string "GARDES TUES"
aGuardieUccise:	/* 0x517bc */
		.string "GUARDIE UCCISE"
		.ascii  "\x3a"
aPeoplePersuade:	/* 0x517cc */
		.string "PEOPLE PERSUADED:"
		.ascii  "\x00\x00"
aPersonnesConva:	/* 0x517e0 */
		.string "PERSONNES CONVAINCUES"
		.ascii  "\x00\x00"
aPersoneConvint:	/* 0x517f8 */
		.string "PERSONE CONVINTE"
		.ascii  "\x3a\x00\x45"
aHitAccuracy:	/* 0x5180c */
		.string "HIT ACCURACY:"
		.ascii  "\x56\x49"
aPrecisionDeTir:	/* 0x5181c */
		.string "PRECISION DE TIR"
		.ascii  "\x45\x20\x4b"
aColpiPrecisi:	/* 0x51830 */
		.string "COLPI PRECISI"
		.ascii  "\x45\x52"
aNoBulletsFired:	/* 0x51840 */
		.string "NO BULLETS FIRED"
		.ascii  "\x49\x20\x55"
aPasDeBallesUti:	/* 0x51854 */
		.string "PAS DE BALLES UTILISEES"
aProiettiliNonS:	/* 0x5186c */
		.string "PROIETTILI NON SPARATI"
		.ascii  "\x49"
aResearchOn:	/* 0x51884 */
		.string "RESEARCH ON"
aRechercheSur:	/* 0x51890 */
		.string "RECHERCHE SUR"
		.ascii  "\x52\x53"
aRicercaAttivat:	/* 0x518a0 */
		.string "RICERCA ATTIVATA"
		.ascii  "\x00\x00\x00"
aNewWeaponryHas:	/* 0x518b4 */
		.string "NEW WEAPONRY HAS BEEN SUBMITTED"
aUneNouvelleArm:	/* 0x518d4 */
		.string "UNE NOUVELLE ARME A ETE SOUMISE"
aNuoviArmamenti:	/* 0x518f4 */
		.string "NUOVI ARMAMENTI SOTTOPOSTI"
		.ascii  "\x55"
aToTheResearchD:	/* 0x51910 */
		.string "TO THE RESEARCH DEPARTMENT"
		.ascii  "\x49"
aAuDepartementD:	/* 0x5192c */
		.string "AU DEPARTEMENT DE LA RECHERCHE"
		.ascii  "\x00"
aAlDipartimento:	/* 0x5194c */
		.string "AL DIPARTIMENTO DI RICERCA"
		.ascii  "\x00"
aMissionStatist:	/* 0x51968 */
		.string "MISSION STATISTICS"
		.ascii  "\x45"
aStatistiquesMi:	/* 0x5197c */
		.string "STATISTIQUES MISSION"
		.ascii  "\x4c\x4c\x45"
aDatiStatistici:	/* 0x51994 */
		.string "DATI STATISTICI MISSIONE"
		.ascii  "\x20\x41\x52"
aReplacementMet:	/* 0x519b0 */
		.string "REPLACEMENT METAL LEGS. SERVO ASSISTED HYDRAULICS ALLOW QUICKER MOVEMENT."
		.ascii  "\x52\x43"
aJambesDeRempla:	/* 0x519fc */
		.string "JAMBES DE REMPLACEMENT METALLIQUES. LE SYSTEME HYDRAULIQUE PERMET UNE PLUS GRANDE RAPIDITE."
aGambeMetallich:	/* 0x51a58 */
		.string "GAMBE METALLICHE DI RICAMBIO. SERVO ASSISTITE DA CIRCUITO IDRAULICO CONSENTONO MOVIMENTI PIU' RAPIDI."
		.ascii  "\x41\x43"
aPlasteelLegsLi:	/* 0x51ac0 */
		.string "PLASTEEL LEGS. LIGHTER AND TOUGHER THAN METAL LEGS. ENHANCED HYDRAULIC SYSTEM AND BALANCE CONTROL."
		.ascii  "\x20"
aJambesEnPlaSte:	/* 0x51b24 */
		.string "JAMBES EN PLA- STEEL. PLUS LEGERES ET PLUS SOLIDES. SYSTEME HYDRAULIQUE ET CONTROLE DE L'EQUILIBRE."
aGambeInPlastee:	/* 0x51b88 */
		.string "GAMBE IN PLASTEEL. PIU' LEGGERE E RESISTENTI DELLE METALLICHE. SISTEMA IDRAULICO AVANZATO E CONTROLLO DI ASSETTO."
		.ascii  "\x54\x20"
aCybermeshLegsP:	/* 0x51bfc */
		.string "CYBERMESH LEGS. PLASTEEL CORE WITH SYNTHETIC MUSCLE FIBRE. SUPERB RESPONSE AND BALANCE COUPLED WITH HIGH SPEED."
aJambesCyberMes:	/* 0x51c6c */
		.string "JAMBES CYBER- MESH. NOYAU EN PLASTEEL ET MUSCULES SYN- THETIQUES. TRES RAPIDE ET EXCELLENT EQUILIBRE."
		.ascii  "\x52\x45"
aGambeCyberMesh:	/* 0x51cd4 */
		.string "GAMBE CYBER- MESH. INTERNO IN PLASTEEL CON FIBRE MUSCOLARI SINTETICHE. REAZIONE E ASSETTO ECCELLENTI ABBINATI AD ALTA VELOCITA'."
		.ascii  "\x45\x54\x49"
aReplacementMet_0:	/* 0x51d58 */
		.string "REPLACEMENT METAL ARMS. SERVO ASSISTED HYDRAULICS ALLOW THE CARRYING OF HEAVIER ITEMS."
		.ascii  "\x4e"
aBrasDeRemplace:	/* 0x51db0 */
		.string "BRAS DE REMPLACEMENT METALLIQUES. SYSTEME HYDRAULIQUE SERVO-ASSISTE PERMETTANT LE TRANSPORT D'OBJETS PLUS LOURDS."
		.ascii  "\x53\x45"
aBracciaMetalli:	/* 0x51e24 */
		.string "BRACCIA METALLICHE DI RICAMBIO. SERVO ASSISTITE DA CIRCUITO IDRAULICO CONSENTONO IL TRASPORTO DI OGGETTI PESANTI."
		.ascii  "\x59\x44"
aPlasteelArmsLi:	/* 0x51e98 */
		.string "PLASTEEL ARMS. LIGHTER AND TOUGHER THAN METAL ARMS. ENHANCED HYDRAULIC SYSTEM AND PRESSURE CONTROL."
aEnPlasteelPlus:	/* 0x51efc */
		.string "EN PLASTEEL. PLUS LEGERS ET PLUS SOLIDES. SYSTEME HYDRAULIQUE ET CONTROLE DE PRESSION."
		.ascii  "\x50"
aBracciaInPlast:	/* 0x51f54 */
		.string "BRACCIA IN PLASTEEL. PIU' LEGGERE E RE- SISTENTI DELLE METALLICHE. SISTEMA IDRAULICO AVANZATO E CONTROLLO DELLA PRESSIONE."
		.ascii  "\x00"
aCybermeshArmsP:	/* 0x51fd0 */
		.string "CYBERMESH ARMS. PLASTEEL CORE WITH SYNTHETIC MUSCLE FIBRE. EXCELLENT TACTILE CONTROL AND WEIGHT LOADING."
		.ascii  "\x20\x44\x45"
aBrasCybermeshN:	/* 0x5203c */
		.string "BRAS CYBERMESH. NOYAU DE PLASTEEL ET FIBRES MUSCULAIRES SYNTHETIQUES. EXCELLENT CONTROLE TACTILE ET GROSSE CHARGE UTILE."
		.ascii  "\x20\x4d\x55"
aBracciaCyberMe:	/* 0x520b8 */
		.string "BRACCIA CYBER- MESH. INTERNO IN PLASTEEL CON FIBRE MUSCOLARI SINTETICHE. CONTROLLO TATTILE E PORTATA DI CARICO ECCELLENTI."
		.ascii  "\x54"
aMetalChestCage:	/* 0x52134 */
		.string "METAL CHEST CAGE. ALL INTERNAL ORGANS ARE SHIELDED BY HEAVY METAL CASING."
		.ascii  "\x45\x52"
aPoitrineMetall:	/* 0x52180 */
		.string "POITRINE METALLIQUE. TOUS LES ORGANES INTERNES SONT PROTEGES PAR UN EPAIS BLINDAGE METALLIQUE."
		.ascii  "\x43"
aGabbiaToracica_0:	/* 0x521e0 */
		.string "GABBIA TORACICA IN METALLO. TUTTI GLI ORGANI INTERNI SONO PROTETTI DA UN INVOLUCRO IN METALLO PESANTE."
		.ascii  "\x41"
aPlasteelChestC:	/* 0x52248 */
		.string "PLASTEEL CHEST CAGE. LIGHTER AND TOUGHER THAN THE METAL VERSION WITH BETTER MOBILITY."
		.ascii  "\x42\x49"
aPlasteelPlusLe:	/* 0x522a0 */
		.string "PLASTEEL. PLUS LEGERE ET SO- LIDE QUE LA VERSION METAL. LES ORGANES SONT PROTEGES PAR UN CHAMP DE FORCE."
		.ascii  "\x45\x4c\x20"
aGabbiaToracica_1:	/* 0x5230c */
		.string "GABBIA TORACICA IN PLASTEEL. PIU' LEGGERA E RESISTENTE DELLA VERSIONE METALLICA CON MIGLIORE MOBILITA'."
aCybermeshChest:	/* 0x52374 */
		.string "CYBERMESH CHEST CAGE WITH POWER SHIELDING. ALL INTERNAL ORGANS ARE SHIELDED BY A LOW POWER FIELD GENERATOR."
aPoitrineCyberm:	/* 0x523e0 */
		.string "POITRINE CYBERMESH AVEC BOUCLIERS. LES ORGANES INTERNES SONT PROTEGES PAR UN FAIBLE CHAMP DE FORCE."
aGabbiaToracica:	/* 0x52444 */
		.string "GABBIA TORACICA CYBERMESH CON SCHERMATURA AD ENERGIA. TUTTI GLI ORGANI INTERNI SONO PROTETTI DA UN CAMPO DI FORZA A BASSA POTENZA."
		.ascii  "\x20"
aHeartStimulato:	/* 0x524c8 */
		.string "HEART STIMULATOR. MONITORS AND MAINTAINS THE HEART RATE OF THE INDIVIDUAL."
		.ascii  "\x4d"
aStimulateurCar:	/* 0x52514 */
		.string "STIMULATEUR CARDIAQUE. SURVEILLE ET MAINTIENT LE RYTHME CARDIAQUE DE L'INDIVIDU."
		.ascii  "\x4f\x20\x44"
aStimolatoreCar:	/* 0x52568 */
		.string "STIMOLATORE CARDIACO. CONTROLLA E MANTIENE IL BATTITO CARDIACO DELL'INDIVIDUO."
		.ascii  "\x41"
aHeartAccelerat:	/* 0x525b8 */
		.string "HEART ACCELERATOR AND MONITOR. HEART RATE IS ALMOST DOUBLED ALLOWING THE QUICKER DISTRIBUTION OF HORMONES."
		.ascii  "\x53"
aAccelerateurEt:	/* 0x52624 */
		.string "ACCELERATEUR ET MONITEUR CARDIAQUE. LE RYTHME EST DOUBLE, ACCE- LERANT AINSI LA DIFFUSION DES HORMONES."
aAcceleratoreCa:	/* 0x5268c */
		.string "ACCELERATORE CARDIACO. IL BATTITO CARDIACO VIENE QUASI RADDOPPIATO PER PERMETTERE UNA PIU' RAPIDA DISTRIBUZIONE DI ORMONI."
		.ascii  "\x59"
aCyberneticHear:	/* 0x52708 */
		.string "CYBERNETIC HEART. POWERFUL PUMP WITH IN BUILT SYSTEM ANALYSIS AND OVERIDE FACILITIES. TRIPLES OUTPUT OF A STANDARD HUMAN HEART."
aCoeurCyberneTi:	/* 0x52788 */
		.string "COEUR CYBERNE- TIQUE. SYSTE- ME D'ANALYSE INTEGRE ET ACCELERATEUR. TROIS FOIS + EFFICACE QU'UN COEUR HUMAIN."
		.ascii  "\x45\x4d\x20"
aCuoreCiberneTi:	/* 0x527f8 */
		.string "CUORE CIBERNE- TICO. UNA POTENTE POMPA CON ACCLUSO UN SISTEMA DI ANALISI E RESISTENZA AGLI SFORZI. TRIPLICA IL RENDIMENTO DI UN CUORE UMANO."
		.ascii  "\x00\x00\x00"
aVisionEnhancer:	/* 0x52888 */
		.string "VISION ENHANCER WITH LIMITED ZOOM FACILITY. ALLOWS NEAR PERFECT SIGHT EVEN AT NIGHT."
		.ascii  "\x53\x4f\x20"
aOptimiseurDeVi:	/* 0x528e0 */
		.string "OPTIMISEUR DE VISION AVEC FONCTIONS LIMITEES DE ZOOM. PERMET DE VOIR PRESQUE PARFAITEMENT, MEME LA NUIT."
		.ascii  "\x20\x45\x4e"
aAmplificatoreV:	/* 0x5294c */
		.string "AMPLIFICATORE VISIVO CON ZOOM LIMITATO. PERMETTE UNA VISTA QUASI PERFETTA ANCHE DI NOTTE"
		.ascii  "\x20\x44\x45"
aEnhancedModelO:	/* 0x529a8 */
		.string "ENHANCED MODEL OF THE V1 INCORPORATING A TARGET AQUISITION FACILITY AND RANGE FINDER."
		.ascii  "\x41\x4d"
aModeleV1Amelio:	/* 0x52a00 */
		.string "MODELE V1 AMELIORE MUNI D'UN SYSTEME D'ACQUISITION DE CIBLE ET D'UN DETECTEUR DE PORTEE."
		.ascii  "\x45\x45\x4e"
aModelloAvanzat:	/* 0x52a5c */
		.string "MODELLO AVANZATO DELLA V1 CON INCORPORATO UN ACQUISITORE DI BERSAGLIO E UN MIRINO DI GITTATA."
		.ascii  "\x20\x56"
aLatestNeurocyb:	/* 0x52abc */
		.string "LATEST NEUROCYBERNETIC IMPLANTS. GIVES PERFECT NIGHT VISION WITH THE AID OF TARGETERS RANGE FINDERS AND THREAT IDENTIFIER."
		.ascii  "\x54"
aImplantsNeuroC:	/* 0x52b38 */
		.string "IMPLANTS NEURO CYBERNETIQUES. EXCELLENTE VI- SION DE NUIT, SYS. DE VISEE, DETECTEURS DE PORTEE ET ALERTES RADAR."
		.ascii  "\x48\x20\x54"
aLUltimoInnesto:	/* 0x52bac */
		.string "L'ULTIMO INNESTO CIBERNETICO. PERMETTE UNA VISIONE NOTTURNA CON L'AIUTO DI ACQUISITORI DI BERSAGLI E MIRINI DI RAGGIO."
		.ascii  "\x4e"
aNeuralEnhancer:	/* 0x52c24 */
		.string "NEURAL ENHANCER THAT SPEEDS UP BRAIN STEM RESPONSE TIME."
		.ascii  "\x52\x41\x44"
aOptimiseurNeur:	/* 0x52c60 */
		.string "OPTIMISEUR NEUROLOGIQUE. ACCELERE LE TEMPS DE REPONSE DU PEDONCULE CEREBRAL."
		.ascii  "\x4f\x20\x44"
aIntensificator:	/* 0x52cb0 */
		.string "INTENSIFICATORE NEURALE. PERMETTE DI ACCELERARE IL TEMPO DI REAZIONE DEL CERVELLO."
		.ascii  "\x20"
aNeuroCnsDevice:	/* 0x52d04 */
		.string "NEURO CNS DEVICE THAT INTERCEPTS MOST LOW LEVEL FUNCTIONS LEAVING THE BRAIN FREE TO DEAL WITH HIGH END DESICIONS."
		.ascii  "\x54\x4f"
aAppareilNeuroL:	/* 0x52d78 */
		.string "APPAREIL NEURO LOGIQUE CNS, CONTROLANT LES FONCTIONS COU- RANTES POUR DECHARGER LE CERVEAU DE CES OCCUPATIONS."
		.ascii  "\x57"
aDispositivoNeu:	/* 0x52de8 */
		.string "DISPOSITIVO NEURO CNS. INTERCETTA LA MAGGIOR PARTE DELLE FUNZIONI A BASSO LIVELLO LASCIANDO IL CERVELLO LIBERO."
aCerebralMultip:	/* 0x52e58 */
		.string "CEREBRAL MULTIPLIER. CONNECTED TO A COMPUNET GIVING ACCESS TO A MASS OF TACTICAL INFO. ADAPTED FROM THE MILITARY VERSION."
		.ascii  "\x49\x4f"
aMultiplicateur:	/* 0x52ed4 */
		.string "MULTIPLICATEUR CEREBRAL BRAN- CHE SUR UN RESEAU D'INFOS TACTIQUES. DERIVE DU MODELE MILITAIRE."
		.ascii  "\x4f"
aMoltiplicatore:	/* 0x52f34 */
		.string "MOLTIPLICATORE CEREBRALE. COLLEGATO A UNA RETE COMPUTERIZZATA DA' ACCESSO AD INFORMAZIONI TATTICHE. VERSIONE MILITARE MODIFICATA."
		.ascii  "\x4e\x20"
aLegsV1:	/* 0x52fb8 */
		.string "LEGS V1"
aJambesV1:	/* 0x52fc0 */
		.string "JAMBES V1"
		.ascii  "\x54\x49"
aGambeV1:	/* 0x52fcc */
		.string "GAMBE V1"
		.ascii  "\x49\x56\x45"
aLegsV2:	/* 0x52fd8 */
		.string "LEGS V2"
aJambesV2:	/* 0x52fe0 */
		.string "JAMBES V2"
		.ascii  "\x52\x45"
aGambeV2:	/* 0x52fec */
		.string "GAMBE V2"
		.ascii  "\x4c\x49\x43"
aLegsV3:	/* 0x52ff8 */
		.string "LEGS V3"
aJambesV3:	/* 0x53000 */
		.string "JAMBES V3"
		.ascii  "\x4f\x4c"
aGambeV3:	/* 0x5300c */
		.string "GAMBE V3"
		.ascii  "\x55\x4e\x41"
aArmsV1:	/* 0x53018 */
		.string "ARMS V1"
aBrasV1:	/* 0x53020 */
		.string "BRAS V1"
aBracciaV1:	/* 0x53028 */
		.string "BRACCIA V1"
		.ascii  "\x43"
aArmsV2:	/* 0x53034 */
		.string "ARMS V2"
aBrasV2:	/* 0x5303c */
		.string "BRAS V2"
aBracciaV2:	/* 0x53044 */
		.string "BRACCIA V2"
		.ascii  "\x48"
aArmsV3:	/* 0x53050 */
		.string "ARMS V3"
aBrasV3:	/* 0x53058 */
		.string "BRAS V3"
aBracciaV3:	/* 0x53060 */
		.string "BRACCIA V3"
		.ascii  "\x31"
aChestV1:	/* 0x5306c */
		.string "CHEST V1"
a1:	/* 0x53075 */
		.ascii  "\x31\x00\x54"
aPoitrineV1:	/* 0x53078 */
		.string "POITRINE V1"
aToraceV1:	/* 0x53084 */
		.string "TORACE V1"
		.ascii  "\x41\x4d"
aChestV2:	/* 0x53090 */
		.string "CHEST V2"
		.ascii  "\x47\x41\x4d"
aPoitrineV2:	/* 0x5309c */
		.string "POITRINE V2"
aToraceV2:	/* 0x530a8 */
		.string "TORACE V2"
		.ascii  "\x53\x20"
aChestV3:	/* 0x530b4 */
		.string "CHEST V3"
		.ascii  "\x45\x20\x56"
aPoitrineV3:	/* 0x530c0 */
		.string "POITRINE V3"
aToraceV3:	/* 0x530cc */
		.string "TORACE V3"
		.ascii  "\x52\x41"
aHeartV1:	/* 0x530d8 */
		.string "HEART V1"
		.ascii  "\x41\x52\x4d"
aCoeurV1:	/* 0x530e4 */
		.string "COEUR V1"
		.ascii  "\x20\x56\x32"
aCuoreV1:	/* 0x530f0 */
		.string "CUORE V1"
aV2:	/* 0x530f9 */
		.ascii  "\x56\x32\x00"
aHeartV2:	/* 0x530fc */
		.string "HEART V2"
		.ascii  "\x00\x00\x00"
aCoeurV2:	/* 0x53108 */
		.string "COEUR V2"
		.ascii  "\x52\x41\x43"
aCuoreV2:	/* 0x53114 */
		.string "CUORE V2"
		.ascii  "\x48\x45\x53"
aHeartV3:	/* 0x53120 */
		.string "HEART V3"
		.ascii  "\x4f\x49\x54"
aCoeurV3:	/* 0x5312c */
		.string "COEUR V3"
		.ascii  "\x4f\x52\x41"
aCuoreV3:	/* 0x53138 */
		.string "CUORE V3"
		.ascii  "\x48\x45\x53"
aEyesV1:	/* 0x53144 */
		.string "EYES V1"
aYeuxV1:	/* 0x5314c */
		.string "YEUX V1"
aOcchiV1:	/* 0x53154 */
		.string "OCCHI V1"
		.ascii  "\x45\x20\x56"
aEyesV2:	/* 0x53160 */
		.string "EYES V2"
aYeuxV2:	/* 0x53168 */
		.string "YEUX V2"
aOcchiV2:	/* 0x53170 */
		.string "OCCHI V2"
aV3:	/* 0x53179 */
		.ascii  "\x56\x33\x00"
aEyesV3:	/* 0x5317c */
		.string "EYES V3"
aYeuxV3:	/* 0x53184 */
		.string "YEUX V3"
aOcchiV3:	/* 0x5318c */
		.string "OCCHI V3"
		.ascii  "\x4f\x45\x55"
aBrainV1:	/* 0x53198 */
		.string "BRAIN V1"
		.ascii  "\x55\x4f\x52"
aCerveauV1:	/* 0x531a4 */
		.string "CERVEAU V1"
		.ascii  "\x52"
aCervelloV1:	/* 0x531b0 */
		.string "CERVELLO V1"
aBrainV2:	/* 0x531bc */
		.string "BRAIN V2"
		.ascii  "\x52\x41\x43"
aCerveauV2:	/* 0x531c8 */
		.string "CERVEAU V2"
		.ascii  "\x53"
aCervelloV2:	/* 0x531d4 */
		.string "CERVELLO V2"
aBrainV3:	/* 0x531e0 */
		.string "BRAIN V3"
		.ascii  "\x4f\x52\x41"
aCerveauV3:	/* 0x531ec */
		.string "CERVEAU V3"
		.ascii  "\x53"
aCervelloV3:	/* 0x531f8 */
		.string "CERVELLO V3"
aPersuadertron:	/* 0x53204 */
		.string "PERSUADERTRON"
		.ascii  "\x20\x56"
aPersuadotron:	/* 0x53214 */
		.string "PERSUADOTRON"
aV2_0:	/* 0x53221 */
		.ascii  "\x56\x32\x00"
aPistol:	/* 0x53224 */
		.string "PISTOL"
		.ascii  "\x32"
aPistolet:	/* 0x5322c */
		.string "PISTOLET"
aV3_0:	/* 0x53235 */
		.ascii  "\x56\x33\x00"
aPistola:	/* 0x53238 */
		.string "PISTOLA"
aGaussGun:	/* 0x53240 */
		.string "GAUSS GUN"
		.ascii  "\x45\x55"
aPistoletGauss:	/* 0x5324c */
		.string "PISTOLET GAUSS"
		.ascii  "\x56"
aPistolaGauss:	/* 0x5325c */
		.string "PISTOLA GAUSS"
		.ascii  "\x00\x00"
aShotgun:	/* 0x5326c */
		.string "SHOTGUN"
aFusil:	/* 0x53274 */
		.string "FUSIL"
		.ascii  "\x52\x56"
aFucile:	/* 0x5327c */
		.string "FUCILE"
		.ascii  "\x53"
aUzi:	/* 0x53284 */
		.ascii  "\x55\x5a\x49\x00"
aMiniGun:	/* 0x53288 */
		.string "MINI-GUN"
		.ascii  "\x52\x41\x49"
aPM:	/* 0x53294 */
		.ascii  "\x50\x2e\x4d\x00"
aMiniPistola:	/* 0x53298 */
		.string "MINI-PISTOLA"
a3:	/* 0x532a5 */
		.ascii  "\x33\x00\x53"
aLaser:	/* 0x532a8 */
		.string "LASER"
		.ascii  "\x4c\x4f"
aFlamer:	/* 0x532b0 */
		.string "FLAMER"
		.ascii  "\x53"
aLanceFlammes:	/* 0x532b8 */
		.string "LANCE-FLAMMES"
		.ascii  "\x52\x53"
aLanciafiamme:	/* 0x532c8 */
		.string "LANCIAFIAMME"
		.ascii  "\x49\x53\x54"
aLongRange:	/* 0x532d8 */
		.string "LONG RANGE"
		.ascii  "\x54"
aLonguePortee:	/* 0x532e4 */
		.string "LONGUE PORTEE"
		.ascii  "\x55\x53"
aLungaGittata:	/* 0x532f4 */
		.string "LUNGA GITTATA"
		.ascii  "\x45\x54"
aScanner:	/* 0x53304 */
		.string "SCANNER"
aMedikit:	/* 0x5330c */
		.string "MEDIKIT"
aKitMedico:	/* 0x53314 */
		.string "KIT MEDICO"
		.ascii  "\x00"
aTimeBomb:	/* 0x53320 */
		.string "TIME BOMB"
		.ascii  "\x53\x49"
aBombeARetrd:	/* 0x5332c */
		.string "BOMBE A RETRD."
		.ascii  "\x00"
aBombaATempo:	/* 0x5333c */
		.string "BOMBA A TEMPO"
aM:	/* 0x5334a */
		.ascii  "\x4d\x00"
aAccessCard:	/* 0x5334c */
		.string "ACCESS CARD"
aCarteDAcces:	/* 0x53358 */
		.string "CARTE D'ACCES"
		.ascii  "\x41\x4d"
aSchedaAccesso:	/* 0x53368 */
		.string "SCHEDA ACCESSO"
		.ascii  "\x45"
aAccessCard1:	/* 0x53378 */
		.string "ACCESS CARD1"
		.ascii  "\x4d\x4d\x45"
data_53388:
		.ascii  "\x2e\x00\x53\x54"
aAccessCard2:	/* 0x5338c */
		.string "ACCESS CARD2"
		.ascii  "\x4f\x4e\x47"
data_5339c:
		.ascii  "\xff\x00\x20\x50"
aAutoMapper:	/* 0x533a0 */
		.string "AUTO MAPPER"
aCartographe:	/* 0x533ac */
		.string "CARTOGRAPHE"
aEnergyShield:	/* 0x533b8 */
		.string "ENERGY SHIELD"
		.ascii  "\x54\x00"
aBouclier:	/* 0x533c8 */
		.string "BOUCLIER"
		.ascii  "\x00\x00\x00"
aScudoEnergia:	/* 0x533d4 */
		.string "SCUDO ENERGIA"
		.ascii  "\x4d\x42"
aShield1:	/* 0x533e4 */
		.string "SHIELD1."
		.ascii  "\x2e\x00\x00"
aShield2:	/* 0x533f0 */
		.string "SHIELD2."
		.ascii  "\x45\x4d\x50"
aConfigureCompa:	/* 0x533fc */
		.string "CONFIGURE COMPANY"
		.ascii  "\x52\x54"
aConfigurerSoci:	/* 0x53410 */
		.string "CONFIGURER SOCIETE"
		.ascii  "\x41"
aConfiguraCompa:	/* 0x53424 */
		.string "CONFIGURA COMPAGNIA"
aBeginMission:	/* 0x53438 */
		.string "BEGIN MISSION"
		.ascii  "\x20\x43"
aCommencerMissi:	/* 0x53448 */
		.string "COMMENCER MISSION"
		.ascii  "\x41\x50"
aInizioMissione:	/* 0x5345c */
		.string "INIZIO MISSIONE"
aLoadAndSaveGam:	/* 0x5346c */
		.string "LOAD AND SAVE GAME"
		.ascii  "\x00"
aChargSauverPar:	/* 0x53480 */
		.string "CHARG./SAUVER PARTIE"
		.ascii  "\x44\x31\x2e"
aCaricaESalvaGi:	/* 0x53498 */
		.string "CARICA E SALVA GIOCO"
		.ascii  "\x47\x55\x52"
aMultiplayerGam:	/* 0x534b0 */
		.string "MULTIPLAYER GAME"
		.ascii  "\x47\x55\x52"
aJeuMultiJoueur:	/* 0x534c4 */
		.string "JEU MULTI-JOUEURS"
		.ascii  "\x55\x52"
aGiocoMultiplay:	/* 0x534d8 */
		.string "GIOCO MULTIPLAYER"
		.ascii  "\x4d\x49"
aRestartGame:	/* 0x534ec */
		.string "RESTART GAME"
		.ascii  "\x4e\x43\x45"
aNouvellePartie:	/* 0x534fc */
		.string "NOUVELLE PARTIE"
aRicominciaPart:	/* 0x5350c */
		.string "RICOMINCIA PARTITA"
		.ascii  "\x44"
aQuitToDos:	/* 0x53520 */
		.string "QUIT TO DOS"
aRetourAuDos:	/* 0x5352c */
		.string "RETOUR AU DOS"
		.ascii  "\x50\x41"
aEsciAlDos:	/* 0x5353c */
		.string "ESCI AL DOS"
aDataMlosaoutDa:	/* 0x53548 */
		.string "data/mlosaout.dat"
		.ascii  "\x00\x00"
aIntroNul:	/* 0x5355c */
		.string "intro >nul:"
data_53568:
		.ascii  "\x20\x00\x00\x00"
aInvalidOptionS:	/* 0x5356c */
		.string "Invalid option[%s].\n"
		.ascii  "\x00\x00\x00"
fname2:	/* 0x53584 */
		.string "data/gamefm.dll"
fname1:	/* 0x53594 */
		.string "data/syngame.xmi"
		.ascii  "\x00\x00\x00"
aSyndicateHelpO:	/* 0x535a8 */
		.string "Syndicate Help options:\n"
		.ascii  "\x00\x00\x00"
aIirqNSetSoundI:	/* 0x535c4 */
		.string "    /iirq(n)        set sound irq=n.\n"
		.ascii  "\x00\x00"
aIdmaNSetSoundD:	/* 0x535ec */
		.string "    /idma(n)        set sound dma=n.\n"
		.ascii  "\x6e\x75"
aIioNSetSoundIo:	/* 0x53614 */
		.string "    /iio(n)         set sound io=n.\n"
		.ascii  "\x61\x6d\x65"
aSNoSound:	/* 0x5363c */
		.string "    /s              no sound.\n"
		.ascii  "\x00"
aD_2:	/* 0x5365c */
		.ascii  "\x25\x64\x00\x00"
aS_0:	/* 0x53660 */
		.ascii  "\x25\x73\x00\x00"
aD_3:	/* 0x53664 */
		.string "%d%%"
		.ascii  "\x00\x00\x00"
data_5366c:
		.ascii  "\x40\x00\x00\x00"
aDataMmultoutDa:	/* 0x53670 */
		.string "data/mmultout.dat"
		.ascii  "\x00\x00"
aSD:	/* 0x53684 */
		.string "%s%d"
		.ascii  "\x00\x00\x00"
aExchangingInfo:	/* 0x5368c */
		.string "Exchanging Info.\n"
		.ascii  "\x00\x00"
aSending:	/* 0x536a0 */
		.string "Sending.\n"
		.ascii  "\x00\x00"
aReceiving:	/* 0x536ac */
		.string "Receiving.\n"
aHowManyPlayers:	/* 0x536b8 */
		.string "How many players ? "
aNumberOfPlayer:	/* 0x536cc */
		.string "Number of Players Accepted..\n"
		.ascii  "\x00\x00"
aSearchingForOt:	/* 0x536ec */
		.string "Searching for other players.\n"
		.ascii  "\x00\x00"
aCommunicateWit:	/* 0x5370c */
		.string "Communicate with all players.\n"
		.ascii  "\x00"
aCallingDDD:	/* 0x5372c */
		.string "calling %d (%d %d)\n"
aCancellingPlay:	/* 0x53740 */
		.string "Cancelling player %01d.\n"
		.ascii  "\x00\x00\x53"
aPleaseWait:	/* 0x5375c */
		.string "Please Wait.\n"
		.ascii  "\x65\x69"
aNetC:	/* 0x5376c */
		.string "net.c"
		.ascii  "\x00\x48"
aNetbios:	/* 0x53774 */
		.string "netbios"
data_5377c:
		.ascii  "\x20\x00\x61\x79"
aAddNameReturnX:	/* 0x53780 */
		.string "add name return %x(%s)\n"
aErrorTryingToA:	/* 0x53798 */
		.string "ERROR trying to add %s name\n"
		.ascii  "\x6f\x74\x68"
aDeleteNameRetu:	/* 0x537b8 */
		.string "DELETE name returns [%s]\n"
aWD:	/* 0x537d2 */
		.ascii  "\x20\x77"
data_537d4:
		.ascii  "\x25\x64\x0a\x00"
aNetErrorSDD0xX:	/* 0x537d8 */
		.string "-----NET error %s[%d] %d 0x%x-----\n"
aErrorAllocatin:	/* 0x537fc */
		.string "ERROR ALLOCATING MEMORY FOR MOUSE BACKUP\n"
		.ascii  "\x00\x00"
data_53828:
		.string "                "
		.ascii  "\x00\x00\x00"
aD_4:	/* 0x5383c */
		.ascii  "\x25\x64\x00\x00"
aSS_0:	/* 0x53840 */
		.string "%s : %s"
aDataMresoutDat:	/* 0x53848 */
		.string "data/mresout.dat"
		.ascii  "\x00\x00\x00"
aDataMoptionDat:	/* 0x5385c */
		.string "data/moption.dat"
		.ascii  "\x00\x00\x00"
aDataMconfupDat:	/* 0x53870 */
		.string "data/mconfup.dat"
		.ascii  "\x00\x00\x00"
aDataMmapDat:	/* 0x53884 */
		.string "data/mmap.dat"
		.ascii  "\x00\x00"
aDataMlosaDat:	/* 0x53894 */
		.string "data/mlosa.dat"
		.ascii  "\x00"
aDataMmultiDat:	/* 0x538a4 */
		.string "data/mmulti.dat"
aDataMselectDat:	/* 0x538b4 */
		.string "data/mselect.dat"
		.ascii  "\x00\x00\x00"
aDataMdebriefDa:	/* 0x538c8 */
		.string "data/mdebrief.dat"
		.ascii  "\x00\x00"
aDataMbriefDat:	/* 0x538dc */
		.string "data/mbrief.dat"
aDataMresrchDat:	/* 0x538ec */
		.string "data/mresrch.dat"
		.ascii  "\x00\x00\x00"
aDataMultioptDa:	/* 0x53900 */
		.string "data/multiopt.dat"
		.ascii  "\x00\x00"
aMultiplayerLev:	/* 0x53914 */
		.string "MULTIPLAYER LEVEL 1"
aMultiplayerLev_0:	/* 0x53928 */
		.string "MULTIPLAYER LEVEL 2"
aMultiplayerLev_1:	/* 0x5393c */
		.string "MULTIPLAYER LEVEL 3"
aMultiplayerLev_2:	/* 0x53950 */
		.string "MULTIPLAYER LEVEL 4"
aMultiplayerLev_3:	/* 0x53964 */
		.string "MULTIPLAYER LEVEL 5"
aMultiplayerLev_4:	/* 0x53978 */
		.string "MULTIPLAYER LEVEL 6"
aMultiplayerLev_5:	/* 0x5398c */
		.string "MULTIPLAYER LEVEL 7"
aMultiplayerLev_6:	/* 0x539a0 */
		.string "MULTIPLAYER LEVEL 8"
aMultiplayerLev_7:	/* 0x539b4 */
		.string "MULTIPLAYER LEVEL 9"
aMultiplayerLev_8:	/* 0x539c8 */
		.string "MULTIPLAYER LEVEL 10"
		.ascii  "\x55\x4c\x54"
aAfshar:	/* 0x539e0 */
		.string "AFSHAR"
		.ascii  "\x20"
aArnold:	/* 0x539e8 */
		.string "ARNOLD"
		.ascii  "\x00"
aBaird:	/* 0x539f0 */
		.string "BAIRD"
		.ascii  "\x4c\x41"
aBaldwin:	/* 0x539f8 */
		.string "BALDWIN"
aBlack:	/* 0x53a00 */
		.string "BLACK"
		.ascii  "\x4c\x54"
aBoyd:	/* 0x53a08 */
		.string "BOYD"
		.ascii  "\x45\x52\x20"
aBoyesen:	/* 0x53a10 */
		.string "BOYESEN"
aBrazier:	/* 0x53a18 */
		.string "BRAZIER"
aBrown:	/* 0x53a20 */
		.string "BROWN"
		.ascii  "\x56\x45"
aBush:	/* 0x53a28 */
		.string "BUSH"
		.ascii  "\x55\x4c\x54"
aCarr:	/* 0x53a30 */
		.string "CARR"
		.ascii  "\x45\x52\x20"
aChrismas:	/* 0x53a38 */
		.string "CHRISMAS"
		.ascii  "\x55\x4c\x54"
aClinton:	/* 0x53a44 */
		.string "CLINTON"
aCooper:	/* 0x53a4c */
		.string "COOPER"
		.ascii  "\x00"
aCorpes:	/* 0x53a54 */
		.string "CORPES"
		.ascii  "\x41"
aCox:	/* 0x53a5c */
		.ascii  "\x43\x4f\x58\x00"
aDawson:	/* 0x53a60 */
		.string "DAWSON"
		.ascii  "\x00"
aDonkin:	/* 0x53a68 */
		.string "DONKIN"
		.ascii  "\x41"
aDiskett:	/* 0x53a70 */
		.string "DISKETT"
aDunne:	/* 0x53a78 */
		.string "DUNNE"
		.ascii  "\x4c\x41"
aEdgar:	/* 0x53a80 */
		.string "EDGAR"
		.ascii  "\x56\x45"
aEvans:	/* 0x53a88 */
		.string "EVANS"
		.ascii  "\x4c\x54"
aFairley:	/* 0x53a90 */
		.string "FAIRLEY"
aFawcett:	/* 0x53a98 */
		.string "FAWCETT"
aFlint:	/* 0x53aa0 */
		.string "FLINT"
		.ascii  "\x4c\x41"
aFloyd:	/* 0x53aa8 */
		.string "FLOYD"
aN_0:	/* 0x53aae */
		.ascii  "\x4e\x00"
aGriffiths:	/* 0x53ab0 */
		.string "GRIFFITHS"
		.ascii  "\x59\x44"
aHarris:	/* 0x53abc */
		.string "HARRIS"
		.ascii  "\x45"
aHastings:	/* 0x53ac4 */
		.string "HASTINGS"
aEr_0:	/* 0x53acd */
		.ascii  "\x45\x52\x00"
aHerbert:	/* 0x53ad0 */
		.string "HERBERT"
aHickman:	/* 0x53ad8 */
		.string "HICKMAN"
aHicks:	/* 0x53ae0 */
		.string "HICKS"
		.ascii  "\x52\x20"
aHill:	/* 0x53ae8 */
		.string "HILL"
		.ascii  "\x4d\x41\x53"
aJames:	/* 0x53af0 */
		.string "JAMES"
		.ascii  "\x49\x4e"
aJeffery:	/* 0x53af8 */
		.string "JEFFERY"
aJoeseph:	/* 0x53b00 */
		.string "JOESEPH"
aJohnson:	/* 0x53b08 */
		.string "JOHNSON"
aJohnston:	/* 0x53b10 */
		.string "JOHNSTON"
		.ascii  "\x4f\x4e\x4b"
aJones:	/* 0x53b1c */
		.string "JONES"
		.ascii  "\x00\x00"
aLewis:	/* 0x53b24 */
		.string "LEWIS"
		.ascii  "\x4c\x41"
aLindsell:	/* 0x53b2c */
		.string "LINDSELL"
		.ascii  "\x56\x41\x4e"
aLockley:	/* 0x53b38 */
		.string "LOCKLEY"
aMartin:	/* 0x53b40 */
		.string "MARTIN"
		.ascii  "\x43"
aMcentee:	/* 0x53b48 */
		.string "MCENTEE"
aMclaughin:	/* 0x53b50 */
		.string "MCLAUGHIN"
aN_1:	/* 0x53b5a */
		.ascii  "\x4e\x00"
aMolyneux:	/* 0x53b5c */
		.string "MOLYNEUX"
		.ascii  "\x00\x59\x44"
aMunro:	/* 0x53b68 */
		.string "MUNRO"
		.ascii  "\x00\x45"
aMorris:	/* 0x53b70 */
		.string "MORRIS"
		.ascii  "\x53"
aMumford:	/* 0x53b78 */
		.string "MUMFORD"
aNixon:	/* 0x53b80 */
		.string "NIXON"
		.ascii  "\x43\x4b"
aParker:	/* 0x53b88 */
		.string "PARKER"
		.ascii  "\x4b"
aPratt:	/* 0x53b90 */
		.string "PRATT"
		.ascii  "\x4c\x4c"
aReid:	/* 0x53b98 */
		.string "REID"
		.ascii  "\x41\x4d\x45"
aRennie:	/* 0x53ba0 */
		.string "RENNIE"
		.ascii  "\x46"
aRice:	/* 0x53ba8 */
		.string "RICE"
		.ascii  "\x4f\x45\x53"
aRipley:	/* 0x53bb0 */
		.string "RIPLEY"
		.ascii  "\x4e"
aRobertson:	/* 0x53bb8 */
		.string "ROBERTSON"
		.ascii  "\x4f\x4e"
aRomano:	/* 0x53bc4 */
		.string "ROMANO"
		.ascii  "\x45"
aSeat:	/* 0x53bcc */
		.string "SEAT"
		.ascii  "\x00\x00\x00"
aSen:	/* 0x53bd4 */
		.ascii  "\x53\x45\x4e\x00"
aShaw:	/* 0x53bd8 */
		.string "SHAW"
		.ascii  "\x49\x4e\x44"
aSimmons:	/* 0x53be0 */
		.string "SIMMONS"
aSnelling:	/* 0x53be8 */
		.string "SNELLING"
		.ascii  "\x41\x52\x54"
aTaylor:	/* 0x53bf4 */
		.string "TAYLOR"
		.ascii  "\x4e"
aTrowers:	/* 0x53bfc */
		.string "TROWERS"
aWebley:	/* 0x53c04 */
		.string "WEBLEY"
		.ascii  "\x00"
aWellesley:	/* 0x53c0c */
		.string "WELLESLEY"
		.ascii  "\x59\x44"
aWild:	/* 0x53c18 */
		.string "WILD"
		.ascii  "\x00\x00\x45"
aWillis:	/* 0x53c20 */
		.string "WILLIS"
		.ascii  "\x00"
aDataMtitleDat:	/* 0x53c28 */
		.string "data/mtitle.dat"
aDataMscrenupDa:	/* 0x53c38 */
		.string "data/mscrenup.dat"
		.ascii  "\x00\x00"
aDataMoptoutDat:	/* 0x53c4c */
		.string "data/moptout.dat"
		.ascii  "\x00\x00\x00"
aDataMmapoutDat:	/* 0x53c60 */
		.string "data/mmapout.dat"
		.ascii  "\x00\x00\x00"
aDataMgamewinDa:	/* 0x53c74 */
		.string "data/mgamewin.dat"
		.ascii  "\x00\x00"
aDataMendwinDat:	/* 0x53c88 */
		.string "data/mendwin.dat"
		.ascii  "\x00\x00\x00"
aDataMendloseDa:	/* 0x53c9c */
		.string "data/mendlose.dat"
		.ascii  "\x00\x00"
aDataMlosegamDa:	/* 0x53cb0 */
		.string "data/mlosegam.dat"
		.ascii  "\x00\x00"
aDataMiss022dDa:	/* 0x53cc4 */
		.string "data/miss%02.2d.dat"
aDataMiss01d022:	/* 0x53cd8 */
		.string "data/miss%01d%02.2d.dat"
aS022dGam:	/* 0x53cf0 */
		.string "%s/%02.2d.gam"
		.ascii  "\x00\x00"
DIGdriver_fn:	/* 0x53d00 */
		.string "data/gamedg.dll"
aDataSample:	/* 0x53d10 */
		.string "DATA/SAMPLE."
		.ascii  "\x00\x00\x00"
aRb:	/* 0x53d20 */
		.ascii  "\x72\x62\x00\x00"
signoff_msg:	/* 0x53d24 */
		.string "BYE FOLKS"
		.ascii  "\x00\x00"
aComspec:	/* 0x53d30 */
		.string "COMSPEC"
aCmdExe:	/* 0x53d38 */
		.string "CMD.EXE"
aCommandCom:	/* 0x53d40 */
		.string "COMMAND.COM"
aCmd:	/* 0x53d4c */
		.ascii  "\x43\x4d\x44\x00"
aCommand:	/* 0x53d50 */
		.string "COMMAND"
data_53d58:
		.ascii  "\x2e\x5c\x00"
aCmd_0:	/* 0x53d5b */
		.string ".cmd"
aBat:	/* 0x53d60 */
		.string ".bat"
aCom:	/* 0x53d65 */
		.string ".com"
aExe:	/* 0x53d6a */
		.string ".exe"
aComspec_0:	/* 0x53d6f */
		.string "COMSPEC"
aCmd_1:	/* 0x53d77 */
		.ascii  "\x43\x4d\x44\x00"
aCommand_0:	/* 0x53d7b */
		.string "COMMAND"
		.ascii  "\x00"
aFloatingPointS:	/* 0x53d84 */
		.string "Floating-point support not loaded\r\n"
aPath:	/* 0x53da8 */
		.string "PATH"
		.ascii  "\x00\x00\x00"
_IsTable:	/* 0x53db0 */
		.ascii  "\x00\x01\x01\x01\x01\x01\x01\x01"
		.ascii  "\x01\x01\x03\x03\x03\x03\x03\x01"
		.ascii  "\x01\x01\x01\x01\x01\x01\x01\x01"
		.ascii  "\x01\x01\x01\x01\x01\x01\x01\x01"
		.ascii  "\x01\x0a\x0c\x0c\x0c\x0c\x0c\x0c"
		.ascii  "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c"
		.ascii  "\x0c"
		.ascii   "8888888888"
		.ascii  "\x0c\x0c\x0c\x0c\x0c\x0c\x0c"
		.ascii   "XXXXXXHHHHHHHHHHHHHHHHHHHH"
		.ascii  "\x0c\x0c\x0c\x0c\x0c\x0c\x98\x98"
		.ascii  "\x98\x98\x98\x98\x88\x88\x88\x88"
		.ascii  "\x88\x88\x88\x88\x88\x88\x88\x88"
		.ascii  "\x88\x88\x88\x88\x88\x88\x88\x88"
		.ascii  "\x0c\x0c\x0c\x0c\x01"
		.fill   0x83
computer_players_count:	/* 0x53eb4 */
		.ascii  "\x02"
comp_plyr_team_size:	/* 0x53eb5 */
		.ascii  "\x01"
comp_plyr_process_interval:	/* 0x53eb6 */
		.ascii  "\x00"
comp_plyr_level_init:	/* 0x53eb7 */
		.ascii  "\x00"
comp_plyr_process_timer:	/* 0x53eb8 */
		.fill   0x4
comp_plyr_last_process_time:	/* 0x53ebc */
		.fill   0x4
data_53ec0:
		.ascii  "\x00"
data_53ec1:
		.ascii  "\x01\x01\x02\x00\x03\x03\x04\x04"
		.ascii  "\x05\x05\x06\x00\x07\x00\x08\x02"
		.ascii  "\x09\x00\x0a\x00\x0b\x00\x0c\x00"
		.ascii  "\x0f\x00\x0f\x00\x0f\x00\x10\x00"
		.ascii  "\x11\x00\x12\x00\x13\x00\x14"
data_53ee8:
		.fill   0x4
disk_err:	/* 0x53eec */
		.fill   0x4
lb_tot_mem_alloced:	/* 0x53ef0 */
		.fill   0x4
data_53ef4:
		.ascii  "\x00\x00"
data_53ef6:
		.ascii  "\x00\x00"
data_53ef8:
		.fill   0x10
mission_load_files:	/* 0x53f08 */
		.string "data/hfnt01.dat"
		.fill   0xc
		.long   h_font
		.fill   0xc
		.ascii   "data/map"
data_53f3c:
		.ascii  "\x30"
data_53f3d:
		.string "1.dat"
		.fill   0xd
		.long   map_buf
		.fill   0xc
		.string "data/col01.dat"
		.fill   0xd
		.long   h_col
		.fill   0xc
		.string "data/hblk01.dat"
		.fill   0xc
		.long   h_blocks
		.fill   0xc
		.string "data/hspr-0.dat"
		.fill   0xc
		.long   h_sprites_data
		.fill   0xc
		.string "data/hspr-0.tab"
		.fill   0xc
		.long   h_sprites
		.long   h_sprites_end
		.fill   0x8
		.string "data/hfra-0.ani"
		.fill   0xc
		.long   frames
		.long   frames_end
		.fill   0x8
		.string "data/hele-0.ani"
		.fill   0xc
		.long   elements_ani
		.long   elements_ani_end
		.fill   0x8
		.string "data/hsta-0.ani"
		.fill   0xc
		.long   starts_ani
		.fill   0x38
sound_load_files:	/* 0x540c0 */
		.string "data/sound-0.dat"
		.fill   0xb
		.long   smpdata
		.fill   0x8
		.ascii  "\x01\x00\x00\x00"
		.string "data/sound-0.tab"
		.fill   0xb
		.long   smptable
		.long   smptable_end
		.fill   0x34
unkn1_empty_load_files:	/* 0x54144 */
		.fill   0x2c
level_palettes:	/* 0x54170 */
		.ascii  "\x01\x02\x03\x04\x05\x01\x02\x03"
		.ascii  "\x04\x05\x01\x02\x03\x04\x05\x01"
		.ascii  "\x02\x03\x04\x05\x01\x02\x03\x04"
		.ascii  "\x05\x01\x02\x03\x04\x05\x01\x02"
		.ascii  "\x03\x04\x05\x01\x02\x03\x04\x05"
		.ascii  "\x01\x02\x03\x04\x05\x01\x02\x03"
		.ascii  "\x04\x05\x00\x00"
GLOBAL (gui_strings)	/* 0x541a4 */
		.long   aAlgeria
		.long   aAlgerie
		.long   aAlgeria
		.long   aLybia
		.long   aLybie
		.long   aLibia
		.long   aMauritania
		.long   aMauritanie
		.long   aMauritania
		.long   aNigeria
		.long   aNigeria
		.long   aNigeria
		.long   aIraq
		.long   aIraq
		.long   aIraq
		.long   aArabia
		.long   aArabie
		.long   aArabia
		.long   aSudan
		.long   aSoudan
		.long   aSudan
		.long   aZaire
		.long   aZaire
		.long   aZaire
		.long   aKenya
		.long   aKenya
		.long   aKenia
		.long   aMozambique
		.long   aMozambique
		.long   aMozambico
		.long   aSouthAfrica
		.long   aAfriqueDuSud
		.long   aSudAfrica
		.long   aWesternEurope
		.long   aEuropeDeLOuest
		.long   aEuropaOccident
		.long   aScandinavia
		.long   aScandinavie
		.long   aScandinavia
		.long   aCentralEurope
		.long   aEuropeCentrale
		.long   aEuropaCentrale
		.long   aEasternEurope
		.long   aEuropeDeLEst
		.long   aEuropaOriental
		.long   aIran
		.long   aIran
		.long   aIran
		.long   aIndia
		.long   aInde
		.long   aIndia
		.long   aPacificRim
		.long   aCeintureDuPaci
		.long   aBacinoPacifico
		.long   aIndonesia
		.long   aIndonesie
		.long   aIndonesia
		.long   aChina
		.long   aChine
		.long   aCina
		.long   aFarEast
		.long   aExtremeOrient
		.long   aEstremoOriente
		.long   aKazakhstan
		.long   aKazakhstan
		.long   aKazakhistan
		.long   aSiberia
		.long   aSiberie
		.long   aSiberia
		.long   aUrals
		.long   aOural
		.long   aUrali
		.long   aMongolia
		.long   aMongolie
		.long   aMongolia
		.long   aGreenland
		.long   aGroenland
		.long   aGroenlandia
		.long   aNortheastTerri
		.long   aTerritoiresDuN
		.long   aTerritoriNordO
		.long   aYukon
		.long   aYukon
		.long   aYukon
		.long   aAlaska
		.long   aAlaska
		.long   aAlaska
		.long   aNorthwestTerri
		.long   aTerritoiresDuN_0
		.long   aTerritoriNordO_0
		.long   aNewfoundland
		.long   aTerreNeuve
		.long   aTerranova
		.long   aKamchatka
		.long   aKamchatka
		.long   aKamchatka
		.long   aWesternAustral
		.long   aAustralieOccid
		.long   aAustraliaOrien
		.long   aNorthernTerrit
		.long   aTerritoireDuNo
		.long   aTerritoriSette
		.long   aNewSouthWales
		.long   aNouvellesGalle
		.long   aNuovoGallesDel
		.long   aColombia
		.long   aColombie
		.long   aColumbia
		.long   aPeru
		.long   aPerou
		.long   aPeru_0
		.long   aArgentina
		.long   aArgentine
		.long   aArgentina
		.long   aUruguay
		.long   aUruguay
		.long   aUruguay
		.long   aParaguay
		.long   aParaguay
		.long   aParaguay
		.long   aBrazil
		.long   aBresil
		.long   aBrasile
		.long   aVenezuala
		.long   aVenezuela
		.long   aVenezuela
		.long   aMexico
		.long   aMexique
		.long   aMessico
		.long   aSouthernStates
		.long   aEtatsDuSud
		.long   aStatiDelSud
		.long   aCalifornia
		.long   aCalifornie
		.long   aCalifornia
		.long   aColorado
		.long   aColorado
		.long   aColorado
		.long   aNewEngland
		.long   aNouvelleAnglet
		.long   aNuovaInghilter
		.long   aMidWest
		.long   aMidwest
		.long   aStatiMedioOcci
		.long   aRockies
		.long   aMontagnesRoche
		.long   aMontagneRoccio
		.long   aAtlanticAccele
		.long   aAccelerateurDe
		.long   aAcceleratoreAt
gui_strings_p150:
		.long   aCryoChamber
		.long   aLeChambreCryo
		.long   aVaniIbernanti
gui_strings_p153:
		.long   aTakeWeapon
		.long   aPrendreArme
		.long   aPrendiArma
gui_strings_p156:
		.long   aDestroyCar
		.long   aDetruireVoitur
		.long   aDistruggiAuto
gui_strings_p159:
		.long   aUseVehicle
		.long   aUtiliserVehicu
		.long   aUsaIlVeicolo
gui_strings_p162:
		.long   aEvacuate
		.long   aEvacuer
		.long   aSgombera
gui_strings_p165:
		.long   aPersuade
		.long   aPersuader
		.long   aConvinci
gui_strings_p168:
		.long   aProtect
		.long   aProteger
		.long   aProteggi
gui_strings_p171:
		.long   aAssassinate
		.long   aAssassiner
		.long   aUccidi
gui_strings_p174:
		.long   aEliminateAgent
		.long   aEliminerAgents
		.long   aEliminaAgenti
gui_strings_p177:
		.long   aMissionComplet
		.long   aMissionTermine
		.long   aMissCompiuta
gui_strings_p180:
		.long   aPressSpace
		.long   aAppuiBEspace
		.long   aPremiSpazio
gui_strings_p183:
		.long   aMissionFailed
		.long   aMissionEchouee
		.long   aMissioneFallit
gui_strings_p186:
		.long   aGoing
		.long   aEnRoute
		.long   aVai
gui_strings_p189:
		.long   aPickupWeapon
		.long   aPrendreArme
		.long   aRaccogliArma
gui_strings_p192:
		.long   aFollow
		.long   aSuivre
		.long   aSegui
gui_strings_p195:
		.long   aDropWeapon
		.long   aPoserArme
		.long   aLasciaArma
gui_strings_p198:
		.long   aHitByBullet
		.long   aBlesse
		.long   aCrivellato
gui_strings_p201:
		.long   aHitByCar
		.long   aAccidente
		.long   aInvestito
gui_strings_p204:
		.long   aOnFire
		.long   aEnFeu
		.long   aIncendiato
gui_strings_p207:
		.long   aEnergyDrain
		.long   aPerteEnergie
		.long   aCaloEnergia
gui_strings_p210:
		.long   aDead
		.long   aMort
		.long   aMorto
gui_strings_p213:
		.long   aObserving
		.long   aEnObservation
		.long   aEsamina
gui_strings_p216:
		.long   aAwol
		.long   aAbsenceIlleg
		.long   aAssente
gui_strings_p219:
		.long   aRunningAway
		.long   aEnFuite
		.long   aScappo
gui_strings_p222:
		.long   aDrowning
		.long   aNoyade
		.long   aAnnego
gui_strings_p225:
		.long   aDangerCar
		.long   aDangerVoiture
		.long   aPericoloAuto
gui_strings_p228:
		.long   aUsingWeapon
		.long   aUtiliseArme
		.long   aArmaInUso
gui_strings_p231:
		.long   aChipRemoved
		.long   aPuceRetiree
		.long   aChipRimosso
gui_strings_p234:
		.long   aMainMenu
		.long   aMenuPrincipal
		.long   aMenuPrincipale
gui_strings_p237:
		.long   aLoadSaveGame
		.long   aChSauvPartie
		.long   aSalvaCaricaGio
gui_strings_p240:
		.long   aMultiPlayer
		.long   aMultiJoueurs
		.long   aMultiplayer
gui_strings_p243:
		.long   aMissionBrief
		.long   aBriefingMissio
		.long   aPianoMissione
gui_strings_p246:
		.long   aTeamSelection
		.long   aChoixDeLEquipe
		.long   aSelezioneSquad
gui_strings_p249:
		.long   aResearch
		.long   aRecherche
		.long   aRicerca
gui_strings_p252:
		.long   aMissionDebrief
		.long   aDebriefingMiss
		.long   aResocontoMissi
gui_strings_p255:
		.long   aAccept
		.long   aAccepter
		.long   aConferma
gui_strings_p258:
		.long   aMenu
		.long   aMenu
		.long   aMenu
gui_strings_p261:
		.long   aOk
		.long   aOk
		.long   aOk
gui_strings_p264:
		.long   aCancel
		.long   aAnnuler
		.long   aAnnulla
gui_strings_p267:	/* 0x545d0 */
		.long   aBrief
		.long   aBriefing
		.long   aPiano
gui_strings_p270:
		.long   aResearch
		.long   aRecherche
		.long   aRicerca
text_team:	/* 0x545e8 */
		.long   aTeam
		.long   aEquipe
		.long   aSquadra
text_mods:	/* 0x545f4 */
		.long   aMods
		.long   aModifs
		.long   aModif
text_equip:	/* 0x54600 */
		.long   aEquip
		.long   aEquiper
		.long   aEquipag
text_button_sell:	/* 0x5460c */
		.long   aSell
		.long   aVendre
		.long   aVendi
data_54618:
		.long   aPurchase
		.long   aAcheter
		.long   aCompra
text_button_reload:	/* 0x54624 */
		.long   aReload
		.long   aRecharg
		.long   aRicar
data_54630:
		.long   aFunding
		.long   aBudget
		.long   aFondi
strings_research_funddec:	/* 0x5463c */
		.long   aFunding_0
		.long   aBudget_0
		.long   aFondi_0
text_info:	/* 0x54648 */
		.long   aInfo
		.long   aInfo
		.long   aInfo
text_enhance:	/* 0x54654 */
		.long   aEnhance
		.long   aDetails
		.long   aDettagli
text_load:	/* 0x54660 */
		.long   aLoad
		.long   aCharg
		.long   aCarica
text_save:	/* 0x5466c */
		.long   aSave
		.long   aSauver
		.long   aSalva
text_map:	/* 0x54678 */
		.long   aMap
		.long   aCarte
		.long   aMappa
text_replay:	/* 0x54684 */
		.long   aReplay
		.long   aRejouer
		.long   aReplay
		.long   aName
		.long   aNom
		.long   aNome
text_city_pop:	/* 0x5469c */
		.long   aPop
		.long   aPop_0
		.long   aPop_0
text_city_stat:	/* 0x546a8 */
		.long   aStat
		.long   aStat
		.long   aStat
text_city_tax:	/* 0x546b4 */
		.long   aTax
		.long   aTaxe
		.long   aTass
data_546c0:
		.long   aOwn
		.long   aProp
		.long   aProp
data_546cc:
		.long   aUnknown
		.long   aInconnue
		.long   aSconosciuto
text_city_mood_vhappy:	/* 0x546d8 */
		.long   aVeryHappy
		.long   data_5105c
		.long   aMoltoFelice
text_city_mood_happy:	/* 0x546e4 */
		.long   aHappy
		.long   aGaie
		.long   aFelice
text_city_mood_content:	/* 0x546f0 */
		.long   aContent
		.long   aContente
		.long   aSoddisfatto
text_city_mood_unhappy:	/* 0x546fc */
		.long   aUnhappy
		.long   aMecontente
		.long   aInfelice
text_city_mood_discontent:	/* 0x54708 */
		.long   aDiscontent
		.long   aFurieuse
		.long   aInsoddisfatto
text_city_mood_rebellious:	/* 0x54714 */
		.long   aRebellious
		.long   aRebelle
		.long   aRibelle
text_empty_slot:	/* 0x54720 */
		.long   aEmpty
		.long   aVide
		.long   aVuoto
text_spec_agent:	/* 0x5472c */
		.long   aSpecialAgent
		.long   aAgentSpecial
		.long   aAgenteSpeciale
data_54738:
		.long   aSelectDetailTo
		.long   aChoixDuDetailA
		.long   aScegliLeModifi
str:	/* 0x54744 */
		.long   aColourAndLogo
		.long   aCouleurEtLogo
		.long   aColoreELogo
data_54750:
		.long   aCompanyName
		.long   aNomDeLaSociete
		.long   aNomeCompagnia
data_5475c:
		.long   aYourName
		.long   aVotreNom
		.long   aIlTuoNome
data_54768:
		.long   aChangeColourAn
		.long   aChangerCouleur
		.long   aCambiaColoreEL
data_54774:
		.long   aColour
		.long   aCouleur
		.long   aColore
data_54780:
		.long   aLogo
		.long   aLogo
		.long   aLogo
a5:	/* 0x5478c */
		.long   aChangeCompanyN
		.long   aModifierNomSoc
		.long   aCambiaNomeComp
data_54798:
		.long   aEnterYourName
		.long   aEntrezVotreNom
		.long   aInserisciIlNom
strings_cost:	/* 0x547a4 */
		.long   aCost
		.long   aPrix
		.long   aCosto
strings_ammo:	/* 0x547b0 */
		.long   aAmmo
		.long   aMun
		.long   aMun
strings_range:	/* 0x547bc */
		.long   aRange
		.long   aPortee
		.long   aRaggio
strings_shot:	/* 0x547c8 */
		.long   aShot
		.long   aCoups
		.long   aColpo
strings_reload:	/* 0x547d4 */
		.long   aReload
		.long   aCharg
		.long   aRicar
strings_weapon_category_automatic:	/* 0x547e0 */
		.long   aAutomatic
		.long   aAutomatique
		.long   aAutomatica
strings_weapon_category_heavy:	/* 0x547ec */
		.long   aHeavy
		.long   aArmeLourde
		.long   aGrossoCalibro
strings_weapon_category_assault:	/* 0x547f8 */
		.long   aAssault
		.long   aArmeDAssaut
		.long   aAssalto
strings_weapon_category_misc:	/* 0x54804 */
		.long   aMiscellaneous
		.long   aDivers
		.long   aVarioTipo
strings_research_min_funding:	/* 0x54810 */
		.long   aMinFunding
		.long   aBudgetMini
		.long   aFondiMin
strings_research_max_funding:	/* 0x5481c */
		.long   aMaxFunding
		.long   aBudgetMaxi
		.long   aFondiMax
strings_researching:	/* 0x54828 */
		.long   aResearching
		.long   aRecherche
		.long   aInRicerca
strings_logging_out:	/* 0x54834 */
		.long   aLoggingOut
		.long   aFinDuJeu
		.long   aInUscita
strings_multiplayer:	/* 0x54840 */
		.long   aLoadingMultipl
		.long   aChargMultijoue
		.long   aCaricaMultipla
strings_loading:	/* 0x5484c */
		.long   aLoadingGame
		.long   aChargementPart
		.long   aCaricamentoGio
strings_mission_status:	/* 0x54858 */
		.long   aMissionStatus
		.long   aStatutDeLaMiss
		.long   aStatoMissione
strings_misstat_complete:	/* 0x54864 */
		.long   aCompleted
		.long   aTerminee
		.long   aCompletata
strings_misstat_withdrew:	/* 0x54870 */
		.long   aWithdrewFromMi
		.long   aRetireDeLaMiss
		.long   aRitiratoDallaM
strings_misstat_failed:	/* 0x5487c */
		.long   aFailed
		.long   aEchouee
		.long   aFallita
strings_debrief_agents_used:	/* 0x54888 */
		.long   aAgentsUsed
		.long   aAgentsUtilises
		.long   aAgentiImpiegat
strings_debrief_agents_gained:	/* 0x54894 */
		.long   aNewAgentsGaine
		.long   aAgentsRecupere
		.long   aNuoviAgentiAcq
strings_debrief_time:	/* 0x548a0 */
		.long   aTimeInMission
		.long   aDureeDeLaMissi
		.long   aTempoDellaMiss
data_548ac:
		.long   aHours
		.long   aHeures
		.long   aOre
data_548b8:
		.long   aDays
		.long   aJours
		.long   aGiorni
		.long   aValueOfDamage
		.long   aDegatsSubis
		.long   aAmmontareDeiDa
strings_debrief_agents_killed:	/* 0x548d0 */
		.long   aEnemyAgentsKil
		.long   aAgentsEnnemisT
		.long   aAgentiNemiciEl
strings_debrief_criminals_killed:	/* 0x548dc */
		.long   aCriminalsKille
		.long   aCriminelsElimi
		.long   aCriminaliElimi
strings_debrief_civilians_killed:	/* 0x548e8 */
		.long   aCiviliansKille
		.long   aCivilsTues
		.long   aCiviliUccisi
strings_debrief_police_killed:	/* 0x548f4 */
		.long   aPoliceKilled
		.long   aPoliciersTues
		.long   aPoliziottiUcci
strings_debrief_guards_killed:	/* 0x54900 */
		.long   aGuardsKilled
		.long   aGardesTues
		.long   aGuardieUccise
strings_debrief_people_persuaded:	/* 0x5490c */
		.long   aPeoplePersuade
		.long   aPersonnesConva
		.long   aPersoneConvint
strings_debrief_hit_accuracy:	/* 0x54918 */
		.long   aHitAccuracy
		.long   aPrecisionDeTir
		.long   aColpiPrecisi
strings_debrief_no_bullets:	/* 0x54924 */
		.long   aNoBulletsFired
		.long   aPasDeBallesUti
		.long   aProiettiliNonS
data_54930:
		.long   aResearchOn
		.long   aRechercheSur
		.long   aRicercaAttivat
data_5493c:
		.long   aNewWeaponryHas
		.long   aUneNouvelleArm
		.long   aNuoviArmamenti
data_54948:
		.long   aToTheResearchD
		.long   aAuDepartementD
		.long   aAlDipartimento
data_54954:
		.long   aMissionStatist
		.long   aStatistiquesMi
		.long   aDatiStatistici
data_54960:
		.long   aReplacementMet
		.long   aJambesDeRempla
		.long   aGambeMetallich
		.long   aPlasteelLegsLi
		.long   aJambesEnPlaSte
		.long   aGambeInPlastee
		.long   aCybermeshLegsP
		.long   aJambesCyberMes
		.long   aGambeCyberMesh
		.long   aReplacementMet_0
		.long   aBrasDeRemplace
		.long   aBracciaMetalli
		.long   aPlasteelArmsLi
		.long   aEnPlasteelPlus
		.long   aBracciaInPlast
		.long   aCybermeshArmsP
		.long   aBrasCybermeshN
		.long   aBracciaCyberMe
		.long   aMetalChestCage
		.long   aPoitrineMetall
		.long   aGabbiaToracica_0
		.long   aPlasteelChestC
		.long   aPlasteelPlusLe
		.long   aGabbiaToracica_1
		.long   aCybermeshChest
		.long   aPoitrineCyberm
		.long   aGabbiaToracica
		.long   aHeartStimulato
		.long   aStimulateurCar
		.long   aStimolatoreCar
		.long   aHeartAccelerat
		.long   aAccelerateurEt
		.long   aAcceleratoreCa
		.long   aCyberneticHear
		.long   aCoeurCyberneTi
		.long   aCuoreCiberneTi
		.long   aVisionEnhancer
		.long   aOptimiseurDeVi
		.long   aAmplificatoreV
		.long   aEnhancedModelO
		.long   aModeleV1Amelio
		.long   aModelloAvanzat
		.long   aLatestNeurocyb
		.long   aImplantsNeuroC
		.long   aLUltimoInnesto
		.long   aNeuralEnhancer
		.long   aOptimiseurNeur
		.long   aIntensificator
		.long   aNeuroCnsDevice
		.long   aAppareilNeuroL
		.long   aDispositivoNeu
		.long   aCerebralMultip
		.long   aMultiplicateur
		.long   aMoltiplicatore
strings_cybmod_names:	/* 0x54a38 */
		.long   aLegsV1
		.long   aJambesV1
		.long   aGambeV1
		.long   aLegsV2
		.long   aJambesV2
		.long   aGambeV2
		.long   aLegsV3
		.long   aJambesV3
		.long   aGambeV3
		.long   aArmsV1
		.long   aBrasV1
		.long   aBracciaV1
		.long   aArmsV2
		.long   aBrasV2
		.long   aBracciaV2
		.long   aArmsV3
		.long   aBrasV3
		.long   aBracciaV3
		.long   aChestV1
		.long   aPoitrineV1
		.long   aToraceV1
		.long   aChestV2
		.long   aPoitrineV2
		.long   aToraceV2
		.long   aChestV3
		.long   aPoitrineV3
		.long   aToraceV3
		.long   aHeartV1
		.long   aCoeurV1
		.long   aCuoreV1
		.long   aHeartV2
		.long   aCoeurV2
		.long   aCuoreV2
		.long   aHeartV3
		.long   aCoeurV3
		.long   aCuoreV3
		.long   aEyesV1
		.long   aYeuxV1
		.long   aOcchiV1
		.long   aEyesV2
		.long   aYeuxV2
		.long   aOcchiV2
		.long   aEyesV3
		.long   aYeuxV3
		.long   aOcchiV3
		.long   aBrainV1
		.long   aCerveauV1
		.long   aCervelloV1
		.long   aBrainV2
		.long   aCerveauV2
		.long   aCervelloV2
		.long   aBrainV3
		.long   aCerveauV3
		.long   aCervelloV3
strings_weapon_names:	/* 0x54b10 */
		.long   aPersuadertron
		.long   aPersuadotron
		.long   aPersuadertron
		.long   aPistol
		.long   aPistolet
		.long   aPistola
		.long   aGaussGun
		.long   aPistoletGauss
		.long   aPistolaGauss
		.long   aShotgun
		.long   aFusil
		.long   aFucile
		.long   aUzi
		.long   aUzi
		.long   aUzi
		.long   aMiniGun
		.long   aPM
		.long   aMiniPistola
		.long   aLaser
		.long   aLaser
		.long   aLaser
		.long   aFlamer
		.long   aLanceFlammes
		.long   aLanciafiamme
		.long   aLongRange
		.long   aLonguePortee
		.long   aLungaGittata
		.long   aScanner
		.long   aScanner
		.long   aScanner
		.long   aMedikit
		.long   aMedikit
		.long   aKitMedico
		.long   aTimeBomb
		.long   aBombeARetrd
		.long   aBombaATempo
		.long   aAccessCard
		.long   aCarteDAcces
		.long   aSchedaAccesso
		.long   aAccessCard1
		.long   data_53388
		.long   data_53388
		.long   aAccessCard2
		.long   data_5339c
		.long   data_53388
		.long   aAutoMapper
		.long   aCartographe
		.long   aAutoMapper
		.long   aEnergyShield
		.long   aBouclier
		.long   aScudoEnergia
		.long   aShield1
		.long   data_53388
		.long   data_53388
		.long   aShield2
		.long   data_53388
		.long   data_53388
		.fill   0xc
data_54c00:
		.long   aConfigureCompa
		.long   aConfigurerSoci
		.long   aConfiguraCompa
		.long   aBeginMission
		.long   aCommencerMissi
		.long   aInizioMissione
		.long   aLoadAndSaveGam
		.long   aChargSauverPar
		.long   aCaricaESalvaGi
		.long   aMultiplayerGam
		.long   aJeuMultiJoueur
		.long   aGiocoMultiplay
		.long   aRestartGame
		.long   aNouvellePartie
		.long   aRicominciaPart
		.long   aQuitToDos
		.long   aRetourAuDos
		.long   aEsciAlDos
data_54c48:
		.ascii  "\x00\x00"
data_54c4a:
		.ascii  "\x00\x00"
data_54c4c:
		.long   data_54c98
		.fill   0x4
		.long   data_54cb1
		.fill   0x4
		.long   data_54cca
		.fill   0x4
		.long   data_54ce3
		.fill   0x4
		.long   data_54cfc
		.fill   0x4
		.long   data_54d15
		.fill   0x4
		.long   data_54d2e
		.fill   0x4
		.long   data_54d47
		.fill   0x4
		.long   data_54d60
		.fill   0x4
		.long   data_54d79
data_54c98:
		.fill   0x19
data_54cb1:
		.fill   0x19
data_54cca:
		.fill   0x19
data_54ce3:
		.fill   0x19
data_54cfc:
		.fill   0x19
data_54d15:
		.fill   0x19
data_54d2e:
		.fill   0x19
data_54d47:
		.fill   0x19
data_54d60:
		.fill   0x19
data_54d79:
		.fill   0x19
savegame_slot:	/* 0x54d92 */
		.ascii  "\x00\x00"
GLOBAL (sndcard_irq)	/* 0x54d94 */
		.ascii  "\x00\x00"
GLOBAL (sndcard_dma)	/* 0x54d96 */
		.ascii  "\x00\x00"
GLOBAL (sndcard_ioaddr)	/* 0x54d98 */
		.fill   0x4
GLOBAL (load_files_vres16)	/* 0x54d9c */
		.ascii  "\x2a"
		.fill   0x1b
		.long   EXPORT_SYMBOL(WScreen)
		.long   0x0
		.long   256048	/* 256016 is too little, need 320x400 + 24 + 320x400 + some safety bytes (24) */
		.short  0x0
		.short  0x0
		.string "data/hpal01.dat"
		.fill   0xc
		.long   GraphicsPalette
		.fill   0xc
		.string "data/hpointer.tab"
		.fill   0xa
		.long   EXPORT_SYMBOL(pointer_sprites)
		.long   EXPORT_SYMBOL(pointer_sprites_end)
		.fill   0x8
		.string "data/hpointer.dat"
		.fill   0xa
		.long   EXPORT_SYMBOL(pointer_data)
		.fill   0xc
		.string "data/hreq.dat"
		.fill   0xe
		.long   data_60abc
		.fill   0x38
GLOBAL (load_files_mcga)		/* 0x54EA4 */
		.ascii  "\x2a"
		.fill   0x1b
		.long   EXPORT_SYMBOL(WScreen)
		.fill   0x4
		.ascii  "\x10\xe8\x03"
		.fill   0x5
		.string "data/lpal01.dat"
		.fill   0xc
		.long   GraphicsPalette
		.fill   0xc
		.string "data/lpointer.tab"
		.fill   0xa
		.long   EXPORT_SYMBOL(pointer_sprites)
		.long   EXPORT_SYMBOL(pointer_sprites_end)
		.fill   0x8
		.string "data/lpointer.dat"
		.fill   0xa
		.long   EXPORT_SYMBOL(pointer_data)
		.fill   0xc
		.string "data/lreq.dat"
		.fill   0xe
		.long   data_60abc
		.fill   0x38
mmapblk_load_files:	/* 0x54fac */
		.string "data/mmapblk.dat"
		.fill   0xb
		.long   world_map
		.fill   0xc
		.string "data/mminlogo.dat"
		.fill   0xa
		.long   data_5df14
		.fill   0x38
data_55030:
		.ascii  "\x09\x00\x00\x00"
data_55034:
		.ascii  "\x01\x00\x00\x00"
data_55038:
		.ascii  "\x01"
		.fill   0xb
GLOBAL (Network__Name)	/* 0x55044 */
		.string "SYND"
		.fill   0xd
Network__MasterNcb:	/* 0x55056 */
		.fill   0x4
data_5505a:
		.ascii  "\x00\x00"
MouseOldX:	/* 0x5505c */
		.ascii  "\x40\x01\x00\x00"
MouseOldY:	/* 0x55060 */
		.ascii  "\xc8\x00\x00\x00"
MouseOldW:	/* 0x55064 */
		.fill   0x8
GLOBAL (MouseSwap)	/* 0x5506c */
		.fill   0x4
data_55070:
		.fill   0x4
		.ascii  "\xbe"
		.fill   0x5
		.ascii  "\x02"
		.fill   0x5
		.ascii  "\x22\x00\x9d\xff"
		.fill   0x10
unkarr_5094:	/* 0x55094 */
		.fill   0x4
		.ascii  "\xbe"
		.fill   0x5
		.ascii  "\x02"
		.fill   0x5
		.ascii  "\x22\x00\x9d\xff"
		.fill   0x10
unkarr_50B8:	/* 0x550b8 */
		.ascii  "\x01"
		.fill   0x5
		.ascii  "\x40\x2e\x00\x00\x02\x01"
		.fill   0x6
		.ascii  "\x01\x00\x40\x00\x00\x00\x40\x2e"
		.ascii  "\x00\x00\x02\x02"
		.fill   0x4
		.ascii  "\x04\x00\x01\x00\x00\x00\x64\x00"
		.ascii  "\x40\x2e\x00\x00\x02\x03"
		.fill   0x4
		.ascii  "\x08\x00\x01\x00\x40\x00\x64\x00"
		.ascii  "\x40\x2e\x00\x00\x02\x04"
		.fill   0x4
		.ascii  "\x0c\x00\x9d\xff"
		.fill   0x10
data_55112:
		.ascii  "\x01\x00"
data_55114:
		.ascii  "\x00\x00"
data_55116:
		.ascii  "\x00\x00\x40\x2e\x00\x00"
data_5511c:
		.ascii  "\x02\x01"
		.fill   0x6
		.ascii  "\x01\x00\x40\x00\x00\x00\x40\x2e"
		.ascii  "\x00\x00\x02\x02"
		.fill   0x4
		.ascii  "\x04\x00\x01\x00\x00\x00\x64\x00"
		.ascii  "\x40\x2e\x00\x00\x02\x03"
		.fill   0x4
		.ascii  "\x08\x00\x01\x00\x40\x00\x64\x00"
		.ascii  "\x40\x2e\x00\x00\x02\x04"
		.fill   0x4
		.ascii  "\x0c\x00\x9d\xff"
		.fill   0x10
unkarr_516C:	/* 0x5516c */
		.ascii  "\x01\x00\x00\x00\x5a\x00\x80\x08"
		.ascii  "\x00\x00\x02\x02"
		.fill   0x4
		.ascii  "\x3d\x00\x9d\xff"
		.fill   0x10
data_55190:
		.ascii  "\x01\x00\x00\x00\x5a\x00\x80\x08"
		.ascii  "\x00\x00\x02\x02"
		.fill   0x4
		.ascii  "\x3d\x00\x9d\xff"
		.fill   0x10
unkarr_551B4:	/* 0x551b4 */
		.fill   0x4
		.ascii  "\xd0\x00\x20\x22\x00\x00"
data_551be:
		.ascii  "\x02\x01"
data_551c0:
		.ascii  "\x00\x00"
data_551c2:
		.ascii  "\x00\x00"
data_551c4:
		.ascii  "\x49\x00\x00\x00\x20\x00\xd0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x02"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x40\x00\xd0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x03"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x60\x00\xd0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x04"
		.fill   0x4
		.ascii  "\x49"
		.fill   0x5
		.ascii  "\xf0\x00\x20\x22\x00\x00\x02\x05"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x20\x00\xf0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x06"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x40\x00\xf0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x07"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x60\x00\xf0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x08"
		.fill   0x4
		.ascii  "\x49\x00\x9d\xff"
		.fill   0x10
unkarr_55256:	/* 0x55256 */
		.ascii  "\x00\x00"
data_55258:
		.ascii  "\x00\x00"
data_5525a:
		.ascii  "\xd0\x00\x20\x22\x00\x00"
data_55260:
		.ascii  "\x02\x01"
data_55262:
		.ascii  "\x00\x00"
data_55264:
		.ascii  "\x00\x00"
data_55266:
		.ascii  "\x49\x00\x00\x00\x20\x00\xd0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x02"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x40\x00\xd0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x03"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x60\x00\xd0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x04"
		.fill   0x4
		.ascii  "\x49"
		.fill   0x5
		.ascii  "\xf0\x00\x20\x22\x00\x00\x02\x05"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x20\x00\xf0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x06"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x40\x00\xf0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x07"
		.fill   0x4
		.ascii  "\x49\x00\x00\x00\x60\x00\xf0\x00"
		.ascii  "\x20\x22\x00\x00\x02\x08"
		.fill   0x4
		.ascii  "\x49\x00\x9d\xff"
		.fill   0x10
data_552f8:
		.ascii  "\x08\x00\x00\x40\x00\x40"
data_552fe:
		.ascii  "\x00"
data_552ff:
		.ascii  "\x00"
data_55300:
		.ascii  "\x00\x00"
data_55302:
		.ascii  "\x00\x00"
game_speed:	/* 0x55304 */
		.ascii  "\x07\x00\x00\x00"
GLOBAL (pointer_sprites)	/* 0x55308 */
		.fill   0x4
GLOBAL (pointer_sprites_end)	/* 0x5530c */
		.fill   0x4
GLOBAL (pointer_data)	/* 0x55310 */
		.fill   0x4
h_sprites:	/* 0x55314 */
		.fill   0x4
h_sprites_end:	/* 0x55318 */
		.fill   0x4
data_5531c:
		.fill   0x4
data_55320:
		.fill   0x4
GLOBAL (mouse_sprite)	/* 0x55324 */
		.fill   0x8
data_5532c:
		.ascii  "\x00\x00"
data_5532e:
		.ascii  "\x00\x00"
h_sprites_data:	/* 0x55330 */
		.fill   0x4
data_55334:
		.fill   0x4
frames:	/* 0x55338 */
		.fill   0x4
frames_end:	/* 0x5533c */
		.fill   0x4
elements_ani:	/* 0x55340 */
		.fill   0x4
elements_ani_end:	/* 0x55344 */
		.fill   0x4
starts_ani:	/* 0x55348 */
		.fill   0x4
smpdata:	/* 0x5534c */
		.fill   0x4
smptable:	/* 0x55350 */
		.fill   0x4
smptable_end:	/* 0x55354 */
		.fill   0x4
data_55358:
		.fill   0x4
map_buf:	/* 0x5535c */
		.fill   0x4
h_blocks:	/* 0x55360 */
		.fill   0x4
h_font:	/* 0x55364 */
		.fill   0x4
GLOBAL (WScreen)	/* 0x55368 */
		.fill   0x4
GLOBAL (VScreen)	/* 0x5536c */
		.fill   0x4
BScreen:	/* 0x55370 */
		.fill   0x4
UScreen:	/* 0x55374 */
		.fill   0x4
GLOBAL (GraphicsPalette)	/* 0x55378 */
		.fill   0x4
data_5537c:
		.ascii  "\x00\x00"
ASM_Inkey:	/* 0x5537e */
		.ascii  "\x80"
SoundActive:	/* 0x5537f */
		.ascii  "\x01"
GraphicsWindowX:	/* 0x55380 */
		.fill   0x4
GraphicsWindowY:	/* 0x55384 */
		.fill   0x4
GraphicsWindowWidth:	/* 0x55388 */
		.ascii  "\x80\x02\x00\x00"
GraphicsWindowHeight:	/* 0x5538c */
		.ascii  "\x90\x01\x00\x00"
GLOBAL (lbDisplay__MMouseX_640)	/* 0x55390 mouse coord scaled as is the screen was 640 px */
		.ascii  "\x40\x01"
GLOBAL (lbDisplay__MMouseY_400)	/* 0x55392 mouse coord scaled as is the screen was 400 px */
		.ascii  "\xc8\x00\x01\x00\x01\x00"
AniArrayCount:	/* 0x55398 */
		.ascii  "\x00\x00"
GLOBAL (cheat_worldmap)	/* 0x5539a */
		.ascii  "\x00\x00"
GLOBAL (country_states)	/* 0x5539c */
		.ascii  "\x00\x00"
data_5539e:
		.ascii  "\x00"
data_5539f:
		.ascii  "\x00"
data_553a0:
		.ascii  "\x00\x00"
data_553a2:
		.fill   0x1ee
data_55590:
		.ascii  "\x03"
data_55591:
		.ascii  "\x00"
data_55592:
		.ascii  "\x04\x00"
GLOBAL (research)	/* 0x55594 */
		.ascii  "\x00"
data_55595:
		.ascii  "\x00"
data_55596:
		.ascii  "\x00"
data_55597:
		.fill   0x4
data_5559b:
		.ascii  "\x00\x00"
data_5559d:
		.fill   0x2e
data_555cb:
		.fill   0x1b5
GLOBAL (cybmods)	/* 0x55780 */
		.ascii  "\x00"
data_55781:
		.ascii  "\x70\x17\x00\x00"
data_55785:
		.ascii  "\x00"
data_55786:
		.ascii  "\x25\x00"
data_55788:
		.ascii  "\x00\x00"
data_5578a:
		.fill   0x1e0
data_5596a:
		.ascii  "\x00\x01\x30\x75\x00\x00\x01\xb9"
		.fill   0x1e3
		.ascii  "\x02\x02\x60\xea\x00\x00\x02\x72"
		.ascii  "\x01"
		.fill   0x1e3
		.ascii  "\x03\x88\x13\x00\x00\x03\x25"
		.fill   0x1e4
		.ascii  "\x04\xa8\x61\x00\x00\x04\xb9"
		.fill   0x1e3
		.ascii  "\x05\x05\x50\xc3\x00\x00\x05\x72"
		.ascii  "\x01"
		.fill   0x1e3
		.ascii  "\x06\x40\x1f\x00\x00\x06\x32"
		.fill   0x1e4
		.ascii  "\x07\x40\x9c\x00\x00\x07\xfa"
		.fill   0x1e3
		.ascii  "\x08\x08\x80\x38\x01\x00\x08\xf4"
		.ascii  "\x01"
		.fill   0x1e3
		.ascii  "\x09\x94\x11\x00\x00\x09\x1d"
		.fill   0x1e4
		.ascii  "\x0a\xe4\x57\x00\x00\x0a\x91"
		.fill   0x1e3
		.ascii  "\x0b\x0b\xc8\xaf\x00\x00\x0b\x22"
		.ascii  "\x01"
		.fill   0x1e3
		.ascii  "\x0c\x94\x11\x00\x00\x0c\x1d"
		.fill   0x1e4
		.ascii  "\x0d\xe4\x57\x00\x00\x0d\x91"
		.fill   0x1e3
		.ascii  "\x0e\x0e\xc8\xaf\x00\x00\x0e\x22"
		.ascii  "\x01"
		.fill   0x1e3
		.ascii  "\x0f\x94\x11\x00\x00\x0f\x1d"
		.fill   0x1e4
		.ascii  "\x10\xe4\x57\x00\x00\x10\x91"
		.fill   0x1e3
		.ascii  "\x11\x11\xc8\xaf\x00\x00\x11\x22"
		.ascii  "\x01"
		.fill   0x1e3
		.ascii  "\xff"
		.fill   0x1ed
GLOBAL (weapons)	/* 0x57bf4 */
		.ascii  "\x00"
data_57bf5:
		.ascii  "\x88\x13\x00\x00"
data_57bf9:
		.ascii  "\x32\x00"
data_57bfb:
		.ascii  "\x0a\x00\x00\x00"
data_57bff:
		.ascii  "\x00\x01"
data_57c01:
		.ascii  "\x01\x00\x00\x00"
data_57c05:
		.ascii  "\x00\x00"
data_57c07:
		.fill   0x2e
data_57c35:
		.fill   0x1b2
data_57de7:
		.ascii  "\x00"
data_57de8:
		.ascii  "\x00\x01"
		.fill   0x4
		.ascii  "\x0c"
		.fill   0x6
		.ascii  "\x05\x01"
		.fill   0x1e7
		.ascii  "\x02\xb0\x3c\xff\xff\x02\x00\x98"
		.ascii  "\x3a\x00\x00\x00\x14\x71\x02"
		.fill   0x1e5
		.ascii  "\x02\x03\xfa\x00\x00\x00\x0b\x00"
		.ascii  "\x02"
		.fill   0x4
		.ascii  "\x04"
		.fill   0x1e8
		.ascii  "\x04\x12\xfd\xff\xff\x31\x00\x02"
		.fill   0x4
		.ascii  "\x07\x04"
		.fill   0x1e5
		.ascii  "\x05\x01\x05\xf0\xd8\xff\xff\xf3"
		.ascii  "\x01\x0a"
		.fill   0x4
		.ascii  "\x09\x53"
		.fill   0x1e6
		.ascii  "\x01\x06\x48\x77\xff\xff\x04\x00"
		.ascii  "\xd0\x07\x00\x00\x00\x10\x4d\x01"
		.fill   0x1e4
		.ascii  "\x02\x02\x07\x24\xfa\xff\xff\xe7"
		.ascii  "\x03\x01"
		.fill   0x4
		.ascii  "\x02\x0a"
		.fill   0x1e5
		.ascii  "\x08\x03\x08\x18\xfc\xff\xff\x1d"
		.ascii  "\x00\x02"
		.fill   0x4
		.ascii  "\x18\x06"
		.fill   0x1e5
		.ascii  "\x0b\x03\x09\xf4\x01\x00\x00\x13"
		.ascii  "\x00\x01"
		.fill   0x4
		.ascii  "\x10\x19"
		.fill   0x1e5
		.ascii  "\x0c\x04\x0a\xf4\x01"
		.fill   0x4
		.ascii  "\x01"
		.fill   0x4
		.ascii  "\x01\x04"
		.fill   0x1e7
		.ascii  "\x0b\x58\x9e\xff\xff\xc7\x00\x01"
		.ascii  "\x00\x00\x00\xe8\x03\x77\x01"
		.fill   0x1e5
		.ascii  "\x03\x0c\x18\xfc\xff\xff\x00\x00"
		.ascii  "\x01"
		.fill   0x4
		.ascii  "\x01\x53"
		.fill   0x1e5
		.ascii  "\x10\x04\xfe\x18\xfc\xff\xff\x00"
		.ascii  "\x00\x01"
		.fill   0x4
		.ascii  "\x01\x53"
		.fill   0x1e5
		.ascii  "\x10\x04\xfe\x18\xfc\xff\xff\x00"
		.ascii  "\x00\x01"
		.fill   0x4
		.ascii  "\x01\x53"
		.fill   0x1e5
		.ascii  "\x10\x04\xfe\x64"
		.fill   0x5
		.ascii  "\x01"
		.fill   0x4
		.ascii  "\x01"
		.fill   0x1e8
		.ascii  "\x10\xc0\xe0\xff\xff\xc7\x00\x0f"
		.fill   0x4
		.ascii  "\x03\x7d"
		.fill   0x1e6
		.ascii  "\x04\xfe\x90\xe8\xff\xff\xc7\x00"
		.ascii  "\x0f"
		.fill   0x4
		.ascii  "\x03\x68"
		.fill   0x1e6
		.ascii  "\x04\xfe\xa8\xe4\xff\xff\xc7\x00"
		.ascii  "\x0f"
		.fill   0x4
		.ascii  "\x03\x72"
		.fill   0x1e6
		.ascii  "\x04\xfe\x01"
		.fill   0x5
		.ascii  "\x01\x00\x00\x00\x01\x00\x01"
		.fill   0x1e6
		.ascii  "\x04\xff"
		.fill   0x1f4
GLOBAL (language)	/* 0x5a50d */
		.ascii  "\x00\x00\x00"
data_5a510:
		.fill   0x5
		.ascii  "\x01\x01\x01\x01\x01\x01\x01\x00"
		.ascii  "\x01\x01\x01\x01\x01\x01\x01\x01"
		.ascii  "\x01\x01"
		.fill   0xd
		.ascii  "\x01\x01\x01\x01\x01\x00\x01\x01"
		.ascii  "\x01\x01\x00\x01\x00\x00\x00\x01"
		.ascii  "\x00\x00"
data_5a546:
		.fill   0x4
		.ascii  "\x18\x00\x18\x00\x18\x00\x18\x00"
		.ascii  "\x18\x00\x18\x00\x18\x00\x18"
		.fill   0x15
data_5a56e:
		.ascii  "\x08\x00\x08\x00\x40\x00\x40\x00"
		.ascii  "\x40\x00\x40\x00\x40\x00\x40\x00"
		.ascii  "\x40\x00\x40\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
data_5a596:
		.fill   0x4
		.ascii  "\x68\x00\x68\x00\x68\x00\x68\x00"
		.ascii  "\x68\x00\x68\x00\x68\x00\x68"
		.fill   0x15
		.ascii  "\x08\x00\x08\x00\x98\x00\x98\x00"
		.ascii  "\x98\x00\x98\x00\x98\x00\x98\x00"
		.ascii  "\x98\x00\x98\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
data_5a5e6:
		.fill   0x4
		.ascii  "\x18\x00\x18\x00\x18\x00\x18\x00"
		.ascii  "\x20\x00\x18\x00\x28\x00\x30"
		.fill   0xf
		.ascii  "\x10\x00\x10\x00\x10\x00"
data_5a60e:
		.ascii  "\x08\x00\x08\x00\x40\x00\x40\x00"
		.ascii  "\x40\x00\x40\x00\x48\x00\x40\x00"
		.ascii  "\x50\x00\x58\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x38\x00\x38\x00\x38\x00"
data_5a636:
		.fill   0x4
		.ascii  "\x68\x00\x68\x00\x68\x00\x68\x00"
		.ascii  "\x70\x00\x78\x00\x80\x00\x88"
		.fill   0xf
		.ascii  "\x10\x00\x10\x00\x10\x00\x08\x00"
		.ascii  "\x08\x00\x98\x00\x98\x00\x98\x00"
		.ascii  "\x98\x00\xa0\x00\xa8\x00\xb0\x00"
		.ascii  "\xb8\x00\x08\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
		.ascii  "\x38\x00\x38\x00\x38\x00"
data_5a686:
		.ascii  "\x00\x00\x01\x09\x02\x03\x08\x01"
		.ascii  "\x07\x05"
		.fill   0xa
data_5a69a:
		.ascii  "\x00\x00\x01\x01\x01\x01\x01\x01"
		.ascii  "\x01\x01\x00\x01"
		.fill   0x5
		.ascii  "\x01\x01\x01\x00\x01\x01\x01\x01"
		.ascii  "\x01\x01\x01\x01\x01\x01"
		.fill   0x9
data_5a6c2:
		.ascii  "\x00\x00\x00\x01\x00\x05\x00\x14"
		.ascii  "\x00\x04\x00\x07\x00\x0b\x00\x10"
		.ascii  "\x00\x02\x00\x18\x00\x10\x00\x01"
		.ascii  "\xe8\x03\x00\x01\x00\x01\x00\x01"
		.ascii  "\x00\x01\x00\x03\x00\x03\x00\x03"
data_5a6ea:
		.ascii  "\x00\x02\x00\x00\x00\x01\x01\x00"
		.ascii  "\x01\x00\x02\x02\x02\x02\x02\x02"
		.ascii  "\x02\x02\x02\x02"
weapons_time_in_use:	/* 0x5a6fe */
		.ascii  "\x00\x02\x02\x02\x02\x02\x02\x02"
		.ascii  "\x03\x02"
		.fill   0x7
		.ascii  "\x02\x02\x02"
data_5a712:
		.ascii  "\x00\x00\x0a\x00\x00\x00\x98\x3a"
		.ascii  "\x02\x00\x02\x00\x0a\x00\xd0\x07"
		.ascii  "\x01\x00\x02\x00\x01\x00\x01\x00"
		.ascii  "\x01\x00\x01\x00\x01\x00\x01\x00"
		.ascii  "\x01\x00\x0f\x00\x0f\x00\x0f\x00"
weapon_max_ammo:	/* 0x5a73a */
		.ascii  "\x00\x00\x32\x00"
data_5a73e:
		.ascii  "\x0c\x00\x02\x00\x0b\x00\x31\x00"
		.ascii  "\xf3\x01\x04\x00\xe7\x03\x1d\x00"
data_5a74e:
		.ascii  "\x13\x00\x00\x00\xc7"
		.fill   0x9
		.ascii  "\xc7\x00\xc7\x00\xc7\x00\x01\x01"
		.fill   0x4
		.ascii  "\x88\x13"
		.fill   0x6
		.ascii  "\xb0\x3c\xff\xff\xfa\x00\x00\x00"
		.ascii  "\x12\xfd\xff\xff\xf0\xd8\xff\xff"
		.ascii  "\x48\x77\xff\xff\x24\xfa\xff\xff"
		.ascii  "\x18\xfc\xff\xff\xf4\x01\x00\x00"
		.ascii  "\xf4\x01\x00\x00\x58\x9e\xff\xff"
		.ascii  "\x18\xfc\xff\xff\x18\xfc\xff\xff"
		.ascii  "\x18\xfc\xff\xff\x64\x00\x00\x00"
		.ascii  "\xc0\xe0\xff\xff\x90\xe8\xff\xff"
		.ascii  "\xa8\xe4\xff\xff"
weapon_weights:	/* 0x5a7b4 */
		.ascii  "\x00\x00\x64\x00\x14\x00\xb8\x0b"
		.ascii  "\x5a\x00\x96\x00\xb8\x0b\xc4\x09"
		.ascii  "\xac\x0d\x64\x00\x1e\x00\x32\x00"
		.ascii  "\xf4\x01\x0a\x00\x0a\x00\x0a\x00"
		.ascii  "\x14\x00\x64\x00\x64\x00\x64\x00"
data_5a7dc:
		.ascii   "### "
		.ascii  "\x1d\x1a\x17\x14\x11\x0e\x0b\x08"
		.ascii  "\x05\x02\x00\x00\x20\x20\x20\x1d"
		.ascii  "\x1a\x17\x14\x11\x0e\x0b\x08\x05"
		.ascii  "\x02\x00\x00\x00\x1d\x1d\x1d\x1a"
		.ascii  "\x17\x14\x11\x0e\x0b\x08\x05\x02"
		.fill   0x4
		.ascii  "\x1a\x1a\x1a\x17\x14\x11\x0e\x0b"
		.ascii  "\x08\x05\x02"
		.fill   0x5
		.ascii  "\x17\x17\x17\x14\x11\x0e\x0b\x08"
		.ascii  "\x05\x02"
		.fill   0x6
		.ascii  "\x14\x14\x14\x11\x0e\x0b\x08\x05"
		.ascii  "\x02"
		.fill   0x7
		.ascii  "\x11\x11\x11\x0e\x0b\x08\x05\x02"
		.fill   0x8
		.ascii  "\x0e\x0e\x0e\x0b\x08\x05\x02"
		.fill   0x9
		.ascii  "\x0b\x0b\x0b\x08\x05\x02"
		.fill   0xa
		.ascii  "\x08\x08\x08\x05\x02"
		.fill   0xb
		.ascii  "\x05\x05\x05\x02"
		.fill   0xc
		.ascii  "\x02\x02\x02"
		.fill   0x2d
data_5a8bc:
		.ascii  "\x7f\xff\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\x01\x00\x09\x00\x80\x00\x0a\x00"
		.ascii  "\xff\xff"
data_5a95e:
		.fill   0xe
		.ascii  "\x01\x00\x01\x00\x01\x00\x01\x00"
		.ascii  "\x01\x00\x01\x00\x02\x00\x02\x00"
		.ascii  "\x02\x00\x02\x00\x02\x00\x02\x00"
		.ascii  "\x03\x00\x03\x00\x03\x00\x03\x00"
		.ascii  "\x03\x00\x03\x00\x03\x00\x04\x00"
		.ascii  "\x04\x00\x04\x00\x04\x00\x04\x00"
		.ascii  "\x04\x00\x05\x00\x05\x00\x05\x00"
		.ascii  "\x05\x00\x05\x00\x05\x00\x06\x00"
		.ascii  "\x06\x00\x06\x00\x06\x00\x06\x00"
		.ascii  "\x06\x00\x06\x00\x07\x00\x07\x00"
		.ascii  "\x07\x00\x07\x00\x07\x00\x07\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x08\x00"
		.ascii  "\x08\x00\x08\x00\x08\x00\x09\x00"
		.ascii  "\x09\x00\x09\x00\x09\x00\x09\x00"
		.ascii  "\x09\x00\x09\x00\x0a\x00\x0a\x00"
		.ascii  "\x0a\x00\x0a\x00\x0a\x00\x0a\x00"
		.ascii  "\x0b\x00\x0b\x00\x0b\x00\x0b\x00"
		.ascii  "\x0b\x00\x0b\x00\x0b\x00\x0c\x00"
		.ascii  "\x0c\x00\x0c\x00\x0c\x00\x0c\x00"
		.ascii  "\x0c\x00\x0c\x00\x0d\x00\x0d\x00"
		.ascii  "\x0d\x00\x0d\x00\x0d\x00\x0d\x00"
		.ascii  "\x0d\x00\x0e\x00\x0e\x00\x0e\x00"
		.ascii  "\x0e\x00\x0e\x00\x0e\x00\x0e\x00"
		.ascii  "\x0f\x00\x0f\x00\x0f\x00\x0f\x00"
		.ascii  "\x0f\x00\x0f\x00\x0f\x00\x0f\x00"
		.ascii  "\x10\x00\x10\x00\x10\x00\x10\x00"
		.ascii  "\x10\x00\x10\x00\x10\x00\x11\x00"
		.ascii  "\x11\x00\x11\x00\x11\x00\x11\x00"
		.ascii  "\x11\x00\x11\x00\x11\x00\x12\x00"
		.ascii  "\x12\x00\x12\x00\x12\x00\x12\x00"
		.ascii  "\x12\x00\x12\x00\x13\x00\x13\x00"
		.ascii  "\x13\x00\x13\x00\x13\x00\x13\x00"
		.ascii  "\x13\x00\x13\x00\x14\x00\x14\x00"
		.ascii  "\x14\x00\x14\x00\x14\x00\x14\x00"
		.ascii  "\x14\x00\x14\x00\x14\x00\x15\x00"
		.ascii  "\x15\x00\x15\x00\x15\x00\x15\x00"
		.ascii  "\x15\x00\x15\x00\x15\x00\x16\x00"
		.ascii  "\x16\x00\x16\x00\x16\x00\x16\x00"
		.ascii  "\x16\x00\x16\x00\x16\x00\x16\x00"
		.ascii  "\x17\x00\x17\x00\x17\x00\x17\x00"
		.ascii  "\x17\x00\x17\x00\x17\x00\x17\x00"
		.ascii  "\x17\x00\x18\x00\x18\x00\x18\x00"
		.ascii  "\x18\x00\x18\x00\x18\x00\x18\x00"
		.ascii  "\x18\x00\x18\x00\x19\x00\x19\x00"
		.ascii  "\x19\x00\x19\x00\x19\x00\x19\x00"
		.ascii  "\x19\x00\x19\x00\x19\x00\x1a\x00"
		.ascii  "\x1a\x00\x1a\x00\x1a\x00\x1a\x00"
		.ascii  "\x1a\x00\x1a\x00\x1a\x00\x1a\x00"
		.ascii  "\x1a\x00\x1b\x00\x1b\x00\x1b\x00"
		.ascii  "\x1b\x00\x1b\x00\x1b\x00\x1b\x00"
		.ascii  "\x1b\x00\x1b\x00\x1b\x00\x1b\x00"
		.ascii  "\x1c\x00\x1c\x00\x1c\x00\x1c\x00"
		.ascii  "\x1c\x00\x1c\x00\x1c\x00\x1c\x00"
		.ascii  "\x1c\x00\x1c\x00\x1d\x00\x1d\x00"
		.ascii  "\x1d\x00\x1d\x00\x1d\x00\x1d\x00"
		.ascii  "\x1d\x00\x1d\x00\x1d\x00\x1d\x00"
		.ascii  "\x1d\x00\x1d\x00\x1e\x00\x1e\x00"
		.ascii  "\x1e\x00\x1e\x00\x1e\x00\x1e\x00"
		.ascii  "\x1e\x00\x1e\x00\x1e\x00\x1e\x00"
		.ascii  "\x1e\x00\x1f\x00\x1f\x00\x1f\x00"
		.ascii  "\x1f\x00\x1f\x00\x1f\x00\x1f\x00"
		.ascii  "\x1f\x00\x1f\x00\x1f\x00\x1f\x00"
		.ascii  "\x1f\x00\x20\x00"
data_5ab60:
		.ascii  "\x00\x00\x06\x00\x0c\x00\x12\x00"
		.ascii  "\x19\x00\x1f\x00\x25\x00\x2b\x00"
		.ascii  "\x31\x00\x38\x00\x3e\x00\x44\x00"
		.ascii  "\x4a\x00\x50\x00\x56\x00\x5c\x00"
data_5ab80:
		.ascii  "\x61\x00\x67\x00\x6d\x00\x73\x00"
		.ascii  "\x78\x00\x7e\x00\x83\x00\x88\x00"
		.ascii  "\x8e\x00\x93\x00\x98\x00\x9d\x00"
		.ascii  "\xa2\x00\xa7\x00\xab\x00\xb0\x00"
		.ascii  "\xb5\x00\xb9\x00\xbd\x00\xc1\x00"
		.ascii  "\xc5\x00\xc9\x00\xcd\x00\xd1\x00"
		.ascii  "\xd4\x00\xd8\x00\xdb\x00\xde\x00"
		.ascii  "\xe1\x00\xe4\x00\xe7\x00\xea\x00"
		.ascii  "\xec\x00\xee\x00\xf1\x00\xf3\x00"
		.ascii  "\xf4\x00\xf6\x00\xf8\x00\xf9\x00"
		.ascii  "\xfb\x00\xfc\x00\xfd\x00\xfe\x00"
		.ascii  "\xfe\x00\xff\x00\xff\x00\xff\x00"
data_5abe0:
		.ascii  "\x00\x01\xff\x00\xff\x00\xff\x00"
		.ascii  "\xfe\x00\xfe\x00\xfd\x00\xfc\x00"
		.ascii  "\xfb\x00\xf9\x00\xf8\x00\xf6\x00"
		.ascii  "\xf4\x00\xf3\x00\xf1\x00\xee\x00"
		.ascii  "\xec\x00\xea\x00\xe7\x00\xe4\x00"
		.ascii  "\xe1\x00\xde\x00\xdb\x00\xd8\x00"
		.ascii  "\xd4\x00\xd1\x00\xcd\x00\xc9\x00"
		.ascii  "\xc5\x00\xc1\x00\xbd\x00\xb9\x00"
		.ascii  "\xb5\x00\xb0\x00\xab\x00\xa7\x00"
		.ascii  "\xa2\x00\x9d\x00\x98\x00\x93\x00"
		.ascii  "\x8e\x00\x88\x00\x83\x00\x7e\x00"
		.ascii  "\x78\x00\x73\x00\x6d\x00\x67\x00"
		.ascii  "\x61\x00\x5c\x00\x56\x00\x50\x00"
		.ascii  "\x4a\x00\x44\x00\x3e\x00\x38\x00"
		.ascii  "\x31\x00\x2b\x00\x25\x00\x1f\x00"
		.ascii  "\x19\x00\x12\x00\x0c\x00\x06\x00"
		.ascii  "\x00\x00\xfa\xff\xf4\xff\xee\xff"
		.ascii  "\xe7\xff\xe1\xff\xdb\xff\xd5\xff"
		.ascii  "\xcf\xff\xc8\xff\xc2\xff\xbc\xff"
		.ascii  "\xb6\xff\xb0\xff\xaa\xff\xa4\xff"
		.ascii  "\x9f\xff\x99\xff\x93\xff\x8d\xff"
		.ascii  "\x88\xff\x82\xff\x7d\xff\x78\xff"
		.ascii  "\x72\xff\x6d\xff\x68\xff\x63\xff"
		.ascii  "\x5e\xff\x59\xff\x55\xff\x50\xff"
		.ascii  "\x4b\xff\x47\xff\x43\xff\x3f\xff"
		.ascii  "\x3b\xff\x37\xff\x33\xff\x2f\xff"
		.ascii  "\x2c\xff\x28\xff\x25\xff\x22\xff"
		.ascii  "\x1f\xff\x1c\xff\x19\xff\x16\xff"
		.ascii  "\x14\xff\x12\xff\x0f\xff\x0d\xff"
		.ascii  "\x0c\xff\x0a\xff\x08\xff\x07\xff"
		.ascii  "\x05\xff\x04\xff\x03\xff\x02\xff"
		.ascii  "\x02\xff\x01\xff\x01\xff\x01\xff"
data_5ace0:
		.ascii  "\x00\xff\x01\xff\x01\xff\x01\xff"
		.ascii  "\x02\xff\x02\xff\x03\xff\x04\xff"
		.ascii  "\x05\xff\x07\xff\x08\xff\x0a\xff"
		.ascii  "\x0c\xff\x0d\xff\x0f\xff\x12\xff"
		.ascii  "\x14\xff\x16\xff\x19\xff\x1c\xff"
		.ascii  "\x1f\xff\x22\xff\x25\xff\x28\xff"
		.ascii  "\x2c\xff\x2f\xff\x33\xff\x37\xff"
		.ascii  "\x3b\xff\x3f\xff\x43\xff\x47\xff"
		.ascii  "\x4b\xff\x50\xff\x55\xff\x59\xff"
		.ascii  "\x5e\xff\x63\xff\x68\xff\x6d\xff"
		.ascii  "\x72\xff\x78\xff\x7d\xff\x82\xff"
		.ascii  "\x88\xff\x8d\xff\x93\xff\x99\xff"
		.ascii  "\x9f\xff\xa4\xff\xaa\xff\xb0\xff"
		.ascii  "\xb6\xff\xbc\xff\xc2\xff\xc8\xff"
		.ascii  "\xcf\xff\xd5\xff\xdb\xff\xe1\xff"
		.ascii  "\xe7\xff\xee\xff\xf4\xff\xfa\xff"
data_5ad60:
		.ascii  "\x00\x01\xff\x00\xff\x00\xff\x00"
		.ascii  "\xfe\x00\xfe\x00\xfd\x00\xfc\x00"
		.ascii  "\xfb\x00\xf9\x00\xf8\x00\xf6\x00"
		.ascii  "\xf4\x00\xf3\x00\xf1\x00\xee\x00"
data_5ad80:
		.ascii  "\xec\x00\xea\x00\xe7\x00\xe4\x00"
		.ascii  "\xe1\x00\xde\x00\xdb\x00\xd8\x00"
		.ascii  "\xd4\x00\xd1\x00\xcd\x00\xc9\x00"
		.ascii  "\xc5\x00\xc1\x00\xbd\x00\xb9\x00"
		.ascii  "\xb5\x00\xb0\x00\xab\x00\xa7\x00"
		.ascii  "\xa2\x00\x9d\x00\x98\x00\x93\x00"
		.ascii  "\x8e\x00\x88\x00\x83\x00\x7e\x00"
		.ascii  "\x78\x00\x73\x00\x6d\x00\x67\x00"
		.ascii  "\x61\x00\x5c\x00\x56\x00\x50\x00"
		.ascii  "\x4a\x00\x44\x00\x3e\x00\x38\x00"
		.ascii  "\x31\x00\x2b\x00\x25\x00\x1f\x00"
		.ascii  "\x19\x00\x12\x00\x0c\x00\x06\x00"
		.ascii  "\x00\x00\xfa\xff\xf4\xff\xee\xff"
		.ascii  "\xe7\xff\xe1\xff\xdb\xff\xd5\xff"
		.ascii  "\xcf\xff\xc8\xff\xc2\xff\xbc\xff"
		.ascii  "\xb6\xff\xb0\xff\xaa\xff\xa4\xff"
		.ascii  "\x9f\xff\x99\xff\x93\xff\x8d\xff"
		.ascii  "\x88\xff\x82\xff\x7d\xff\x78\xff"
		.ascii  "\x72\xff\x6d\xff\x68\xff\x63\xff"
		.ascii  "\x5e\xff\x59\xff\x55\xff\x50\xff"
		.ascii  "\x4b\xff\x47\xff\x43\xff\x3f\xff"
		.ascii  "\x3b\xff\x37\xff\x33\xff\x2f\xff"
		.ascii  "\x2c\xff\x28\xff\x25\xff\x22\xff"
		.ascii  "\x1f\xff\x1c\xff\x19\xff\x16\xff"
		.ascii  "\x14\xff\x12\xff\x0f\xff\x0d\xff"
		.ascii  "\x0c\xff\x0a\xff\x08\xff\x07\xff"
		.ascii  "\x05\xff\x04\xff\x03\xff\x02\xff"
		.ascii  "\x02\xff\x01\xff\x01\xff\x01\xff"
data_5ae60:
		.ascii  "\x00\xff\x01\xff\x01\xff\x01\xff"
		.ascii  "\x02\xff\x02\xff\x03\xff\x04\xff"
		.ascii  "\x05\xff\x07\xff\x08\xff\x0a\xff"
		.ascii  "\x0c\xff\x0d\xff\x0f\xff\x12\xff"
		.ascii  "\x14\xff\x16\xff\x19\xff\x1c\xff"
		.ascii  "\x1f\xff\x22\xff\x25\xff\x28\xff"
		.ascii  "\x2c\xff\x2f\xff\x33\xff\x37\xff"
		.ascii  "\x3b\xff\x3f\xff\x43\xff\x47\xff"
		.ascii  "\x4b\xff\x50\xff\x55\xff\x59\xff"
		.ascii  "\x5e\xff\x63\xff\x68\xff\x6d\xff"
		.ascii  "\x72\xff\x78\xff\x7d\xff\x82\xff"
		.ascii  "\x88\xff\x8d\xff\x93\xff\x99\xff"
		.ascii  "\x9f\xff\xa4\xff\xaa\xff\xb0\xff"
		.ascii  "\xb6\xff\xbc\xff\xc2\xff\xc8\xff"
		.ascii  "\xcf\xff\xd5\xff\xdb\xff\xe1\xff"
		.ascii  "\xe7\xff\xee\xff\xf4\xff\xfa\xff"
		.ascii  "\x00\x00\x06\x00\x0c\x00\x12\x00"
		.ascii  "\x19\x00\x1f\x00\x25\x00\x2b\x00"
		.ascii  "\x31\x00\x38\x00\x3e\x00\x44\x00"
		.ascii  "\x4a\x00\x50\x00\x56\x00\x5c\x00"
		.ascii  "\x61\x00\x67\x00\x6d\x00\x73\x00"
		.ascii  "\x78\x00\x7e\x00\x83\x00\x88\x00"
		.ascii  "\x8e\x00\x93\x00\x98\x00\x9d\x00"
		.ascii  "\xa2\x00\xa7\x00\xab\x00\xb0\x00"
		.ascii  "\xb5\x00\xb9\x00\xbd\x00\xc1\x00"
		.ascii  "\xc5\x00\xc9\x00\xcd\x00\xd1\x00"
		.ascii  "\xd4\x00\xd8\x00\xdb\x00\xde\x00"
		.ascii  "\xe1\x00\xe4\x00\xe7\x00\xea\x00"
		.ascii  "\xec\x00\xee\x00\xf1\x00\xf3\x00"
		.ascii  "\xf4\x00\xf6\x00\xf8\x00\xf9\x00"
		.ascii  "\xfb\x00\xfc\x00\xfd\x00\xfe\x00"
		.ascii  "\xfe\x00\xff\x00\xff\x00\xff\x00"
data_5af60:
		.ascii  "\x00\x80\x40\xc0\x20\xa0\x60\xe0"
		.ascii  "\x10\x90\x50\xd0\x30\xb0\x70\xf0"
		.ascii  "\x08\x88\x48\xc8\x28\xa8\x68\xe8"
		.ascii  "\x18\x98\x58\xd8\x38\xb8\x78\xf8"
		.ascii  "\x04\x84\x44\xc4\x24\xa4\x64\xe4"
		.ascii  "\x14\x94\x54\xd4\x34\xb4\x74\xf4"
		.ascii  "\x0c\x8c\x4c\xcc\x2c\xac\x6c\xec"
		.ascii  "\x1c\x9c\x5c\xdc\x3c\xbc\x7c\xfc"
		.ascii  "\x02\x82\x42\xc2\x22\xa2\x62\xe2"
		.ascii  "\x12\x92\x52\xd2\x32\xb2\x72\xf2"
		.ascii  "\x0a\x8a\x4a\xca\x2a\xaa\x6a\xea"
		.ascii  "\x1a\x9a\x5a\xda\x3a\xba\x7a\xfa"
		.ascii  "\x06\x86\x46\xc6\x26\xa6\x66\xe6"
		.ascii  "\x16\x96\x56\xd6\x36\xb6\x76\xf6"
		.ascii  "\x0e\x8e\x4e\xce\x2e\xae\x6e\xee"
		.ascii  "\x1e\x9e\x5e\xde\x3e\xbe\x7e\xfe"
		.ascii  "\x01\x81\x41\xc1\x21\xa1\x61\xe1"
		.ascii  "\x11\x91\x51\xd1\x31\xb1\x71\xf1"
		.ascii  "\x09\x89\x49\xc9\x29\xa9\x69\xe9"
		.ascii  "\x19\x99\x59\xd9\x39\xb9\x79\xf9"
		.ascii  "\x05\x85\x45\xc5\x25\xa5\x65\xe5"
		.ascii  "\x15\x95\x55\xd5\x35\xb5\x75\xf5"
		.ascii  "\x0d\x8d\x4d\xcd\x2d\xad\x6d\xed"
		.ascii  "\x1d\x9d\x5d\xdd\x3d\xbd\x7d\xfd"
		.ascii  "\x03\x83\x43\xc3\x23\xa3\x63\xe3"
		.ascii  "\x13\x93\x53\xd3\x33\xb3\x73\xf3"
		.ascii  "\x0b\x8b\x4b\xcb\x2b\xab\x6b\xeb"
		.ascii  "\x1b\x9b\x5b\xdb\x3b\xbb\x7b\xfb"
		.ascii  "\x07\x87\x47\xc7\x27\xa7\x67\xe7"
		.ascii  "\x17\x97\x57\xd7\x37\xb7\x77\xf7"
		.ascii  "\x0f\x8f\x4f\xcf\x2f\xaf\x6f\xef"
		.ascii  "\x1f\x9f\x5f\xdf\x3f\xbf\x7f\xff"
map_countries:	/* 0x5b060 */
		.ascii  "\x2e\x00"
data_5b062:
		.ascii  "\x12\x00"
data_5b064:
		.ascii  "\x1c\x00"
data_5b066:
		.ascii  "\x12\x00"
data_5b068:
		.ascii  "\x00"
data_5b069:
		.ascii  "\x02\x09"
		.fill   0x6
data_5b071:
		.ascii  "\x11"
data_5b072:
		.ascii  "\x1c\x5a\x00\x10\x00\x0e\x00\x18"
		.ascii  "\x00\x00\x09\x03"
		.fill   0x6
		.ascii  "\x27\x1d\x7a\x00\x06\x00\x3c\x00"
		.ascii  "\x1c\x00\x0a\x04\x10"
		.fill   0x6
		.ascii  "\x08\x1a\xda\x00\x10\x00\x20\x00"
		.ascii  "\x16\x00\x0a\x1c"
		.fill   0x7
		.ascii  "\x10\x19\x40\x01\x16\x00\x18\x00"
		.ascii  "\x26\x00\x0c\x0b"
		.fill   0x7
		.ascii  "\x14\x0c\x72\x01\x14\x00\x20\x00"
		.ascii  "\x28\x00\x0d\x07\x0e\x0d"
		.fill   0x5
		.ascii  "\x12\x17\xb2\x01\x0a\x00\x16\x00"
		.ascii  "\x24\x00\x0d\x08\x0e"
		.fill   0x6
		.ascii  "\x16\x16\xe2\x01\x1e\x00\x2c\x00"
		.ascii  "\x16\x00\x14\x01"
		.fill   0x7
		.ascii  "\x0c\x1f\x46\x00\x24\x00\x1c\x00"
		.ascii  "\x1a\x00\x01\x02\x13\x12\x11"
		.fill   0x4
		.ascii  "\x15\x1b\x22\x01\x46\x00\x18\x00"
		.ascii  "\x1a\x00\x0b\x05"
		.fill   0x7
		.ascii  "\x01\x0b\x4e\x01\x36\x00\x18\x00"
		.ascii  "\x20\x00\x0c\x0c"
		.fill   0x7
		.ascii  "\x0f\x0d\x74\x01\x3a\x00\x20\x00"
		.ascii  "\x1e\x00\x0d\x06"
		.fill   0x7
		.ascii  "\x0a\x0e\xb4\x01\x4a\x00\x0e\x00"
		.ascii  "\x1a\x00\x0d\x19\x18"
		.fill   0x6
		.ascii  "\x09\x15\xb2\x01\x3e\x00\x34\x00"
		.ascii  "\x12\x00\x14\x08\x0f"
		.fill   0x6
		.ascii  "\x03\x18\x14\x02\x4c\x00\x08\x00"
		.ascii  "\x10\x00\x14\x11"
		.fill   0x7
		.ascii  "\x02\x14\xa0\x00\x34\x00\x10\x00"
		.ascii  "\x10\x00\x0a\x14"
		.fill   0x7
		.ascii  "\x2a\x1e\x38\x00\x4c\x00\x10\x00"
		.ascii  "\x0e\x00\x01\x12\x1a"
		.fill   0x6
		.ascii  "\x05\x2c\x4c\x00\x4c\x00\x12\x00"
		.ascii  "\x10\x00\x01\x1a\x1b"
		.fill   0x6
		.ascii  "\x17\x30\x6e\x00\x4c\x00\x06\x00"
		.ascii  "\x0e\x00\x06\x14\x1b"
		.fill   0x6
		.ascii  "\x22\x2f\x8c\x00\x4c\x00\x10\x00"
		.ascii  "\x0e\x00\x06\x13\x1b\x1c"
		.fill   0x5
		.ascii  "\x1d\x2e\x16\x01\x7c\x00\x14\x00"
		.ascii  "\x0a\x00\x0b"
		.fill   0x8
		.ascii  "\x1c\x00\x20\x01\x7c\x00\x24\x00"
		.ascii  "\x1c\x00\x0b\x15\x1d\x1e"
		.fill   0x5
		.ascii  "\x23\x01\x58\x01\x74\x00\x28\x00"
		.ascii  "\x14\x00\x0e\x16\x1f"
		.fill   0x6
		.ascii  "\x06\x04\x8e\x01\x6a\x00\x1c\x00"
		.ascii  "\x16\x00\x0e\x20\x17\x1f"
		.fill   0x5
		.ascii  "\x04\x0f\xda\x01\x62\x00\x24\x00"
		.ascii  "\x14\x00\x13\x20\x21"
		.fill   0x6
		.ascii  "\x32\x13\x38\x00\x62\x00\x1c\x00"
		.ascii  "\x0e\x00\x02\x1b\x22"
		.fill   0x6
		.ascii  "\x20\x2d\x64\x00\x6a\x00\x06\x00"
		.ascii  "\x0a\x00\x06\x22\x23\x1a"
		.fill   0x5
		.ascii  "\x18\x2b\xc6\x00\x82\x00\x08\x00"
		.ascii  "\x06\x00\x07"
		.fill   0x8
		.ascii  "\x25\x31\x0a\x01\x8c\x00\x10\x00"
		.ascii  "\x16\x00\x07"
		.fill   0x8
		.ascii  "\x29\x02\x50\x01\x9c\x00\x14\x00"
		.ascii  "\x0a\x00\x08\x16\x24\x25\x1f"
		.fill   0x4
		.ascii  "\x21\x06\x7a\x01\x92\x00\x16\x00"
		.ascii  "\x0c\x00\x0e\x1e\x26"
		.fill   0x6
		.ascii  "\x26\x05\xb8\x01\x76\x00\x1a\x00"
		.ascii  "\x18\x00\x0e\x19\x21"
		.fill   0x6
		.ascii  "\x07\x10\xec\x01\x88\x00\x10\x00"
		.ascii  "\x0a\x00\x13\x32"
		.fill   0x7
		.ascii  "\x30\x11\x42\x00\x7a\x00\x0c\x00"
		.ascii  "\x0c\x00\x02\x1b\x23"
		.fill   0x6
		.ascii  "\x1a\x2a\x78\x00\xac\x00\x10\x00"
		.ascii  "\x10\x00\x03\x27\x28"
		.fill   0x6
		.ascii  "\x2c\x23\x18\x01\xaa\x00\x1e\x00"
		.ascii  "\x0a\x00\x08"
		.fill   0x8
		.ascii  "\x2d\x03\x46\x01\xa6\x00\x18\x00"
		.ascii  "\x26\x00\x09\x26\x2a"
		.fill   0x6
		.ascii  "\x1b\x07\x72\x01\xac\x00\x0e\x00"
		.ascii  "\x1e\x00\x0e\x25\x2b"
		.fill   0x6
		.ascii  "\x28\x08\x76\x00\xce\x00\x0c\x00"
		.ascii  "\x0a\x00\x04\x2f\x30"
		.fill   0x6
		.ascii  "\x0e\x24\x8e\x00\xb8\x00\x10\x00"
		.ascii  "\x1a\x00\x07\x29\x2f"
		.fill   0x6
		.ascii  "\x24\x29\xb4\x00\xc4\x00\x0e\x00"
		.ascii  "\x1a\x00\x08\x1c\x31"
		.fill   0x6
		.ascii  "\x2e\x28\x48\x01\xe2\x00\x0c\x00"
		.ascii  "\x16\x00\x09\x1c\x2b"
		.fill   0x6
		.ascii  "\x1f\x0a\x62\x01\xd4\x00\x08\x00"
		.ascii  "\x1e\x00\x0f\x2a"
		.fill   0x7
		.ascii  "\x0d\x09\xf6\x01\xfa\x00\x12\x00"
		.ascii  "\x22\x00\x11\x2d\x2e"
		.fill   0x6
		.ascii  "\x0b\x20\x1e\x02\xf6\x00\x1a\x00"
		.ascii  "\x18\x00\x12\x2c\x2e"
		.fill   0x6
		.ascii  "\x13\x21\x1e\x02\x1a\x01\x18\x00"
		.ascii  "\x0a\x00\x12\x2c\x2d\x23"
		.fill   0x5
		.ascii  "\x2b\x22\x98\x00\xe6\x00\x14\x00"
		.ascii  "\x0c\x00\x05\x31"
		.fill   0x7
		.ascii  "\x31\x27\x94\x00\xf2\x00\x0a\x00"
		.ascii  "\x26\x00\x05\x31"
		.fill   0x7
		.ascii  "\x1e\x25\xaa\x00\xfc\x00\x08\x00"
		.ascii  "\x10\x00\x05\x2f\x30"
		.fill   0x6
		.ascii  "\x2f\x26\xf8\x01\xa0\x00\x24\x00"
		.ascii  "\x2c\x00\x10\x2c\x2d"
		.fill   0x6
		.ascii  "\x19\x12"
data_5b416:
		.ascii  "\x07\x00"
data_5b418:
		.ascii  "\x06\x00\x07\x00\x1e\x00\x07\x00"
		.ascii  "\x40\x00\x1f\x00\x5a\x00\x2d\x00"
		.ascii  "\x81\x00\x6c\x00\x85\x00\x4b\x00"
		.ascii  "\x3e\x00\x68\x00\x53\x00\x7a\x00"
		.ascii  "\x69\x00\x8f\x00\x7e\x00\x71\x00"
		.ascii  "\x27\x00\x7a\x00\x2f\x00\x91\x00"
		.ascii  "\x0c\x00\xb1\x00\x06\x00\xd3\x00"
		.ascii  "\x5d\x00\xcf\x00\x7d\x00\xec\x00"
		.ascii  "\x63\x00\xe6\x00\x7f\x00\x2b\x01"
		.ascii  "\x82\x00\x1b\x01\x43\x00\x25\x01"
		.ascii  "\x23\x00"
player_colour_for_map:	/* 0x5b46a */
		.ascii  "\x06\x07\x0e\x03\x0b\x0c\x0d\x0f"
		.ascii  "\x06\x00"
data_5b474:
		.ascii  "\x60\x09\x00\x00\xff\xff\x60\x09"
		.ascii  "\x00\x00\xff\xff\x60\x09\x00\x00"
		.ascii  "\xff\xff\x60\x09\x00\x00\xff\xff"
		.ascii  "\x60\x09\x00\x00\xff\xff\x60\x09"
		.ascii  "\x00\x00\xff\xff"
data_5b498:
		.ascii   "`\t`\t"
		.ascii  "\xff\xff\x60\x09\x00\x00\xff\xff"
		.fill   0x4
		.ascii  "\xff\xff"
		.ascii   "`\t`\t"
		.ascii  "\xff\xff\x00\x00\xff\xff\xff\xff"
		.ascii  "\xff\xff\xff\xff\xff\xff\xff\xff"
		.ascii  "\xff\xff"
screen_bk_fnames:	/* 0x5b4c0 */
		.long   aDataMoptionDat
		.long   aDataMconfupDat
		.long   aDataMmapDat
		.long   aDataMlosaDat
		.long   aDataMmultiDat
		.long   aDataMoptionDat
		.long   aDataMoptionDat
		.long   aDataMselectDat
		.long   aDataMdebriefDa
		.long   aDataMbriefDat
		.long   aDataMoptionDat
		.long   aDataMresrchDat
		.long   aDataMultioptDa
		.long   aDataMconfupDat
		.long   aDataMmapDat
		.long   aDataMlosaDat
		.long   aDataMmultiDat
		.long   aDataMoptionDat
		.long   aDataMoptionDat
		.long   aDataMselectDat
		.long   aDataMdebriefDa
		.long   aDataMbriefDat
		.long   aDataMoptionDat
		.long   aDataMresrchDat
data_5b520:
		.long   aMultiplayerLev
data_5b524:
		.ascii  "\x5a\x00"
		.long   aMultiplayerLev_0
		.ascii  "\x5b\x00"
		.long   aMultiplayerLev_1
		.ascii  "\x5c\x00"
		.long   aMultiplayerLev_2
		.ascii  "\x5d\x00"
		.long   aMultiplayerLev_3
		.ascii  "\x5e\x00"
		.long   aMultiplayerLev_4
		.ascii  "\x5f\x00"
		.long   aMultiplayerLev_5
		.ascii  "\x60\x00"
		.long   aMultiplayerLev_6
		.ascii  "\x61\x00"
		.long   aMultiplayerLev_7
		.ascii  "\x62\x00"
		.long   aMultiplayerLev_8
		.ascii  "\x63\x00"
data_5b55c:
		.ascii  "\x1e\x00"
data_5b55e:
		.ascii  "\xe0\x00"
data_5b560:
		.ascii  "\x74\x00"
data_5b562:
		.ascii  "\x20\x00"
data_5b564:
		.ascii  "\xe0\x00"
data_5b566:
		.ascii  "\xda\x00"
data_5b568:
		.ascii  "\x28\x00"
data_5b56a:
		.ascii  "\xbc\x00"
data_5b56c:
		.ascii  "\x98\x00"
data_5b56e:
		.ascii  "\x2f\x00"
data_5b570:
		.ascii  "\xd8\x00"
data_5b572:
		.ascii  "\x94\x00\x00\x00"
data_5b576:
		.ascii  "\xfe\x00"
data_5b578:
		.ascii  "\xa8\x00\x00\x00"
data_5b57c:
		.ascii  "\xee\x00"
data_5b57e:
		.ascii  "\x74\x00\x00\x00"
data_5b582:
		.ascii  "\xee\x00"
data_5b584:
		.ascii  "\x76\x00\x1e\x00\xe0\x00\x76\x00"
		.ascii  "\x24\x00\xe0\x00\xd6\x00\x2c\x00"
		.ascii  "\xc6\x00\x9e\x00\x32\x00\xe0\x00"
		.ascii  "\x98"
		.fill   0x4
		.ascii  "\x01\xaa\x00\x00\x00\xf0\x00\x76"
		.ascii  "\x00\x00\x00\xf0\x00\x78\x00"
data_5b5b0:
		.ascii  "\x14\x00"
data_5b5b2:
		.ascii  "\x54\x00"
data_5b5b4:
		.ascii  "\x50\x00"
data_5b5b6:
		.ascii  "\x96\x00\x00\x02\x52\x00\x54\x00"
		.ascii  "\x8e\x00\x96\x00\x01\x03\x14\x00"
		.ascii  "\xa2\x00\x50\x00\xe4\x00\x02\x04"
		.ascii  "\x52\x00\xa2\x00\x8e\x00\xe4\x00"
		.ascii  "\x03\x05"
data_5b5d8:
		.ascii  "\x10\x00"
data_5b5da:
		.ascii  "\x06\x01"
data_5b5dc:
		.ascii  "\x92\x00"
data_5b5de:
		.ascii  "\x20\x01\x04\x3c"
data_5b5e2:
		.ascii  "\x10\x00"
data_5b5e4:
		.ascii  "\x22\x01"
data_5b5e6:
		.ascii  "\x92\x00"
data_5b5e8:
		.ascii  "\x3c\x01\x05\x3d"
data_5b5ec:
		.ascii  "\x10\x00"
data_5b5ee:
		.ascii  "\x3e\x01"
data_5b5f0:
		.ascii  "\x92\x00"
data_5b5f2:
		.ascii  "\x58\x01\x06\x3e\x10\x00\x5a\x01"
		.ascii  "\x92\x00\x74\x01\x07\x1c\xf4\x01"
		.ascii  "\x5a\x01\x74\x02\x74\x01\x08\x01"
		.ascii  "\xf4\x01\x3e\x01\x74\x02\x58\x01"
		.ascii  "\x09\x00\xf4\x01\x24\x01\x74\x02"
		.ascii  "\x40\x01\x0a\x00\x6e\x01\x34\x01"
		.ascii  "\x8e\x01\x54\x01\x0b\x00\x8e\x01"
		.ascii  "\x34\x01\xae\x01\x54\x01\x0c\x00"
		.ascii  "\xae\x01\x34\x01\xce\x01\x54\x01"
		.ascii  "\x0d\x00\xce\x01\x34\x01\xee\x01"
		.ascii  "\x54\x01\x0e\x00\x6e\x01\x54\x01"
		.ascii  "\x8e\x01\x74\x01\x0f\x00\x8e\x01"
		.ascii  "\x54\x01\xae\x01\x74\x01\x10\x00"
		.ascii  "\xae\x01\x54\x01\xce\x01\x74\x01"
		.ascii  "\x11\x00\xce\x01\x54\x01\xee\x01"
		.ascii  "\x74\x01\x12\x00\xf4\x01\x3e\x01"
		.ascii  "\x74\x02\x58\x01\x13\x00\xf4\x01"
		.ascii  "\x24\x01\x74\x02\x40\x01\x14\x00"
		.ascii  "\xf4\x01\x6a\x00\x74\x02\x58\x01"
		.ascii  "\x15\x3b"
data_5b68c:
		.ascii  "\x10\x00"
data_5b68e:
		.ascii  "\xea\x00"
data_5b690:
		.ascii  "\x92\x00"
data_5b692:
		.ascii  "\x04\x01\x16"
		.fill   0x9
		.ascii  "\x18\x00"
data_5b6a0:
		.ascii  "\x10\x00"
data_5b6a2:
		.ascii  "\xd2\x00"
data_5b6a4:
		.ascii  "\x92\x00"
data_5b6a6:
		.ascii  "\xec\x00\x00\x4e"
data_5b6aa:
		.ascii  "\x10\x00"
data_5b6ac:
		.ascii  "\x06\x01"
data_5b6ae:
		.ascii  "\x92\x00"
data_5b6b0:
		.ascii  "\x20\x01\x01\x4a"
data_5b6b4:
		.ascii  "\x10\x00"
data_5b6b6:
		.ascii  "\x22\x01"
data_5b6b8:
		.ascii  "\x92\x00"
data_5b6ba:
		.ascii  "\x3c\x01\x02\x3b"
data_5b6be:
		.ascii  "\x10\x00"
data_5b6c0:
		.ascii  "\x3e\x01"
data_5b6c2:
		.ascii  "\x92\x00"
data_5b6c4:
		.ascii  "\x58\x01\x03\x3b"
data_5b6c8:
		.ascii  "\x10\x00"
data_5b6ca:
		.ascii  "\x5a\x01"
data_5b6cc:
		.ascii  "\x92\x00"
data_5b6ce:
		.ascii  "\x74\x01\x04\x1c"
data_5b6d2:
		.ascii  "\xf4\x01"
data_5b6d4:
		.ascii  "\x5a\x01"
data_5b6d6:
		.ascii  "\x74\x02"
data_5b6d8:
		.ascii  "\x74\x01\x05\x01\xf4\x01\x6a\x00"
		.ascii  "\x74\x02\x58\x01\x06\x00\x10\x00"
		.ascii  "\x50\x00\x92\x00\xd0\x00\x07"
		.fill   0x9
		.ascii  "\x08\x00"
data_5b6fa:
		.ascii  "\x9e\x00"
data_5b6fc:
		.ascii  "\x64\x00\x1a\x02\x7a\x00\x00\x02"
		.ascii  "\x9e\x00\x7c\x00\x1a\x02\x92\x00"
		.ascii  "\x01\x03\x9e\x00\x94\x00\x1a\x02"
		.ascii  "\xaa\x00\x02\x04\x9e\x00\xac\x00"
		.ascii  "\x1a\x02\xc2\x00\x03\x05\x9e\x00"
		.ascii  "\xc4\x00\x1a\x02\xda\x00\x04\x06"
		.ascii  "\x9e\x00\xdc\x00\x1a\x02\xf2\x00"
		.ascii  "\x05\x07\x9e\x00\xf4\x00\x1a\x02"
		.ascii  "\x0a\x01\x06\x08\x9e\x00\x0c\x01"
		.ascii  "\x1a\x02\x22\x01\x07\x09\x9e\x00"
		.ascii  "\x24\x01\x1a\x02\x3a\x01\x08\x0a"
		.ascii  "\x9e\x00\x3c\x01\x1a\x02\x52\x01"
		.ascii  "\x09\x0b\x10\x00\x5a\x01\x92\x00"
		.ascii  "\x74\x01\x0a\x1c\xf4\x01\x5a\x01"
		.ascii  "\x74\x02\x74\x01\x0b\x01"
		.fill   0x8
		.ascii  "\x0c\x00"
data_5b77c:
		.ascii  "\x9e\x00"
data_5b77e:
		.ascii  "\x64\x00\x1a\x02\x7a\x00\x00\x00"
		.ascii  "\x9e\x00\x7c\x00\x1a\x02\x92\x00"
		.ascii  "\x01\x00\x9e\x00\x94\x00\x1a\x02"
		.ascii  "\xaa\x00\x02\x00\x9e\x00\xac\x00"
		.ascii  "\x1a\x02\xc2\x00\x03\x00\x9e\x00"
		.ascii  "\xc4\x00\x1a\x02\xda\x00\x04\x00"
		.ascii  "\x9e\x00\xdc\x00\x1a\x02\xf2\x00"
		.ascii  "\x05\x00\x9e\x00\xf4\x00\x1a\x02"
		.ascii  "\x0a\x01\x06\x00\x9e\x00\x0c\x01"
		.ascii  "\x1a\x02\x22\x01\x07\x00\x9e\x00"
		.ascii  "\x24\x01\x1a\x02\x3a\x01\x08\x00"
		.ascii  "\x9e\x00\x3c\x01\x1a\x02\x52\x01"
		.ascii  "\x09\x00\xf4\x01\x5a\x01\x74\x02"
		.ascii  "\x74\x01\x0a\x01"
data_5b7ea:
		.ascii  "\x2e\x00"
data_5b7ec:
		.ascii  "\x5a\x01"
data_5b7ee:
		.ascii  "\x92\x00"
data_5b7f0:
		.ascii  "\x74\x01\x0b\x00"
data_5b7f4:
		.ascii  "\x94\x00"
data_5b7f6:
		.ascii  "\x5a\x01"
data_5b7f8:
		.ascii  "\xf8\x00"
data_5b7fa:
		.ascii  "\x74\x01\x0c"
		.fill   0x9
		.ascii  "\x0d\x00"
data_5b808:
		.ascii  "\x94\x00"
arg8:	/* 0x5b80a */
		.ascii  "\x5a\x01"
data_5b80c:
		.ascii  "\xf8\x00"
data_5b80e:
		.ascii  "\x74\x01\x00\x13\x10\x00\x5a\x01"
		.ascii  "\x92\x00\x74\x01\x01\x1c\xf4\x01"
		.ascii  "\x5a\x01\x74\x02\x74\x01\x02\x01"
		.fill   0x8
		.ascii  "\x03\x00"
data_5b830:
		.ascii  "\x00\x00\x02\x00\x01\x01\x02\x03"
		.ascii  "\x03\x04\x00\x03\x04\x04\x04\x00"
		.ascii  "\x04\x04\x04\x04"
text_cyborg_names:	/* 0x5b844 */
		.long   aAfshar
		.long   aArnold
		.long   aBaird
		.long   aBaldwin
		.long   aBlack
		.long   aBoyd
		.long   aBoyesen
		.long   aBrazier
		.long   aBrown
		.long   aBush
		.long   aCarr
		.long   aChrismas
		.long   aClinton
		.long   aCooper
		.long   aCorpes
		.long   aCox
		.long   aDawson
		.long   aDonkin
		.long   aDiskett
		.long   aDunne
		.long   aEdgar
		.long   aEvans
		.long   aFairley
		.long   aFawcett
		.long   aFlint
		.long   aFloyd
		.long   aGriffiths
		.long   aHarris
		.long   aHastings
		.long   aHerbert
		.long   aHickman
		.long   aHicks
		.long   aHill
		.long   aJames
		.long   aJeffery
		.long   aJoeseph
		.long   aJohnson
		.long   aJohnston
		.long   aJones
		.long   aLewis
		.long   aLindsell
		.long   aLockley
		.long   aMartin
		.long   aMcentee
		.long   aMclaughin
		.long   aMolyneux
		.long   aMunro
		.long   aMorris
		.long   aMumford
		.long   aNixon
		.long   aParker
		.long   aPratt
		.long   aReid
		.long   aRennie
		.long   aRice
		.long   aRipley
		.long   aRobertson
		.long   aRomano
		.long   aSeat
		.long   aSen
		.long   aShaw
		.long   aSimmons
		.long   aSnelling
		.long   aTaylor
		.long   aTrowers
		.long   aWebley
		.long   aWellesley
		.long   aWild
		.long   aWillis
sound_array:	/* 0x5b958 */
		.ascii  "\xff\xff\x00\x00"
data_5b95c:
		.ascii  "\x01\x00\x02\x00\x04\x00\x06\x00"
		.ascii  "\x0a\x00\x0f\x00\x1e\x00\x32\x00"
		.ascii  "\x4b\x00"
data_5b96e:
		.ascii  "\x64\x00"
aCSyndSave:	/* 0x5b970 */
		.string "synd/save"
		.fill   0x7
unk984_load_files:	/* 0x5b984 */
		.string "data/mspr-0.dat"
		.fill   0xc
		.long   m_spr_data
		.fill   0xc
		.string "data/mspr-0.tab"
		.fill   0xc
		.long   m_sprites
		.long   m_sprites_end
		.fill   0x8
		.string "data/mfnt-0.dat"
		.fill   0xc
		.long   m_font_data
		.fill   0xc
		.string "data/mfnt-0.tab"
		.fill   0xc
		.long   m_font
		.long   m_font_end
		.fill   0x8
		.string "data/mlogos.dat"
		.fill   0xc
		.long   m_logos
		.fill   0xc
		.string "data/col01.dat"
		.fill   0xd
		.long   h_col
		.fill   0xc
		.ascii  "\x2a"
		.fill   0x1b
		.long   map_buf
		.fill   0x4
		.ascii  "\xa0\x4c\x01"
		.fill   0x5
		.string "data/mselect.pal"
		.fill   0xb
		.long   m_select_pal
		.fill   0x38
sound_bank_files:	/* 0x5bb10 */
		.string "data/sound-1.dat"
		.fill   0xb
data_5bb2c:
		.long   smpdata
		.fill   0x8
		.ascii  "\x01\x00\x00\x00"
		.string "data/sound-1.tab"
		.fill   0xb
		.long   smptable
		.long   smptable_end
		.fill   0x34
data_5bb94:
		.ascii  "\x23\x00\x41\x06\x23\x00\x53\x0d"
		.ascii  "\x29\x00\x53\x0b\x53\x00\x53\x04"
		.ascii  "\x6c\x00\x41\x0a\x6c\x00\x53\x05"
		.ascii  "\x71\x00\x53\x06\xff\xff\x00\x00"
data_5bbb4:
		.ascii  "\x01\x00\x53\x07\x06\x00\x53\x08"
		.ascii  "\x0f\x00\x53\x09\x54\x00\x41\x78"
		.ascii  "\xff\xff\x00\x00"
data_5bbc8:
		.ascii  "\x01\x00\x53\x0c\x28\x00\x53\x0a"
		.ascii  "\xff\xff\x00\x00"
data_5bbd4:
		.ascii  "\x01\x00\x53\x03\x01\x00\x4d\x02"
		.ascii  "\x02\x00\x41\x0a\xff\xff"
		.fill   0x6
data_5bbe8:
		.ascii  "\x00"
data_5bbe9:
		.ascii  "\x00\x00\x00"
SongCurrentlyPlaying:	/* 0x5bbec */
		.ascii  "\xff\x00\x00\x00"
active_timers:	/* 0x5bbf0 */
		.ascii  "\x00\x00"
timer_busy:	/* 0x5bbf2 */
		.ascii  "\x00\x00"
timer_callback:	/* 0x5bbf4 */
		.fill   0x40
data_5bc34:
		.fill   0x4
timer_status:	/* 0x5bc38 */
		.fill   0x20
data_5bc58:
		.ascii  "\x00\x00"
timer_elapsed:	/* 0x5bc5a */
		.fill   0x44
timer_value:	/* 0x5bc9e */
		.fill   0x44
timer_period:	/* 0x5bce2 */
		.fill   0x4
bios_cb:	/* 0x5bce6 */
		.fill   0x4
bios_cb_cs:	/* 0x5bcea */
		.fill   0x4
current_timer:	/* 0x5bcee */
		.fill   0x4
temp_period:	/* 0x5bcf2 */
		.fill   0x4
PIT_divisor:	/* 0x5bcf6 */
		.fill   0x4
index_base:	/* 0x5bcfa */
		.fill   0x40
assigned_timer:	/* 0x5bd3a */
		.fill   0x40
driver_active:	/* 0x5bd7a */
		.fill   0x40
drvproc:	/* 0x5bdba */
		.fill   0x4
cur_drvr:	/* 0x5bdbe */
		.fill   0x4
rtn_off:	/* 0x5bdc2 */
		.ascii  "\x00\x00"
rtn_seg:	/* 0x5bdc4 */
		.ascii  "\x00\x00"
timer_handle:	/* 0x5bdc6 */
		.fill   0x4
local_DS:	/* 0x5bdca */
		.ascii  "\x00\x00"
CURRENT_REV:	/* 0x5bdcc */
		.ascii  "\xd7\x00\x00\x00"
AniFileHandle:	/* 0x5bdd0 */
		.fill   0x4
AniType:	/* 0x5bdd4 */
		.ascii  "\x00\x00"
NoFrames:	/* 0x5bdd6 */
		.ascii  "\x00\x00"
AniWidth:	/* 0x5bdd8 */
		.ascii  "\x00\x00"
AniHeight:	/* 0x5bdda */
		.ascii  "\x00\x00"
AniLength:	/* 0x5bddc */
		.fill   0x4
AniSubChunks:	/* 0x5bde0 */
		.fill   0x4
CurrFrame:	/* 0x5bde4 */
		.fill   0x8
old_time:	/* 0x5bdec */
		.ascii  "\x00\x00"
loop_count:	/* 0x5bdee */
		.fill   0x4
AniQuit:	/* 0x5bdf2 */
		.ascii  "\x00\x00"
AniPalChange:	/* 0x5bdf4 */
		.fill   0x4
AniSpeed:	/* 0x5bdf8 */
		.fill   0x4
AniName:	/* 0x5bdfc */
		.fill   0x32
do_colour:	/* 0x5be2e */
		.ascii  "\x00\x00"
unpackm1__raw_table:	/* 0x5be30 */
		.fill   0x80
unpackm1__pos_table:	/* 0x5beb0 */
		.fill   0x80
unpackm1__len_table:	/* 0x5bf30 */
		.fill   0x80
unpackm1__unpack_len:	/* 0x5bfb0 */
		.fill   0x4
unpackm1__pack_len:	/* 0x5bfb4 */
		.fill   0x6
unpackm1__counts:	/* 0x5bfba */
		.ascii  "\x00\x00"
unpackm1__bit_buffl:	/* 0x5bfbc */
		.ascii  "\x00\x00"
unpackm1__bit_buffh:	/* 0x5bfbe */
		.ascii  "\x00\x00"
unpackm1__blocks:	/* 0x5bfc0 */
		.ascii  "\x00"
unpackm1__bit_count:	/* 0x5bfc1 */
		.ascii  "\x00\x00\x00"
data_5c34c:
		.fill   0x8
data_5c354:
		.fill   0x4
data_5c358:
		.ascii  "\x00"
data_5c359:
		.fill   0xf
computer_players:	/* 0x5c368 */
		.ascii  "\x00\x00\x00"
data_5c36b:
		.fill   0x501
thing_drawlist:	/* 0x5c86c */
		.fill   0x4
data_5c870:
		.ascii  "\x00\x00"
data_5c872:
		.ascii  "\x00\x00"
data_5c874:
		.fill   0x12b8
data_5db2c:
		.fill   0x190
data_5dcbc:
		.fill   0x240
timer2:	/* 0x5defc */
		.fill   0xc
KbOldInt:	/* 0x5df08 */
		.fill   0x4
KbOldIntNum:	/* 0x5df0c */
		.ascii  "\x00\x00"
InOldInt:	/* 0x5df0e */
		.fill   0x4
InOldIntNum:	/* 0x5df12 */
		.ascii  "\x00\x00"
data_5df14:
		.fill   0x4
world_map:	/* 0x5df18 */
		.fill   0x4
Network_ReceiveBuffer:	/* 0x5df1c */
		.ascii  "\x00\x00"
data_5df1e:
		.fill   0x4
data_5df22:
		.fill   0x6
Network_SendBuffer:	/* 0x5df28 */
		.ascii  "\x00\x00"
data_5df2a:
		.fill   0x4
data_5df2e:
		.ascii  "\x00\x00"
Network__Status:	/* 0x5df30 */
		.fill   0x8
Network__RecvBufferSize:	/* 0x5df38 */
		.fill   0x4
MouseOldData_0:	/* 0x5df3c */
		.fill   0x4
ScrSeg:	/* 0x5df40 */
		.fill   0x4
mouse_event:	/* 0x5df44 */
		.fill   0x4
data_5df48:
		.ascii  "\x00"
data_5df49:
		.ascii  "\x00"
data_5df4a:
		.ascii  "\x00"
data_5df4b:
		.ascii  "\x00"
data_5df4c:
		.ascii  "\x00"
data_5df4d:
		.ascii  "\x00"
data_5df4e:
		.ascii  "\x00"
data_5df4f:
		.ascii  "\x00"
data_5df50:
		.ascii  "\x00"
data_5df51:
		.ascii  "\x00"
data_5df52:
		.fill   0x23
data_5df75:
		.ascii  "\x00"
data_5df76:
		.ascii  "\x00"
data_5df77:
		.ascii  "\x00"
data_5df78:
		.ascii  "\x00"
data_5df79:
		.ascii  "\x00"
data_5df7a:
		.ascii  "\x00"
data_5df7b:
		.ascii  "\x00"
data_5df7c:
		.ascii  "\x00"
data_5df7d:
		.ascii  "\x00"
data_5df7e:
		.ascii  "\x00"
data_5df7f:
		.ascii  "\x00"
data_5df80:
		.fill   0x190
data_5e110:
		.ascii  "\x00\x00"
data_5e112:
		.ascii  "\x00\x00"
data_5e114:
		.ascii  "\x00\x00"
data_5e116:
		.ascii  "\x00\x00"
data_5e118:
		.ascii  "\x00\x00"
data_5e11a:
		.ascii  "\x00\x00"
index:	/* 0x5e11c */
		.ascii  "\x00\x00"
data_5e11e:
		.ascii  "\x00\x00"
a2:	/* 0x5e120 */
		.ascii  "\x00\x00"
data_5e122:
		.ascii  "\x00\x00"
data_5e124:
		.fill   0x4
data_5e128:
		.fill   0x4
data_5e12c:
		.ascii  "\x00\x00"
data_5e12e:
		.fill   0xe
next_mission_countries:	/* 0x5e13c */
		.fill   0x8
data_5e144:
		.fill   0x140
ASM_lbKeyOn:	/* 0x5e284 */
		.fill   0x80
ASM_lbKeyOn2:	/* 0x5e304 */
		.fill   0x80
data_5e384:
		.fill   0x10
data_5e394:
		.ascii  "\x00"
data_5e395:
		.ascii  "\x00"
data_5e396:
		.ascii  "\x00"
data_5e397:
		.ascii  "\x00"
data_5e398:
		.fill   0x4
data_5e39c:
		.fill   0x100
GLOBAL (players)	/* 0x5e49c */
		.fill   0x4
data_5e4a0:
		.fill   0x4
data_5e4a4:
		.ascii  "\x00\x00"
data_5e4a6:
		.ascii  "\x00\x00"
data_5e4a8:
		.ascii  "\x00\x00"
data_5e4aa:
		.ascii  "\x00"
data_5e4ab:
		.ascii  "\x00"
data_5e4ac:
		.ascii  "\x00"
data_5e4ad:
		.fill   0x12
data_5e4bf:
		.fill   0x92
data_5e551:
		.ascii  "\x00"
data_5e552:
		.ascii  "\x00"
data_5e553:
		.ascii  "\x00\x00"
data_5e555:
		.fill   0x32
data_5e587:
		.fill   0x10
data_5e597:
		.fill   0x22
data_5e5b9:
		.ascii  "\x00"
data_5e5ba:
		.ascii  "\x00\x00"
data_5e5bc:
		.ascii  "\x00"
data_5e5bd:
		.ascii  "\x00"
data_5e5be:
		.ascii  "\x00\x00"
data_5e5c0:
		.ascii  "\x00"
data_5e5c1:
		.ascii  "\x00\x00"
data_5e5c3:
		.ascii  "\x00\x00"
data_5e5c5:
		.ascii  "\x00\x00"
data_5e5c7:
		.fill   0x2e0
data_5e8a7:
		.fill   0x1cad
data_60554:
		.fill   0x10
data_60564:
		.fill   0x10
data_60574:
		.fill   0x10
data_60584:
		.fill   0x50
packets:	/* 0x605d4 */
		.ascii  "\x00\x00"
data_605d6:
		.ascii  "\x00\x00"
data_605d8:
		.ascii  "\x00\x00"
data_605da:
		.ascii  "\x00\x00"
data_605dc:
		.ascii  "\x00\x00"
data_605de:
		.ascii  "\x00\x00"
data_605e0:
		.ascii  "\x00"
data_605e1:
		.fill   0x63
NetUserNcb:	/* 0x60644 */
		.fill   0x4
data_60648:
		.fill   0x2c
data_60674:
		.ascii  "\x00\x00"
data_60676:
		.fill   0x406
data_60a7c:
		.fill   0x20
data_60a9c:
		.fill   0x4
m_select_pal:	/* 0x60aa0 */
		.fill   0x4
GLOBAL (selected_team)	/* 0x60aa4 */
		.ascii  "\x00"
data_60aa5:
		.ascii  "\x00"
data_60aa6:
		.ascii  "\x00"
data_60aa7:
		.ascii  "\x00"
GLOBAL (PalMem)		/* 0x60aa8 */
		.fill   0x4
data_60aac:
		.fill   0x4
data_60ab0:
		.fill   0x4
DestinationY:	/* 0x60ab4 */
		.fill   0x4
DestinationX:	/* 0x60ab8 */
		.fill   0x4
data_60abc:
		.fill   0x4
h_col:	/* 0x60ac0 */
		.fill   0x8
data_60ac8:
		.fill   0x10
GLOBAL (debug_k)	/* 0x60ad8 */
		.fill   0x4
last_vehicle:	/* 0x60adc */
		.fill   0x4
last_person:	/* 0x60ae0 */
		.fill   0x8
data_60ae8:
		.fill   0x4
last_object:	/* 0x60aec */
		.fill   0x4
data_60af0:
		.fill   0x4
data_60af4:
		.ascii  "\x00"
data_60af5:
		.ascii  "\x00"
data_60af6:
		.ascii  "\x00"
data_60af7:
		.ascii  "\x00"
data_60af8:
		.ascii  "\x00"
data_60af9:
		.ascii  "\x00"
data_60afa:
		.ascii  "\x00"
data_60afb:
		.ascii  "\x00"
data_60afc:
		.ascii  "\x00"
data_60afd:
		.ascii  "\x00"
data_60afe:
		.fill   0x4
a11:	/* 0x60b02 */
		.fill   0x4
data_60b06:
		.fill   0x4
data_60b0a:
		.ascii  "\x00\x00"
Network__NumberOfSlots:	/* 0x60b0c */
		.ascii  "\x00\x00"
data_60b0e:
		.ascii  "\x00\x00"
data_60b10:
		.ascii  "\x00\x00"
data_60b12:
		.ascii  "\x00\x00"
data_60b14:
		.ascii  "\x00\x00"
GLOBAL (Network__Slot)	/* 0x60b16 */
		.ascii  "\x00\x00"
data_60b18:
		.ascii  "\x00\x00"
data_60b1a:
		.ascii  "\x00\x00"
data_60b1c:
		.ascii  "\x00\x00"
data_60b1e:
		.ascii  "\x00\x00"
data_60b20:
		.ascii  "\x00\x00"
GLOBAL (lbDisplay__MouseX_640)	/* 0x60b22 mouse coord scaled as is the screen was 640 px */
		.ascii  "\x00\x00"
GLOBAL (lbDisplay__MouseY_400)	/* 0x60b24 mouse coord scaled as is the screen was 400 px */
		.fill   0x4
data_60b28:
		.ascii  "\x00\x00"
data_60b2a:
		.ascii  "\x00\x00"
data_60b2c:
		.ascii  "\x00\x00"
GLOBAL (current_levno)	/* 0x60b2e */
		.ascii  "\x00\x00"
data_60b30:
		.ascii  "\x00\x00"
data_60b32:
		.ascii  "\x00\x00"
data_60b34:
		.ascii  "\x00"
GLOBAL (OldDrawFlags)	/* 0x60b35 */
		.ascii  "\x00"
data_60b36:
		.ascii  "\x00\x00"
data_60b38:
		.ascii  "\x00"
data_60b39:
		.ascii  "\x00"
GLOBAL (byte_60B3A)		/* 0x60B3A */
		.ascii  "\x00"
GLOBAL (byte_60B3B)		/* 0x60B3B */
		.ascii  "\x00\x00\x00"
ASM_lbDisplay__RightButton:	/* 0x60b3e */
		.ascii  "\x00"
ASM_lbDisplay__LeftButton:	/* 0x60b3f */
		.ascii  "\x00"
ASM_lbDisplay__MRightButton:	/* 0x60b40 */
		.ascii  "\x00"
ASM_lbDisplay__MLeftButton:	/* 0x60b41 */
		.ascii  "\x00"
GLOBAL (byte_60B42)	/* 0x60B42 */
		.ascii  "\x00"
GLOBAL (cheat_credits)	/* 0x60b43 */
		.ascii  "\x00"
GLOBAL (byte_60B44)			/* 0x60B44 */
		.ascii  "\x00"
GLOBAL (is_multiplayer_game)	/* 0x60b45 */
		.ascii  "\x00"
data_60b46:
		.ascii  "\x00"
GLOBAL (byte_60B47)		/* 0x_60B47 */
		.ascii  "\x00"
GLOBAL (cheats_mission)	/* 0x60b48 */
		.ascii  "\x00"

#if 0 /* defined in bfsoundlib */
GLOBAL (MusicAble)	/* 0x60b49 */
		.ascii  "\x00"
GLOBAL (SoundAble)	/* 0x60b4a */
		.ascii  "\x00"
#endif

ScannerPulse:	/* 0x60b4b */
		.ascii  "\x00"
GLOBAL (byte_60B4C)		/* 0x60B4C */
		.ascii  "\x00"
MusicActive:	/* 0x60b4d */
		.ascii  "\x00"
data_60b4e:
		.ascii  "\x00"
data_60b4f:
		.ascii  "\x00"
data_60b50:
		.ascii  "\x00"
GLOBAL (byte_60B51)		/* 0x60B51 */
		.ascii  "\x00"
GLOBAL (cheats_speedup)	/* 0x60b52 */
		.ascii  "\x00"
GLOBAL (unused_option_p)	/* 0x60b53 */
		.ascii  "\x00"
data_60b54:
		.ascii  "\x00\x00"
data_60b56:
		.ascii  "\x00\x00"
data_60b58:
		.ascii  "\x00\x00"
data_60b5a:
		.ascii  "\x00\x00"
data_60b5c:
		.ascii  "\x00\x00"
data_60b5e:
		.ascii  "\x00\x00"
data_60b60:
		.fill   0xc8
brief_text:	/* 0x60c28 */
		.fill   0xfa0
m_sprites_end:	/* 0x61bc8 */
		.fill   0x4
m_font_data:	/* 0x61bcc */
		.fill   0x4
m_spr_data:	/* 0x61bd0 */
		.fill   0x4
m_font_end:	/* 0x61bd4 */
		.fill   0x4
m_font:	/* 0x61bd8 */
		.fill   0x4
data_61bdc:
		.ascii  "\x00\x00"
data_61bde:
		.ascii  "\x00\x00"
m_logos:	/* 0x61be0 */
		.ascii  "\x00\x00"
data_61be2:
		.ascii  "\x00\x00"
m_sprites:	/* 0x61be4 */
		.ascii  "\x00\x00"
data_61be6:
		.ascii  "\x00\x00"
data_61be8:
		.ascii  "\x00\x00"
data_61bea:
		.ascii  "\x00\x00"
sample_status:	/* 0x61bec */
		.ascii  "\x00"
data_61bed:
		.fill   0x1ff
DIGhdriver:	/* 0x61dec */
		.fill   0x4
DIGdll:	/* 0x61df0 */
		.fill   0x4
DIGdrvr:	/* 0x61df4 */
		.fill   0x8
data_61dfc:
		.fill   0x4
data_61e00:
		.fill   0xc
sSOSTrackMap:	/* 0x61e0c */
		.fill   0x20
MUSdrvr:	/* 0x61e2c */
		.fill   0x4
data_61e30:
		.fill   0x4
GTL_hdr:	/* 0x61e34 */
		.ascii  "\x00"
GTL_hdr__bank:	/* 0x61e35 */
		.ascii  "\x00"
GTL_hdr__offset:	/* 0x61e36 */
		.fill   0x4
timb_len:	/* 0x61e3a */
		.ascii  "\x00\x00"
_errno:	/* 0x61e3c */
		.fill   0x4
__doserrno:	/* 0x61e40 */
		.fill   0x4
data_61e44:
		.fill   0x4
data_61e48:
		.fill   0x4
___OpenStreams:	/* 0x61e4c */
		.fill   0x4
data_61e50:
		.ascii  "\x00\x00"
data_61e52:
		.ascii  "\x00\x00"
____Argv:	/* 0x61e54 */
		.fill   0x4
____Argc:	/* 0x61e58 */
		.fill   0x4
data_61e5c:
		.fill   0x2004
MouseOldData:	/* 0x70000 */
		.fill   0x800
MScreen:	/* 0x70800 */
		.fill   0x400


player_view_map_x:	/* 0x80000 */
		.short  0x0
player_view_map_y:	/* 0x80002 */
		.short  0x0
		.fill   0x101

GLOBAL (DrawFlags)	/* 0x80105 */
		.byte	0x04
		.align	4

GLOBAL (level__Seed)	/* 0x80108 */
		.short  0x0
level__PersonCount_UNSURE:	/* 0x8010a */
		.short  0x0
level__Timer:	/* 0x8010c */
		.short  0x0
level__MapWho:	/* 0x8010e */
		.fill   0x8000
level__things_base:	/* 0x8810e */
		.short  0x0
level__People:	/* 0x88110 */
		.fill   0x4
data_88114:
		.ascii  "\x00\x00"
data_88116:
		.fill   0x5
data_8811b:
		.fill   0x11
data_8812c:
		.fill   0x2c4
data_883f0:
		.fill   0x58c4
data_8dcb4:
		.fill   0x5c
level__Vehicles:	/* 0x8dd10 */
		.fill   0xa56
data_8e766:
		.fill   0x2a
level__Objects:	/* 0x8e790 */
		.fill   0x2ec2
data_91652:
		.fill   0x1e
level__Weapons:	/* 0x91670 */
		.fill   0x4800
level__Effects:	/* 0x95e70 */
		.fill   0xf00
data_96d70:
		.fill   0xf00
level__Commands:	/* 0x97c70 */
		.fill   0x4000
level__Worlds:	/* 0x9bc70 */
		.ascii  "\x00\x00"
data_9bc72:
		.ascii  "\x00\x00"
data_9bc74:
		.ascii  "\x00\x00"
data_9bc76:
		.ascii  "\x00"
data_9bc77:
		.ascii  "\x00"
data_9bc78:
		.ascii  "\x00"
data_9bc79:
		.ascii  "\x00"
data_9bc7a:
		.ascii  "\x00"
data_9bc7b:
		.fill   0x1b5
GLOBAL (level__MapNumber)	/* 0x9be30 */
		.ascii  "\x01\x00"
level__LoBoundaryx:	/* 0x9be32 */
		.ascii  "\x02\x00"
level__LoBoundaryy:	/* 0x9be34 */
		.ascii  "\x12\x00"
level__HiBoundaryx:	/* 0x9be36 */
		.ascii  "\xca\x00"
level__HiBoundaryy:	/* 0x9be38 */
		.ascii  "\xda\x00"
level__Objectives:	/* 0x9be3a */
		.fill   0x4
data_9be3e:
		.ascii  "\x00\x00"
data_9be40:
		.ascii  "\x00\x00"
data_9be42:
		.ascii  "\x00\x00"
data_9be44:
		.ascii  "\x00\x00"
data_9be46:
		.fill   0x64
level__ComputerPlayersCount:	/* 0x9beaa */
		.byte	0x0
level__CPTeamSize:	/* 0x9beab */
		.byte	0x0
level__CPProcessInterval:	/* 0x9beac */
		.byte	0x0
level__CPLvlInit:	/* 0x9bead */
		.byte	0x0
level__CPIsBombingTeam:	/* 0x9beae */
		.byte	0x0
level__CPIsPersuadingTeam:	/* 0x9beaf */
		.byte	0x0
level__CPFlags:	/* 0x9beb0 */
		.byte	0x0
level__CPWieldedWeaponType:	/* 0x9beb1 */
		.byte	0x0
GLOBAL (level__CPObjectives)	/* 0x9beb2 */
		.fill   0x780
level__End:
		.byte	0x00
		.align	4
